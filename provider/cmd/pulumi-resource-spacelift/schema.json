{
    "name": "spacelift",
    "displayName": "Spacelift",
    "description": "A Pulumi package for creating and managing Spacelift resources.",
    "keywords": [
        "pulumi",
        "spacelift",
        "category/cloud",
        "category/infrastructure"
    ],
    "homepage": "https://spacelift.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`spacelift` Terraform Provider](https://github.com/spacelift-io/terraform-provider-spacelift).",
    "repository": "git://github.com/spacelift-io/pulumi-spacelift.git",
    "pluginDownloadURL": "https://github.com/spacelift-io/pulumi-spacelift/releases",
    "publisher": "spacelift-io",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "spacelift": "Spacelift"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Spacelift resources.",
            "packageName": "@spacelift-io/pulumi-spacelift",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/spacelift-io/terraform-provider-spacelift)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-spacelift` repo](git://github.com/spacelift-io/pulumi-spacelift.git/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-spacelift` repo](https://github.com/spacelift-io/terraform-provider-spacelift/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/spacelift-io/terraform-provider-spacelift)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-spacelift` repo](git://github.com/spacelift-io/pulumi-spacelift.git/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-spacelift` repo](https://github.com/spacelift-io/terraform-provider-spacelift/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiKeyEndpoint": {
                "type": "string",
                "description": "Endpoint to use when authenticating with an API key outside of Spacelift\n",
                "defaultInfo": {
                    "environment": [
                        "SPACELIFT_API_KEY_ENDPOINT"
                    ]
                }
            },
            "apiKeyId": {
                "type": "string",
                "description": "ID of the API key to use when executing outside of Spacelift\n",
                "defaultInfo": {
                    "environment": [
                        "SPACELIFT_API_KEY_ID"
                    ]
                }
            },
            "apiKeySecret": {
                "type": "string",
                "description": "API key secret to use when executing outside of Spacelift\n",
                "defaultInfo": {
                    "environment": [
                        "SPACELIFT_API_KEY_SECRET"
                    ]
                },
                "secret": true
            },
            "apiToken": {
                "type": "string",
                "description": "Spacelift token generated by a run, only useful from within Spacelift\n",
                "defaultInfo": {
                    "environment": [
                        "SPACELIFT_API_TOKEN"
                    ]
                },
                "secret": true
            }
        }
    },
    "types": {
        "spacelift:index/ModuleAzureDevops:ModuleAzureDevops": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "The name of the Azure DevOps project\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "spacelift:index/ModuleBitbucketCloud:ModuleBitbucketCloud": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "The Bitbucket project containing the repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "spacelift:index/ModuleBitbucketDatacenter:ModuleBitbucketDatacenter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "The Bitbucket project containing the repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "spacelift:index/ModuleGithubEnterprise:ModuleGithubEnterprise": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "The GitHub organization / user the repository belongs to\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "spacelift:index/ModuleGitlab:ModuleGitlab": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "The GitLab namespace containing the repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "spacelift:index/StackAnsible:StackAnsible": {
            "properties": {
                "playbook": {
                    "type": "string",
                    "description": "The playbook Ansible should run.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "playbook"
            ]
        },
        "spacelift:index/StackAzureDevops:StackAzureDevops": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "The name of the Azure DevOps project\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "spacelift:index/StackBitbucketCloud:StackBitbucketCloud": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "The Bitbucket project containing the repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "spacelift:index/StackBitbucketDatacenter:StackBitbucketDatacenter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "The Bitbucket project containing the repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "spacelift:index/StackCloudformation:StackCloudformation": {
            "properties": {
                "entryTemplateFile": {
                    "type": "string",
                    "description": "Template file `cloudformation package` will be called on\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "AWS region to use\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stackName": {
                    "type": "string",
                    "description": "CloudFormation stack name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateBucket": {
                    "type": "string",
                    "description": "S3 bucket to save CloudFormation templates to\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entryTemplateFile",
                "region",
                "stackName",
                "templateBucket"
            ]
        },
        "spacelift:index/StackGithubEnterprise:StackGithubEnterprise": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "The GitHub organization / user the repository belongs to\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "spacelift:index/StackGitlab:StackGitlab": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "The GitLab namespace containing the repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "spacelift:index/StackKubernetes:StackKubernetes": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "spacelift:index/StackPulumi:StackPulumi": {
            "properties": {
                "loginUrl": {
                    "type": "string",
                    "description": "State backend to log into on Run initialize.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stackName": {
                    "type": "string",
                    "description": "Pulumi stack name to use with the state backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "loginUrl",
                "stackName"
            ]
        },
        "spacelift:index/StackShowcase:StackShowcase": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "spacelift:index/getModuleAzureDevop:getModuleAzureDevop": {
            "properties": {
                "project": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "project"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getModuleBitbucketCloud:getModuleBitbucketCloud": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getModuleBitbucketDatacenter:getModuleBitbucketDatacenter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getModuleGithubEnterprise:getModuleGithubEnterprise": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getModuleGitlab:getModuleGitlab": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getPoliciesPolicy:getPoliciesPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required labels to match\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spaceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "required policy type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "labels",
                "name",
                "spaceId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackAnsible:getStackAnsible": {
            "properties": {
                "playbook": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "playbook"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackAzureDevop:getStackAzureDevop": {
            "properties": {
                "project": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "project"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackBitbucketCloud:getStackBitbucketCloud": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackBitbucketDatacenter:getStackBitbucketDatacenter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackCloudformation:getStackCloudformation": {
            "properties": {
                "entryTemplateFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stackName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateBucket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entryTemplateFile",
                "region",
                "stackName",
                "templateBucket"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackGithubEnterprise:getStackGithubEnterprise": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackGitlab:getStackGitlab": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackKubernete:getStackKubernete": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackPulumi:getStackPulumi": {
            "properties": {
                "loginUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stackName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "loginUrl",
                "stackName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getStackShowcase:getStackShowcase": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getVcsAgentPoolsVcsAgentPool:getVcsAgentPoolsVcsAgentPool": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vcsAgentPoolId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "vcsAgentPoolId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "spacelift:index/getWorkerPoolsWorkerPool:getWorkerPoolsWorkerPool": {
            "properties": {
                "config": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spaceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workerPoolId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "config",
                "description",
                "name",
                "spaceId",
                "workerPoolId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the spacelift package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKeyEndpoint": {
                "type": "string",
                "description": "Endpoint to use when authenticating with an API key outside of Spacelift\n"
            },
            "apiKeyId": {
                "type": "string",
                "description": "ID of the API key to use when executing outside of Spacelift\n"
            },
            "apiKeySecret": {
                "type": "string",
                "description": "API key secret to use when executing outside of Spacelift\n",
                "secret": true
            },
            "apiToken": {
                "type": "string",
                "description": "Spacelift token generated by a run, only useful from within Spacelift\n",
                "secret": true
            }
        },
        "inputProperties": {
            "apiKeyEndpoint": {
                "type": "string",
                "description": "Endpoint to use when authenticating with an API key outside of Spacelift\n",
                "defaultInfo": {
                    "environment": [
                        "SPACELIFT_API_KEY_ENDPOINT"
                    ]
                }
            },
            "apiKeyId": {
                "type": "string",
                "description": "ID of the API key to use when executing outside of Spacelift\n",
                "defaultInfo": {
                    "environment": [
                        "SPACELIFT_API_KEY_ID"
                    ]
                }
            },
            "apiKeySecret": {
                "type": "string",
                "description": "API key secret to use when executing outside of Spacelift\n",
                "defaultInfo": {
                    "environment": [
                        "SPACELIFT_API_KEY_SECRET"
                    ]
                },
                "secret": true
            },
            "apiToken": {
                "type": "string",
                "description": "Spacelift token generated by a run, only useful from within Spacelift\n",
                "defaultInfo": {
                    "environment": [
                        "SPACELIFT_API_TOKEN"
                    ]
                },
                "secret": true
            }
        }
    },
    "resources": {
        "spacelift:index/awsIntegration:AwsIntegration": {
            "description": "`spacelift.AwsIntegration` represents an integration with an AWS account. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect.\n\nNote: when assuming credentials for **shared workers**, Spacelift will use `$accountName-$integrationID@$stackID-$suffix` or `$accountName-$integrationID@$moduleID-$suffix` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole),$suffix will be `read` or `write`.\n\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/awsIntegration:AwsIntegration read_write_integration $INTEGRATION_ID\n```\n\n ",
            "properties": {
                "durationSeconds": {
                    "type": "integer",
                    "description": "Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "Custom external ID (works only for private workers).\n"
                },
                "generateCredentialsInWorker": {
                    "type": "boolean",
                    "description": "Generate AWS credentials in the private worker. Defaults to `false`.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels to set on the integration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of the integration\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "ARN of the AWS IAM role to attach\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the integration is in\n"
                }
            },
            "required": [
                "name",
                "roleArn",
                "spaceId"
            ],
            "inputProperties": {
                "durationSeconds": {
                    "type": "integer",
                    "description": "Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "Custom external ID (works only for private workers).\n"
                },
                "generateCredentialsInWorker": {
                    "type": "boolean",
                    "description": "Generate AWS credentials in the private worker. Defaults to `false`.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels to set on the integration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of the integration\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "ARN of the AWS IAM role to attach\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the integration is in\n"
                }
            },
            "requiredInputs": [
                "roleArn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsIntegration resources.\n",
                "properties": {
                    "durationSeconds": {
                        "type": "integer",
                        "description": "Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Custom external ID (works only for private workers).\n"
                    },
                    "generateCredentialsInWorker": {
                        "type": "boolean",
                        "description": "Generate AWS credentials in the private worker. Defaults to `false`.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Labels to set on the integration\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of the integration\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "ARN of the AWS IAM role to attach\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the integration is in\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/awsIntegrationAttachment:AwsIntegrationAttachment": {
            "description": "`spacelift.AwsIntegrationAttachment` represents the attachment between a reusable AWS integration and a single stack or module.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\n// For a stack\nconst thisAwsIntegrationAttachment = new spacelift.AwsIntegrationAttachment(\"thisAwsIntegrationAttachment\", {\n    integrationId: spacelift_aws_integration[\"this\"].id,\n    stackId: \"my-stack-id\",\n    read: true,\n    write: true,\n}, {\n    dependsOn: [aws_iam_role[\"this\"]],\n});\n// For a module\nconst thisIndex_awsIntegrationAttachmentAwsIntegrationAttachment = new spacelift.AwsIntegrationAttachment(\"thisIndex/awsIntegrationAttachmentAwsIntegrationAttachment\", {\n    integrationId: spacelift_aws_integration[\"this\"].id,\n    moduleId: \"my-module-id\",\n    read: true,\n    write: true,\n}, {\n    dependsOn: [aws_iam_role[\"this\"]],\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\n# For a stack\nthis_aws_integration_attachment = spacelift.AwsIntegrationAttachment(\"thisAwsIntegrationAttachment\",\n    integration_id=spacelift_aws_integration[\"this\"][\"id\"],\n    stack_id=\"my-stack-id\",\n    read=True,\n    write=True,\n    opts=pulumi.ResourceOptions(depends_on=[aws_iam_role[\"this\"]]))\n# For a module\nthis_index_aws_integration_attachment_aws_integration_attachment = spacelift.AwsIntegrationAttachment(\"thisIndex/awsIntegrationAttachmentAwsIntegrationAttachment\",\n    integration_id=spacelift_aws_integration[\"this\"][\"id\"],\n    module_id=\"my-module-id\",\n    read=True,\n    write=True,\n    opts=pulumi.ResourceOptions(depends_on=[aws_iam_role[\"this\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For a stack\n    var thisAwsIntegrationAttachment = new Spacelift.AwsIntegrationAttachment(\"thisAwsIntegrationAttachment\", new()\n    {\n        IntegrationId = spacelift_aws_integration.This.Id,\n        StackId = \"my-stack-id\",\n        Read = true,\n        Write = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            aws_iam_role.This,\n        },\n    });\n\n    // For a module\n    var thisIndex_awsIntegrationAttachmentAwsIntegrationAttachment = new Spacelift.AwsIntegrationAttachment(\"thisIndex/awsIntegrationAttachmentAwsIntegrationAttachment\", new()\n    {\n        IntegrationId = spacelift_aws_integration.This.Id,\n        ModuleId = \"my-module-id\",\n        Read = true,\n        Write = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            aws_iam_role.This,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewAwsIntegrationAttachment(ctx, \"thisAwsIntegrationAttachment\", \u0026spacelift.AwsIntegrationAttachmentArgs{\n\t\t\tIntegrationId: pulumi.Any(spacelift_aws_integration.This.Id),\n\t\t\tStackId:       pulumi.String(\"my-stack-id\"),\n\t\t\tRead:          pulumi.Bool(true),\n\t\t\tWrite:         pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\taws_iam_role.This,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewAwsIntegrationAttachment(ctx, \"thisIndex/awsIntegrationAttachmentAwsIntegrationAttachment\", \u0026spacelift.AwsIntegrationAttachmentArgs{\n\t\t\tIntegrationId: pulumi.Any(spacelift_aws_integration.This.Id),\n\t\t\tModuleId:      pulumi.String(\"my-module-id\"),\n\t\t\tRead:          pulumi.Bool(true),\n\t\t\tWrite:         pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\taws_iam_role.This,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.AwsIntegrationAttachment;\nimport com.pulumi.spacelift.AwsIntegrationAttachmentArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var thisAwsIntegrationAttachment = new AwsIntegrationAttachment(\"thisAwsIntegrationAttachment\", AwsIntegrationAttachmentArgs.builder()        \n            .integrationId(spacelift_aws_integration.this().id())\n            .stackId(\"my-stack-id\")\n            .read(true)\n            .write(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(aws_iam_role.this())\n                .build());\n\n        var thisIndex_awsIntegrationAttachmentAwsIntegrationAttachment = new AwsIntegrationAttachment(\"thisIndex/awsIntegrationAttachmentAwsIntegrationAttachment\", AwsIntegrationAttachmentArgs.builder()        \n            .integrationId(spacelift_aws_integration.this().id())\n            .moduleId(\"my-module-id\")\n            .read(true)\n            .write(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(aws_iam_role.this())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # For a stack\n  thisAwsIntegrationAttachment:\n    type: spacelift:AwsIntegrationAttachment\n    properties:\n      integrationId: ${spacelift_aws_integration.this.id}\n      stackId: my-stack-id\n      read: true\n      write: true\n    options:\n      dependson:\n        - ${aws_iam_role.this}\n  # For a module\n  thisIndex/awsIntegrationAttachmentAwsIntegrationAttachment:\n    type: spacelift:AwsIntegrationAttachment\n    properties:\n      integrationId: ${spacelift_aws_integration.this.id}\n      moduleId: my-module-id\n      read: true\n      write: true\n    options:\n      dependson:\n        - ${aws_iam_role.this}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/awsIntegrationAttachment:AwsIntegrationAttachment read_write_my_stack $INTEGRATION_ID/$PROJECT_ID\n```\n\n ",
            "properties": {
                "attachmentId": {
                    "type": "string",
                    "description": "Internal ID of the attachment entity\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "ID of the integration to attach\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module to attach the integration to\n"
                },
                "read": {
                    "type": "boolean",
                    "description": "Indicates whether this attachment is used for read operations. Defaults to `true`.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to attach the integration to\n"
                },
                "write": {
                    "type": "boolean",
                    "description": "Indicates whether this attachment is used for write operations. Defaults to `true`.\n"
                }
            },
            "required": [
                "attachmentId",
                "integrationId"
            ],
            "inputProperties": {
                "integrationId": {
                    "type": "string",
                    "description": "ID of the integration to attach\n",
                    "willReplaceOnChanges": true
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module to attach the integration to\n",
                    "willReplaceOnChanges": true
                },
                "read": {
                    "type": "boolean",
                    "description": "Indicates whether this attachment is used for read operations. Defaults to `true`.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to attach the integration to\n",
                    "willReplaceOnChanges": true
                },
                "write": {
                    "type": "boolean",
                    "description": "Indicates whether this attachment is used for write operations. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "integrationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsIntegrationAttachment resources.\n",
                "properties": {
                    "attachmentId": {
                        "type": "string",
                        "description": "Internal ID of the attachment entity\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "ID of the integration to attach\n",
                        "willReplaceOnChanges": true
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module to attach the integration to\n",
                        "willReplaceOnChanges": true
                    },
                    "read": {
                        "type": "boolean",
                        "description": "Indicates whether this attachment is used for read operations. Defaults to `true`.\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack to attach the integration to\n",
                        "willReplaceOnChanges": true
                    },
                    "write": {
                        "type": "boolean",
                        "description": "Indicates whether this attachment is used for write operations. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/awsRole:AwsRole": {
            "description": "**NOTE:** while this resource continues to work, we have replaced it with the `spacelift.AwsIntegration` resource. The new resource allows integrations to be shared by multiple stacks/modules and also supports separate read vs write roles. Please use the `spacelift.AwsIntegration` resource instead.\n\n`spacelift.AwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.\n\nIf you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).\n\nNote: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).\n\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/awsRole:AwsRole k8s-core stack/$STACK_ID\n```\n\n\n\n```sh\n $ pulumi import spacelift:index/awsRole:AwsRole k8s-core module/$MODULE_ID\n```\n\n ",
            "properties": {
                "durationSeconds": {
                    "type": "integer",
                    "description": "AWS IAM role session duration in seconds\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "Custom external ID (works only for private workers).\n"
                },
                "generateCredentialsInWorker": {
                    "type": "boolean",
                    "description": "Generate AWS credentials in the private worker. Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which assumes the AWS IAM role\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "ARN of the AWS IAM role to attach\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which assumes the AWS IAM role\n"
                }
            },
            "required": [
                "durationSeconds",
                "roleArn"
            ],
            "inputProperties": {
                "durationSeconds": {
                    "type": "integer",
                    "description": "AWS IAM role session duration in seconds\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "Custom external ID (works only for private workers).\n"
                },
                "generateCredentialsInWorker": {
                    "type": "boolean",
                    "description": "Generate AWS credentials in the private worker. Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which assumes the AWS IAM role\n",
                    "willReplaceOnChanges": true
                },
                "roleArn": {
                    "type": "string",
                    "description": "ARN of the AWS IAM role to attach\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which assumes the AWS IAM role\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roleArn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsRole resources.\n",
                "properties": {
                    "durationSeconds": {
                        "type": "integer",
                        "description": "AWS IAM role session duration in seconds\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Custom external ID (works only for private workers).\n"
                    },
                    "generateCredentialsInWorker": {
                        "type": "boolean",
                        "description": "Generate AWS credentials in the private worker. Defaults to `false`.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module which assumes the AWS IAM role\n",
                        "willReplaceOnChanges": true
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "ARN of the AWS IAM role to attach\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which assumes the AWS IAM role\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/azureIntegration:AzureIntegration": {
            "description": "`spacelift.AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst example = new spacelift.AzureIntegration(\"example\", {\n    defaultSubscriptionId: \"default-subscription-id\",\n    labels: [\n        \"one\",\n        \"two\",\n    ],\n    tenantId: \"tenant-id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nexample = spacelift.AzureIntegration(\"example\",\n    default_subscription_id=\"default-subscription-id\",\n    labels=[\n        \"one\",\n        \"two\",\n    ],\n    tenant_id=\"tenant-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Spacelift.AzureIntegration(\"example\", new()\n    {\n        DefaultSubscriptionId = \"default-subscription-id\",\n        Labels = new[]\n        {\n            \"one\",\n            \"two\",\n        },\n        TenantId = \"tenant-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewAzureIntegration(ctx, \"example\", \u0026spacelift.AzureIntegrationArgs{\n\t\t\tDefaultSubscriptionId: pulumi.String(\"default-subscription-id\"),\n\t\t\tLabels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"one\"),\n\t\t\t\tpulumi.String(\"two\"),\n\t\t\t},\n\t\t\tTenantId: pulumi.String(\"tenant-id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.AzureIntegration;\nimport com.pulumi.spacelift.AzureIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AzureIntegration(\"example\", AzureIntegrationArgs.builder()        \n            .defaultSubscriptionId(\"default-subscription-id\")\n            .labels(            \n                \"one\",\n                \"two\")\n            .tenantId(\"tenant-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: spacelift:AzureIntegration\n    properties:\n      defaultSubscriptionId: default-subscription-id\n      labels:\n        - one\n        - two\n      tenantId: tenant-id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/azureIntegration:AzureIntegration example $INTEGRATION_ID\n```\n\n ",
            "properties": {
                "adminConsentProvided": {
                    "type": "boolean",
                    "description": "Indicates whether admin consent has been performed for the AAD Application.\n"
                },
                "adminConsentUrl": {
                    "type": "string",
                    "description": "The URL to use to provide admin consent to the application in the customer's tenant\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The applicationId of the Azure AD application used by the integration.\n"
                },
                "defaultSubscriptionId": {
                    "type": "string",
                    "description": "The default subscription ID to use, if one isn't specified at the stack/module level\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels to set on the integration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of the integration\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the integration is in\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure AD tenant ID\n"
                }
            },
            "required": [
                "adminConsentProvided",
                "adminConsentUrl",
                "applicationId",
                "displayName",
                "name",
                "spaceId",
                "tenantId"
            ],
            "inputProperties": {
                "defaultSubscriptionId": {
                    "type": "string",
                    "description": "The default subscription ID to use, if one isn't specified at the stack/module level\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels to set on the integration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of the integration\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the integration is in\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure AD tenant ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureIntegration resources.\n",
                "properties": {
                    "adminConsentProvided": {
                        "type": "boolean",
                        "description": "Indicates whether admin consent has been performed for the AAD Application.\n"
                    },
                    "adminConsentUrl": {
                        "type": "string",
                        "description": "The URL to use to provide admin consent to the application in the customer's tenant\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The applicationId of the Azure AD application used by the integration.\n"
                    },
                    "defaultSubscriptionId": {
                        "type": "string",
                        "description": "The default subscription ID to use, if one isn't specified at the stack/module level\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Labels to set on the integration\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of the integration\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the integration is in\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The Azure AD tenant ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/azureIntegrationAttachment:AzureIntegrationAttachment": {
            "description": "`spacelift.AzureIntegrationAttachment` represents the attachment between a reusable Azure integration and a single stack or module.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\n// For a stack\nconst readonly = new spacelift.AzureIntegrationAttachment(\"readonly\", {\n    integrationId: spacelift_azure_integration.example.id,\n    stackId: spacelift_stack.example.id,\n    write: false,\n    subscriptionId: \"subscription_id\",\n});\n// For a module\nconst writeonly = new spacelift.AzureIntegrationAttachment(\"writeonly\", {\n    integrationId: spacelift_azure_integration.example.id,\n    stackId: spacelift_module.example.id,\n    read: false,\n    subscriptionId: \"subscription_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\n# For a stack\nreadonly = spacelift.AzureIntegrationAttachment(\"readonly\",\n    integration_id=spacelift_azure_integration[\"example\"][\"id\"],\n    stack_id=spacelift_stack[\"example\"][\"id\"],\n    write=False,\n    subscription_id=\"subscription_id\")\n# For a module\nwriteonly = spacelift.AzureIntegrationAttachment(\"writeonly\",\n    integration_id=spacelift_azure_integration[\"example\"][\"id\"],\n    stack_id=spacelift_module[\"example\"][\"id\"],\n    read=False,\n    subscription_id=\"subscription_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For a stack\n    var @readonly = new Spacelift.AzureIntegrationAttachment(\"readonly\", new()\n    {\n        IntegrationId = spacelift_azure_integration.Example.Id,\n        StackId = spacelift_stack.Example.Id,\n        Write = false,\n        SubscriptionId = \"subscription_id\",\n    });\n\n    // For a module\n    var writeonly = new Spacelift.AzureIntegrationAttachment(\"writeonly\", new()\n    {\n        IntegrationId = spacelift_azure_integration.Example.Id,\n        StackId = spacelift_module.Example.Id,\n        Read = false,\n        SubscriptionId = \"subscription_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewAzureIntegrationAttachment(ctx, \"readonly\", \u0026spacelift.AzureIntegrationAttachmentArgs{\n\t\t\tIntegrationId:  pulumi.Any(spacelift_azure_integration.Example.Id),\n\t\t\tStackId:        pulumi.Any(spacelift_stack.Example.Id),\n\t\t\tWrite:          pulumi.Bool(false),\n\t\t\tSubscriptionId: pulumi.String(\"subscription_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewAzureIntegrationAttachment(ctx, \"writeonly\", \u0026spacelift.AzureIntegrationAttachmentArgs{\n\t\t\tIntegrationId:  pulumi.Any(spacelift_azure_integration.Example.Id),\n\t\t\tStackId:        pulumi.Any(spacelift_module.Example.Id),\n\t\t\tRead:           pulumi.Bool(false),\n\t\t\tSubscriptionId: pulumi.String(\"subscription_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.AzureIntegrationAttachment;\nimport com.pulumi.spacelift.AzureIntegrationAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var readonly = new AzureIntegrationAttachment(\"readonly\", AzureIntegrationAttachmentArgs.builder()        \n            .integrationId(spacelift_azure_integration.example().id())\n            .stackId(spacelift_stack.example().id())\n            .write(false)\n            .subscriptionId(\"subscription_id\")\n            .build());\n\n        var writeonly = new AzureIntegrationAttachment(\"writeonly\", AzureIntegrationAttachmentArgs.builder()        \n            .integrationId(spacelift_azure_integration.example().id())\n            .stackId(spacelift_module.example().id())\n            .read(false)\n            .subscriptionId(\"subscription_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # For a stack\n  readonly:\n    type: spacelift:AzureIntegrationAttachment\n    properties:\n      integrationId: ${spacelift_azure_integration.example.id}\n      stackId: ${spacelift_stack.example.id}\n      write: false\n      subscriptionId: subscription_id\n  # For a module\n  writeonly:\n    type: spacelift:AzureIntegrationAttachment\n    properties:\n      integrationId: ${spacelift_azure_integration.example.id}\n      stackId: ${spacelift_module.example.id}\n      read: false\n      subscriptionId: subscription_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/azureIntegrationAttachment:AzureIntegrationAttachment readonly $INTEGRATION_ID/$STACK_ID\n```\n\n\n\n```sh\n $ pulumi import spacelift:index/azureIntegrationAttachment:AzureIntegrationAttachment writeonly $INTEGRATION_ID/$MODULE_ID\n```\n\n ",
            "properties": {
                "attachmentId": {
                    "type": "string",
                    "description": "Internal ID of the attachment entity\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "ID of the integration to attach\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module to attach the integration to\n"
                },
                "read": {
                    "type": "boolean",
                    "description": "Indicates whether this attachment is used for read operations. Defaults to `true`.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to attach the integration to\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.\n"
                },
                "write": {
                    "type": "boolean",
                    "description": "Indicates whether this attachment is used for write operations. Defaults to `true`.\n"
                }
            },
            "required": [
                "attachmentId",
                "integrationId"
            ],
            "inputProperties": {
                "integrationId": {
                    "type": "string",
                    "description": "ID of the integration to attach\n",
                    "willReplaceOnChanges": true
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module to attach the integration to\n",
                    "willReplaceOnChanges": true
                },
                "read": {
                    "type": "boolean",
                    "description": "Indicates whether this attachment is used for read operations. Defaults to `true`.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to attach the integration to\n",
                    "willReplaceOnChanges": true
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.\n"
                },
                "write": {
                    "type": "boolean",
                    "description": "Indicates whether this attachment is used for write operations. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "integrationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureIntegrationAttachment resources.\n",
                "properties": {
                    "attachmentId": {
                        "type": "string",
                        "description": "Internal ID of the attachment entity\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "ID of the integration to attach\n",
                        "willReplaceOnChanges": true
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module to attach the integration to\n",
                        "willReplaceOnChanges": true
                    },
                    "read": {
                        "type": "boolean",
                        "description": "Indicates whether this attachment is used for read operations. Defaults to `true`.\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack to attach the integration to\n",
                        "willReplaceOnChanges": true
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.\n"
                    },
                    "write": {
                        "type": "boolean",
                        "description": "Indicates whether this attachment is used for write operations. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/context:Context": {
            "description": "`spacelift.Context` represents a Spacelift **context** - a collection of configuration elements (either environment variables or mounted files) that can be administratively attached to multiple stacks (`spacelift.Stack`) or modules (`spacelift.Module`) using a context attachment (`spacelift.ContextAttachment`)`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst prod_k8s_ie = new spacelift.Context(\"prod-k8s-ie\", {\n    description: \"Configuration details for the compute cluster in 🇮🇪\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nprod_k8s_ie = spacelift.Context(\"prod-k8s-ie\", description=\"Configuration details for the compute cluster in 🇮🇪\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod_k8s_ie = new Spacelift.Context(\"prod-k8s-ie\", new()\n    {\n        Description = \"Configuration details for the compute cluster in 🇮🇪\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewContext(ctx, \"prod-k8s-ie\", \u0026spacelift.ContextArgs{\n\t\t\tDescription: pulumi.String(\"Configuration details for the compute cluster in 🇮🇪\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Context;\nimport com.pulumi.spacelift.ContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prod_k8s_ie = new Context(\"prod-k8s-ie\", ContextArgs.builder()        \n            .description(\"Configuration details for the compute cluster in 🇮🇪\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prod-k8s-ie:\n    type: spacelift:Context\n    properties:\n      description: \"Configuration details for the compute cluster in \\U0001F1EE\\U0001F1EA\"\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/context:Context prod-k8s-ie $CONTEXT_ID\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Free-form context description for users\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the context - should be unique in one account\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the context is in\n"
                }
            },
            "required": [
                "name",
                "spaceId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Free-form context description for users\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the context - should be unique in one account\n",
                    "willReplaceOnChanges": true
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the context is in\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Context resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Free-form context description for users\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the context - should be unique in one account\n",
                        "willReplaceOnChanges": true
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the context is in\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/contextAttachment:ContextAttachment": {
            "description": "`spacelift.ContextAttachment` represents a Spacelift attachment of a single context to a single stack or module, with a predefined priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// For a module\nconst attachment = new spacelift.ContextAttachment(\"attachment\", {\n    contextId: \"prod-k8s-ie\",\n    moduleId: \"k8s-module\",\n    priority: 0,\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\n# For a module\nattachment = spacelift.ContextAttachment(\"attachment\",\n    context_id=\"prod-k8s-ie\",\n    module_id=\"k8s-module\",\n    priority=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For a module\n    var attachment = new Spacelift.ContextAttachment(\"attachment\", new()\n    {\n        ContextId = \"prod-k8s-ie\",\n        ModuleId = \"k8s-module\",\n        Priority = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewContextAttachment(ctx, \"attachment\", \u0026spacelift.ContextAttachmentArgs{\n\t\t\tContextId: pulumi.String(\"prod-k8s-ie\"),\n\t\t\tModuleId:  pulumi.String(\"k8s-module\"),\n\t\t\tPriority:  pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.ContextAttachment;\nimport com.pulumi.spacelift.ContextAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var attachment = new ContextAttachment(\"attachment\", ContextAttachmentArgs.builder()        \n            .contextId(\"prod-k8s-ie\")\n            .moduleId(\"k8s-module\")\n            .priority(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # For a module\n  attachment:\n    type: spacelift:ContextAttachment\n    properties:\n      contextId: prod-k8s-ie\n      moduleId: k8s-module\n      priority: 0\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/contextAttachment:ContextAttachment test_stack $CONTEXT_ID/$STACK_ID\n```\n\n ",
            "properties": {
                "contextId": {
                    "type": "string",
                    "description": "ID of the context to attach\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module to attach the context to\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to attach the context to\n"
                }
            },
            "required": [
                "contextId"
            ],
            "inputProperties": {
                "contextId": {
                    "type": "string",
                    "description": "ID of the context to attach\n",
                    "willReplaceOnChanges": true
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module to attach the context to\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.\n",
                    "willReplaceOnChanges": true
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to attach the context to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "contextId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContextAttachment resources.\n",
                "properties": {
                    "contextId": {
                        "type": "string",
                        "description": "ID of the context to attach\n",
                        "willReplaceOnChanges": true
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module to attach the context to\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.\n",
                        "willReplaceOnChanges": true
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack to attach the context to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/driftDetection:DriftDetection": {
            "description": "`spacelift.DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst core_infra_production = new spacelift.Stack(\"core-infra-production\", {\n    branch: \"master\",\n    repository: \"core-infra\",\n});\nconst core_infra_production_drift_detection = new spacelift.DriftDetection(\"core-infra-production-drift-detection\", {\n    reconcile: true,\n    stackId: core_infra_production.id,\n    schedules: [\"*/15 * * * *\"],\n});\n// Every 15 minutes\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\ncore_infra_production = spacelift.Stack(\"core-infra-production\",\n    branch=\"master\",\n    repository=\"core-infra\")\ncore_infra_production_drift_detection = spacelift.DriftDetection(\"core-infra-production-drift-detection\",\n    reconcile=True,\n    stack_id=core_infra_production.id,\n    schedules=[\"*/15 * * * *\"])\n# Every 15 minutes\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var core_infra_production = new Spacelift.Stack(\"core-infra-production\", new()\n    {\n        Branch = \"master\",\n        Repository = \"core-infra\",\n    });\n\n    var core_infra_production_drift_detection = new Spacelift.DriftDetection(\"core-infra-production-drift-detection\", new()\n    {\n        Reconcile = true,\n        StackId = core_infra_production.Id,\n        Schedules = new[]\n        {\n            \"*/15 * * * *\",\n        },\n    });\n\n    // Every 15 minutes\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewStack(ctx, \"core-infra-production\", \u0026spacelift.StackArgs{\n\t\t\tBranch:     pulumi.String(\"master\"),\n\t\t\tRepository: pulumi.String(\"core-infra\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewDriftDetection(ctx, \"core-infra-production-drift-detection\", \u0026spacelift.DriftDetectionArgs{\n\t\t\tReconcile: pulumi.Bool(true),\n\t\t\tStackId:   core_infra_production.ID(),\n\t\t\tSchedules: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"*/15 * * * *\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Stack;\nimport com.pulumi.spacelift.StackArgs;\nimport com.pulumi.spacelift.DriftDetection;\nimport com.pulumi.spacelift.DriftDetectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var core_infra_production = new Stack(\"core-infra-production\", StackArgs.builder()        \n            .branch(\"master\")\n            .repository(\"core-infra\")\n            .build());\n\n        var core_infra_production_drift_detection = new DriftDetection(\"core-infra-production-drift-detection\", DriftDetectionArgs.builder()        \n            .reconcile(true)\n            .stackId(core_infra_production.id())\n            .schedules(\"*/15 * * * *\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  core-infra-production:\n    type: spacelift:Stack\n    properties:\n      branch: master\n      repository: core-infra\n  core-infra-production-drift-detection:\n    type: spacelift:DriftDetection\n    properties:\n      reconcile: true\n      stackId: ${[\"core-infra-production\"].id}\n      schedules:\n        - '*/15 * * * *'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection stack/$STACK_ID\n```\n\n\n\n```sh\n $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection module/$MODULE_ID\n```\n\n ",
            "properties": {
                "reconcile": {
                    "type": "boolean",
                    "description": "Whether a tracked run should be triggered when drift is detected.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cron schedule expressions based on which drift detection should be triggered.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack for which to set up drift detection\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone in which the schedule is expressed. Defaults to `UTC`.\n"
                }
            },
            "required": [
                "schedules",
                "stackId"
            ],
            "inputProperties": {
                "reconcile": {
                    "type": "boolean",
                    "description": "Whether a tracked run should be triggered when drift is detected.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cron schedule expressions based on which drift detection should be triggered.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack for which to set up drift detection\n",
                    "willReplaceOnChanges": true
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone in which the schedule is expressed. Defaults to `UTC`.\n"
                }
            },
            "requiredInputs": [
                "schedules",
                "stackId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DriftDetection resources.\n",
                "properties": {
                    "reconcile": {
                        "type": "boolean",
                        "description": "Whether a tracked run should be triggered when drift is detected.\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cron schedule expressions based on which drift detection should be triggered.\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack for which to set up drift detection\n",
                        "willReplaceOnChanges": true
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone in which the schedule is expressed. Defaults to `UTC`.\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/environmentVariable:EnvironmentVariable": {
            "description": "`spacelift.EnvironmentVariable` defines an environment variable on the context (`spacelift.Context`), stack (`spacelift.Stack`) or a module (`spacelift.Module`), thereby allowing to pass and share various secrets and configuration with Spacelift stacks.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// For a context\nconst ireland_kubeconfig = new spacelift.EnvironmentVariable(\"ireland-kubeconfig\", {\n    contextId: \"prod-k8s-ie\",\n    value: \"/project/spacelift/kubeconfig\",\n    writeOnly: false,\n});\n// For a module\nconst module_kubeconfig = new spacelift.EnvironmentVariable(\"module-kubeconfig\", {\n    moduleId: \"k8s-module\",\n    value: \"/project/spacelift/kubeconfig\",\n    writeOnly: false,\n});\n// For a stack\nconst core_kubeconfig = new spacelift.EnvironmentVariable(\"core-kubeconfig\", {\n    stackId: \"k8s-core\",\n    value: \"/project/spacelift/kubeconfig\",\n    writeOnly: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\n# For a context\nireland_kubeconfig = spacelift.EnvironmentVariable(\"ireland-kubeconfig\",\n    context_id=\"prod-k8s-ie\",\n    value=\"/project/spacelift/kubeconfig\",\n    write_only=False)\n# For a module\nmodule_kubeconfig = spacelift.EnvironmentVariable(\"module-kubeconfig\",\n    module_id=\"k8s-module\",\n    value=\"/project/spacelift/kubeconfig\",\n    write_only=False)\n# For a stack\ncore_kubeconfig = spacelift.EnvironmentVariable(\"core-kubeconfig\",\n    stack_id=\"k8s-core\",\n    value=\"/project/spacelift/kubeconfig\",\n    write_only=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For a context\n    var ireland_kubeconfig = new Spacelift.EnvironmentVariable(\"ireland-kubeconfig\", new()\n    {\n        ContextId = \"prod-k8s-ie\",\n        Value = \"/project/spacelift/kubeconfig\",\n        WriteOnly = false,\n    });\n\n    // For a module\n    var module_kubeconfig = new Spacelift.EnvironmentVariable(\"module-kubeconfig\", new()\n    {\n        ModuleId = \"k8s-module\",\n        Value = \"/project/spacelift/kubeconfig\",\n        WriteOnly = false,\n    });\n\n    // For a stack\n    var core_kubeconfig = new Spacelift.EnvironmentVariable(\"core-kubeconfig\", new()\n    {\n        StackId = \"k8s-core\",\n        Value = \"/project/spacelift/kubeconfig\",\n        WriteOnly = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewEnvironmentVariable(ctx, \"ireland-kubeconfig\", \u0026spacelift.EnvironmentVariableArgs{\n\t\t\tContextId: pulumi.String(\"prod-k8s-ie\"),\n\t\t\tValue:     pulumi.String(\"/project/spacelift/kubeconfig\"),\n\t\t\tWriteOnly: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewEnvironmentVariable(ctx, \"module-kubeconfig\", \u0026spacelift.EnvironmentVariableArgs{\n\t\t\tModuleId:  pulumi.String(\"k8s-module\"),\n\t\t\tValue:     pulumi.String(\"/project/spacelift/kubeconfig\"),\n\t\t\tWriteOnly: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewEnvironmentVariable(ctx, \"core-kubeconfig\", \u0026spacelift.EnvironmentVariableArgs{\n\t\t\tStackId:   pulumi.String(\"k8s-core\"),\n\t\t\tValue:     pulumi.String(\"/project/spacelift/kubeconfig\"),\n\t\t\tWriteOnly: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.EnvironmentVariable;\nimport com.pulumi.spacelift.EnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ireland_kubeconfig = new EnvironmentVariable(\"ireland-kubeconfig\", EnvironmentVariableArgs.builder()        \n            .contextId(\"prod-k8s-ie\")\n            .value(\"/project/spacelift/kubeconfig\")\n            .writeOnly(false)\n            .build());\n\n        var module_kubeconfig = new EnvironmentVariable(\"module-kubeconfig\", EnvironmentVariableArgs.builder()        \n            .moduleId(\"k8s-module\")\n            .value(\"/project/spacelift/kubeconfig\")\n            .writeOnly(false)\n            .build());\n\n        var core_kubeconfig = new EnvironmentVariable(\"core-kubeconfig\", EnvironmentVariableArgs.builder()        \n            .stackId(\"k8s-core\")\n            .value(\"/project/spacelift/kubeconfig\")\n            .writeOnly(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # For a context\n  ireland-kubeconfig:\n    type: spacelift:EnvironmentVariable\n    properties:\n      contextId: prod-k8s-ie\n      value: /project/spacelift/kubeconfig\n      writeOnly: false\n  # For a module\n  module-kubeconfig:\n    type: spacelift:EnvironmentVariable\n    properties:\n      moduleId: k8s-module\n      value: /project/spacelift/kubeconfig\n      writeOnly: false\n  # For a stack\n  core-kubeconfig:\n    type: spacelift:EnvironmentVariable\n    properties:\n      stackId: k8s-core\n      value: /project/spacelift/kubeconfig\n      writeOnly: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/environmentVariable:EnvironmentVariable ireland-kubeconfig context/$CONTEXT_ID/$ENVIRONMENT_VARIABLE_NAME\n```\n\n\n\n```sh\n $ pulumi import spacelift:index/environmentVariable:EnvironmentVariable module-kubeconfig module/$MODULE_ID/$ENVIRONMENT_VARIABLE_NAME\n```\n\n\n\n```sh\n $ pulumi import spacelift:index/environmentVariable:EnvironmentVariable core-kubeconfig stack/$STACK_ID/$ENVIRONMENT_VARIABLE_NAME\n```\n\n ",
            "properties": {
                "checksum": {
                    "type": "string",
                    "description": "SHA-256 checksum of the value\n"
                },
                "contextId": {
                    "type": "string",
                    "description": "ID of the context on which the environment variable is defined\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module on which the environment variable is defined\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack on which the environment variable is defined\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable\n"
                },
                "writeOnly": {
                    "type": "boolean",
                    "description": "Indicates whether the value can be read back outside a Run. Defaults to `true`.\n"
                }
            },
            "required": [
                "checksum",
                "name",
                "value"
            ],
            "inputProperties": {
                "contextId": {
                    "type": "string",
                    "description": "ID of the context on which the environment variable is defined\n",
                    "willReplaceOnChanges": true
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module on which the environment variable is defined\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable\n",
                    "willReplaceOnChanges": true
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack on which the environment variable is defined\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable\n",
                    "willReplaceOnChanges": true
                },
                "writeOnly": {
                    "type": "boolean",
                    "description": "Indicates whether the value can be read back outside a Run. Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentVariable resources.\n",
                "properties": {
                    "checksum": {
                        "type": "string",
                        "description": "SHA-256 checksum of the value\n"
                    },
                    "contextId": {
                        "type": "string",
                        "description": "ID of the context on which the environment variable is defined\n",
                        "willReplaceOnChanges": true
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module on which the environment variable is defined\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the environment variable\n",
                        "willReplaceOnChanges": true
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack on which the environment variable is defined\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the environment variable\n",
                        "willReplaceOnChanges": true
                    },
                    "writeOnly": {
                        "type": "boolean",
                        "description": "Indicates whether the value can be read back outside a Run. Defaults to `true`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/gcpServiceAccount:GcpServiceAccount": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst k8s_coreStack = new spacelift.Stack(\"k8s-coreStack\", {\n    branch: \"master\",\n    repository: \"core-infra\",\n});\nconst k8s_coreGcpServiceAccount = new spacelift.GcpServiceAccount(\"k8s-coreGcpServiceAccount\", {\n    stackId: k8s_coreStack.id,\n    tokenScopes: [\n        \"https://www.googleapis.com/auth/compute\",\n        \"https://www.googleapis.com/auth/cloud-platform\",\n        \"https://www.googleapis.com/auth/devstorage.full_control\",\n    ],\n});\nconst k8s_coreProject = new gcp.organizations.Project(\"k8s-coreProject\", {\n    projectId: \"unicorn-k8s-core\",\n    orgId: _var.gcp_organization_id,\n});\nconst k8s_coreIAMMember = new gcp.projects.IAMMember(\"k8s-coreIAMMember\", {\n    project: k8s_coreProject.id,\n    role: \"roles/owner\",\n    member: pulumi.interpolate`serviceAccount:${k8s_coreGcpServiceAccount.serviceAccountEmail}`,\n});\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\nimport pulumi_spacelift as spacelift\n\nk8s_core_stack = spacelift.Stack(\"k8s-coreStack\",\n    branch=\"master\",\n    repository=\"core-infra\")\nk8s_core_gcp_service_account = spacelift.GcpServiceAccount(\"k8s-coreGcpServiceAccount\",\n    stack_id=k8s_core_stack.id,\n    token_scopes=[\n        \"https://www.googleapis.com/auth/compute\",\n        \"https://www.googleapis.com/auth/cloud-platform\",\n        \"https://www.googleapis.com/auth/devstorage.full_control\",\n    ])\nk8s_core_project = gcp.organizations.Project(\"k8s-coreProject\",\n    project_id=\"unicorn-k8s-core\",\n    org_id=var[\"gcp_organization_id\"])\nk8s_core_iam_member = gcp.projects.IAMMember(\"k8s-coreIAMMember\",\n    project=k8s_core_project.id,\n    role=\"roles/owner\",\n    member=k8s_core_gcp_service_account.service_account_email.apply(lambda service_account_email: f\"serviceAccount:{service_account_email}\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_coreStack = new Spacelift.Stack(\"k8s-coreStack\", new()\n    {\n        Branch = \"master\",\n        Repository = \"core-infra\",\n    });\n\n    var k8s_coreGcpServiceAccount = new Spacelift.GcpServiceAccount(\"k8s-coreGcpServiceAccount\", new()\n    {\n        StackId = k8s_coreStack.Id,\n        TokenScopes = new[]\n        {\n            \"https://www.googleapis.com/auth/compute\",\n            \"https://www.googleapis.com/auth/cloud-platform\",\n            \"https://www.googleapis.com/auth/devstorage.full_control\",\n        },\n    });\n\n    var k8s_coreProject = new Gcp.Organizations.Project(\"k8s-coreProject\", new()\n    {\n        ProjectId = \"unicorn-k8s-core\",\n        OrgId = @var.Gcp_organization_id,\n    });\n\n    var k8s_coreIAMMember = new Gcp.Projects.IAMMember(\"k8s-coreIAMMember\", new()\n    {\n        Project = k8s_coreProject.Id,\n        Role = \"roles/owner\",\n        Member = k8s_coreGcpServiceAccount.ServiceAccountEmail.Apply(serviceAccountEmail =\u003e $\"serviceAccount:{serviceAccountEmail}\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations\"\n\t\"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewStack(ctx, \"k8s-coreStack\", \u0026spacelift.StackArgs{\n\t\t\tBranch:     pulumi.String(\"master\"),\n\t\t\tRepository: pulumi.String(\"core-infra\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewGcpServiceAccount(ctx, \"k8s-coreGcpServiceAccount\", \u0026spacelift.GcpServiceAccountArgs{\n\t\t\tStackId: k8s_coreStack.ID(),\n\t\t\tTokenScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://www.googleapis.com/auth/compute\"),\n\t\t\t\tpulumi.String(\"https://www.googleapis.com/auth/cloud-platform\"),\n\t\t\t\tpulumi.String(\"https://www.googleapis.com/auth/devstorage.full_control\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = organizations.NewProject(ctx, \"k8s-coreProject\", \u0026organizations.ProjectArgs{\n\t\t\tProjectId: pulumi.String(\"unicorn-k8s-core\"),\n\t\t\tOrgId:     pulumi.Any(_var.Gcp_organization_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = projects.NewIAMMember(ctx, \"k8s-coreIAMMember\", \u0026projects.IAMMemberArgs{\n\t\t\tProject: k8s_coreProject.ID(),\n\t\t\tRole:    pulumi.String(\"roles/owner\"),\n\t\t\tMember: k8s_coreGcpServiceAccount.ServiceAccountEmail.ApplyT(func(serviceAccountEmail string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"serviceAccount:%v\", serviceAccountEmail), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Stack;\nimport com.pulumi.spacelift.StackArgs;\nimport com.pulumi.spacelift.GcpServiceAccount;\nimport com.pulumi.spacelift.GcpServiceAccountArgs;\nimport com.pulumi.gcp.organizations.Project;\nimport com.pulumi.gcp.organizations.ProjectArgs;\nimport com.pulumi.gcp.projects.IAMMember;\nimport com.pulumi.gcp.projects.IAMMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var k8s_coreStack = new Stack(\"k8s-coreStack\", StackArgs.builder()        \n            .branch(\"master\")\n            .repository(\"core-infra\")\n            .build());\n\n        var k8s_coreGcpServiceAccount = new GcpServiceAccount(\"k8s-coreGcpServiceAccount\", GcpServiceAccountArgs.builder()        \n            .stackId(k8s_coreStack.id())\n            .tokenScopes(            \n                \"https://www.googleapis.com/auth/compute\",\n                \"https://www.googleapis.com/auth/cloud-platform\",\n                \"https://www.googleapis.com/auth/devstorage.full_control\")\n            .build());\n\n        var k8s_coreProject = new Project(\"k8s-coreProject\", ProjectArgs.builder()        \n            .projectId(\"unicorn-k8s-core\")\n            .orgId(var_.gcp_organization_id())\n            .build());\n\n        var k8s_coreIAMMember = new IAMMember(\"k8s-coreIAMMember\", IAMMemberArgs.builder()        \n            .project(k8s_coreProject.id())\n            .role(\"roles/owner\")\n            .member(k8s_coreGcpServiceAccount.serviceAccountEmail().applyValue(serviceAccountEmail -\u003e String.format(\"serviceAccount:%s\", serviceAccountEmail)))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  k8s-coreStack:\n    type: spacelift:Stack\n    properties:\n      branch: master\n      repository: core-infra\n  k8s-coreGcpServiceAccount:\n    type: spacelift:GcpServiceAccount\n    properties:\n      stackId: ${[\"k8s-coreStack\"].id}\n      tokenScopes:\n        - https://www.googleapis.com/auth/compute\n        - https://www.googleapis.com/auth/cloud-platform\n        - https://www.googleapis.com/auth/devstorage.full_control\n  k8s-coreProject:\n    type: gcp:organizations:Project\n    properties:\n      projectId: unicorn-k8s-core\n      orgId: ${var.gcp_organization_id}\n  k8s-coreIAMMember:\n    type: gcp:projects:IAMMember\n    properties:\n      project: ${[\"k8s-coreProject\"].id}\n      role: roles/owner\n      member: serviceAccount:${[\"k8s-coreGcpServiceAccount\"].serviceAccountEmail}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/gcpServiceAccount:GcpServiceAccount k8s-core stack/$STACK_ID\n```\n\n\n\n```sh\n $ pulumi import spacelift:index/gcpServiceAccount:GcpServiceAccount k8s-core module/$MODULE_ID\n```\n\n ",
            "properties": {
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which uses GCP service account credentials\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "Email address of the GCP service account dedicated for this stack\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which uses GCP service account credentials\n"
                },
                "tokenScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of scopes that will be requested when generating temporary GCP service account credentials\n"
                }
            },
            "required": [
                "serviceAccountEmail",
                "tokenScopes"
            ],
            "inputProperties": {
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which uses GCP service account credentials\n",
                    "willReplaceOnChanges": true
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which uses GCP service account credentials\n",
                    "willReplaceOnChanges": true
                },
                "tokenScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of scopes that will be requested when generating temporary GCP service account credentials\n"
                }
            },
            "requiredInputs": [
                "tokenScopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpServiceAccount resources.\n",
                "properties": {
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module which uses GCP service account credentials\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "Email address of the GCP service account dedicated for this stack\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n",
                        "willReplaceOnChanges": true
                    },
                    "tokenScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of scopes that will be requested when generating temporary GCP service account credentials\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/module:Module": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// Explicit module name and provider:\nconst k8s_module = new spacelift.Module(\"k8s-module\", {\n    administrative: true,\n    branch: \"master\",\n    description: \"Infra terraform module\",\n    repository: \"terraform-super-module\",\n    terraformProvider: \"aws\",\n});\n// Unspecified module name and provider (repository naming scheme terraform-${provider}-${name})\nconst example_module = new spacelift.Module(\"example-module\", {\n    administrative: true,\n    branch: \"master\",\n    description: \"Example terraform module\",\n    projectRoot: \"example\",\n    repository: \"terraform-aws-example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\n# Explicit module name and provider:\nk8s_module = spacelift.Module(\"k8s-module\",\n    administrative=True,\n    branch=\"master\",\n    description=\"Infra terraform module\",\n    repository=\"terraform-super-module\",\n    terraform_provider=\"aws\")\n# Unspecified module name and provider (repository naming scheme terraform-${provider}-${name})\nexample_module = spacelift.Module(\"example-module\",\n    administrative=True,\n    branch=\"master\",\n    description=\"Example terraform module\",\n    project_root=\"example\",\n    repository=\"terraform-aws-example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Explicit module name and provider:\n    var k8s_module = new Spacelift.Module(\"k8s-module\", new()\n    {\n        Administrative = true,\n        Branch = \"master\",\n        Description = \"Infra terraform module\",\n        Repository = \"terraform-super-module\",\n        TerraformProvider = \"aws\",\n    });\n\n    // Unspecified module name and provider (repository naming scheme terraform-${provider}-${name})\n    var example_module = new Spacelift.Module(\"example-module\", new()\n    {\n        Administrative = true,\n        Branch = \"master\",\n        Description = \"Example terraform module\",\n        ProjectRoot = \"example\",\n        Repository = \"terraform-aws-example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewModule(ctx, \"k8s-module\", \u0026spacelift.ModuleArgs{\n\t\t\tAdministrative:    pulumi.Bool(true),\n\t\t\tBranch:            pulumi.String(\"master\"),\n\t\t\tDescription:       pulumi.String(\"Infra terraform module\"),\n\t\t\tRepository:        pulumi.String(\"terraform-super-module\"),\n\t\t\tTerraformProvider: pulumi.String(\"aws\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewModule(ctx, \"example-module\", \u0026spacelift.ModuleArgs{\n\t\t\tAdministrative: pulumi.Bool(true),\n\t\t\tBranch:         pulumi.String(\"master\"),\n\t\t\tDescription:    pulumi.String(\"Example terraform module\"),\n\t\t\tProjectRoot:    pulumi.String(\"example\"),\n\t\t\tRepository:     pulumi.String(\"terraform-aws-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Module;\nimport com.pulumi.spacelift.ModuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var k8s_module = new Module(\"k8s-module\", ModuleArgs.builder()        \n            .administrative(true)\n            .branch(\"master\")\n            .description(\"Infra terraform module\")\n            .repository(\"terraform-super-module\")\n            .terraformProvider(\"aws\")\n            .build());\n\n        var example_module = new Module(\"example-module\", ModuleArgs.builder()        \n            .administrative(true)\n            .branch(\"master\")\n            .description(\"Example terraform module\")\n            .projectRoot(\"example\")\n            .repository(\"terraform-aws-example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Explicit module name and provider:\n  k8s-module:\n    type: spacelift:Module\n    properties:\n      administrative: true\n      branch: master\n      description: Infra terraform module\n      repository: terraform-super-module\n      terraformProvider: aws\n  # Unspecified module name and provider (repository naming scheme terraform-${provider}-${name})\n  example-module:\n    type: spacelift:Module\n    properties:\n      administrative: true\n      branch: master\n      description: Example terraform module\n      projectRoot: example\n      repository: terraform-aws-example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/module:Module k8s-module $MODULE_ID\n```\n\n ",
            "properties": {
                "administrative": {
                    "type": "boolean",
                    "description": "Indicates whether this module can manage others. Defaults to `false`.\n"
                },
                "awsAssumeRolePolicyStatement": {
                    "type": "string",
                    "description": "AWS IAM assume role policy statement setting up trust relationship\n"
                },
                "azureDevops": {
                    "$ref": "#/types/spacelift:index/ModuleAzureDevops:ModuleAzureDevops",
                    "description": "Azure DevOps VCS settings\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/spacelift:index/ModuleBitbucketCloud:ModuleBitbucketCloud",
                    "description": "Bitbucket Cloud VCS settings\n"
                },
                "bitbucketDatacenter": {
                    "$ref": "#/types/spacelift:index/ModuleBitbucketDatacenter:ModuleBitbucketDatacenter",
                    "description": "Bitbucket Datacenter VCS settings\n"
                },
                "branch": {
                    "type": "string",
                    "description": "GitHub branch to apply changes to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Free-form module description for users\n"
                },
                "githubEnterprise": {
                    "$ref": "#/types/spacelift:index/ModuleGithubEnterprise:ModuleGithubEnterprise",
                    "description": "GitHub Enterprise (self-hosted) VCS settings\n"
                },
                "gitlab": {
                    "$ref": "#/types/spacelift:index/ModuleGitlab:ModuleGitlab",
                    "description": "GitLab VCS settings\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming\nconvention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can\nprovide it here.\n"
                },
                "projectRoot": {
                    "type": "string",
                    "description": "Project root is the optional directory relative to the repository root containing the module source code.\n"
                },
                "protectFromDeletion": {
                    "type": "boolean",
                    "description": "Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository, without the owner part\n"
                },
                "sharedAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the accounts (subdomains) which should have access to the Module\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the module is in\n"
                },
                "terraformProvider": {
                    "type": "string",
                    "description": "The module provider will by default be inferred from the repository name if it follows the terraform-provider-name\nnaming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you\ncan provide the provider name here.\n"
                },
                "workerPoolId": {
                    "type": "string",
                    "description": "ID of the worker pool to use\n"
                }
            },
            "required": [
                "awsAssumeRolePolicyStatement",
                "branch",
                "name",
                "repository",
                "spaceId",
                "terraformProvider"
            ],
            "inputProperties": {
                "administrative": {
                    "type": "boolean",
                    "description": "Indicates whether this module can manage others. Defaults to `false`.\n"
                },
                "azureDevops": {
                    "$ref": "#/types/spacelift:index/ModuleAzureDevops:ModuleAzureDevops",
                    "description": "Azure DevOps VCS settings\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/spacelift:index/ModuleBitbucketCloud:ModuleBitbucketCloud",
                    "description": "Bitbucket Cloud VCS settings\n"
                },
                "bitbucketDatacenter": {
                    "$ref": "#/types/spacelift:index/ModuleBitbucketDatacenter:ModuleBitbucketDatacenter",
                    "description": "Bitbucket Datacenter VCS settings\n"
                },
                "branch": {
                    "type": "string",
                    "description": "GitHub branch to apply changes to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Free-form module description for users\n"
                },
                "githubEnterprise": {
                    "$ref": "#/types/spacelift:index/ModuleGithubEnterprise:ModuleGithubEnterprise",
                    "description": "GitHub Enterprise (self-hosted) VCS settings\n"
                },
                "gitlab": {
                    "$ref": "#/types/spacelift:index/ModuleGitlab:ModuleGitlab",
                    "description": "GitLab VCS settings\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming\nconvention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can\nprovide it here.\n",
                    "willReplaceOnChanges": true
                },
                "projectRoot": {
                    "type": "string",
                    "description": "Project root is the optional directory relative to the repository root containing the module source code.\n"
                },
                "protectFromDeletion": {
                    "type": "boolean",
                    "description": "Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository, without the owner part\n"
                },
                "sharedAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the accounts (subdomains) which should have access to the Module\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the module is in\n"
                },
                "terraformProvider": {
                    "type": "string",
                    "description": "The module provider will by default be inferred from the repository name if it follows the terraform-provider-name\nnaming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you\ncan provide the provider name here.\n",
                    "willReplaceOnChanges": true
                },
                "workerPoolId": {
                    "type": "string",
                    "description": "ID of the worker pool to use\n"
                }
            },
            "requiredInputs": [
                "branch",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Module resources.\n",
                "properties": {
                    "administrative": {
                        "type": "boolean",
                        "description": "Indicates whether this module can manage others. Defaults to `false`.\n"
                    },
                    "awsAssumeRolePolicyStatement": {
                        "type": "string",
                        "description": "AWS IAM assume role policy statement setting up trust relationship\n"
                    },
                    "azureDevops": {
                        "$ref": "#/types/spacelift:index/ModuleAzureDevops:ModuleAzureDevops",
                        "description": "Azure DevOps VCS settings\n"
                    },
                    "bitbucketCloud": {
                        "$ref": "#/types/spacelift:index/ModuleBitbucketCloud:ModuleBitbucketCloud",
                        "description": "Bitbucket Cloud VCS settings\n"
                    },
                    "bitbucketDatacenter": {
                        "$ref": "#/types/spacelift:index/ModuleBitbucketDatacenter:ModuleBitbucketDatacenter",
                        "description": "Bitbucket Datacenter VCS settings\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "GitHub branch to apply changes to\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Free-form module description for users\n"
                    },
                    "githubEnterprise": {
                        "$ref": "#/types/spacelift:index/ModuleGithubEnterprise:ModuleGithubEnterprise",
                        "description": "GitHub Enterprise (self-hosted) VCS settings\n"
                    },
                    "gitlab": {
                        "$ref": "#/types/spacelift:index/ModuleGitlab:ModuleGitlab",
                        "description": "GitLab VCS settings\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming\nconvention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can\nprovide it here.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectRoot": {
                        "type": "string",
                        "description": "Project root is the optional directory relative to the repository root containing the module source code.\n"
                    },
                    "protectFromDeletion": {
                        "type": "boolean",
                        "description": "Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository, without the owner part\n"
                    },
                    "sharedAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the accounts (subdomains) which should have access to the Module\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the module is in\n"
                    },
                    "terraformProvider": {
                        "type": "string",
                        "description": "The module provider will by default be inferred from the repository name if it follows the terraform-provider-name\nnaming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you\ncan provide the provider name here.\n",
                        "willReplaceOnChanges": true
                    },
                    "workerPoolId": {
                        "type": "string",
                        "description": "ID of the worker pool to use\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/mountedfile:Mountedfile": {
            "description": "`spacelift.Mountedfile` represents a file mounted in each Run's workspace that is part of a configuration of a context (`spacelift.Context`), stack (`spacelift.Stack`) or a module (`spacelift.Module`). In principle, it's very similar to an environment variable (`spacelift.EnvironmentVariable`) except that the value is written to the filesystem rather than passed to the environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\n// For a context\nconst ireland_kubeconfig = new spacelift.Mountedfile(\"ireland-kubeconfig\", {\n    contextId: \"prod-k8s-ie\",\n    relativePath: \"kubeconfig\",\n    content: Buffer.from(fs.readFileSync(`${path.module}/kubeconfig.json`), 'binary').toString('base64'),\n});\n// For a module\nconst module_kubeconfig = new spacelift.Mountedfile(\"module-kubeconfig\", {\n    moduleId: \"k8s-module\",\n    relativePath: \"kubeconfig\",\n    content: Buffer.from(fs.readFileSync(`${path.module}/kubeconfig.json`), 'binary').toString('base64'),\n});\n// For a stack\nconst core_kubeconfig = new spacelift.Mountedfile(\"core-kubeconfig\", {\n    stackId: \"k8s-core\",\n    relativePath: \"kubeconfig\",\n    content: Buffer.from(fs.readFileSync(`${path.module}/kubeconfig.json`), 'binary').toString('base64'),\n});\n```\n```python\nimport pulumi\nimport base64\nimport pulumi_spacelift as spacelift\n\n# For a context\nireland_kubeconfig = spacelift.Mountedfile(\"ireland-kubeconfig\",\n    context_id=\"prod-k8s-ie\",\n    relative_path=\"kubeconfig\",\n    content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(f\"{path['module']}/kubeconfig.json\"))\n# For a module\nmodule_kubeconfig = spacelift.Mountedfile(\"module-kubeconfig\",\n    module_id=\"k8s-module\",\n    relative_path=\"kubeconfig\",\n    content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(f\"{path['module']}/kubeconfig.json\"))\n# For a stack\ncore_kubeconfig = spacelift.Mountedfile(\"core-kubeconfig\",\n    stack_id=\"k8s-core\",\n    relative_path=\"kubeconfig\",\n    content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(f\"{path['module']}/kubeconfig.json\"))\n```\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\n\tprivate static string ReadFileBase64(string path) {\n\t\treturn Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)))\n\t}\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For a context\n    var ireland_kubeconfig = new Spacelift.Mountedfile(\"ireland-kubeconfig\", new()\n    {\n        ContextId = \"prod-k8s-ie\",\n        RelativePath = \"kubeconfig\",\n        Content = ReadFileBase64($\"{path.Module}/kubeconfig.json\"),\n    });\n\n    // For a module\n    var module_kubeconfig = new Spacelift.Mountedfile(\"module-kubeconfig\", new()\n    {\n        ModuleId = \"k8s-module\",\n        RelativePath = \"kubeconfig\",\n        Content = ReadFileBase64($\"{path.Module}/kubeconfig.json\"),\n    });\n\n    // For a stack\n    var core_kubeconfig = new Spacelift.Mountedfile(\"core-kubeconfig\", new()\n    {\n        StackId = \"k8s-core\",\n        RelativePath = \"kubeconfig\",\n        Content = ReadFileBase64($\"{path.Module}/kubeconfig.json\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc filebase64OrPanic(path string) pulumi.StringPtrInput {\n\tif fileData, err := ioutil.ReadFile(path); err == nil {\n\t\treturn pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))\n\t} else {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewMountedfile(ctx, \"ireland-kubeconfig\", \u0026spacelift.MountedfileArgs{\n\t\t\tContextId:    pulumi.String(\"prod-k8s-ie\"),\n\t\t\tRelativePath: pulumi.String(\"kubeconfig\"),\n\t\t\tContent:      filebase64OrPanic(fmt.Sprintf(\"%v/kubeconfig.json\", path.Module)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewMountedfile(ctx, \"module-kubeconfig\", \u0026spacelift.MountedfileArgs{\n\t\t\tModuleId:     pulumi.String(\"k8s-module\"),\n\t\t\tRelativePath: pulumi.String(\"kubeconfig\"),\n\t\t\tContent:      filebase64OrPanic(fmt.Sprintf(\"%v/kubeconfig.json\", path.Module)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewMountedfile(ctx, \"core-kubeconfig\", \u0026spacelift.MountedfileArgs{\n\t\t\tStackId:      pulumi.String(\"k8s-core\"),\n\t\t\tRelativePath: pulumi.String(\"kubeconfig\"),\n\t\t\tContent:      filebase64OrPanic(fmt.Sprintf(\"%v/kubeconfig.json\", path.Module)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Mountedfile;\nimport com.pulumi.spacelift.MountedfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ireland_kubeconfig = new Mountedfile(\"ireland-kubeconfig\", MountedfileArgs.builder()        \n            .contextId(\"prod-k8s-ie\")\n            .relativePath(\"kubeconfig\")\n            .content(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(String.format(\"%s/kubeconfig.json\", path.module())))))\n            .build());\n\n        var module_kubeconfig = new Mountedfile(\"module-kubeconfig\", MountedfileArgs.builder()        \n            .moduleId(\"k8s-module\")\n            .relativePath(\"kubeconfig\")\n            .content(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(String.format(\"%s/kubeconfig.json\", path.module())))))\n            .build());\n\n        var core_kubeconfig = new Mountedfile(\"core-kubeconfig\", MountedfileArgs.builder()        \n            .stackId(\"k8s-core\")\n            .relativePath(\"kubeconfig\")\n            .content(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(String.format(\"%s/kubeconfig.json\", path.module())))))\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/mountedfile:Mountedfile ireland-kubeconfig context/$CONTEXT_ID/$MOUNTED_FILE_ID\n```\n\n\n\n```sh\n $ pulumi import spacelift:index/mountedfile:Mountedfile module-kubeconfig module/$MODULE_ID/$MOUNTED_FILE_ID\n```\n\n\n\n```sh\n $ pulumi import spacelift:index/mountedfile:Mountedfile core-kubeconfig stack/$STACK_ID/$MOUNTED_FILE_ID\n```\n\n ",
            "properties": {
                "checksum": {
                    "type": "string",
                    "description": "SHA-256 checksum of the value\n"
                },
                "content": {
                    "type": "string",
                    "description": "Content of the mounted file encoded using Base-64\n"
                },
                "contextId": {
                    "type": "string",
                    "description": "ID of the context on which the mounted file is defined\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module on which the mounted file is defined\n"
                },
                "relativePath": {
                    "type": "string",
                    "description": "Relative path to the mounted file, without the /mnt/workspace/ prefix\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack on which the mounted file is defined\n"
                },
                "writeOnly": {
                    "type": "boolean",
                    "description": "Indicates whether the content can be read back outside a Run. Defaults to `true`.\n"
                }
            },
            "required": [
                "checksum",
                "content",
                "relativePath"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "Content of the mounted file encoded using Base-64\n",
                    "willReplaceOnChanges": true
                },
                "contextId": {
                    "type": "string",
                    "description": "ID of the context on which the mounted file is defined\n",
                    "willReplaceOnChanges": true
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module on which the mounted file is defined\n",
                    "willReplaceOnChanges": true
                },
                "relativePath": {
                    "type": "string",
                    "description": "Relative path to the mounted file, without the /mnt/workspace/ prefix\n",
                    "willReplaceOnChanges": true
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack on which the mounted file is defined\n",
                    "willReplaceOnChanges": true
                },
                "writeOnly": {
                    "type": "boolean",
                    "description": "Indicates whether the content can be read back outside a Run. Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "content",
                "relativePath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Mountedfile resources.\n",
                "properties": {
                    "checksum": {
                        "type": "string",
                        "description": "SHA-256 checksum of the value\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "Content of the mounted file encoded using Base-64\n",
                        "willReplaceOnChanges": true
                    },
                    "contextId": {
                        "type": "string",
                        "description": "ID of the context on which the mounted file is defined\n",
                        "willReplaceOnChanges": true
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module on which the mounted file is defined\n",
                        "willReplaceOnChanges": true
                    },
                    "relativePath": {
                        "type": "string",
                        "description": "Relative path to the mounted file, without the /mnt/workspace/ prefix\n",
                        "willReplaceOnChanges": true
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack on which the mounted file is defined\n",
                        "willReplaceOnChanges": true
                    },
                    "writeOnly": {
                        "type": "boolean",
                        "description": "Indicates whether the content can be read back outside a Run. Defaults to `true`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/policy:Policy": {
            "description": "`spacelift.Policy` represents a Spacelift **policy** - a collection of customer-defined rules that are applied by Spacelift at one of the decision points within the application.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst no_weekend_deploysPolicy = new spacelift.Policy(\"no-weekend-deploysPolicy\", {\n    body: fs.readFileSync(`${path.module}/policies/no-weekend-deploys.rego`),\n    type: \"PLAN\",\n});\nconst core_infra_production = new spacelift.Stack(\"core-infra-production\", {\n    branch: \"master\",\n    repository: \"core-infra\",\n});\nconst no_weekend_deploysPolicyAttachment = new spacelift.PolicyAttachment(\"no-weekend-deploysPolicyAttachment\", {\n    policyId: no_weekend_deploysPolicy.id,\n    stackId: core_infra_production.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nno_weekend_deploys_policy = spacelift.Policy(\"no-weekend-deploysPolicy\",\n    body=(lambda path: open(path).read())(f\"{path['module']}/policies/no-weekend-deploys.rego\"),\n    type=\"PLAN\")\ncore_infra_production = spacelift.Stack(\"core-infra-production\",\n    branch=\"master\",\n    repository=\"core-infra\")\nno_weekend_deploys_policy_attachment = spacelift.PolicyAttachment(\"no-weekend-deploysPolicyAttachment\",\n    policy_id=no_weekend_deploys_policy.id,\n    stack_id=core_infra_production.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var no_weekend_deploysPolicy = new Spacelift.Policy(\"no-weekend-deploysPolicy\", new()\n    {\n        Body = File.ReadAllText($\"{path.Module}/policies/no-weekend-deploys.rego\"),\n        Type = \"PLAN\",\n    });\n\n    var core_infra_production = new Spacelift.Stack(\"core-infra-production\", new()\n    {\n        Branch = \"master\",\n        Repository = \"core-infra\",\n    });\n\n    var no_weekend_deploysPolicyAttachment = new Spacelift.PolicyAttachment(\"no-weekend-deploysPolicyAttachment\", new()\n    {\n        PolicyId = no_weekend_deploysPolicy.Id,\n        StackId = core_infra_production.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewPolicy(ctx, \"no-weekend-deploysPolicy\", \u0026spacelift.PolicyArgs{\n\t\t\tBody: readFileOrPanic(fmt.Sprintf(\"%v/policies/no-weekend-deploys.rego\", path.Module)),\n\t\t\tType: pulumi.String(\"PLAN\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"core-infra-production\", \u0026spacelift.StackArgs{\n\t\t\tBranch:     pulumi.String(\"master\"),\n\t\t\tRepository: pulumi.String(\"core-infra\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewPolicyAttachment(ctx, \"no-weekend-deploysPolicyAttachment\", \u0026spacelift.PolicyAttachmentArgs{\n\t\t\tPolicyId: no_weekend_deploysPolicy.ID(),\n\t\t\tStackId:  core_infra_production.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Policy;\nimport com.pulumi.spacelift.PolicyArgs;\nimport com.pulumi.spacelift.Stack;\nimport com.pulumi.spacelift.StackArgs;\nimport com.pulumi.spacelift.PolicyAttachment;\nimport com.pulumi.spacelift.PolicyAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var no_weekend_deploysPolicy = new Policy(\"no-weekend-deploysPolicy\", PolicyArgs.builder()        \n            .body(Files.readString(Paths.get(String.format(\"%s/policies/no-weekend-deploys.rego\", path.module()))))\n            .type(\"PLAN\")\n            .build());\n\n        var core_infra_production = new Stack(\"core-infra-production\", StackArgs.builder()        \n            .branch(\"master\")\n            .repository(\"core-infra\")\n            .build());\n\n        var no_weekend_deploysPolicyAttachment = new PolicyAttachment(\"no-weekend-deploysPolicyAttachment\", PolicyAttachmentArgs.builder()        \n            .policyId(no_weekend_deploysPolicy.id())\n            .stackId(core_infra_production.id())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/policy:Policy no-weekend-deploys $POLICY_ID\n```\n\n ",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "Body of the policy\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the policy - should be unique in one account\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the policy is in\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the policy. Possible values are `ACCESS`, `APPROVAL`, `GIT_PUSH`, `INITIALIZATION`, `LOGIN`, `PLAN`, `TASK`, and `TRIGGER`. Deprecated values are `STACK_ACCESS` (use `ACCESS` instead), `TASK_RUN` (use `TASK` instead), and `TERRAFORM_PLAN` (use `PLAN` instead).\n"
                }
            },
            "required": [
                "body",
                "name",
                "spaceId",
                "type"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "Body of the policy\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the policy - should be unique in one account\n",
                    "willReplaceOnChanges": true
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the policy is in\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the policy. Possible values are `ACCESS`, `APPROVAL`, `GIT_PUSH`, `INITIALIZATION`, `LOGIN`, `PLAN`, `TASK`, and `TRIGGER`. Deprecated values are `STACK_ACCESS` (use `ACCESS` instead), `TASK_RUN` (use `TASK` instead), and `TERRAFORM_PLAN` (use `PLAN` instead).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "body",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "Body of the policy\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the policy - should be unique in one account\n",
                        "willReplaceOnChanges": true
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the policy is in\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the policy. Possible values are `ACCESS`, `APPROVAL`, `GIT_PUSH`, `INITIALIZATION`, `LOGIN`, `PLAN`, `TASK`, and `TRIGGER`. Deprecated values are `STACK_ACCESS` (use `ACCESS` instead), `TASK_RUN` (use `TASK` instead), and `TERRAFORM_PLAN` (use `PLAN` instead).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/policyAttachment:PolicyAttachment": {
            "description": "`spacelift.PolicyAttachment` represents a relationship between a policy (`spacelift.Policy`) and a stack (`spacelift.Stack`) or module (`spacelift.Module`). Each policy can only be attached to a stack/module once. `LOGIN` policies are the exception because they apply globally and not to individual stacks/modules. An attempt to attach one will fail.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst no_weekend_deploysPolicy = new spacelift.Policy(\"no-weekend-deploysPolicy\", {\n    body: fs.readFileSync(\"policies/no-weekend-deploys.rego\"),\n    type: \"PLAN\",\n});\nconst core_infra_production = new spacelift.Stack(\"core-infra-production\", {\n    branch: \"master\",\n    repository: \"core-infra\",\n});\nconst no_weekend_deploysPolicyAttachment = new spacelift.PolicyAttachment(\"no-weekend-deploysPolicyAttachment\", {\n    policyId: no_weekend_deploysPolicy.id,\n    stackId: core_infra_production.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nno_weekend_deploys_policy = spacelift.Policy(\"no-weekend-deploysPolicy\",\n    body=(lambda path: open(path).read())(\"policies/no-weekend-deploys.rego\"),\n    type=\"PLAN\")\ncore_infra_production = spacelift.Stack(\"core-infra-production\",\n    branch=\"master\",\n    repository=\"core-infra\")\nno_weekend_deploys_policy_attachment = spacelift.PolicyAttachment(\"no-weekend-deploysPolicyAttachment\",\n    policy_id=no_weekend_deploys_policy.id,\n    stack_id=core_infra_production.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var no_weekend_deploysPolicy = new Spacelift.Policy(\"no-weekend-deploysPolicy\", new()\n    {\n        Body = File.ReadAllText(\"policies/no-weekend-deploys.rego\"),\n        Type = \"PLAN\",\n    });\n\n    var core_infra_production = new Spacelift.Stack(\"core-infra-production\", new()\n    {\n        Branch = \"master\",\n        Repository = \"core-infra\",\n    });\n\n    var no_weekend_deploysPolicyAttachment = new Spacelift.PolicyAttachment(\"no-weekend-deploysPolicyAttachment\", new()\n    {\n        PolicyId = no_weekend_deploysPolicy.Id,\n        StackId = core_infra_production.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewPolicy(ctx, \"no-weekend-deploysPolicy\", \u0026spacelift.PolicyArgs{\n\t\t\tBody: readFileOrPanic(\"policies/no-weekend-deploys.rego\"),\n\t\t\tType: pulumi.String(\"PLAN\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"core-infra-production\", \u0026spacelift.StackArgs{\n\t\t\tBranch:     pulumi.String(\"master\"),\n\t\t\tRepository: pulumi.String(\"core-infra\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewPolicyAttachment(ctx, \"no-weekend-deploysPolicyAttachment\", \u0026spacelift.PolicyAttachmentArgs{\n\t\t\tPolicyId: no_weekend_deploysPolicy.ID(),\n\t\t\tStackId:  core_infra_production.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Policy;\nimport com.pulumi.spacelift.PolicyArgs;\nimport com.pulumi.spacelift.Stack;\nimport com.pulumi.spacelift.StackArgs;\nimport com.pulumi.spacelift.PolicyAttachment;\nimport com.pulumi.spacelift.PolicyAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var no_weekend_deploysPolicy = new Policy(\"no-weekend-deploysPolicy\", PolicyArgs.builder()        \n            .body(Files.readString(Paths.get(\"policies/no-weekend-deploys.rego\")))\n            .type(\"PLAN\")\n            .build());\n\n        var core_infra_production = new Stack(\"core-infra-production\", StackArgs.builder()        \n            .branch(\"master\")\n            .repository(\"core-infra\")\n            .build());\n\n        var no_weekend_deploysPolicyAttachment = new PolicyAttachment(\"no-weekend-deploysPolicyAttachment\", PolicyAttachmentArgs.builder()        \n            .policyId(no_weekend_deploysPolicy.id())\n            .stackId(core_infra_production.id())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/policyAttachment:PolicyAttachment no-weekend-deploys $POLICY_ID/$STACK_ID\n```\n\n ",
            "properties": {
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module to attach the policy to\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "ID of the policy to attach\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to attach the policy to\n"
                }
            },
            "required": [
                "policyId"
            ],
            "inputProperties": {
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module to attach the policy to\n",
                    "willReplaceOnChanges": true
                },
                "policyId": {
                    "type": "string",
                    "description": "ID of the policy to attach\n",
                    "willReplaceOnChanges": true
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to attach the policy to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyAttachment resources.\n",
                "properties": {
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module to attach the policy to\n",
                        "willReplaceOnChanges": true
                    },
                    "policyId": {
                        "type": "string",
                        "description": "ID of the policy to attach\n",
                        "willReplaceOnChanges": true
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack to attach the policy to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/run:Run": {
            "description": "`spacelift.Run` allows programmatically triggering runs in response to arbitrary changes in the keepers section.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst thisStack = new spacelift.Stack(\"thisStack\", {\n    repository: \"test\",\n    branch: \"main\",\n});\nconst thisRun = new spacelift.Run(\"thisRun\", {\n    stackId: thisStack.id,\n    keepers: {\n        branch: thisStack.branch,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nthis_stack = spacelift.Stack(\"thisStack\",\n    repository=\"test\",\n    branch=\"main\")\nthis_run = spacelift.Run(\"thisRun\",\n    stack_id=this_stack.id,\n    keepers={\n        \"branch\": this_stack.branch,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var thisStack = new Spacelift.Stack(\"thisStack\", new()\n    {\n        Repository = \"test\",\n        Branch = \"main\",\n    });\n\n    var thisRun = new Spacelift.Run(\"thisRun\", new()\n    {\n        StackId = thisStack.Id,\n        Keepers = \n        {\n            { \"branch\", thisStack.Branch },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisStack, err := spacelift.NewStack(ctx, \"thisStack\", \u0026spacelift.StackArgs{\n\t\t\tRepository: pulumi.String(\"test\"),\n\t\t\tBranch:     pulumi.String(\"main\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewRun(ctx, \"thisRun\", \u0026spacelift.RunArgs{\n\t\t\tStackId: thisStack.ID(),\n\t\t\tKeepers: pulumi.AnyMap{\n\t\t\t\t\"branch\": thisStack.Branch,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Stack;\nimport com.pulumi.spacelift.StackArgs;\nimport com.pulumi.spacelift.Run;\nimport com.pulumi.spacelift.RunArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var thisStack = new Stack(\"thisStack\", StackArgs.builder()        \n            .repository(\"test\")\n            .branch(\"main\")\n            .build());\n\n        var thisRun = new Run(\"thisRun\", RunArgs.builder()        \n            .stackId(thisStack.id())\n            .keepers(Map.of(\"branch\", thisStack.branch()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  thisStack:\n    type: spacelift:Stack\n    properties:\n      repository: test\n      branch: main\n  thisRun:\n    type: spacelift:Run\n    properties:\n      stackId: ${thisStack.id}\n      keepers:\n        branch: ${thisStack.branch}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "commitSha": {
                    "type": "string",
                    "description": "The commit SHA for which to trigger a run.\n"
                },
                "keepers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Arbitrary map of values that, when changed, will trigger recreation of the resource.\n"
                },
                "proposed": {
                    "type": "boolean",
                    "description": "Whether the run is a proposed run. Defaults to `false`.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack on which the run is to be triggered.\n"
                }
            },
            "required": [
                "stackId"
            ],
            "inputProperties": {
                "commitSha": {
                    "type": "string",
                    "description": "The commit SHA for which to trigger a run.\n",
                    "willReplaceOnChanges": true
                },
                "keepers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Arbitrary map of values that, when changed, will trigger recreation of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "proposed": {
                    "type": "boolean",
                    "description": "Whether the run is a proposed run. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack on which the run is to be triggered.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "stackId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Run resources.\n",
                "properties": {
                    "commitSha": {
                        "type": "string",
                        "description": "The commit SHA for which to trigger a run.\n",
                        "willReplaceOnChanges": true
                    },
                    "keepers": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Arbitrary map of values that, when changed, will trigger recreation of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "proposed": {
                        "type": "boolean",
                        "description": "Whether the run is a proposed run. Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack on which the run is to be triggered.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/space:Space": {
            "description": "`spacelift.Space` represents a Spacelift **space** - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst development = new spacelift.Space(\"development\", {\n    parentSpaceId: \"root\",\n    description: \"This a child of the root space. It contains all the resources common to the development infrastructure.\",\n});\nconst development_frontend = new spacelift.Space(\"development-frontend\", {\n    parentSpaceId: development.id,\n    inheritEntities: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\ndevelopment = spacelift.Space(\"development\",\n    parent_space_id=\"root\",\n    description=\"This a child of the root space. It contains all the resources common to the development infrastructure.\")\ndevelopment_frontend = spacelift.Space(\"development-frontend\",\n    parent_space_id=development.id,\n    inherit_entities=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var development = new Spacelift.Space(\"development\", new()\n    {\n        ParentSpaceId = \"root\",\n        Description = \"This a child of the root space. It contains all the resources common to the development infrastructure.\",\n    });\n\n    var development_frontend = new Spacelift.Space(\"development-frontend\", new()\n    {\n        ParentSpaceId = development.Id,\n        InheritEntities = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdevelopment, err := spacelift.NewSpace(ctx, \"development\", \u0026spacelift.SpaceArgs{\n\t\t\tParentSpaceId: pulumi.String(\"root\"),\n\t\t\tDescription:   pulumi.String(\"This a child of the root space. It contains all the resources common to the development infrastructure.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewSpace(ctx, \"development-frontend\", \u0026spacelift.SpaceArgs{\n\t\t\tParentSpaceId:   development.ID(),\n\t\t\tInheritEntities: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Space;\nimport com.pulumi.spacelift.SpaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var development = new Space(\"development\", SpaceArgs.builder()        \n            .parentSpaceId(\"root\")\n            .description(\"This a child of the root space. It contains all the resources common to the development infrastructure.\")\n            .build());\n\n        var development_frontend = new Space(\"development-frontend\", SpaceArgs.builder()        \n            .parentSpaceId(development.id())\n            .inheritEntities(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  development:\n    type: spacelift:Space\n    properties:\n      # Every account has a root space that serves as the root for the space tree.\n      #   # Except for the root space, all the other spaces must define their parents.\n      parentSpaceId: root\n      # An optional description of a space.\n      description: This a child of the root space. It contains all the resources common to the development infrastructure.\n  development-frontend:\n    type: spacelift:Space\n    properties:\n      # This space will be a child of the development space.\n      parentSpaceId: ${development.id}\n      # An optional value, that gives this space a read access to all the entities that it's parent has access to.\n      inheritEntities: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/space:Space development $SPACE_ID\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "free-form space description for users\n"
                },
                "inheritEntities": {
                    "type": "boolean",
                    "description": "indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the space\n"
                },
                "parentSpaceId": {
                    "type": "string",
                    "description": "immutable ID (slug) of parent space. Defaults to `root`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "free-form space description for users\n"
                },
                "inheritEntities": {
                    "type": "boolean",
                    "description": "indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the space\n"
                },
                "parentSpaceId": {
                    "type": "string",
                    "description": "immutable ID (slug) of parent space. Defaults to `root`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Space resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "free-form space description for users\n"
                    },
                    "inheritEntities": {
                        "type": "boolean",
                        "description": "indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the space\n"
                    },
                    "parentSpaceId": {
                        "type": "string",
                        "description": "immutable ID (slug) of parent space. Defaults to `root`.\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/stack:Stack": {
            "description": "`spacelift.Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// Terraform stack using Bitbucket Cloud as VCS\nconst k8s_cluster_bitbucket_cloud = new spacelift.Stack(\"k8s-cluster-bitbucket-cloud\", {\n    administrative: true,\n    autodeploy: true,\n    bitbucketCloud: {\n        namespace: \"SPACELIFT\", // The Bitbucket project containing the repository\n    },\n    branch: \"master\",\n    description: \"Provisions a Kubernetes cluster\",\n    projectRoot: \"cluster\",\n    repository: \"core-infra\",\n    terraformVersion: \"0.12.6\",\n});\n// Terraform stack using Bitbucket Data Center as VCS\nconst k8s_cluster_bitbucket_datacenter = new spacelift.Stack(\"k8s-cluster-bitbucket-datacenter\", {\n    administrative: true,\n    autodeploy: true,\n    bitbucketDatacenter: {\n        namespace: \"SPACELIFT\", // The Bitbucket project containing the repository\n    },\n    branch: \"master\",\n    description: \"Provisions a Kubernetes cluster\",\n    projectRoot: \"cluster\",\n    repository: \"core-infra\",\n    terraformVersion: \"0.12.6\",\n});\n// Terraform stack using GitHub Enterprise as VCS\nconst k8s_cluster_github_enterprise = new spacelift.Stack(\"k8s-cluster-github-enterprise\", {\n    administrative: true,\n    autodeploy: true,\n    branch: \"master\",\n    description: \"Provisions a Kubernetes cluster\",\n    githubEnterprise: {\n        namespace: \"spacelift\", // The GitHub organization / user the repository belongs to\n    },\n    projectRoot: \"cluster\",\n    repository: \"core-infra\",\n    terraformVersion: \"0.12.6\",\n});\n// Terraform stack using GitLab as VCS\nconst k8s_cluster_gitlab = new spacelift.Stack(\"k8s-cluster-gitlab\", {\n    administrative: true,\n    autodeploy: true,\n    branch: \"master\",\n    description: \"Provisions a Kubernetes cluster\",\n    gitlab: {\n        namespace: \"spacelift\", // The GitLab namespace containing the repository\n    },\n    projectRoot: \"cluster\",\n    repository: \"core-infra\",\n    terraformVersion: \"0.12.6\",\n});\n// Terraform stack using github.com as VCS and enabling smart sanitization\nconst k8s_cluster = new spacelift.Stack(\"k8s-cluster\", {\n    administrative: true,\n    autodeploy: true,\n    branch: \"master\",\n    description: \"Provisions a Kubernetes cluster\",\n    projectRoot: \"cluster\",\n    repository: \"core-infra\",\n    terraformSmartSanitization: true,\n    terraformVersion: \"1.2.6\",\n});\n// CloudFormation stack using github.com as VCS\nconst k8s_cluster_cloudformation = new spacelift.Stack(\"k8s-cluster-cloudformation\", {\n    autodeploy: true,\n    branch: \"master\",\n    cloudformation: {\n        entryTemplateFile: \"main.yaml\",\n        region: \"eu-central-1\",\n        stackName: \"k8s-cluster\",\n        templateBucket: \"s3://bucket\",\n    },\n    description: \"Provisions a Kubernetes cluster\",\n    projectRoot: \"cluster\",\n    repository: \"core-infra\",\n});\n// Pulumi stack using github.com as VCS\nconst k8s_cluster_pulumi = new spacelift.Stack(\"k8s-cluster-pulumi\", {\n    autodeploy: true,\n    branch: \"master\",\n    description: \"Provisions a Kubernetes cluster\",\n    projectRoot: \"cluster\",\n    pulumi: {\n        loginUrl: \"s3://pulumi-state-bucket\",\n        stackName: \"kubernetes-core-services\",\n    },\n    repository: \"core-infra\",\n    runnerImage: \"public.ecr.aws/t0p9w2l5/runner-pulumi-javascript:latest\",\n});\n// Kubernetes stack using github.com as VCS\nconst k8s_core_kubernetes = new spacelift.Stack(\"k8s-core-kubernetes\", {\n    autodeploy: true,\n    // You can use hooks to authenticate with your cluster\n    beforeInits: [\"aws eks update-kubeconfig --region us-east-2 --name k8s-cluster\"],\n    branch: \"master\",\n    description: \"Shared cluster services (Datadog, Istio etc.)\",\n    kubernetes: {\n        namespace: \"core\",\n    },\n    projectRoot: \"core-services\",\n    repository: \"core-infra\",\n});\n// Ansible stack using github.com as VCS\nconst ansible_stack = new spacelift.Stack(\"ansible-stack\", {\n    ansible: {\n        playbook: \"main.yml\",\n    },\n    autodeploy: true,\n    branch: \"master\",\n    description: \"Provisioning EC2 machines\",\n    repository: \"ansible-playbooks\",\n    runnerImage: \"public.ecr.aws/spacelift/runner-ansible:latest\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\n# Terraform stack using Bitbucket Cloud as VCS\nk8s_cluster_bitbucket_cloud = spacelift.Stack(\"k8s-cluster-bitbucket-cloud\",\n    administrative=True,\n    autodeploy=True,\n    bitbucket_cloud=spacelift.StackBitbucketCloudArgs(\n        namespace=\"SPACELIFT\",\n    ),\n    branch=\"master\",\n    description=\"Provisions a Kubernetes cluster\",\n    project_root=\"cluster\",\n    repository=\"core-infra\",\n    terraform_version=\"0.12.6\")\n# Terraform stack using Bitbucket Data Center as VCS\nk8s_cluster_bitbucket_datacenter = spacelift.Stack(\"k8s-cluster-bitbucket-datacenter\",\n    administrative=True,\n    autodeploy=True,\n    bitbucket_datacenter=spacelift.StackBitbucketDatacenterArgs(\n        namespace=\"SPACELIFT\",\n    ),\n    branch=\"master\",\n    description=\"Provisions a Kubernetes cluster\",\n    project_root=\"cluster\",\n    repository=\"core-infra\",\n    terraform_version=\"0.12.6\")\n# Terraform stack using GitHub Enterprise as VCS\nk8s_cluster_github_enterprise = spacelift.Stack(\"k8s-cluster-github-enterprise\",\n    administrative=True,\n    autodeploy=True,\n    branch=\"master\",\n    description=\"Provisions a Kubernetes cluster\",\n    github_enterprise=spacelift.StackGithubEnterpriseArgs(\n        namespace=\"spacelift\",\n    ),\n    project_root=\"cluster\",\n    repository=\"core-infra\",\n    terraform_version=\"0.12.6\")\n# Terraform stack using GitLab as VCS\nk8s_cluster_gitlab = spacelift.Stack(\"k8s-cluster-gitlab\",\n    administrative=True,\n    autodeploy=True,\n    branch=\"master\",\n    description=\"Provisions a Kubernetes cluster\",\n    gitlab=spacelift.StackGitlabArgs(\n        namespace=\"spacelift\",\n    ),\n    project_root=\"cluster\",\n    repository=\"core-infra\",\n    terraform_version=\"0.12.6\")\n# Terraform stack using github.com as VCS and enabling smart sanitization\nk8s_cluster = spacelift.Stack(\"k8s-cluster\",\n    administrative=True,\n    autodeploy=True,\n    branch=\"master\",\n    description=\"Provisions a Kubernetes cluster\",\n    project_root=\"cluster\",\n    repository=\"core-infra\",\n    terraform_smart_sanitization=True,\n    terraform_version=\"1.2.6\")\n# CloudFormation stack using github.com as VCS\nk8s_cluster_cloudformation = spacelift.Stack(\"k8s-cluster-cloudformation\",\n    autodeploy=True,\n    branch=\"master\",\n    cloudformation=spacelift.StackCloudformationArgs(\n        entry_template_file=\"main.yaml\",\n        region=\"eu-central-1\",\n        stack_name=\"k8s-cluster\",\n        template_bucket=\"s3://bucket\",\n    ),\n    description=\"Provisions a Kubernetes cluster\",\n    project_root=\"cluster\",\n    repository=\"core-infra\")\n# Pulumi stack using github.com as VCS\nk8s_cluster_pulumi = spacelift.Stack(\"k8s-cluster-pulumi\",\n    autodeploy=True,\n    branch=\"master\",\n    description=\"Provisions a Kubernetes cluster\",\n    project_root=\"cluster\",\n    pulumi=spacelift.StackPulumiArgs(\n        login_url=\"s3://pulumi-state-bucket\",\n        stack_name=\"kubernetes-core-services\",\n    ),\n    repository=\"core-infra\",\n    runner_image=\"public.ecr.aws/t0p9w2l5/runner-pulumi-javascript:latest\")\n# Kubernetes stack using github.com as VCS\nk8s_core_kubernetes = spacelift.Stack(\"k8s-core-kubernetes\",\n    autodeploy=True,\n    before_inits=[\"aws eks update-kubeconfig --region us-east-2 --name k8s-cluster\"],\n    branch=\"master\",\n    description=\"Shared cluster services (Datadog, Istio etc.)\",\n    kubernetes=spacelift.StackKubernetesArgs(\n        namespace=\"core\",\n    ),\n    project_root=\"core-services\",\n    repository=\"core-infra\")\n# Ansible stack using github.com as VCS\nansible_stack = spacelift.Stack(\"ansible-stack\",\n    ansible=spacelift.StackAnsibleArgs(\n        playbook=\"main.yml\",\n    ),\n    autodeploy=True,\n    branch=\"master\",\n    description=\"Provisioning EC2 machines\",\n    repository=\"ansible-playbooks\",\n    runner_image=\"public.ecr.aws/spacelift/runner-ansible:latest\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Terraform stack using Bitbucket Cloud as VCS\n    var k8s_cluster_bitbucket_cloud = new Spacelift.Stack(\"k8s-cluster-bitbucket-cloud\", new()\n    {\n        Administrative = true,\n        Autodeploy = true,\n        BitbucketCloud = new Spacelift.Inputs.StackBitbucketCloudArgs\n        {\n            Namespace = \"SPACELIFT\",\n        },\n        Branch = \"master\",\n        Description = \"Provisions a Kubernetes cluster\",\n        ProjectRoot = \"cluster\",\n        Repository = \"core-infra\",\n        TerraformVersion = \"0.12.6\",\n    });\n\n    // Terraform stack using Bitbucket Data Center as VCS\n    var k8s_cluster_bitbucket_datacenter = new Spacelift.Stack(\"k8s-cluster-bitbucket-datacenter\", new()\n    {\n        Administrative = true,\n        Autodeploy = true,\n        BitbucketDatacenter = new Spacelift.Inputs.StackBitbucketDatacenterArgs\n        {\n            Namespace = \"SPACELIFT\",\n        },\n        Branch = \"master\",\n        Description = \"Provisions a Kubernetes cluster\",\n        ProjectRoot = \"cluster\",\n        Repository = \"core-infra\",\n        TerraformVersion = \"0.12.6\",\n    });\n\n    // Terraform stack using GitHub Enterprise as VCS\n    var k8s_cluster_github_enterprise = new Spacelift.Stack(\"k8s-cluster-github-enterprise\", new()\n    {\n        Administrative = true,\n        Autodeploy = true,\n        Branch = \"master\",\n        Description = \"Provisions a Kubernetes cluster\",\n        GithubEnterprise = new Spacelift.Inputs.StackGithubEnterpriseArgs\n        {\n            Namespace = \"spacelift\",\n        },\n        ProjectRoot = \"cluster\",\n        Repository = \"core-infra\",\n        TerraformVersion = \"0.12.6\",\n    });\n\n    // Terraform stack using GitLab as VCS\n    var k8s_cluster_gitlab = new Spacelift.Stack(\"k8s-cluster-gitlab\", new()\n    {\n        Administrative = true,\n        Autodeploy = true,\n        Branch = \"master\",\n        Description = \"Provisions a Kubernetes cluster\",\n        Gitlab = new Spacelift.Inputs.StackGitlabArgs\n        {\n            Namespace = \"spacelift\",\n        },\n        ProjectRoot = \"cluster\",\n        Repository = \"core-infra\",\n        TerraformVersion = \"0.12.6\",\n    });\n\n    // Terraform stack using github.com as VCS and enabling smart sanitization\n    var k8s_cluster = new Spacelift.Stack(\"k8s-cluster\", new()\n    {\n        Administrative = true,\n        Autodeploy = true,\n        Branch = \"master\",\n        Description = \"Provisions a Kubernetes cluster\",\n        ProjectRoot = \"cluster\",\n        Repository = \"core-infra\",\n        TerraformSmartSanitization = true,\n        TerraformVersion = \"1.2.6\",\n    });\n\n    // CloudFormation stack using github.com as VCS\n    var k8s_cluster_cloudformation = new Spacelift.Stack(\"k8s-cluster-cloudformation\", new()\n    {\n        Autodeploy = true,\n        Branch = \"master\",\n        Cloudformation = new Spacelift.Inputs.StackCloudformationArgs\n        {\n            EntryTemplateFile = \"main.yaml\",\n            Region = \"eu-central-1\",\n            StackName = \"k8s-cluster\",\n            TemplateBucket = \"s3://bucket\",\n        },\n        Description = \"Provisions a Kubernetes cluster\",\n        ProjectRoot = \"cluster\",\n        Repository = \"core-infra\",\n    });\n\n    // Pulumi stack using github.com as VCS\n    var k8s_cluster_pulumi = new Spacelift.Stack(\"k8s-cluster-pulumi\", new()\n    {\n        Autodeploy = true,\n        Branch = \"master\",\n        Description = \"Provisions a Kubernetes cluster\",\n        ProjectRoot = \"cluster\",\n        CSHARPPULUMI = new Spacelift.Inputs.StackPulumiArgs\n        {\n            LoginUrl = \"s3://pulumi-state-bucket\",\n            StackName = \"kubernetes-core-services\",\n        },\n        Repository = \"core-infra\",\n        RunnerImage = \"public.ecr.aws/t0p9w2l5/runner-pulumi-javascript:latest\",\n    });\n\n    // Kubernetes stack using github.com as VCS\n    var k8s_core_kubernetes = new Spacelift.Stack(\"k8s-core-kubernetes\", new()\n    {\n        Autodeploy = true,\n        BeforeInits = new[]\n        {\n            \"aws eks update-kubeconfig --region us-east-2 --name k8s-cluster\",\n        },\n        Branch = \"master\",\n        Description = \"Shared cluster services (Datadog, Istio etc.)\",\n        Kubernetes = new Spacelift.Inputs.StackKubernetesArgs\n        {\n            Namespace = \"core\",\n        },\n        ProjectRoot = \"core-services\",\n        Repository = \"core-infra\",\n    });\n\n    // Ansible stack using github.com as VCS\n    var ansible_stack = new Spacelift.Stack(\"ansible-stack\", new()\n    {\n        Ansible = new Spacelift.Inputs.StackAnsibleArgs\n        {\n            Playbook = \"main.yml\",\n        },\n        Autodeploy = true,\n        Branch = \"master\",\n        Description = \"Provisioning EC2 machines\",\n        Repository = \"ansible-playbooks\",\n        RunnerImage = \"public.ecr.aws/spacelift/runner-ansible:latest\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewStack(ctx, \"k8s-cluster-bitbucket-cloud\", \u0026spacelift.StackArgs{\n\t\t\tAdministrative: pulumi.Bool(true),\n\t\t\tAutodeploy:     pulumi.Bool(true),\n\t\t\tBitbucketCloud: \u0026StackBitbucketCloudArgs{\n\t\t\t\tNamespace: pulumi.String(\"SPACELIFT\"),\n\t\t\t},\n\t\t\tBranch:           pulumi.String(\"master\"),\n\t\t\tDescription:      pulumi.String(\"Provisions a Kubernetes cluster\"),\n\t\t\tProjectRoot:      pulumi.String(\"cluster\"),\n\t\t\tRepository:       pulumi.String(\"core-infra\"),\n\t\t\tTerraformVersion: pulumi.String(\"0.12.6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"k8s-cluster-bitbucket-datacenter\", \u0026spacelift.StackArgs{\n\t\t\tAdministrative: pulumi.Bool(true),\n\t\t\tAutodeploy:     pulumi.Bool(true),\n\t\t\tBitbucketDatacenter: \u0026StackBitbucketDatacenterArgs{\n\t\t\t\tNamespace: pulumi.String(\"SPACELIFT\"),\n\t\t\t},\n\t\t\tBranch:           pulumi.String(\"master\"),\n\t\t\tDescription:      pulumi.String(\"Provisions a Kubernetes cluster\"),\n\t\t\tProjectRoot:      pulumi.String(\"cluster\"),\n\t\t\tRepository:       pulumi.String(\"core-infra\"),\n\t\t\tTerraformVersion: pulumi.String(\"0.12.6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"k8s-cluster-github-enterprise\", \u0026spacelift.StackArgs{\n\t\t\tAdministrative: pulumi.Bool(true),\n\t\t\tAutodeploy:     pulumi.Bool(true),\n\t\t\tBranch:         pulumi.String(\"master\"),\n\t\t\tDescription:    pulumi.String(\"Provisions a Kubernetes cluster\"),\n\t\t\tGithubEnterprise: \u0026StackGithubEnterpriseArgs{\n\t\t\t\tNamespace: pulumi.String(\"spacelift\"),\n\t\t\t},\n\t\t\tProjectRoot:      pulumi.String(\"cluster\"),\n\t\t\tRepository:       pulumi.String(\"core-infra\"),\n\t\t\tTerraformVersion: pulumi.String(\"0.12.6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"k8s-cluster-gitlab\", \u0026spacelift.StackArgs{\n\t\t\tAdministrative: pulumi.Bool(true),\n\t\t\tAutodeploy:     pulumi.Bool(true),\n\t\t\tBranch:         pulumi.String(\"master\"),\n\t\t\tDescription:    pulumi.String(\"Provisions a Kubernetes cluster\"),\n\t\t\tGitlab: \u0026StackGitlabArgs{\n\t\t\t\tNamespace: pulumi.String(\"spacelift\"),\n\t\t\t},\n\t\t\tProjectRoot:      pulumi.String(\"cluster\"),\n\t\t\tRepository:       pulumi.String(\"core-infra\"),\n\t\t\tTerraformVersion: pulumi.String(\"0.12.6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"k8s-cluster\", \u0026spacelift.StackArgs{\n\t\t\tAdministrative:             pulumi.Bool(true),\n\t\t\tAutodeploy:                 pulumi.Bool(true),\n\t\t\tBranch:                     pulumi.String(\"master\"),\n\t\t\tDescription:                pulumi.String(\"Provisions a Kubernetes cluster\"),\n\t\t\tProjectRoot:                pulumi.String(\"cluster\"),\n\t\t\tRepository:                 pulumi.String(\"core-infra\"),\n\t\t\tTerraformSmartSanitization: pulumi.Bool(true),\n\t\t\tTerraformVersion:           pulumi.String(\"1.2.6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"k8s-cluster-cloudformation\", \u0026spacelift.StackArgs{\n\t\t\tAutodeploy: pulumi.Bool(true),\n\t\t\tBranch:     pulumi.String(\"master\"),\n\t\t\tCloudformation: \u0026StackCloudformationArgs{\n\t\t\t\tEntryTemplateFile: pulumi.String(\"main.yaml\"),\n\t\t\t\tRegion:            pulumi.String(\"eu-central-1\"),\n\t\t\t\tStackName:         pulumi.String(\"k8s-cluster\"),\n\t\t\t\tTemplateBucket:    pulumi.String(\"s3://bucket\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Provisions a Kubernetes cluster\"),\n\t\t\tProjectRoot: pulumi.String(\"cluster\"),\n\t\t\tRepository:  pulumi.String(\"core-infra\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"k8s-cluster-pulumi\", \u0026spacelift.StackArgs{\n\t\t\tAutodeploy:  pulumi.Bool(true),\n\t\t\tBranch:      pulumi.String(\"master\"),\n\t\t\tDescription: pulumi.String(\"Provisions a Kubernetes cluster\"),\n\t\t\tProjectRoot: pulumi.String(\"cluster\"),\n\t\t\tPulumi: \u0026StackPulumiArgs{\n\t\t\t\tLoginUrl:  pulumi.String(\"s3://pulumi-state-bucket\"),\n\t\t\t\tStackName: pulumi.String(\"kubernetes-core-services\"),\n\t\t\t},\n\t\t\tRepository:  pulumi.String(\"core-infra\"),\n\t\t\tRunnerImage: pulumi.String(\"public.ecr.aws/t0p9w2l5/runner-pulumi-javascript:latest\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"k8s-core-kubernetes\", \u0026spacelift.StackArgs{\n\t\t\tAutodeploy: pulumi.Bool(true),\n\t\t\tBeforeInits: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"aws eks update-kubeconfig --region us-east-2 --name k8s-cluster\"),\n\t\t\t},\n\t\t\tBranch:      pulumi.String(\"master\"),\n\t\t\tDescription: pulumi.String(\"Shared cluster services (Datadog, Istio etc.)\"),\n\t\t\tKubernetes: \u0026StackKubernetesArgs{\n\t\t\t\tNamespace: pulumi.String(\"core\"),\n\t\t\t},\n\t\t\tProjectRoot: pulumi.String(\"core-services\"),\n\t\t\tRepository:  pulumi.String(\"core-infra\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStack(ctx, \"ansible-stack\", \u0026spacelift.StackArgs{\n\t\t\tAnsible: \u0026StackAnsibleArgs{\n\t\t\t\tPlaybook: pulumi.String(\"main.yml\"),\n\t\t\t},\n\t\t\tAutodeploy:  pulumi.Bool(true),\n\t\t\tBranch:      pulumi.String(\"master\"),\n\t\t\tDescription: pulumi.String(\"Provisioning EC2 machines\"),\n\t\t\tRepository:  pulumi.String(\"ansible-playbooks\"),\n\t\t\tRunnerImage: pulumi.String(\"public.ecr.aws/spacelift/runner-ansible:latest\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Stack;\nimport com.pulumi.spacelift.StackArgs;\nimport com.pulumi.spacelift.inputs.StackBitbucketCloudArgs;\nimport com.pulumi.spacelift.inputs.StackBitbucketDatacenterArgs;\nimport com.pulumi.spacelift.inputs.StackGithubEnterpriseArgs;\nimport com.pulumi.spacelift.inputs.StackGitlabArgs;\nimport com.pulumi.spacelift.inputs.StackCloudformationArgs;\nimport com.pulumi.spacelift.inputs.StackPulumiArgs;\nimport com.pulumi.spacelift.inputs.StackKubernetesArgs;\nimport com.pulumi.spacelift.inputs.StackAnsibleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var k8s_cluster_bitbucket_cloud = new Stack(\"k8s-cluster-bitbucket-cloud\", StackArgs.builder()        \n            .administrative(true)\n            .autodeploy(true)\n            .bitbucketCloud(StackBitbucketCloudArgs.builder()\n                .namespace(\"SPACELIFT\")\n                .build())\n            .branch(\"master\")\n            .description(\"Provisions a Kubernetes cluster\")\n            .projectRoot(\"cluster\")\n            .repository(\"core-infra\")\n            .terraformVersion(\"0.12.6\")\n            .build());\n\n        var k8s_cluster_bitbucket_datacenter = new Stack(\"k8s-cluster-bitbucket-datacenter\", StackArgs.builder()        \n            .administrative(true)\n            .autodeploy(true)\n            .bitbucketDatacenter(StackBitbucketDatacenterArgs.builder()\n                .namespace(\"SPACELIFT\")\n                .build())\n            .branch(\"master\")\n            .description(\"Provisions a Kubernetes cluster\")\n            .projectRoot(\"cluster\")\n            .repository(\"core-infra\")\n            .terraformVersion(\"0.12.6\")\n            .build());\n\n        var k8s_cluster_github_enterprise = new Stack(\"k8s-cluster-github-enterprise\", StackArgs.builder()        \n            .administrative(true)\n            .autodeploy(true)\n            .branch(\"master\")\n            .description(\"Provisions a Kubernetes cluster\")\n            .githubEnterprise(StackGithubEnterpriseArgs.builder()\n                .namespace(\"spacelift\")\n                .build())\n            .projectRoot(\"cluster\")\n            .repository(\"core-infra\")\n            .terraformVersion(\"0.12.6\")\n            .build());\n\n        var k8s_cluster_gitlab = new Stack(\"k8s-cluster-gitlab\", StackArgs.builder()        \n            .administrative(true)\n            .autodeploy(true)\n            .branch(\"master\")\n            .description(\"Provisions a Kubernetes cluster\")\n            .gitlab(StackGitlabArgs.builder()\n                .namespace(\"spacelift\")\n                .build())\n            .projectRoot(\"cluster\")\n            .repository(\"core-infra\")\n            .terraformVersion(\"0.12.6\")\n            .build());\n\n        var k8s_cluster = new Stack(\"k8s-cluster\", StackArgs.builder()        \n            .administrative(true)\n            .autodeploy(true)\n            .branch(\"master\")\n            .description(\"Provisions a Kubernetes cluster\")\n            .projectRoot(\"cluster\")\n            .repository(\"core-infra\")\n            .terraformSmartSanitization(true)\n            .terraformVersion(\"1.2.6\")\n            .build());\n\n        var k8s_cluster_cloudformation = new Stack(\"k8s-cluster-cloudformation\", StackArgs.builder()        \n            .autodeploy(true)\n            .branch(\"master\")\n            .cloudformation(StackCloudformationArgs.builder()\n                .entryTemplateFile(\"main.yaml\")\n                .region(\"eu-central-1\")\n                .stackName(\"k8s-cluster\")\n                .templateBucket(\"s3://bucket\")\n                .build())\n            .description(\"Provisions a Kubernetes cluster\")\n            .projectRoot(\"cluster\")\n            .repository(\"core-infra\")\n            .build());\n\n        var k8s_cluster_pulumi = new Stack(\"k8s-cluster-pulumi\", StackArgs.builder()        \n            .autodeploy(true)\n            .branch(\"master\")\n            .description(\"Provisions a Kubernetes cluster\")\n            .projectRoot(\"cluster\")\n            .pulumi(StackPulumiArgs.builder()\n                .loginUrl(\"s3://pulumi-state-bucket\")\n                .stackName(\"kubernetes-core-services\")\n                .build())\n            .repository(\"core-infra\")\n            .runnerImage(\"public.ecr.aws/t0p9w2l5/runner-pulumi-javascript:latest\")\n            .build());\n\n        var k8s_core_kubernetes = new Stack(\"k8s-core-kubernetes\", StackArgs.builder()        \n            .autodeploy(true)\n            .beforeInits(\"aws eks update-kubeconfig --region us-east-2 --name k8s-cluster\")\n            .branch(\"master\")\n            .description(\"Shared cluster services (Datadog, Istio etc.)\")\n            .kubernetes(StackKubernetesArgs.builder()\n                .namespace(\"core\")\n                .build())\n            .projectRoot(\"core-services\")\n            .repository(\"core-infra\")\n            .build());\n\n        var ansible_stack = new Stack(\"ansible-stack\", StackArgs.builder()        \n            .ansible(StackAnsibleArgs.builder()\n                .playbook(\"main.yml\")\n                .build())\n            .autodeploy(true)\n            .branch(\"master\")\n            .description(\"Provisioning EC2 machines\")\n            .repository(\"ansible-playbooks\")\n            .runnerImage(\"public.ecr.aws/spacelift/runner-ansible:latest\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Terraform stack using Bitbucket Cloud as VCS\n  k8s-cluster-bitbucket-cloud:\n    type: spacelift:Stack\n    properties:\n      administrative: true\n      autodeploy: true\n      bitbucketCloud:\n        namespace: SPACELIFT\n      branch: master\n      description: Provisions a Kubernetes cluster\n      projectRoot: cluster\n      repository: core-infra\n      terraformVersion: 0.12.6\n  # Terraform stack using Bitbucket Data Center as VCS\n  k8s-cluster-bitbucket-datacenter:\n    type: spacelift:Stack\n    properties:\n      administrative: true\n      autodeploy: true\n      bitbucketDatacenter:\n        namespace: SPACELIFT\n      branch: master\n      description: Provisions a Kubernetes cluster\n      projectRoot: cluster\n      repository: core-infra\n      terraformVersion: 0.12.6\n  # Terraform stack using GitHub Enterprise as VCS\n  k8s-cluster-github-enterprise:\n    type: spacelift:Stack\n    properties:\n      administrative: true\n      autodeploy: true\n      branch: master\n      description: Provisions a Kubernetes cluster\n      githubEnterprise:\n        namespace: spacelift\n      projectRoot: cluster\n      repository: core-infra\n      terraformVersion: 0.12.6\n  # Terraform stack using GitLab as VCS\n  k8s-cluster-gitlab:\n    type: spacelift:Stack\n    properties:\n      administrative: true\n      autodeploy: true\n      branch: master\n      description: Provisions a Kubernetes cluster\n      gitlab:\n        namespace: spacelift\n      projectRoot: cluster\n      repository: core-infra\n      terraformVersion: 0.12.6\n  # Terraform stack using github.com as VCS and enabling smart sanitization\n  k8s-cluster:\n    type: spacelift:Stack\n    properties:\n      administrative: true\n      autodeploy: true\n      branch: master\n      description: Provisions a Kubernetes cluster\n      projectRoot: cluster\n      repository: core-infra\n      terraformSmartSanitization: true\n      terraformVersion: 1.2.6\n  # CloudFormation stack using github.com as VCS\n  k8s-cluster-cloudformation:\n    type: spacelift:Stack\n    properties:\n      autodeploy: true\n      branch: master\n      cloudformation:\n        entryTemplateFile: main.yaml\n        region: eu-central-1\n        stackName: k8s-cluster\n        templateBucket: s3://bucket\n      description: Provisions a Kubernetes cluster\n      projectRoot: cluster\n      repository: core-infra\n  # Pulumi stack using github.com as VCS\n  k8s-cluster-pulumi:\n    type: spacelift:Stack\n    properties:\n      autodeploy: true\n      branch: master\n      description: Provisions a Kubernetes cluster\n      projectRoot: cluster\n      pulumi:\n        loginUrl: s3://pulumi-state-bucket\n        stackName: kubernetes-core-services\n      repository: core-infra\n      runnerImage: public.ecr.aws/t0p9w2l5/runner-pulumi-javascript:latest\n  # Kubernetes stack using github.com as VCS\n  k8s-core-kubernetes:\n    type: spacelift:Stack\n    properties:\n      autodeploy: true\n      # You can use hooks to authenticate with your cluster\n      beforeInits:\n        - aws eks update-kubeconfig --region us-east-2 --name k8s-cluster\n      branch: master\n      description: Shared cluster services (Datadog, Istio etc.)\n      kubernetes:\n        namespace: core\n      projectRoot: core-services\n      repository: core-infra\n  # Ansible stack using github.com as VCS\n  ansible-stack:\n    type: spacelift:Stack\n    properties:\n      ansible:\n        playbook: main.yml\n      autodeploy: true\n      branch: master\n      description: Provisioning EC2 machines\n      repository: ansible-playbooks\n      runnerImage: public.ecr.aws/spacelift/runner-ansible:latest\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/stack:Stack k8s_core $STACK_ID\n```\n\n ",
            "properties": {
                "administrative": {
                    "type": "boolean",
                    "description": "Indicates whether this stack can manage others. Defaults to `false`.\n"
                },
                "afterApplies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-apply scripts\n"
                },
                "afterDestroys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-destroy scripts\n"
                },
                "afterInits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-init scripts\n"
                },
                "afterPerforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-perform scripts\n"
                },
                "afterPlans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-plan scripts\n"
                },
                "ansible": {
                    "$ref": "#/types/spacelift:index/StackAnsible:StackAnsible",
                    "description": "Ansible-specific configuration. Presence means this Stack is an Ansible Stack.\n"
                },
                "autodeploy": {
                    "type": "boolean",
                    "description": "Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.\n"
                },
                "autoretry": {
                    "type": "boolean",
                    "description": "Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.\n"
                },
                "awsAssumeRolePolicyStatement": {
                    "type": "string",
                    "description": "AWS IAM assume role policy statement setting up trust relationship\n"
                },
                "azureDevops": {
                    "$ref": "#/types/spacelift:index/StackAzureDevops:StackAzureDevops",
                    "description": "Azure DevOps VCS settings\n"
                },
                "beforeApplies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-apply scripts\n"
                },
                "beforeDestroys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-destroy scripts\n"
                },
                "beforeInits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-init scripts\n"
                },
                "beforePerforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-perform scripts\n"
                },
                "beforePlans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-plan scripts\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/spacelift:index/StackBitbucketCloud:StackBitbucketCloud",
                    "description": "Bitbucket Cloud VCS settings\n"
                },
                "bitbucketDatacenter": {
                    "$ref": "#/types/spacelift:index/StackBitbucketDatacenter:StackBitbucketDatacenter",
                    "description": "Bitbucket Datacenter VCS settings\n"
                },
                "branch": {
                    "type": "string",
                    "description": "GitHub branch to apply changes to\n"
                },
                "cloudformation": {
                    "$ref": "#/types/spacelift:index/StackCloudformation:StackCloudformation",
                    "description": "CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Free-form stack description for users\n"
                },
                "enableLocalPreview": {
                    "type": "boolean",
                    "description": "Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.\n"
                },
                "githubActionDeploy": {
                    "type": "boolean",
                    "description": "Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.\n"
                },
                "githubEnterprise": {
                    "$ref": "#/types/spacelift:index/StackGithubEnterprise:StackGithubEnterprise",
                    "description": "GitHub Enterprise (self-hosted) VCS settings\n"
                },
                "gitlab": {
                    "$ref": "#/types/spacelift:index/StackGitlab:StackGitlab",
                    "description": "GitLab VCS settings\n"
                },
                "importState": {
                    "type": "string",
                    "description": "State file to upload when creating a new stack\n"
                },
                "importStateFile": {
                    "type": "string",
                    "description": "Path to the state file to upload when creating a new stack\n"
                },
                "kubernetes": {
                    "$ref": "#/types/spacelift:index/StackKubernetes:StackKubernetes",
                    "description": "Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "manageState": {
                    "type": "boolean",
                    "description": "Determines if Spacelift should manage state for this stack. Defaults to `true`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the stack - should be unique in one account\n"
                },
                "projectRoot": {
                    "type": "string",
                    "description": "Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.\n"
                },
                "protectFromDeletion": {
                    "type": "boolean",
                    "description": "Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.\n"
                },
                "pulumi": {
                    "$ref": "#/types/spacelift:index/StackPulumi:StackPulumi",
                    "description": "Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.\n",
                    "language": {
                        "csharp": {
                            "name": "CSHARPPULUMI"
                        }
                    }
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository, without the owner part\n"
                },
                "runnerImage": {
                    "type": "string",
                    "description": "Name of the Docker image used to process Runs\n"
                },
                "showcase": {
                    "$ref": "#/types/spacelift:index/StackShowcase:StackShowcase"
                },
                "slug": {
                    "type": "string",
                    "description": "Allows setting the custom ID (slug) for the stack\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the stack is in\n"
                },
                "terraformSmartSanitization": {
                    "type": "boolean",
                    "description": "Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state\nand plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.\nDefaults to `false`.\n"
                },
                "terraformVersion": {
                    "type": "string",
                    "description": "Terraform version to use\n"
                },
                "terraformWorkspace": {
                    "type": "string",
                    "description": "Terraform workspace to select\n"
                },
                "workerPoolId": {
                    "type": "string",
                    "description": "ID of the worker pool to use\n"
                }
            },
            "required": [
                "awsAssumeRolePolicyStatement",
                "branch",
                "name",
                "repository",
                "slug",
                "spaceId"
            ],
            "inputProperties": {
                "administrative": {
                    "type": "boolean",
                    "description": "Indicates whether this stack can manage others. Defaults to `false`.\n"
                },
                "afterApplies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-apply scripts\n"
                },
                "afterDestroys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-destroy scripts\n"
                },
                "afterInits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-init scripts\n"
                },
                "afterPerforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-perform scripts\n"
                },
                "afterPlans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of after-plan scripts\n"
                },
                "ansible": {
                    "$ref": "#/types/spacelift:index/StackAnsible:StackAnsible",
                    "description": "Ansible-specific configuration. Presence means this Stack is an Ansible Stack.\n"
                },
                "autodeploy": {
                    "type": "boolean",
                    "description": "Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.\n"
                },
                "autoretry": {
                    "type": "boolean",
                    "description": "Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.\n"
                },
                "azureDevops": {
                    "$ref": "#/types/spacelift:index/StackAzureDevops:StackAzureDevops",
                    "description": "Azure DevOps VCS settings\n"
                },
                "beforeApplies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-apply scripts\n"
                },
                "beforeDestroys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-destroy scripts\n"
                },
                "beforeInits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-init scripts\n"
                },
                "beforePerforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-perform scripts\n"
                },
                "beforePlans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of before-plan scripts\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/spacelift:index/StackBitbucketCloud:StackBitbucketCloud",
                    "description": "Bitbucket Cloud VCS settings\n"
                },
                "bitbucketDatacenter": {
                    "$ref": "#/types/spacelift:index/StackBitbucketDatacenter:StackBitbucketDatacenter",
                    "description": "Bitbucket Datacenter VCS settings\n"
                },
                "branch": {
                    "type": "string",
                    "description": "GitHub branch to apply changes to\n"
                },
                "cloudformation": {
                    "$ref": "#/types/spacelift:index/StackCloudformation:StackCloudformation",
                    "description": "CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Free-form stack description for users\n"
                },
                "enableLocalPreview": {
                    "type": "boolean",
                    "description": "Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.\n"
                },
                "githubActionDeploy": {
                    "type": "boolean",
                    "description": "Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.\n"
                },
                "githubEnterprise": {
                    "$ref": "#/types/spacelift:index/StackGithubEnterprise:StackGithubEnterprise",
                    "description": "GitHub Enterprise (self-hosted) VCS settings\n"
                },
                "gitlab": {
                    "$ref": "#/types/spacelift:index/StackGitlab:StackGitlab",
                    "description": "GitLab VCS settings\n"
                },
                "importState": {
                    "type": "string",
                    "description": "State file to upload when creating a new stack\n"
                },
                "importStateFile": {
                    "type": "string",
                    "description": "Path to the state file to upload when creating a new stack\n"
                },
                "kubernetes": {
                    "$ref": "#/types/spacelift:index/StackKubernetes:StackKubernetes",
                    "description": "Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "manageState": {
                    "type": "boolean",
                    "description": "Determines if Spacelift should manage state for this stack. Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the stack - should be unique in one account\n"
                },
                "projectRoot": {
                    "type": "string",
                    "description": "Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.\n"
                },
                "protectFromDeletion": {
                    "type": "boolean",
                    "description": "Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.\n"
                },
                "pulumi": {
                    "$ref": "#/types/spacelift:index/StackPulumi:StackPulumi",
                    "description": "Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.\n",
                    "language": {
                        "csharp": {
                            "name": "CSHARPPULUMI"
                        }
                    }
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository, without the owner part\n"
                },
                "runnerImage": {
                    "type": "string",
                    "description": "Name of the Docker image used to process Runs\n"
                },
                "showcase": {
                    "$ref": "#/types/spacelift:index/StackShowcase:StackShowcase"
                },
                "slug": {
                    "type": "string",
                    "description": "Allows setting the custom ID (slug) for the stack\n",
                    "willReplaceOnChanges": true
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the stack is in\n"
                },
                "terraformSmartSanitization": {
                    "type": "boolean",
                    "description": "Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state\nand plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.\nDefaults to `false`.\n"
                },
                "terraformVersion": {
                    "type": "string",
                    "description": "Terraform version to use\n"
                },
                "terraformWorkspace": {
                    "type": "string",
                    "description": "Terraform workspace to select\n"
                },
                "workerPoolId": {
                    "type": "string",
                    "description": "ID of the worker pool to use\n"
                }
            },
            "requiredInputs": [
                "branch",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Stack resources.\n",
                "properties": {
                    "administrative": {
                        "type": "boolean",
                        "description": "Indicates whether this stack can manage others. Defaults to `false`.\n"
                    },
                    "afterApplies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-apply scripts\n"
                    },
                    "afterDestroys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-destroy scripts\n"
                    },
                    "afterInits": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-init scripts\n"
                    },
                    "afterPerforms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-perform scripts\n"
                    },
                    "afterPlans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-plan scripts\n"
                    },
                    "ansible": {
                        "$ref": "#/types/spacelift:index/StackAnsible:StackAnsible",
                        "description": "Ansible-specific configuration. Presence means this Stack is an Ansible Stack.\n"
                    },
                    "autodeploy": {
                        "type": "boolean",
                        "description": "Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.\n"
                    },
                    "autoretry": {
                        "type": "boolean",
                        "description": "Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.\n"
                    },
                    "awsAssumeRolePolicyStatement": {
                        "type": "string",
                        "description": "AWS IAM assume role policy statement setting up trust relationship\n"
                    },
                    "azureDevops": {
                        "$ref": "#/types/spacelift:index/StackAzureDevops:StackAzureDevops",
                        "description": "Azure DevOps VCS settings\n"
                    },
                    "beforeApplies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-apply scripts\n"
                    },
                    "beforeDestroys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-destroy scripts\n"
                    },
                    "beforeInits": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-init scripts\n"
                    },
                    "beforePerforms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-perform scripts\n"
                    },
                    "beforePlans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-plan scripts\n"
                    },
                    "bitbucketCloud": {
                        "$ref": "#/types/spacelift:index/StackBitbucketCloud:StackBitbucketCloud",
                        "description": "Bitbucket Cloud VCS settings\n"
                    },
                    "bitbucketDatacenter": {
                        "$ref": "#/types/spacelift:index/StackBitbucketDatacenter:StackBitbucketDatacenter",
                        "description": "Bitbucket Datacenter VCS settings\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "GitHub branch to apply changes to\n"
                    },
                    "cloudformation": {
                        "$ref": "#/types/spacelift:index/StackCloudformation:StackCloudformation",
                        "description": "CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Free-form stack description for users\n"
                    },
                    "enableLocalPreview": {
                        "type": "boolean",
                        "description": "Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.\n"
                    },
                    "githubActionDeploy": {
                        "type": "boolean",
                        "description": "Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.\n"
                    },
                    "githubEnterprise": {
                        "$ref": "#/types/spacelift:index/StackGithubEnterprise:StackGithubEnterprise",
                        "description": "GitHub Enterprise (self-hosted) VCS settings\n"
                    },
                    "gitlab": {
                        "$ref": "#/types/spacelift:index/StackGitlab:StackGitlab",
                        "description": "GitLab VCS settings\n"
                    },
                    "importState": {
                        "type": "string",
                        "description": "State file to upload when creating a new stack\n"
                    },
                    "importStateFile": {
                        "type": "string",
                        "description": "Path to the state file to upload when creating a new stack\n"
                    },
                    "kubernetes": {
                        "$ref": "#/types/spacelift:index/StackKubernetes:StackKubernetes",
                        "description": "Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "manageState": {
                        "type": "boolean",
                        "description": "Determines if Spacelift should manage state for this stack. Defaults to `true`.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the stack - should be unique in one account\n"
                    },
                    "projectRoot": {
                        "type": "string",
                        "description": "Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.\n"
                    },
                    "protectFromDeletion": {
                        "type": "boolean",
                        "description": "Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.\n"
                    },
                    "pulumi": {
                        "$ref": "#/types/spacelift:index/StackPulumi:StackPulumi",
                        "description": "Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.\n",
                        "language": {
                            "csharp": {
                                "name": "CSHARPPULUMI"
                            }
                        }
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository, without the owner part\n"
                    },
                    "runnerImage": {
                        "type": "string",
                        "description": "Name of the Docker image used to process Runs\n"
                    },
                    "showcase": {
                        "$ref": "#/types/spacelift:index/StackShowcase:StackShowcase"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Allows setting the custom ID (slug) for the stack\n",
                        "willReplaceOnChanges": true
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the stack is in\n"
                    },
                    "terraformSmartSanitization": {
                        "type": "boolean",
                        "description": "Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state\nand plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.\nDefaults to `false`.\n"
                    },
                    "terraformVersion": {
                        "type": "string",
                        "description": "Terraform version to use\n"
                    },
                    "terraformWorkspace": {
                        "type": "string",
                        "description": "Terraform workspace to select\n"
                    },
                    "workerPoolId": {
                        "type": "string",
                        "description": "ID of the worker pool to use\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/stackAwsRole:StackAwsRole": {
            "description": "\u003e **Note:** `spacelift.StackAwsRole` is deprecated. Please use `spacelift.AwsRole` instead. The functionality is identical.\n\n**NOTE:** while this resource continues to work, we have replaced it with the `spacelift.AwsIntegration` resource. The new resource allows integrations to be shared by multiple stacks/modules and also supports separate read vs write roles. Please use the `spacelift.AwsIntegration` resource instead.\n\n`spacelift.StackAwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.\n\nIf you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).\n\nNote: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).\n",
            "properties": {
                "durationSeconds": {
                    "type": "integer",
                    "description": "AWS IAM role session duration in seconds\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "Custom external ID (works only for private workers).\n"
                },
                "generateCredentialsInWorker": {
                    "type": "boolean",
                    "description": "Generate AWS credentials in the private worker. Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which assumes the AWS IAM role\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "ARN of the AWS IAM role to attach\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which assumes the AWS IAM role\n"
                }
            },
            "required": [
                "durationSeconds",
                "roleArn"
            ],
            "inputProperties": {
                "durationSeconds": {
                    "type": "integer",
                    "description": "AWS IAM role session duration in seconds\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "Custom external ID (works only for private workers).\n"
                },
                "generateCredentialsInWorker": {
                    "type": "boolean",
                    "description": "Generate AWS credentials in the private worker. Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which assumes the AWS IAM role\n",
                    "willReplaceOnChanges": true
                },
                "roleArn": {
                    "type": "string",
                    "description": "ARN of the AWS IAM role to attach\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which assumes the AWS IAM role\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roleArn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StackAwsRole resources.\n",
                "properties": {
                    "durationSeconds": {
                        "type": "integer",
                        "description": "AWS IAM role session duration in seconds\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Custom external ID (works only for private workers).\n"
                    },
                    "generateCredentialsInWorker": {
                        "type": "boolean",
                        "description": "Generate AWS credentials in the private worker. Defaults to `false`.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module which assumes the AWS IAM role\n",
                        "willReplaceOnChanges": true
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "ARN of the AWS IAM role to attach\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which assumes the AWS IAM role\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/stackDestructor:StackDestructor": {
            "description": "`spacelift.StackDestructor` is used to destroy the resources of a Stack before deleting it. `depends_on` should be used to make sure that all necessary resources (environment variables, roles, integrations, etc.) are still in place when the destruction run is executed. **Note:** Destroying this resource will delete the resources in the stack. If this resource needs to be deleted and the resources in the stacks are to be preserved, ensure that the `deactivated` attribute is set to `true`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst k8s_coreStack = new spacelift.Stack(\"k8s-coreStack\", {});\n// ...\nconst credentials = new spacelift.EnvironmentVariable(\"credentials\", {});\n// ...\nconst k8s_coreStackDestructor = new spacelift.StackDestructor(\"k8s-coreStackDestructor\", {stackId: k8s_coreStack.id}, {\n    dependsOn: [credentials],\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nk8s_core_stack = spacelift.Stack(\"k8s-coreStack\")\n# ...\ncredentials = spacelift.EnvironmentVariable(\"credentials\")\n# ...\nk8s_core_stack_destructor = spacelift.StackDestructor(\"k8s-coreStackDestructor\", stack_id=k8s_core_stack.id,\nopts=pulumi.ResourceOptions(depends_on=[credentials]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_coreStack = new Spacelift.Stack(\"k8s-coreStack\");\n\n    // ...\n    var credentials = new Spacelift.EnvironmentVariable(\"credentials\");\n\n    // ...\n    var k8s_coreStackDestructor = new Spacelift.StackDestructor(\"k8s-coreStackDestructor\", new()\n    {\n        StackId = k8s_coreStack.Id,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            credentials,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewStack(ctx, \"k8s-coreStack\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcredentials, err := spacelift.NewEnvironmentVariable(ctx, \"credentials\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStackDestructor(ctx, \"k8s-coreStackDestructor\", \u0026spacelift.StackDestructorArgs{\n\t\t\tStackId: k8s_coreStack.ID(),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tcredentials,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Stack;\nimport com.pulumi.spacelift.EnvironmentVariable;\nimport com.pulumi.spacelift.StackDestructor;\nimport com.pulumi.spacelift.StackDestructorArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var k8s_coreStack = new Stack(\"k8s-coreStack\");\n\n        var credentials = new EnvironmentVariable(\"credentials\");\n\n        var k8s_coreStackDestructor = new StackDestructor(\"k8s-coreStackDestructor\", StackDestructorArgs.builder()        \n            .stackId(k8s_coreStack.id())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(credentials)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  k8s-coreStack:\n    type: spacelift:Stack\n  credentials:\n    type: spacelift:EnvironmentVariable\n  k8s-coreStackDestructor:\n    type: spacelift:StackDestructor\n    properties:\n      stackId: ${[\"k8s-coreStack\"].id}\n    options:\n      dependson:\n        - ${credentials}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "deactivated": {
                    "type": "boolean",
                    "description": "If set to true, destruction won't delete the stack\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to delete and destroy on destruction\n"
                }
            },
            "required": [
                "stackId"
            ],
            "inputProperties": {
                "deactivated": {
                    "type": "boolean",
                    "description": "If set to true, destruction won't delete the stack\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack to delete and destroy on destruction\n"
                }
            },
            "requiredInputs": [
                "stackId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StackDestructor resources.\n",
                "properties": {
                    "deactivated": {
                        "type": "boolean",
                        "description": "If set to true, destruction won't delete the stack\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack to delete and destroy on destruction\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/stackGcpServiceAccount:StackGcpServiceAccount": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst k8s_coreStack = new spacelift.Stack(\"k8s-coreStack\", {\n    branch: \"master\",\n    repository: \"core-infra\",\n});\nconst k8s_coreStackGcpServiceAccount = new spacelift.StackGcpServiceAccount(\"k8s-coreStackGcpServiceAccount\", {\n    stackId: k8s_coreStack.id,\n    tokenScopes: [\n        \"https://www.googleapis.com/auth/compute\",\n        \"https://www.googleapis.com/auth/cloud-platform\",\n        \"https://www.googleapis.com/auth/devstorage.full_control\",\n    ],\n});\nconst k8s_coreProject = new gcp.organizations.Project(\"k8s-coreProject\", {\n    projectId: \"unicorn-k8s-core\",\n    orgId: _var.gcp_organization_id,\n});\nconst k8s_coreIAMMember = new gcp.projects.IAMMember(\"k8s-coreIAMMember\", {\n    project: k8s_coreProject.id,\n    role: \"roles/owner\",\n    member: pulumi.interpolate`serviceAccount:${k8s_coreStackGcpServiceAccount.serviceAccountEmail}`,\n});\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\nimport pulumi_spacelift as spacelift\n\nk8s_core_stack = spacelift.Stack(\"k8s-coreStack\",\n    branch=\"master\",\n    repository=\"core-infra\")\nk8s_core_stack_gcp_service_account = spacelift.StackGcpServiceAccount(\"k8s-coreStackGcpServiceAccount\",\n    stack_id=k8s_core_stack.id,\n    token_scopes=[\n        \"https://www.googleapis.com/auth/compute\",\n        \"https://www.googleapis.com/auth/cloud-platform\",\n        \"https://www.googleapis.com/auth/devstorage.full_control\",\n    ])\nk8s_core_project = gcp.organizations.Project(\"k8s-coreProject\",\n    project_id=\"unicorn-k8s-core\",\n    org_id=var[\"gcp_organization_id\"])\nk8s_core_iam_member = gcp.projects.IAMMember(\"k8s-coreIAMMember\",\n    project=k8s_core_project.id,\n    role=\"roles/owner\",\n    member=k8s_core_stack_gcp_service_account.service_account_email.apply(lambda service_account_email: f\"serviceAccount:{service_account_email}\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_coreStack = new Spacelift.Stack(\"k8s-coreStack\", new()\n    {\n        Branch = \"master\",\n        Repository = \"core-infra\",\n    });\n\n    var k8s_coreStackGcpServiceAccount = new Spacelift.StackGcpServiceAccount(\"k8s-coreStackGcpServiceAccount\", new()\n    {\n        StackId = k8s_coreStack.Id,\n        TokenScopes = new[]\n        {\n            \"https://www.googleapis.com/auth/compute\",\n            \"https://www.googleapis.com/auth/cloud-platform\",\n            \"https://www.googleapis.com/auth/devstorage.full_control\",\n        },\n    });\n\n    var k8s_coreProject = new Gcp.Organizations.Project(\"k8s-coreProject\", new()\n    {\n        ProjectId = \"unicorn-k8s-core\",\n        OrgId = @var.Gcp_organization_id,\n    });\n\n    var k8s_coreIAMMember = new Gcp.Projects.IAMMember(\"k8s-coreIAMMember\", new()\n    {\n        Project = k8s_coreProject.Id,\n        Role = \"roles/owner\",\n        Member = k8s_coreStackGcpServiceAccount.ServiceAccountEmail.Apply(serviceAccountEmail =\u003e $\"serviceAccount:{serviceAccountEmail}\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations\"\n\t\"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewStack(ctx, \"k8s-coreStack\", \u0026spacelift.StackArgs{\n\t\t\tBranch:     pulumi.String(\"master\"),\n\t\t\tRepository: pulumi.String(\"core-infra\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewStackGcpServiceAccount(ctx, \"k8s-coreStackGcpServiceAccount\", \u0026spacelift.StackGcpServiceAccountArgs{\n\t\t\tStackId: k8s_coreStack.ID(),\n\t\t\tTokenScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://www.googleapis.com/auth/compute\"),\n\t\t\t\tpulumi.String(\"https://www.googleapis.com/auth/cloud-platform\"),\n\t\t\t\tpulumi.String(\"https://www.googleapis.com/auth/devstorage.full_control\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = organizations.NewProject(ctx, \"k8s-coreProject\", \u0026organizations.ProjectArgs{\n\t\t\tProjectId: pulumi.String(\"unicorn-k8s-core\"),\n\t\t\tOrgId:     pulumi.Any(_var.Gcp_organization_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = projects.NewIAMMember(ctx, \"k8s-coreIAMMember\", \u0026projects.IAMMemberArgs{\n\t\t\tProject: k8s_coreProject.ID(),\n\t\t\tRole:    pulumi.String(\"roles/owner\"),\n\t\t\tMember: k8s_coreStackGcpServiceAccount.ServiceAccountEmail.ApplyT(func(serviceAccountEmail string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"serviceAccount:%v\", serviceAccountEmail), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Stack;\nimport com.pulumi.spacelift.StackArgs;\nimport com.pulumi.spacelift.StackGcpServiceAccount;\nimport com.pulumi.spacelift.StackGcpServiceAccountArgs;\nimport com.pulumi.gcp.organizations.Project;\nimport com.pulumi.gcp.organizations.ProjectArgs;\nimport com.pulumi.gcp.projects.IAMMember;\nimport com.pulumi.gcp.projects.IAMMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var k8s_coreStack = new Stack(\"k8s-coreStack\", StackArgs.builder()        \n            .branch(\"master\")\n            .repository(\"core-infra\")\n            .build());\n\n        var k8s_coreStackGcpServiceAccount = new StackGcpServiceAccount(\"k8s-coreStackGcpServiceAccount\", StackGcpServiceAccountArgs.builder()        \n            .stackId(k8s_coreStack.id())\n            .tokenScopes(            \n                \"https://www.googleapis.com/auth/compute\",\n                \"https://www.googleapis.com/auth/cloud-platform\",\n                \"https://www.googleapis.com/auth/devstorage.full_control\")\n            .build());\n\n        var k8s_coreProject = new Project(\"k8s-coreProject\", ProjectArgs.builder()        \n            .projectId(\"unicorn-k8s-core\")\n            .orgId(var_.gcp_organization_id())\n            .build());\n\n        var k8s_coreIAMMember = new IAMMember(\"k8s-coreIAMMember\", IAMMemberArgs.builder()        \n            .project(k8s_coreProject.id())\n            .role(\"roles/owner\")\n            .member(k8s_coreStackGcpServiceAccount.serviceAccountEmail().applyValue(serviceAccountEmail -\u003e String.format(\"serviceAccount:%s\", serviceAccountEmail)))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  k8s-coreStack:\n    type: spacelift:Stack\n    properties:\n      branch: master\n      repository: core-infra\n  k8s-coreStackGcpServiceAccount:\n    type: spacelift:StackGcpServiceAccount\n    properties:\n      stackId: ${[\"k8s-coreStack\"].id}\n      tokenScopes:\n        - https://www.googleapis.com/auth/compute\n        - https://www.googleapis.com/auth/cloud-platform\n        - https://www.googleapis.com/auth/devstorage.full_control\n  k8s-coreProject:\n    type: gcp:organizations:Project\n    properties:\n      projectId: unicorn-k8s-core\n      orgId: ${var.gcp_organization_id}\n  k8s-coreIAMMember:\n    type: gcp:projects:IAMMember\n    properties:\n      project: ${[\"k8s-coreProject\"].id}\n      role: roles/owner\n      member: serviceAccount:${[\"k8s-coreStackGcpServiceAccount\"].serviceAccountEmail}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which uses GCP service account credentials\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "Email address of the GCP service account dedicated for this stack\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which uses GCP service account credentials\n"
                },
                "tokenScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of scopes that will be requested when generating temporary GCP service account credentials\n"
                }
            },
            "required": [
                "serviceAccountEmail",
                "tokenScopes"
            ],
            "inputProperties": {
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which uses GCP service account credentials\n",
                    "willReplaceOnChanges": true
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which uses GCP service account credentials\n",
                    "willReplaceOnChanges": true
                },
                "tokenScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of scopes that will be requested when generating temporary GCP service account credentials\n"
                }
            },
            "requiredInputs": [
                "tokenScopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StackGcpServiceAccount resources.\n",
                "properties": {
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module which uses GCP service account credentials\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "Email address of the GCP service account dedicated for this stack\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n",
                        "willReplaceOnChanges": true
                    },
                    "tokenScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of scopes that will be requested when generating temporary GCP service account credentials\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/vcsAgentPool:VcsAgentPool": {
            "description": "`spacelift.VcsAgentPool` represents a Spacelift **VCS agent pool** - a logical group of proxies allowing Spacelift to access private VCS installations\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst ghe = new spacelift.VcsAgentPool(\"ghe\", {\n    description: \"VCS agent pool for our internal GitHub Enterprise\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nghe = spacelift.VcsAgentPool(\"ghe\", description=\"VCS agent pool for our internal GitHub Enterprise\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ghe = new Spacelift.VcsAgentPool(\"ghe\", new()\n    {\n        Description = \"VCS agent pool for our internal GitHub Enterprise\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewVcsAgentPool(ctx, \"ghe\", \u0026spacelift.VcsAgentPoolArgs{\n\t\t\tDescription: pulumi.String(\"VCS agent pool for our internal GitHub Enterprise\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.VcsAgentPool;\nimport com.pulumi.spacelift.VcsAgentPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ghe = new VcsAgentPool(\"ghe\", VcsAgentPoolArgs.builder()        \n            .description(\"VCS agent pool for our internal GitHub Enterprise\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ghe:\n    type: spacelift:VcsAgentPool\n    properties:\n      description: VCS agent pool for our internal GitHub Enterprise\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/vcsAgentPool:VcsAgentPool ghe $VCS_AGENT_POOL_ID\n```\n\n ",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "VCS agent pool configuration, encoded using base64\n"
                },
                "description": {
                    "type": "string",
                    "description": "Free-form VCS agent pool description for users\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VCS agent pool, must be unique within an account\n"
                }
            },
            "required": [
                "config",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Free-form VCS agent pool description for users\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VCS agent pool, must be unique within an account\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VcsAgentPool resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "VCS agent pool configuration, encoded using base64\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Free-form VCS agent pool description for users\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VCS agent pool, must be unique within an account\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/webook:Webook": {
            "description": "`spacelift.Webook` represents a webhook endpoint to which Spacelift sends the POST request about run state changes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst webhook = new spacelift.Webook(\"webhook\", {\n    endpoint: \"https://example.com/webhooks\",\n    stackId: \"k8s-core\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nwebhook = spacelift.Webook(\"webhook\",\n    endpoint=\"https://example.com/webhooks\",\n    stack_id=\"k8s-core\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhook = new Spacelift.Webook(\"webhook\", new()\n    {\n        Endpoint = \"https://example.com/webhooks\",\n        StackId = \"k8s-core\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewWebook(ctx, \"webhook\", \u0026spacelift.WebookArgs{\n\t\t\tEndpoint: pulumi.String(\"https://example.com/webhooks\"),\n\t\t\tStackId:  pulumi.String(\"k8s-core\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.Webook;\nimport com.pulumi.spacelift.WebookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var webhook = new Webook(\"webhook\", WebookArgs.builder()        \n            .endpoint(\"https://example.com/webhooks\")\n            .stackId(\"k8s-core\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  webhook:\n    type: spacelift:Webook\n    properties:\n      endpoint: https://example.com/webhooks\n      stackId: k8s-core\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/webook:Webook webhook stack/$STACK_ID/$WEBHOOK_ID\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "enables or disables sending webhooks. Defaults to `true`.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "endpoint to send the POST request to\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which triggers the webhooks\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which triggers the webhooks\n"
                }
            },
            "required": [
                "endpoint"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "enables or disables sending webhooks. Defaults to `true`.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "endpoint to send the POST request to\n"
                },
                "moduleId": {
                    "type": "string",
                    "description": "ID of the module which triggers the webhooks\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "ID of the stack which triggers the webhooks\n"
                }
            },
            "requiredInputs": [
                "endpoint"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webook resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "enables or disables sending webhooks. Defaults to `true`.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "endpoint to send the POST request to\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module which triggers the webhooks\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which triggers the webhooks\n"
                    }
                },
                "type": "object"
            }
        },
        "spacelift:index/workerPool:WorkerPool": {
            "description": "`spacelift.WorkerPool` represents a worker pool assigned to the Spacelift account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst k8s_core = new spacelift.WorkerPool(\"k8s-core\", {\n    csr: Buffer.from(fs.readFileSync(\"/path/to/csr\"), 'binary').toString('base64'),\n    description: \"Used for all type jobs\",\n});\n```\n```python\nimport pulumi\nimport base64\nimport pulumi_spacelift as spacelift\n\nk8s_core = spacelift.WorkerPool(\"k8s-core\",\n    csr=(lambda path: base64.b64encode(open(path).read().encode()).decode())(\"/path/to/csr\"),\n    description=\"Used for all type jobs\")\n```\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\n\tprivate static string ReadFileBase64(string path) {\n\t\treturn Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)))\n\t}\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_core = new Spacelift.WorkerPool(\"k8s-core\", new()\n    {\n        Csr = ReadFileBase64(\"/path/to/csr\"),\n        Description = \"Used for all type jobs\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc filebase64OrPanic(path string) pulumi.StringPtrInput {\n\tif fileData, err := ioutil.ReadFile(path); err == nil {\n\t\treturn pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))\n\t} else {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.NewWorkerPool(ctx, \"k8s-core\", \u0026spacelift.WorkerPoolArgs{\n\t\t\tCsr:         filebase64OrPanic(\"/path/to/csr\"),\n\t\t\tDescription: pulumi.String(\"Used for all type jobs\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.WorkerPool;\nimport com.pulumi.spacelift.WorkerPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var k8s_core = new WorkerPool(\"k8s-core\", WorkerPoolArgs.builder()        \n            .csr(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(\"/path/to/csr\"))))\n            .description(\"Used for all type jobs\")\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import spacelift:index/workerPool:WorkerPool k8s-core $WORKER_POOL_ID\n```\n\n ",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "credentials necessary to connect WorkerPool's workers to the control plane\n"
                },
                "csr": {
                    "type": "string",
                    "description": "certificate signing request in base64\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the worker pool\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "name of the worker pool\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "private key in base64\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the worker pool is in\n"
                }
            },
            "required": [
                "config",
                "csr",
                "name",
                "privateKey",
                "spaceId"
            ],
            "inputProperties": {
                "csr": {
                    "type": "string",
                    "description": "certificate signing request in base64\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the worker pool\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "name of the worker pool\n"
                },
                "spaceId": {
                    "type": "string",
                    "description": "ID (slug) of the space the worker pool is in\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkerPool resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "credentials necessary to connect WorkerPool's workers to the control plane\n"
                    },
                    "csr": {
                        "type": "string",
                        "description": "certificate signing request in base64\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the worker pool\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the worker pool\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "private key in base64\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the worker pool is in\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "spacelift:index/getAccount:getAccount": {
            "description": "`spacelift.getAccount` represents the currently used Spacelift **account**\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst thisAccount = pulumi.output(spacelift.getAccount());\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nthis = spacelift.get_account()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Spacelift.GetAccount.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetAccount(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SpaceliftFunctions.getAccount();\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: spacelift:getAccount\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "awsAccountId": {
                        "type": "string",
                        "description": "the ID of the AWS account used by Spacelift for role assumption\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the account\n"
                    },
                    "tier": {
                        "type": "string",
                        "description": "account billing tier\n"
                    }
                },
                "type": "object",
                "required": [
                    "awsAccountId",
                    "name",
                    "tier",
                    "id"
                ]
            }
        },
        "spacelift:index/getAwsIntegration:getAwsIntegration": {
            "description": "`spacelift.AwsIntegration` represents an integration with an AWS account. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect.\n\nNote: when assuming credentials for **shared workers**, Spacelift will use `$accountName-$integrationID@$stackID-suffix` or `$accountName-$integrationID@$moduleID-$suffix` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole),$suffix will be `read` or `write`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// Lookup an integration by its name:\nconst example = pulumi.output(spacelift.getAwsIntegration({\n    name: \"Production\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nexample = spacelift.get_aws_integration(name=\"Production\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Spacelift.GetAwsIntegration.Invoke(new()\n    {\n        Name = \"Production\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupAwsIntegration(ctx, \u0026GetAwsIntegrationArgs{\n\t\t\tName: pulumi.StringRef(\"Production\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetAwsIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = SpaceliftFunctions.getAwsIntegration(GetAwsIntegrationArgs.builder()\n            .name(\"Production\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: spacelift:getAwsIntegration\n      Arguments:\n        name: Production\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsIntegration.\n",
                "properties": {
                    "integrationId": {
                        "type": "string",
                        "description": "Immutable ID of the integration. Either `integration_id` or `name` must be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the AWS integration. Either `integration_id` or `name` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAwsIntegration.\n",
                "properties": {
                    "durationSeconds": {
                        "type": "integer",
                        "description": "Duration in seconds for which the assumed role credentials should be valid\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Custom external ID (works only for private workers).\n"
                    },
                    "generateCredentialsInWorker": {
                        "type": "boolean",
                        "description": "Generate AWS credentials in the private worker\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "Immutable ID of the integration. Either `integration_id` or `name` must be specified.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the AWS integration. Either `integration_id` or `name` must be specified.\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "ARN of the AWS IAM role to attach\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the integration is in\n"
                    }
                },
                "type": "object",
                "required": [
                    "durationSeconds",
                    "externalId",
                    "generateCredentialsInWorker",
                    "integrationId",
                    "labels",
                    "name",
                    "roleArn",
                    "spaceId",
                    "id"
                ]
            }
        },
        "spacelift:index/getAwsIntegrationAttachment:getAwsIntegrationAttachment": {
            "description": "`spacelift.AwsIntegrationAttachment` represents the attachment between a reusable AWS integration and a single stack or module.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsIntegrationAttachment.\n",
                "properties": {
                    "integrationId": {
                        "type": "string",
                        "description": "ID of the integration to attach\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module to attach the integration to\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack to attach the integration to\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsIntegrationAttachment.\n",
                "properties": {
                    "attachmentId": {
                        "type": "string",
                        "description": "Internal ID of the attachment entity\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "ID of the integration to attach\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module to attach the integration to\n"
                    },
                    "read": {
                        "type": "boolean",
                        "description": "Indicates whether this attachment is used for read operations\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack to attach the integration to\n"
                    },
                    "write": {
                        "type": "boolean",
                        "description": "Indicates whether this attachment is used for write operations\n"
                    }
                },
                "type": "object",
                "required": [
                    "attachmentId",
                    "integrationId",
                    "read",
                    "write",
                    "id"
                ]
            }
        },
        "spacelift:index/getAwsIntegrationAttachmentExternalId:getAwsIntegrationAttachmentExternalId": {
            "description": "`spacelift.getAwsIntegrationAttachmentExternalId` is used to generate the external ID that would be used for role assumption when an AWS integration is attached to a stack or module.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst myStack = spacelift.getAwsIntegrationAttachmentExternalId({\n    integrationId: spacelift_aws_integration[\"this\"].id,\n    stackId: \"my-stack-id\",\n    read: true,\n    write: true,\n});\nconst myModule = spacelift.getAwsIntegrationAttachmentExternalId({\n    integrationId: spacelift_aws_integration[\"this\"].id,\n    moduleId: \"my-module-id\",\n    read: true,\n    write: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nmy_stack = spacelift.get_aws_integration_attachment_external_id(integration_id=spacelift_aws_integration[\"this\"][\"id\"],\n    stack_id=\"my-stack-id\",\n    read=True,\n    write=True)\nmy_module = spacelift.get_aws_integration_attachment_external_id(integration_id=spacelift_aws_integration[\"this\"][\"id\"],\n    module_id=\"my-module-id\",\n    read=True,\n    write=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myStack = Spacelift.GetAwsIntegrationAttachmentExternalId.Invoke(new()\n    {\n        IntegrationId = spacelift_aws_integration.This.Id,\n        StackId = \"my-stack-id\",\n        Read = true,\n        Write = true,\n    });\n\n    var myModule = Spacelift.GetAwsIntegrationAttachmentExternalId.Invoke(new()\n    {\n        IntegrationId = spacelift_aws_integration.This.Id,\n        ModuleId = \"my-module-id\",\n        Read = true,\n        Write = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetAwsIntegrationAttachmentExternalId(ctx, \u0026GetAwsIntegrationAttachmentExternalIdArgs{\n\t\t\tIntegrationId: spacelift_aws_integration.This.Id,\n\t\t\tStackId:       pulumi.StringRef(\"my-stack-id\"),\n\t\t\tRead:          pulumi.BoolRef(true),\n\t\t\tWrite:         pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.GetAwsIntegrationAttachmentExternalId(ctx, \u0026GetAwsIntegrationAttachmentExternalIdArgs{\n\t\t\tIntegrationId: spacelift_aws_integration.This.Id,\n\t\t\tModuleId:      pulumi.StringRef(\"my-module-id\"),\n\t\t\tRead:          pulumi.BoolRef(true),\n\t\t\tWrite:         pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetAwsIntegrationAttachmentExternalIdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myStack = SpaceliftFunctions.getAwsIntegrationAttachmentExternalId(GetAwsIntegrationAttachmentExternalIdArgs.builder()\n            .integrationId(spacelift_aws_integration.this().id())\n            .stackId(\"my-stack-id\")\n            .read(true)\n            .write(true)\n            .build());\n\n        final var myModule = SpaceliftFunctions.getAwsIntegrationAttachmentExternalId(GetAwsIntegrationAttachmentExternalIdArgs.builder()\n            .integrationId(spacelift_aws_integration.this().id())\n            .moduleId(\"my-module-id\")\n            .read(true)\n            .write(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myStack:\n    Fn::Invoke:\n      Function: spacelift:getAwsIntegrationAttachmentExternalId\n      Arguments:\n        integrationId: ${spacelift_aws_integration.this.id}\n        stackId: my-stack-id\n        read: true\n        write: true\n  myModule:\n    Fn::Invoke:\n      Function: spacelift:getAwsIntegrationAttachmentExternalId\n      Arguments:\n        integrationId: ${spacelift_aws_integration.this.id}\n        moduleId: my-module-id\n        read: true\n        write: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsIntegrationAttachmentExternalId.\n",
                "properties": {
                    "integrationId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the AWS integration\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the module\n"
                    },
                    "read": {
                        "type": "boolean",
                        "description": "whether the integration will be used for read operations\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the stack\n"
                    },
                    "write": {
                        "type": "boolean",
                        "description": "whether the integration will be used for write operations\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsIntegrationAttachmentExternalId.\n",
                "properties": {
                    "assumeRolePolicyStatement": {
                        "type": "string",
                        "description": "An assume role policy statement that can be attached to your role to allow Spacelift to assume it\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The external ID that will be used during role assumption\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the AWS integration\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the module\n"
                    },
                    "read": {
                        "type": "boolean",
                        "description": "whether the integration will be used for read operations\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the stack\n"
                    },
                    "write": {
                        "type": "boolean",
                        "description": "whether the integration will be used for write operations\n"
                    }
                },
                "type": "object",
                "required": [
                    "assumeRolePolicyStatement",
                    "externalId",
                    "integrationId",
                    "id"
                ]
            }
        },
        "spacelift:index/getAwsRole:getAwsRole": {
            "description": "`spacelift.AwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.\n\nIf you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).\n\nNote: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// With a module\nconst k8s_module = pulumi.output(spacelift.getAwsRole({\n    moduleId: \"k8s-module\",\n}));\n// With a stack\nconst k8s_core = pulumi.output(spacelift.getAwsRole({\n    stackId: \"k8s-core\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nk8s_module = spacelift.get_aws_role(module_id=\"k8s-module\")\nk8s_core = spacelift.get_aws_role(stack_id=\"k8s-core\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_module = Spacelift.GetAwsRole.Invoke(new()\n    {\n        ModuleId = \"k8s-module\",\n    });\n\n    var k8s_core = Spacelift.GetAwsRole.Invoke(new()\n    {\n        StackId = \"k8s-core\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupAwsRole(ctx, \u0026GetAwsRoleArgs{\n\t\t\tModuleId: pulumi.StringRef(\"k8s-module\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.LookupAwsRole(ctx, \u0026GetAwsRoleArgs{\n\t\t\tStackId: pulumi.StringRef(\"k8s-core\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetAwsRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var k8s-module = SpaceliftFunctions.getAwsRole(GetAwsRoleArgs.builder()\n            .moduleId(\"k8s-module\")\n            .build());\n\n        final var k8s-core = SpaceliftFunctions.getAwsRole(GetAwsRoleArgs.builder()\n            .stackId(\"k8s-core\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  k8s-module:\n    Fn::Invoke:\n      Function: spacelift:getAwsRole\n      Arguments:\n        moduleId: k8s-module\n  k8s-core:\n    Fn::Invoke:\n      Function: spacelift:getAwsRole\n      Arguments:\n        stackId: k8s-core\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsRole.\n",
                "properties": {
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module which assumes the AWS IAM role\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which assumes the AWS IAM role\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAwsRole.\n",
                "properties": {
                    "durationSeconds": {
                        "type": "integer",
                        "description": "AWS IAM role session duration in seconds\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Custom external ID (works only for private workers).\n"
                    },
                    "generateCredentialsInWorker": {
                        "type": "boolean",
                        "description": "Generate AWS credentials in the private worker\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module which assumes the AWS IAM role\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "ARN of the AWS IAM role to attach\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which assumes the AWS IAM role\n"
                    }
                },
                "type": "object",
                "required": [
                    "durationSeconds",
                    "externalId",
                    "generateCredentialsInWorker",
                    "roleArn",
                    "id"
                ]
            }
        },
        "spacelift:index/getAzureDevopsIntegration:getAzureDevopsIntegration": {
            "description": "`spacelift.getAzureDevopsIntegration` returns details about Azure DevOps integration\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst azureDevopsIntegration = pulumi.output(spacelift.getAzureDevopsIntegration());\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nazure_devops_integration = spacelift.get_azure_devops_integration()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var azureDevopsIntegration = Spacelift.GetAzureDevopsIntegration.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetAzureDevopsIntegration(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var azureDevopsIntegration = SpaceliftFunctions.getAzureDevopsIntegration();\n\n    }\n}\n```\n```yaml\nvariables:\n  azureDevopsIntegration:\n    Fn::Invoke:\n      Function: spacelift:getAzureDevopsIntegration\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAzureDevopsIntegration.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationUrl": {
                        "type": "string",
                        "description": "Azure DevOps integration organization url\n"
                    },
                    "webhookPassword": {
                        "type": "string",
                        "description": "Azure DevOps integration webhook password\n"
                    }
                },
                "type": "object",
                "required": [
                    "organizationUrl",
                    "webhookPassword",
                    "id"
                ]
            }
        },
        "spacelift:index/getAzureIntegration:getAzureIntegration": {
            "description": "`spacelift.AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// Lookup an integration by its name:\nconst example = pulumi.output(spacelift.getAzureIntegration({\n    name: \"Production\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nexample = spacelift.get_azure_integration(name=\"Production\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Spacelift.GetAzureIntegration.Invoke(new()\n    {\n        Name = \"Production\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupAzureIntegration(ctx, \u0026GetAzureIntegrationArgs{\n\t\t\tName: pulumi.StringRef(\"Production\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetAzureIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = SpaceliftFunctions.getAzureIntegration(GetAzureIntegrationArgs.builder()\n            .name(\"Production\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: spacelift:getAzureIntegration\n      Arguments:\n        name: Production\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureIntegration.\n",
                "properties": {
                    "integrationId": {
                        "type": "string",
                        "description": "Immutable ID of the integration. Either `integration_id` or `name` must be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of the integration. Either `integration_id` or `name` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAzureIntegration.\n",
                "properties": {
                    "adminConsentProvided": {
                        "type": "boolean",
                        "description": "Indicates whether admin consent has been performed for the AAD Application.\n"
                    },
                    "adminConsentUrl": {
                        "type": "string",
                        "description": "The URL to use to provide admin consent to the application in the customer's tenant\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The applicationId of the Azure AD application used by the integration.\n"
                    },
                    "defaultSubscriptionId": {
                        "type": "string",
                        "description": "The default subscription ID to use, if one isn't specified at the stack/module level\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "Immutable ID of the integration. Either `integration_id` or `name` must be specified.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Labels to set on the integration\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of the integration. Either `integration_id` or `name` must be specified.\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the integration is in\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The Azure AD tenant ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "adminConsentProvided",
                    "adminConsentUrl",
                    "applicationId",
                    "defaultSubscriptionId",
                    "displayName",
                    "integrationId",
                    "labels",
                    "name",
                    "spaceId",
                    "tenantId",
                    "id"
                ]
            }
        },
        "spacelift:index/getAzureIntegrationAttachment:getAzureIntegrationAttachment": {
            "description": "`spacelift.AzureIntegrationAttachment` represents the attachment between a reusable Azure integration and a single stack or module.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst example = pulumi.output(spacelift.getAzureIntegrationAttachment({\n    integrationId: \"some-integration-id\",\n    stackId: \"some-stack-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nexample = spacelift.get_azure_integration_attachment(integration_id=\"some-integration-id\",\n    stack_id=\"some-stack-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Spacelift.GetAzureIntegrationAttachment.Invoke(new()\n    {\n        IntegrationId = \"some-integration-id\",\n        StackId = \"some-stack-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupAzureIntegrationAttachment(ctx, \u0026GetAzureIntegrationAttachmentArgs{\n\t\t\tIntegrationId: \"some-integration-id\",\n\t\t\tStackId:       pulumi.StringRef(\"some-stack-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetAzureIntegrationAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = SpaceliftFunctions.getAzureIntegrationAttachment(GetAzureIntegrationAttachmentArgs.builder()\n            .integrationId(\"some-integration-id\")\n            .stackId(\"some-stack-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: spacelift:getAzureIntegrationAttachment\n      Arguments:\n        integrationId: some-integration-id\n        stackId: some-stack-id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureIntegrationAttachment.\n",
                "properties": {
                    "integrationId": {
                        "type": "string",
                        "description": "ID of the integration to attach\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module to attach the integration to\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack to attach the integration to\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureIntegrationAttachment.\n",
                "properties": {
                    "attachmentId": {
                        "type": "string",
                        "description": "Internal ID of the attachment entity\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "ID of the integration to attach\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module to attach the integration to\n"
                    },
                    "read": {
                        "type": "boolean",
                        "description": "Indicates whether this attachment is used for read operations\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack to attach the integration to\n"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.\n"
                    },
                    "write": {
                        "type": "boolean",
                        "description": "Indicates whether this attachment is used for write operations\n"
                    }
                },
                "type": "object",
                "required": [
                    "attachmentId",
                    "integrationId",
                    "read",
                    "subscriptionId",
                    "write",
                    "id"
                ]
            }
        },
        "spacelift:index/getBitbucketCloudIntegration:getBitbucketCloudIntegration": {
            "description": "`spacelift.getBitbucketCloudIntegration` returns details about Bitbucket Cloud integration\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst bitbucketCloudIntegration = pulumi.output(spacelift.getBitbucketCloudIntegration());\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nbitbucket_cloud_integration = spacelift.get_bitbucket_cloud_integration()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bitbucketCloudIntegration = Spacelift.GetBitbucketCloudIntegration.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetBitbucketCloudIntegration(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var bitbucketCloudIntegration = SpaceliftFunctions.getBitbucketCloudIntegration();\n\n    }\n}\n```\n```yaml\nvariables:\n  bitbucketCloudIntegration:\n    Fn::Invoke:\n      Function: spacelift:getBitbucketCloudIntegration\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getBitbucketCloudIntegration.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Bitbucket Cloud username\n"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "id"
                ]
            }
        },
        "spacelift:index/getBitbucketDatacenterIntegration:getBitbucketDatacenterIntegration": {
            "description": "`spacelift.getBitbucketDatacenterIntegration` returns details about Bitbucket Datacenter integration\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst bitbucketDatacenterIntegration = pulumi.output(spacelift.getBitbucketDatacenterIntegration());\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nbitbucket_datacenter_integration = spacelift.get_bitbucket_datacenter_integration()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bitbucketDatacenterIntegration = Spacelift.GetBitbucketDatacenterIntegration.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetBitbucketDatacenterIntegration(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var bitbucketDatacenterIntegration = SpaceliftFunctions.getBitbucketDatacenterIntegration();\n\n    }\n}\n```\n```yaml\nvariables:\n  bitbucketDatacenterIntegration:\n    Fn::Invoke:\n      Function: spacelift:getBitbucketDatacenterIntegration\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getBitbucketDatacenterIntegration.\n",
                "properties": {
                    "apiHost": {
                        "type": "string",
                        "description": "Bitbucket Datacenter integration api host\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "userFacingHost": {
                        "type": "string",
                        "description": "Bitbucket Datacenter integration user facing host\n"
                    },
                    "webhookSecret": {
                        "type": "string",
                        "description": "Bitbucket Datacenter integration webhook secret\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiHost",
                    "userFacingHost",
                    "webhookSecret",
                    "id"
                ]
            }
        },
        "spacelift:index/getContext:getContext": {
            "description": "`spacelift.Context` represents a Spacelift **context** - a collection of configuration elements (either environment variables or mounted files) that can be administratively attached to multiple stacks (`spacelift.Stack`) or modules (`spacelift.Module`) using a context attachment (`spacelift.ContextAttachment`)`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst prod_k8s_ie = pulumi.output(spacelift.getContext({\n    contextId: \"prod-k8s-ie\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nprod_k8s_ie = spacelift.get_context(context_id=\"prod-k8s-ie\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod_k8s_ie = Spacelift.GetContext.Invoke(new()\n    {\n        ContextId = \"prod-k8s-ie\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupContext(ctx, \u0026GetContextArgs{\n\t\t\tContextId: \"prod-k8s-ie\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var prod-k8s-ie = SpaceliftFunctions.getContext(GetContextArgs.builder()\n            .contextId(\"prod-k8s-ie\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  prod-k8s-ie:\n    Fn::Invoke:\n      Function: spacelift:getContext\n      Arguments:\n        contextId: prod-k8s-ie\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContext.\n",
                "properties": {
                    "contextId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the context\n"
                    }
                },
                "type": "object",
                "required": [
                    "contextId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContext.\n",
                "properties": {
                    "contextId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the context\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "free-form context description for users\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the context\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the context is in\n"
                    }
                },
                "type": "object",
                "required": [
                    "contextId",
                    "description",
                    "labels",
                    "name",
                    "spaceId",
                    "id"
                ]
            }
        },
        "spacelift:index/getContextAttachment:getContextAttachment": {
            "description": "`spacelift.ContextAttachment` represents a Spacelift attachment of a single context to a single stack or module, with a predefined priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// With a stack.\nconst apps_k8s_ie = pulumi.output(spacelift.getContextAttachment({\n    contextId: \"prod-k8s-ie\",\n    stackId: \"apps-cluster\",\n}));\n// With a module.\nconst kafka_k8s_ie = pulumi.output(spacelift.getContextAttachment({\n    contextId: \"prod-k8s-ie\",\n    moduleId: \"terraform-aws-kafka\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\napps_k8s_ie = spacelift.get_context_attachment(context_id=\"prod-k8s-ie\",\n    stack_id=\"apps-cluster\")\nkafka_k8s_ie = spacelift.get_context_attachment(context_id=\"prod-k8s-ie\",\n    module_id=\"terraform-aws-kafka\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apps_k8s_ie = Spacelift.GetContextAttachment.Invoke(new()\n    {\n        ContextId = \"prod-k8s-ie\",\n        StackId = \"apps-cluster\",\n    });\n\n    var kafka_k8s_ie = Spacelift.GetContextAttachment.Invoke(new()\n    {\n        ContextId = \"prod-k8s-ie\",\n        ModuleId = \"terraform-aws-kafka\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupContextAttachment(ctx, \u0026GetContextAttachmentArgs{\n\t\t\tContextId: \"prod-k8s-ie\",\n\t\t\tStackId:   pulumi.StringRef(\"apps-cluster\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.LookupContextAttachment(ctx, \u0026GetContextAttachmentArgs{\n\t\t\tContextId: \"prod-k8s-ie\",\n\t\t\tModuleId:  pulumi.StringRef(\"terraform-aws-kafka\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetContextAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var apps-k8s-ie = SpaceliftFunctions.getContextAttachment(GetContextAttachmentArgs.builder()\n            .contextId(\"prod-k8s-ie\")\n            .stackId(\"apps-cluster\")\n            .build());\n\n        final var kafka-k8s-ie = SpaceliftFunctions.getContextAttachment(GetContextAttachmentArgs.builder()\n            .contextId(\"prod-k8s-ie\")\n            .moduleId(\"terraform-aws-kafka\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  apps-k8s-ie:\n    Fn::Invoke:\n      Function: spacelift:getContextAttachment\n      Arguments:\n        contextId: prod-k8s-ie\n        stackId: apps-cluster\n  kafka-k8s-ie:\n    Fn::Invoke:\n      Function: spacelift:getContextAttachment\n      Arguments:\n        contextId: prod-k8s-ie\n        moduleId: terraform-aws-kafka\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContextAttachment.\n",
                "properties": {
                    "contextId": {
                        "type": "string",
                        "description": "ID of the attached context\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the attached module\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the attached stack\n"
                    }
                },
                "type": "object",
                "required": [
                    "contextId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContextAttachment.\n",
                "properties": {
                    "contextId": {
                        "type": "string",
                        "description": "ID of the attached context\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the attached module\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value.\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the attached stack\n"
                    }
                },
                "type": "object",
                "required": [
                    "contextId",
                    "priority",
                    "id"
                ]
            }
        },
        "spacelift:index/getCurrentStack:getCurrentStack": {
            "description": "`spacelift.getCurrentStack` is a data source that provides information about the current administrative stack if the run is executed within Spacelift by a stack or module. This allows clever tricks like attaching contexts or policies to the stack that manages them.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\nimport * as spacelift from \"@spacelift-io/pulumi-spacelift\";\n\nconst this = spacelift.getCurrentStack({});\nconst core_kubeconfig = new spacelift.EnvironmentVariable(\"core-kubeconfig\", {\n    stackId: _this.then(_this =\u003e _this.id),\n    value: \"bacon\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nthis = spacelift.get_current_stack()\ncore_kubeconfig = spacelift.EnvironmentVariable(\"core-kubeconfig\",\n    stack_id=this.id,\n    value=\"bacon\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Spacelift.GetCurrentStack.Invoke();\n\n    var core_kubeconfig = new Spacelift.EnvironmentVariable(\"core-kubeconfig\", new()\n    {\n        StackId = @this.Apply(getCurrentStackResult =\u003e getCurrentStackResult).Apply(@this =\u003e @this.Apply(getCurrentStackResult =\u003e getCurrentStackResult.Id)),\n        Value = \"bacon\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthis, err := spacelift.GetCurrentStack(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.NewEnvironmentVariable(ctx, \"core-kubeconfig\", \u0026spacelift.EnvironmentVariableArgs{\n\t\t\tStackId: pulumi.String(this.Id),\n\t\t\tValue:   pulumi.String(\"bacon\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.EnvironmentVariable;\nimport com.pulumi.spacelift.EnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SpaceliftFunctions.getCurrentStack();\n\n        var core_kubeconfig = new EnvironmentVariable(\"core-kubeconfig\", EnvironmentVariableArgs.builder()        \n            .stackId(this_.id())\n            .value(\"bacon\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  core-kubeconfig:\n    type: spacelift:EnvironmentVariable\n    properties:\n      stackId: ${this.id}\n      value: bacon\nvariables:\n  this:\n    Fn::Invoke:\n      Function: spacelift:getCurrentStack\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCurrentStack.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "spacelift:index/getDriftDetection:getDriftDetection": {
            "description": "`spacelift.DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst core_infra_production_drift_detection = pulumi.output(spacelift.getDriftDetection({\n    stackId: \"core-infra-production\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\ncore_infra_production_drift_detection = spacelift.get_drift_detection(stack_id=\"core-infra-production\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var core_infra_production_drift_detection = Spacelift.GetDriftDetection.Invoke(new()\n    {\n        StackId = \"core-infra-production\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupDriftDetection(ctx, \u0026GetDriftDetectionArgs{\n\t\t\tStackId: \"core-infra-production\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetDriftDetectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var core-infra-production-drift-detection = SpaceliftFunctions.getDriftDetection(GetDriftDetectionArgs.builder()\n            .stackId(\"core-infra-production\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  core-infra-production-drift-detection:\n    Fn::Invoke:\n      Function: spacelift:getDriftDetection\n      Arguments:\n        stackId: core-infra-production\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDriftDetection.\n",
                "properties": {
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack for which to set up drift detection\n"
                    }
                },
                "type": "object",
                "required": [
                    "stackId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDriftDetection.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "reconcile": {
                        "type": "boolean",
                        "description": "Whether a tracked run should be triggered when drift is detected.\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cron schedule expressions based on which drift detection should be triggered.\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack for which to set up drift detection\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone in which the schedule is expressed\n"
                    }
                },
                "type": "object",
                "required": [
                    "reconcile",
                    "schedules",
                    "stackId",
                    "timezone",
                    "id"
                ]
            }
        },
        "spacelift:index/getEnvironmentVariable:getEnvironmentVariable": {
            "description": "`spacelift.EnvironmentVariable` defines an environment variable on the context (`spacelift.Context`), stack (`spacelift.Stack`) or a module (`spacelift.Module`), thereby allowing to pass and share various secrets and configuration with Spacelift stacks.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// For a context\nconst ireland_kubeconfig = pulumi.output(spacelift.getEnvironmentVariable({\n    contextId: \"prod-k8s-ie\",\n    name: \"KUBECONFIG\",\n}));\n// For a module\nconst module_kubeconfig = pulumi.output(spacelift.getEnvironmentVariable({\n    moduleId: \"k8s-module\",\n    name: \"KUBECONFIG\",\n}));\n// For a stack\nconst core_kubeconfig = pulumi.output(spacelift.getEnvironmentVariable({\n    name: \"KUBECONFIG\",\n    stackId: \"k8s-core\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nireland_kubeconfig = spacelift.get_environment_variable(context_id=\"prod-k8s-ie\",\n    name=\"KUBECONFIG\")\nmodule_kubeconfig = spacelift.get_environment_variable(module_id=\"k8s-module\",\n    name=\"KUBECONFIG\")\ncore_kubeconfig = spacelift.get_environment_variable(name=\"KUBECONFIG\",\n    stack_id=\"k8s-core\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ireland_kubeconfig = Spacelift.GetEnvironmentVariable.Invoke(new()\n    {\n        ContextId = \"prod-k8s-ie\",\n        Name = \"KUBECONFIG\",\n    });\n\n    var module_kubeconfig = Spacelift.GetEnvironmentVariable.Invoke(new()\n    {\n        ModuleId = \"k8s-module\",\n        Name = \"KUBECONFIG\",\n    });\n\n    var core_kubeconfig = Spacelift.GetEnvironmentVariable.Invoke(new()\n    {\n        Name = \"KUBECONFIG\",\n        StackId = \"k8s-core\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupEnvironmentVariable(ctx, \u0026GetEnvironmentVariableArgs{\n\t\t\tContextId: pulumi.StringRef(\"prod-k8s-ie\"),\n\t\t\tName:      \"KUBECONFIG\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.LookupEnvironmentVariable(ctx, \u0026GetEnvironmentVariableArgs{\n\t\t\tModuleId: pulumi.StringRef(\"k8s-module\"),\n\t\t\tName:     \"KUBECONFIG\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.LookupEnvironmentVariable(ctx, \u0026GetEnvironmentVariableArgs{\n\t\t\tName:    \"KUBECONFIG\",\n\t\t\tStackId: pulumi.StringRef(\"k8s-core\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ireland-kubeconfig = SpaceliftFunctions.getEnvironmentVariable(GetEnvironmentVariableArgs.builder()\n            .contextId(\"prod-k8s-ie\")\n            .name(\"KUBECONFIG\")\n            .build());\n\n        final var module-kubeconfig = SpaceliftFunctions.getEnvironmentVariable(GetEnvironmentVariableArgs.builder()\n            .moduleId(\"k8s-module\")\n            .name(\"KUBECONFIG\")\n            .build());\n\n        final var core-kubeconfig = SpaceliftFunctions.getEnvironmentVariable(GetEnvironmentVariableArgs.builder()\n            .name(\"KUBECONFIG\")\n            .stackId(\"k8s-core\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ireland-kubeconfig:\n    Fn::Invoke:\n      Function: spacelift:getEnvironmentVariable\n      Arguments:\n        contextId: prod-k8s-ie\n        name: KUBECONFIG\n  module-kubeconfig:\n    Fn::Invoke:\n      Function: spacelift:getEnvironmentVariable\n      Arguments:\n        moduleId: k8s-module\n        name: KUBECONFIG\n  core-kubeconfig:\n    Fn::Invoke:\n      Function: spacelift:getEnvironmentVariable\n      Arguments:\n        name: KUBECONFIG\n        stackId: k8s-core\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironmentVariable.\n",
                "properties": {
                    "contextId": {
                        "type": "string",
                        "description": "ID of the context on which the environment variable is defined\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module on which the environment variable is defined\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the environment variable\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack on which the environment variable is defined\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironmentVariable.\n",
                "properties": {
                    "checksum": {
                        "type": "string",
                        "description": "SHA-256 checksum of the value\n"
                    },
                    "contextId": {
                        "type": "string",
                        "description": "ID of the context on which the environment variable is defined\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module on which the environment variable is defined\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the environment variable\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack on which the environment variable is defined\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "value of the environment variable\n"
                    },
                    "writeOnly": {
                        "type": "boolean",
                        "description": "indicates whether the value can be read back outside a Run\n"
                    }
                },
                "type": "object",
                "required": [
                    "checksum",
                    "name",
                    "value",
                    "writeOnly",
                    "id"
                ]
            }
        },
        "spacelift:index/getGcpServiceAccount:getGcpServiceAccount": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// For a Module\nconst k8s_module = pulumi.output(spacelift.getGcpServiceAccount({\n    moduleId: \"k8s-module\",\n}));\n// For a Stack\nconst k8s_core = pulumi.output(spacelift.getGcpServiceAccount({\n    stackId: \"k8s-core\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nk8s_module = spacelift.get_gcp_service_account(module_id=\"k8s-module\")\nk8s_core = spacelift.get_gcp_service_account(stack_id=\"k8s-core\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_module = Spacelift.GetGcpServiceAccount.Invoke(new()\n    {\n        ModuleId = \"k8s-module\",\n    });\n\n    var k8s_core = Spacelift.GetGcpServiceAccount.Invoke(new()\n    {\n        StackId = \"k8s-core\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupGcpServiceAccount(ctx, \u0026GetGcpServiceAccountArgs{\n\t\t\tModuleId: pulumi.StringRef(\"k8s-module\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.LookupGcpServiceAccount(ctx, \u0026GetGcpServiceAccountArgs{\n\t\t\tStackId: pulumi.StringRef(\"k8s-core\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetGcpServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var k8s-module = SpaceliftFunctions.getGcpServiceAccount(GetGcpServiceAccountArgs.builder()\n            .moduleId(\"k8s-module\")\n            .build());\n\n        final var k8s-core = SpaceliftFunctions.getGcpServiceAccount(GetGcpServiceAccountArgs.builder()\n            .stackId(\"k8s-core\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  k8s-module:\n    Fn::Invoke:\n      Function: spacelift:getGcpServiceAccount\n      Arguments:\n        moduleId: k8s-module\n  k8s-core:\n    Fn::Invoke:\n      Function: spacelift:getGcpServiceAccount\n      Arguments:\n        stackId: k8s-core\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpServiceAccount.\n",
                "properties": {
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGcpServiceAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n"
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "email address of the GCP service account dedicated for this stack\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n"
                    },
                    "tokenScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of Google API scopes\n"
                    }
                },
                "type": "object",
                "required": [
                    "serviceAccountEmail",
                    "tokenScopes",
                    "id"
                ]
            }
        },
        "spacelift:index/getGithubEnterpriseIntegration:getGithubEnterpriseIntegration": {
            "description": "`spacelift.getGithubEnterpriseIntegration` returns details about Github Enterprise integration\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst githubEnterpriseIntegration = pulumi.output(spacelift.getGithubEnterpriseIntegration());\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\ngithub_enterprise_integration = spacelift.get_github_enterprise_integration()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var githubEnterpriseIntegration = Spacelift.GetGithubEnterpriseIntegration.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetGithubEnterpriseIntegration(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var githubEnterpriseIntegration = SpaceliftFunctions.getGithubEnterpriseIntegration();\n\n    }\n}\n```\n```yaml\nvariables:\n  githubEnterpriseIntegration:\n    Fn::Invoke:\n      Function: spacelift:getGithubEnterpriseIntegration\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getGithubEnterpriseIntegration.\n",
                "properties": {
                    "apiHost": {
                        "type": "string",
                        "description": "Github integration api host\n"
                    },
                    "appId": {
                        "type": "string",
                        "description": "Github integration app id\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "webhookSecret": {
                        "type": "string",
                        "description": "Github integration webhook secret\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiHost",
                    "appId",
                    "webhookSecret",
                    "id"
                ]
            }
        },
        "spacelift:index/getGitlabIntegration:getGitlabIntegration": {
            "description": "`spacelift.getGitlabIntegration` returns details about Gitlab integration\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst gitlabIntegration = pulumi.output(spacelift.getGitlabIntegration());\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\ngitlab_integration = spacelift.get_gitlab_integration()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gitlabIntegration = Spacelift.GetGitlabIntegration.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetGitlabIntegration(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var gitlabIntegration = SpaceliftFunctions.getGitlabIntegration();\n\n    }\n}\n```\n```yaml\nvariables:\n  gitlabIntegration:\n    Fn::Invoke:\n      Function: spacelift:getGitlabIntegration\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getGitlabIntegration.\n",
                "properties": {
                    "apiHost": {
                        "type": "string",
                        "description": "Gitlab integration api host\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "webhookSecret": {
                        "type": "string",
                        "description": "Gitlab integration webhook secret\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiHost",
                    "webhookSecret",
                    "id"
                ]
            }
        },
        "spacelift:index/getIPs:getIPs": {
            "description": "`spacelift.getIPs` returns the list of Spacelift's outgoing IP addresses, which you can use to whitelist connections coming from the Spacelift's \"mothership\".\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst ips = pulumi.output(spacelift.getIPs());\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nips = spacelift.get_ips()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ips = Spacelift.GetIPs.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetIPs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ips = SpaceliftFunctions.getIPs();\n\n    }\n}\n```\n```yaml\nvariables:\n  ips:\n    Fn::Invoke:\n      Function: spacelift:getIPs\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIPs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the list of spacelift.io outgoing IP addresses\n"
                    }
                },
                "type": "object",
                "required": [
                    "ips",
                    "id"
                ]
            }
        },
        "spacelift:index/getModule:getModule": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst k8s_module = pulumi.output(spacelift.getModule({\n    moduleId: \"k8s-module\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nk8s_module = spacelift.get_module(module_id=\"k8s-module\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_module = Spacelift.GetModule.Invoke(new()\n    {\n        ModuleId = \"k8s-module\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupModule(ctx, \u0026GetModuleArgs{\n\t\t\tModuleId: \"k8s-module\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetModuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var k8s-module = SpaceliftFunctions.getModule(GetModuleArgs.builder()\n            .moduleId(\"k8s-module\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  k8s-module:\n    Fn::Invoke:\n      Function: spacelift:getModule\n      Arguments:\n        moduleId: k8s-module\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getModule.\n",
                "properties": {
                    "moduleId": {
                        "type": "string",
                        "description": "ID (slug) of the module\n"
                    }
                },
                "type": "object",
                "required": [
                    "moduleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getModule.\n",
                "properties": {
                    "administrative": {
                        "type": "boolean",
                        "description": "indicates whether this module can administer others\n"
                    },
                    "awsAssumeRolePolicyStatement": {
                        "type": "string",
                        "description": "AWS IAM assume role policy statement setting up trust relationship\n"
                    },
                    "azureDevops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getModuleAzureDevop:getModuleAzureDevop"
                        },
                        "description": "Azure DevOps VCS settings\n"
                    },
                    "bitbucketClouds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getModuleBitbucketCloud:getModuleBitbucketCloud"
                        },
                        "description": "Bitbucket Cloud VCS settings\n"
                    },
                    "bitbucketDatacenters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getModuleBitbucketDatacenter:getModuleBitbucketDatacenter"
                        },
                        "description": "Bitbucket Datacenter VCS settings\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "GitHub branch to apply changes to\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "free-form module description for human users (supports Markdown)\n"
                    },
                    "githubEnterprises": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getModuleGithubEnterprise:getModuleGithubEnterprise"
                        },
                        "description": "GitHub Enterprise (self-hosted) VCS settings\n"
                    },
                    "gitlabs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getModuleGitlab:getModuleGitlab"
                        },
                        "description": "GitLab VCS settings\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID (slug) of the module\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectRoot": {
                        "type": "string",
                        "description": "Project root is the optional directory relative to the repository root containing the module source code.\n"
                    },
                    "protectFromDeletion": {
                        "type": "boolean",
                        "description": "Protect this module from accidental deletion. If set, attempts to delete this module will fail.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository, without the owner part\n"
                    },
                    "sharedAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the accounts (subdomains) which should have access to the Module\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the module is in\n"
                    },
                    "terraformProvider": {
                        "type": "string"
                    },
                    "workerPoolId": {
                        "type": "string",
                        "description": "ID of the worker pool to use\n"
                    }
                },
                "type": "object",
                "required": [
                    "administrative",
                    "awsAssumeRolePolicyStatement",
                    "azureDevops",
                    "bitbucketClouds",
                    "bitbucketDatacenters",
                    "branch",
                    "description",
                    "githubEnterprises",
                    "gitlabs",
                    "labels",
                    "moduleId",
                    "name",
                    "projectRoot",
                    "protectFromDeletion",
                    "repository",
                    "sharedAccounts",
                    "spaceId",
                    "terraformProvider",
                    "workerPoolId",
                    "id"
                ]
            }
        },
        "spacelift:index/getMountedfile:getMountedfile": {
            "description": "`spacelift.Mountedfile` represents a file mounted in each Run's workspace that is part of a configuration of a context (`spacelift.Context`), stack (`spacelift.Stack`) or a module (`spacelift.Module`). In principle, it's very similar to an environment variable (`spacelift.EnvironmentVariable`) except that the value is written to the filesystem rather than passed to the environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// For a context\nconst ireland_kubeconfig = pulumi.output(spacelift.getMountedfile({\n    contextId: \"prod-k8s-ie\",\n    relativePath: \"kubeconfig\",\n}));\n// For a module\nconst module_kubeconfig = pulumi.output(spacelift.getMountedfile({\n    moduleId: \"k8s-module\",\n    relativePath: \"kubeconfig\",\n}));\n// For a stack\nconst core_kubeconfig = pulumi.output(spacelift.getMountedfile({\n    relativePath: \"kubeconfig\",\n    stackId: \"k8s-core\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nireland_kubeconfig = spacelift.get_mountedfile(context_id=\"prod-k8s-ie\",\n    relative_path=\"kubeconfig\")\nmodule_kubeconfig = spacelift.get_mountedfile(module_id=\"k8s-module\",\n    relative_path=\"kubeconfig\")\ncore_kubeconfig = spacelift.get_mountedfile(relative_path=\"kubeconfig\",\n    stack_id=\"k8s-core\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ireland_kubeconfig = Spacelift.GetMountedfile.Invoke(new()\n    {\n        ContextId = \"prod-k8s-ie\",\n        RelativePath = \"kubeconfig\",\n    });\n\n    var module_kubeconfig = Spacelift.GetMountedfile.Invoke(new()\n    {\n        ModuleId = \"k8s-module\",\n        RelativePath = \"kubeconfig\",\n    });\n\n    var core_kubeconfig = Spacelift.GetMountedfile.Invoke(new()\n    {\n        RelativePath = \"kubeconfig\",\n        StackId = \"k8s-core\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupMountedfile(ctx, \u0026GetMountedfileArgs{\n\t\t\tContextId:    pulumi.StringRef(\"prod-k8s-ie\"),\n\t\t\tRelativePath: \"kubeconfig\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.LookupMountedfile(ctx, \u0026GetMountedfileArgs{\n\t\t\tModuleId:     pulumi.StringRef(\"k8s-module\"),\n\t\t\tRelativePath: \"kubeconfig\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.LookupMountedfile(ctx, \u0026GetMountedfileArgs{\n\t\t\tRelativePath: \"kubeconfig\",\n\t\t\tStackId:      pulumi.StringRef(\"k8s-core\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetMountedfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ireland-kubeconfig = SpaceliftFunctions.getMountedfile(GetMountedfileArgs.builder()\n            .contextId(\"prod-k8s-ie\")\n            .relativePath(\"kubeconfig\")\n            .build());\n\n        final var module-kubeconfig = SpaceliftFunctions.getMountedfile(GetMountedfileArgs.builder()\n            .moduleId(\"k8s-module\")\n            .relativePath(\"kubeconfig\")\n            .build());\n\n        final var core-kubeconfig = SpaceliftFunctions.getMountedfile(GetMountedfileArgs.builder()\n            .relativePath(\"kubeconfig\")\n            .stackId(\"k8s-core\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ireland-kubeconfig:\n    Fn::Invoke:\n      Function: spacelift:getMountedfile\n      Arguments:\n        contextId: prod-k8s-ie\n        relativePath: kubeconfig\n  module-kubeconfig:\n    Fn::Invoke:\n      Function: spacelift:getMountedfile\n      Arguments:\n        moduleId: k8s-module\n        relativePath: kubeconfig\n  core-kubeconfig:\n    Fn::Invoke:\n      Function: spacelift:getMountedfile\n      Arguments:\n        relativePath: kubeconfig\n        stackId: k8s-core\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMountedfile.\n",
                "properties": {
                    "contextId": {
                        "type": "string",
                        "description": "ID of the context where the mounted file is stored\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module where the mounted file is stored\n"
                    },
                    "relativePath": {
                        "type": "string",
                        "description": "relative path to the mounted file\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack where the mounted file is stored\n"
                    }
                },
                "type": "object",
                "required": [
                    "relativePath"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMountedfile.\n",
                "properties": {
                    "checksum": {
                        "type": "string",
                        "description": "SHA-256 checksum of the value\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "content of the mounted file encoded using Base-64\n"
                    },
                    "contextId": {
                        "type": "string",
                        "description": "ID of the context where the mounted file is stored\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module where the mounted file is stored\n"
                    },
                    "relativePath": {
                        "type": "string",
                        "description": "relative path to the mounted file\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack where the mounted file is stored\n"
                    },
                    "writeOnly": {
                        "type": "boolean",
                        "description": "indicates whether the value can be read back outside a Run\n"
                    }
                },
                "type": "object",
                "required": [
                    "checksum",
                    "content",
                    "relativePath",
                    "writeOnly",
                    "id"
                ]
            }
        },
        "spacelift:index/getPolicies:getPolicies": {
            "description": "`spacelift.getPolicies` can find all policies that have certain labels.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst all = spacelift.getPolicies({});\nconst planAutoattach = spacelift.getPolicies({\n    type: \"PLAN\",\n    labels: [\"autoattach\"],\n});\nexport const policyIds = data.spacelift_policies[\"this\"].policies.map(__item =\u003e __item.id);\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nall = spacelift.get_policies()\nplan_autoattach = spacelift.get_policies(type=\"PLAN\",\n    labels=[\"autoattach\"])\npulumi.export(\"policyIds\", [__item[\"id\"] for __item in data[\"spacelift_policies\"][\"this\"][\"policies\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Spacelift.GetPolicies.Invoke();\n\n    var planAutoattach = Spacelift.GetPolicies.Invoke(new()\n    {\n        Type = \"PLAN\",\n        Labels = new[]\n        {\n            \"autoattach\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"policyIds\"] = data.Spacelift_policies.This.Policies.Select(__item =\u003e __item.Id).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetPolicies(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.GetPolicies(ctx, \u0026GetPoliciesArgs{\n\t\t\tType: pulumi.StringRef(\"PLAN\"),\n\t\t\tLabels: []string{\n\t\t\t\t\"autoattach\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []interface{}\n\t\tfor _, val0 := range data.Spacelift_policies.This.Policies {\n\t\t\tsplat0 = append(splat0, val0.Id)\n\t\t}\n\t\tctx.Export(\"policyIds\", splat0)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetPoliciesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = SpaceliftFunctions.getPolicies();\n\n        final var planAutoattach = SpaceliftFunctions.getPolicies(GetPoliciesArgs.builder()\n            .type(\"PLAN\")\n            .labels(\"autoattach\")\n            .build());\n\n        ctx.export(\"policyIds\", data.spacelift_policies().this().policies().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicies.\n",
                "properties": {
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "required labels to match\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "required policy type\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicies.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "required labels to match\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getPoliciesPolicy:getPoliciesPolicy"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "required policy type\n"
                    }
                },
                "type": "object",
                "required": [
                    "policies",
                    "id"
                ]
            }
        },
        "spacelift:index/getPolicy:getPolicy": {
            "description": "`spacelift.Policy` represents a Spacelift **policy** - a collection of customer-defined rules that are applied by Spacelift at one of the decision points within the application.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst policy = spacelift.getPolicy({\n    policyId: spacelift_policy.policy.id,\n});\nexport const policyBody = policy.then(policy =\u003e policy.body);\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\npolicy = spacelift.get_policy(policy_id=spacelift_policy[\"policy\"][\"id\"])\npulumi.export(\"policyBody\", policy.body)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var policy = Spacelift.GetPolicy.Invoke(new()\n    {\n        PolicyId = spacelift_policy.Policy.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"policyBody\"] = policy.Apply(getPolicyResult =\u003e getPolicyResult.Body),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpolicy, err := spacelift.LookupPolicy(ctx, \u0026GetPolicyArgs{\n\t\t\tPolicyId: spacelift_policy.Policy.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"policyBody\", policy.Body)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var policy = SpaceliftFunctions.getPolicy(GetPolicyArgs.builder()\n            .policyId(spacelift_policy.policy().id())\n            .build());\n\n        ctx.export(\"policyBody\", policy.applyValue(getPolicyResult -\u003e getPolicyResult.body()));\n    }\n}\n```\n```yaml\nvariables:\n  policy:\n    Fn::Invoke:\n      Function: spacelift:getPolicy\n      Arguments:\n        policyId: ${spacelift_policy.policy.id}\noutputs:\n  policyBody: ${policy.body}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicy.\n",
                "properties": {
                    "policyId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the policy\n"
                    }
                },
                "type": "object",
                "required": [
                    "policyId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicy.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "body of the policy\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the policy\n"
                    },
                    "policyId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the policy\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the policy is in\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of the policy\n"
                    }
                },
                "type": "object",
                "required": [
                    "body",
                    "labels",
                    "name",
                    "policyId",
                    "spaceId",
                    "type",
                    "id"
                ]
            }
        },
        "spacelift:index/getSpace:getSpace": {
            "description": "`spacelift.Space` represents a Spacelift **space** - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst space = spacelift.getSpace({\n    spaceId: spacelift_space.space.id,\n});\nexport const spaceDescription = space.then(space =\u003e space.description);\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nspace = spacelift.get_space(space_id=spacelift_space[\"space\"][\"id\"])\npulumi.export(\"spaceDescription\", space.description)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var space = Spacelift.GetSpace.Invoke(new()\n    {\n        SpaceId = spacelift_space.Space.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"spaceDescription\"] = space.Apply(getSpaceResult =\u003e getSpaceResult.Description),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspace, err := spacelift.LookupSpace(ctx, \u0026GetSpaceArgs{\n\t\t\tSpaceId: spacelift_space.Space.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"spaceDescription\", space.Description)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetSpaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var space = SpaceliftFunctions.getSpace(GetSpaceArgs.builder()\n            .spaceId(spacelift_space.space().id())\n            .build());\n\n        ctx.export(\"spaceDescription\", space.applyValue(getSpaceResult -\u003e getSpaceResult.description()));\n    }\n}\n```\n```yaml\nvariables:\n  space:\n    Fn::Invoke:\n      Function: spacelift:getSpace\n      Arguments:\n        spaceId: ${spacelift_space.space.id}\noutputs:\n  spaceDescription: ${space.description}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSpace.\n",
                "properties": {
                    "spaceId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the space\n"
                    }
                },
                "type": "object",
                "required": [
                    "spaceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSpace.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "free-form space description for users\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inheritEntities": {
                        "type": "boolean",
                        "description": "indication whether access to this space inherits read access to entities from the parent space\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the space\n"
                    },
                    "parentSpaceId": {
                        "type": "string",
                        "description": "immutable ID (slug) of parent space\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "immutable ID (slug) of the space\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "inheritEntities",
                    "name",
                    "parentSpaceId",
                    "spaceId",
                    "id"
                ]
            }
        },
        "spacelift:index/getStack:getStack": {
            "description": "`spacelift.Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst k8s_core = pulumi.output(spacelift.getStack({\n    stackId: \"k8s-core\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nk8s_core = spacelift.get_stack(stack_id=\"k8s-core\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_core = Spacelift.GetStack.Invoke(new()\n    {\n        StackId = \"k8s-core\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupStack(ctx, \u0026GetStackArgs{\n\t\t\tStackId: \"k8s-core\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetStackArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var k8s-core = SpaceliftFunctions.getStack(GetStackArgs.builder()\n            .stackId(\"k8s-core\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  k8s-core:\n    Fn::Invoke:\n      Function: spacelift:getStack\n      Arguments:\n        stackId: k8s-core\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStack.\n",
                "properties": {
                    "afterApplies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-apply scripts\n"
                    },
                    "afterDestroys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-destroy scripts\n"
                    },
                    "afterInits": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-init scripts\n"
                    },
                    "afterPerforms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-perform scripts\n"
                    },
                    "afterPlans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-plan scripts\n"
                    },
                    "beforeApplies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-apply scripts\n"
                    },
                    "beforeDestroys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-destroy scripts\n"
                    },
                    "beforeInits": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-init scripts\n"
                    },
                    "beforePerforms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-perform scripts\n"
                    },
                    "beforePlans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-plan scripts\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID (slug) of the stack\n"
                    }
                },
                "type": "object",
                "required": [
                    "stackId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStack.\n",
                "properties": {
                    "administrative": {
                        "type": "boolean",
                        "description": "indicates whether this stack can administer others\n"
                    },
                    "afterApplies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-apply scripts\n"
                    },
                    "afterDestroys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-destroy scripts\n"
                    },
                    "afterInits": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-init scripts\n"
                    },
                    "afterPerforms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-perform scripts\n"
                    },
                    "afterPlans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of after-plan scripts\n"
                    },
                    "ansibles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackAnsible:getStackAnsible"
                        },
                        "description": "Ansible-specific configuration. Presence means this Stack is an Ansible Stack.\n"
                    },
                    "autodeploy": {
                        "type": "boolean",
                        "description": "indicates whether changes to this stack can be automatically deployed\n"
                    },
                    "autoretry": {
                        "type": "boolean",
                        "description": "indicates whether obsolete proposed changes should automatically be retried\n"
                    },
                    "awsAssumeRolePolicyStatement": {
                        "type": "string",
                        "description": "AWS IAM assume role policy statement setting up trust relationship\n"
                    },
                    "azureDevops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackAzureDevop:getStackAzureDevop"
                        },
                        "description": "Azure DevOps VCS settings\n"
                    },
                    "beforeApplies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-apply scripts\n"
                    },
                    "beforeDestroys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-destroy scripts\n"
                    },
                    "beforeInits": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-init scripts\n"
                    },
                    "beforePerforms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-perform scripts\n"
                    },
                    "beforePlans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of before-plan scripts\n"
                    },
                    "bitbucketClouds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackBitbucketCloud:getStackBitbucketCloud"
                        },
                        "description": "Bitbucket Cloud VCS settings\n"
                    },
                    "bitbucketDatacenters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackBitbucketDatacenter:getStackBitbucketDatacenter"
                        },
                        "description": "Bitbucket Datacenter VCS settings\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Repository branch to treat as the default 'main' branch\n"
                    },
                    "cloudformations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackCloudformation:getStackCloudformation"
                        },
                        "description": "CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "free-form stack description for users\n"
                    },
                    "enableLocalPreview": {
                        "type": "boolean",
                        "description": "Indicates whether local preview runs can be triggered on this Stack.\n"
                    },
                    "githubEnterprises": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackGithubEnterprise:getStackGithubEnterprise"
                        },
                        "description": "GitHub Enterprise (self-hosted) VCS settings\n"
                    },
                    "gitlabs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackGitlab:getStackGitlab"
                        },
                        "description": "GitLab VCS settings\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kubernetes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackKubernete:getStackKubernete"
                        },
                        "description": "Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "manageState": {
                        "type": "boolean",
                        "description": "Determines if Spacelift should manage state for this stack\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the stack - should be unique in one account\n"
                    },
                    "projectRoot": {
                        "type": "string",
                        "description": "Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.\n"
                    },
                    "protectFromDeletion": {
                        "type": "boolean",
                        "description": "Protect this stack from accidental deletion. If set, attempts to delete this stack will fail.\n"
                    },
                    "pulumis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackPulumi:getStackPulumi"
                        },
                        "description": "Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository, without the owner part\n"
                    },
                    "runnerImage": {
                        "type": "string",
                        "description": "Name of the Docker image used to process Runs\n"
                    },
                    "showcases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getStackShowcase:getStackShowcase"
                        },
                        "description": "Showcase-related attributes\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the stack is in\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID (slug) of the stack\n"
                    },
                    "terraformSmartSanitization": {
                        "type": "boolean"
                    },
                    "terraformVersion": {
                        "type": "string"
                    },
                    "terraformWorkspace": {
                        "type": "string"
                    },
                    "workerPoolId": {
                        "type": "string",
                        "description": "ID of the worker pool to use\n"
                    }
                },
                "type": "object",
                "required": [
                    "administrative",
                    "ansibles",
                    "autodeploy",
                    "autoretry",
                    "awsAssumeRolePolicyStatement",
                    "azureDevops",
                    "bitbucketClouds",
                    "bitbucketDatacenters",
                    "branch",
                    "cloudformations",
                    "description",
                    "enableLocalPreview",
                    "githubEnterprises",
                    "gitlabs",
                    "kubernetes",
                    "labels",
                    "manageState",
                    "name",
                    "projectRoot",
                    "protectFromDeletion",
                    "pulumis",
                    "repository",
                    "runnerImage",
                    "showcases",
                    "spaceId",
                    "stackId",
                    "terraformSmartSanitization",
                    "terraformVersion",
                    "terraformWorkspace",
                    "workerPoolId",
                    "id"
                ]
            }
        },
        "spacelift:index/getStackAwsRole:getStackAwsRole": {
            "description": "\u003e **Note:** `spacelift.StackAwsRole` is deprecated. Please use `spacelift.AwsRole` instead. The functionality is identical.\n\n`spacelift.StackAwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.\n\nIf you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).\n\nNote: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// For a Module\nconst k8s_module = pulumi.output(spacelift.getStackAwsRole({\n    moduleId: \"k8s-module\",\n}));\n// For a Stack\nconst k8s_core = pulumi.output(spacelift.getStackAwsRole({\n    stackId: \"k8s-core\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nk8s_module = spacelift.get_stack_aws_role(module_id=\"k8s-module\")\nk8s_core = spacelift.get_stack_aws_role(stack_id=\"k8s-core\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_module = Spacelift.GetStackAwsRole.Invoke(new()\n    {\n        ModuleId = \"k8s-module\",\n    });\n\n    var k8s_core = Spacelift.GetStackAwsRole.Invoke(new()\n    {\n        StackId = \"k8s-core\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupStackAwsRole(ctx, \u0026GetStackAwsRoleArgs{\n\t\t\tModuleId: pulumi.StringRef(\"k8s-module\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.LookupStackAwsRole(ctx, \u0026GetStackAwsRoleArgs{\n\t\t\tStackId: pulumi.StringRef(\"k8s-core\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetStackAwsRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var k8s-module = SpaceliftFunctions.getStackAwsRole(GetStackAwsRoleArgs.builder()\n            .moduleId(\"k8s-module\")\n            .build());\n\n        final var k8s-core = SpaceliftFunctions.getStackAwsRole(GetStackAwsRoleArgs.builder()\n            .stackId(\"k8s-core\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  k8s-module:\n    Fn::Invoke:\n      Function: spacelift:getStackAwsRole\n      Arguments:\n        moduleId: k8s-module\n  k8s-core:\n    Fn::Invoke:\n      Function: spacelift:getStackAwsRole\n      Arguments:\n        stackId: k8s-core\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStackAwsRole.\n",
                "properties": {
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module which assumes the AWS IAM role\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which assumes the AWS IAM role\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStackAwsRole.\n",
                "properties": {
                    "durationSeconds": {
                        "type": "integer",
                        "description": "AWS IAM role session duration in seconds\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Custom external ID (works only for private workers).\n"
                    },
                    "generateCredentialsInWorker": {
                        "type": "boolean",
                        "description": "Generate AWS credentials in the private worker\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the module which assumes the AWS IAM role\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "ARN of the AWS IAM role to attach\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which assumes the AWS IAM role\n"
                    }
                },
                "type": "object",
                "required": [
                    "durationSeconds",
                    "externalId",
                    "generateCredentialsInWorker",
                    "roleArn",
                    "id"
                ]
            }
        },
        "spacelift:index/getStackGcpServiceAccount:getStackGcpServiceAccount": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\n// For a Module\nconst k8s_module = pulumi.output(spacelift.getStackGcpServiceAccount({\n    moduleId: \"k8s-module\",\n}));\n// For a Stack\nconst k8s_core = pulumi.output(spacelift.getStackGcpServiceAccount({\n    stackId: \"k8s-core\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nk8s_module = spacelift.get_stack_gcp_service_account(module_id=\"k8s-module\")\nk8s_core = spacelift.get_stack_gcp_service_account(stack_id=\"k8s-core\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_module = Spacelift.GetStackGcpServiceAccount.Invoke(new()\n    {\n        ModuleId = \"k8s-module\",\n    });\n\n    var k8s_core = Spacelift.GetStackGcpServiceAccount.Invoke(new()\n    {\n        StackId = \"k8s-core\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupStackGcpServiceAccount(ctx, \u0026GetStackGcpServiceAccountArgs{\n\t\t\tModuleId: pulumi.StringRef(\"k8s-module\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = spacelift.LookupStackGcpServiceAccount(ctx, \u0026GetStackGcpServiceAccountArgs{\n\t\t\tStackId: pulumi.StringRef(\"k8s-core\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetStackGcpServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var k8s-module = SpaceliftFunctions.getStackGcpServiceAccount(GetStackGcpServiceAccountArgs.builder()\n            .moduleId(\"k8s-module\")\n            .build());\n\n        final var k8s-core = SpaceliftFunctions.getStackGcpServiceAccount(GetStackGcpServiceAccountArgs.builder()\n            .stackId(\"k8s-core\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  k8s-module:\n    Fn::Invoke:\n      Function: spacelift:getStackGcpServiceAccount\n      Arguments:\n        moduleId: k8s-module\n  k8s-core:\n    Fn::Invoke:\n      Function: spacelift:getStackGcpServiceAccount\n      Arguments:\n        stackId: k8s-core\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStackGcpServiceAccount.\n",
                "properties": {
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStackGcpServiceAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n"
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "email address of the GCP service account dedicated for this stack\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which uses GCP service account credentials\n"
                    },
                    "tokenScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of Google API scopes\n"
                    }
                },
                "type": "object",
                "required": [
                    "serviceAccountEmail",
                    "tokenScopes",
                    "id"
                ]
            }
        },
        "spacelift:index/getVcsAgentPool:getVcsAgentPool": {
            "description": "`spacelift.VcsAgentPool` represents a Spacelift **VCS agent pool** - a logical group of proxies allowing Spacelift to access private VCS installations\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst ghe = pulumi.output(spacelift.getContext({\n    vcsAgentPoolId: \"01FMQWT1P8BKRZF364SWVF9XYG\",\n}));\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ghe = SpaceliftFunctions.getContext(GetContextArgs.builder()\n            .vcsAgentPoolId(\"01FMQWT1P8BKRZF364SWVF9XYG\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ghe:\n    Fn::Invoke:\n      Function: spacelift:getContext\n      Arguments:\n        vcsAgentPoolId: 01FMQWT1P8BKRZF364SWVF9XYG\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVcsAgentPool.\n",
                "properties": {
                    "vcsAgentPoolId": {
                        "type": "string",
                        "description": "ID of the VCS agent pool to retrieve\n"
                    }
                },
                "type": "object",
                "required": [
                    "vcsAgentPoolId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVcsAgentPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Free-form VCS agent pool description for users\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VCS agent pool\n"
                    },
                    "vcsAgentPoolId": {
                        "type": "string",
                        "description": "ID of the VCS agent pool to retrieve\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "vcsAgentPoolId",
                    "id"
                ]
            }
        },
        "spacelift:index/getVcsAgentPools:getVcsAgentPools": {
            "description": "`spacelift.getVcsAgentPools` represents the VCS agent pools assigned to the Spacelift account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst vcs_agent_pools = pulumi.output(spacelift.getVcsAgentPools());\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nvcs_agent_pools = spacelift.get_vcs_agent_pools()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vcs_agent_pools = Spacelift.GetVcsAgentPools.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetVcsAgentPools(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vcs-agent-pools = SpaceliftFunctions.getVcsAgentPools();\n\n    }\n}\n```\n```yaml\nvariables:\n  vcs-agent-pools:\n    Fn::Invoke:\n      Function: spacelift:getVcsAgentPools\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getVcsAgentPools.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "vcsAgentPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getVcsAgentPoolsVcsAgentPool:getVcsAgentPoolsVcsAgentPool"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vcsAgentPools",
                    "id"
                ]
            }
        },
        "spacelift:index/getWebhook:getWebhook": {
            "description": "`spacelift.Webook` represents a webhook endpoint to which Spacelift sends the POST request about run state changes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst webhook = spacelift.getWebhook({\n    webhookId: spacelift_webhook.webhook.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nwebhook = spacelift.get_webhook(webhook_id=spacelift_webhook[\"webhook\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhook = Spacelift.GetWebhook.Invoke(new()\n    {\n        WebhookId = spacelift_webhook.Webhook.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetWebhook(ctx, \u0026GetWebhookArgs{\n\t\t\tWebhookId: spacelift_webhook.Webhook.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetWebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var webhook = SpaceliftFunctions.getWebhook(GetWebhookArgs.builder()\n            .webhookId(spacelift_webhook.webhook().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  webhook:\n    Fn::Invoke:\n      Function: spacelift:getWebhook\n      Arguments:\n        webhookId: ${spacelift_webhook.webhook.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWebhook.\n",
                "properties": {
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the stack which triggers the webhooks\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which triggers the webhooks\n"
                    },
                    "webhookId": {
                        "type": "string",
                        "description": "ID of the webhook\n"
                    }
                },
                "type": "object",
                "required": [
                    "webhookId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWebhook.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "enables or disables sending webhooks\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "endpoint to send the POST request to\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "moduleId": {
                        "type": "string",
                        "description": "ID of the stack which triggers the webhooks\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "secret used to sign each POST request so you're able to verify that the request comes from us\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "ID of the stack which triggers the webhooks\n"
                    },
                    "webhookId": {
                        "type": "string",
                        "description": "ID of the webhook\n"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "endpoint",
                    "secret",
                    "webhookId",
                    "id"
                ]
            }
        },
        "spacelift:index/getWorkerPool:getWorkerPool": {
            "description": "`spacelift.WorkerPool` represents a worker pool assigned to the Spacelift account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst k8s_core = pulumi.output(spacelift.getWorkerPool({\n    workerPoolId: \"k8s-core\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nk8s_core = spacelift.get_worker_pool(worker_pool_id=\"k8s-core\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8s_core = Spacelift.GetWorkerPool.Invoke(new()\n    {\n        WorkerPoolId = \"k8s-core\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.LookupWorkerPool(ctx, \u0026GetWorkerPoolArgs{\n\t\t\tWorkerPoolId: \"k8s-core\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport com.pulumi.spacelift.inputs.GetWorkerPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var k8s-core = SpaceliftFunctions.getWorkerPool(GetWorkerPoolArgs.builder()\n            .workerPoolId(\"k8s-core\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  k8s-core:\n    Fn::Invoke:\n      Function: spacelift:getWorkerPool\n      Arguments:\n        workerPoolId: k8s-core\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkerPool.\n",
                "properties": {
                    "workerPoolId": {
                        "type": "string",
                        "description": "ID of the worker pool\n"
                    }
                },
                "type": "object",
                "required": [
                    "workerPoolId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWorkerPool.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "credentials necessary to connect WorkerPool's workers to the control plane\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the worker pool\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the worker pool\n"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "ID (slug) of the space the worker pool is in\n"
                    },
                    "workerPoolId": {
                        "type": "string",
                        "description": "ID of the worker pool\n"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "description",
                    "labels",
                    "name",
                    "spaceId",
                    "workerPoolId",
                    "id"
                ]
            }
        },
        "spacelift:index/getWorkerPools:getWorkerPools": {
            "description": "`spacelift.getWorkerPools` represents the worker pools assigned to the Spacelift account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spacelift from \"@pulumi/spacelift\";\n\nconst worker_pools = pulumi.output(spacelift.getWorkerPools());\n```\n```python\nimport pulumi\nimport pulumi_spacelift as spacelift\n\nworker_pools = spacelift.get_worker_pools()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Spacelift = Pulumi.Spacelift;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var worker_pools = Spacelift.GetWorkerPools.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := spacelift.GetWorkerPools(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spacelift.SpaceliftFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var worker-pools = SpaceliftFunctions.getWorkerPools();\n\n    }\n}\n```\n```yaml\nvariables:\n  worker-pools:\n    Fn::Invoke:\n      Function: spacelift:getWorkerPools\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getWorkerPools.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "workerPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/spacelift:index/getWorkerPoolsWorkerPool:getWorkerPoolsWorkerPool"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "workerPools",
                    "id"
                ]
            }
        }
    }
}