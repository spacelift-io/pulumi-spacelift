// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.Context` represents a Spacelift **context** - a collection of configuration elements (either environment variables or mounted files) that can be administratively attached to multiple stacks (`spacelift.Stack`) or modules (`spacelift.Module`) using a context attachment (`spacelift.ContextAttachment`)`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var prod_k8s_ie = new Spacelift.Context("prod-k8s-ie", new()
    ///     {
    ///         Description = "Configuration details for the compute cluster in ðŸ‡®ðŸ‡ª",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/context:Context prod-k8s-ie $CONTEXT_ID
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/context:Context")]
    public partial class Context : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of after-apply scripts
        /// </summary>
        [Output("afterApplies")]
        public Output<ImmutableArray<string>> AfterApplies { get; private set; } = null!;

        /// <summary>
        /// List of after-destroy scripts
        /// </summary>
        [Output("afterDestroys")]
        public Output<ImmutableArray<string>> AfterDestroys { get; private set; } = null!;

        /// <summary>
        /// List of after-init scripts
        /// </summary>
        [Output("afterInits")]
        public Output<ImmutableArray<string>> AfterInits { get; private set; } = null!;

        /// <summary>
        /// List of after-perform scripts
        /// </summary>
        [Output("afterPerforms")]
        public Output<ImmutableArray<string>> AfterPerforms { get; private set; } = null!;

        /// <summary>
        /// List of after-plan scripts
        /// </summary>
        [Output("afterPlans")]
        public Output<ImmutableArray<string>> AfterPlans { get; private set; } = null!;

        /// <summary>
        /// List of after-run scripts
        /// </summary>
        [Output("afterRuns")]
        public Output<ImmutableArray<string>> AfterRuns { get; private set; } = null!;

        /// <summary>
        /// List of before-apply scripts
        /// </summary>
        [Output("beforeApplies")]
        public Output<ImmutableArray<string>> BeforeApplies { get; private set; } = null!;

        /// <summary>
        /// List of before-destroy scripts
        /// </summary>
        [Output("beforeDestroys")]
        public Output<ImmutableArray<string>> BeforeDestroys { get; private set; } = null!;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        [Output("beforeInits")]
        public Output<ImmutableArray<string>> BeforeInits { get; private set; } = null!;

        /// <summary>
        /// List of before-perform scripts
        /// </summary>
        [Output("beforePerforms")]
        public Output<ImmutableArray<string>> BeforePerforms { get; private set; } = null!;

        /// <summary>
        /// List of before-plan scripts
        /// </summary>
        [Output("beforePlans")]
        public Output<ImmutableArray<string>> BeforePlans { get; private set; } = null!;

        /// <summary>
        /// Free-form context description for users
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the context - should be unique in one account
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID (slug) of the space the context is in
        /// </summary>
        [Output("spaceId")]
        public Output<string> SpaceId { get; private set; } = null!;


        /// <summary>
        /// Create a Context resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Context(string name, ContextArgs? args = null, CustomResourceOptions? options = null)
            : base("spacelift:index/context:Context", name, args ?? new ContextArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Context(string name, Input<string> id, ContextState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/context:Context", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Context resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Context Get(string name, Input<string> id, ContextState? state = null, CustomResourceOptions? options = null)
        {
            return new Context(name, id, state, options);
        }
    }

    public sealed class ContextArgs : global::Pulumi.ResourceArgs
    {
        [Input("afterApplies")]
        private InputList<string>? _afterApplies;

        /// <summary>
        /// List of after-apply scripts
        /// </summary>
        public InputList<string> AfterApplies
        {
            get => _afterApplies ?? (_afterApplies = new InputList<string>());
            set => _afterApplies = value;
        }

        [Input("afterDestroys")]
        private InputList<string>? _afterDestroys;

        /// <summary>
        /// List of after-destroy scripts
        /// </summary>
        public InputList<string> AfterDestroys
        {
            get => _afterDestroys ?? (_afterDestroys = new InputList<string>());
            set => _afterDestroys = value;
        }

        [Input("afterInits")]
        private InputList<string>? _afterInits;

        /// <summary>
        /// List of after-init scripts
        /// </summary>
        public InputList<string> AfterInits
        {
            get => _afterInits ?? (_afterInits = new InputList<string>());
            set => _afterInits = value;
        }

        [Input("afterPerforms")]
        private InputList<string>? _afterPerforms;

        /// <summary>
        /// List of after-perform scripts
        /// </summary>
        public InputList<string> AfterPerforms
        {
            get => _afterPerforms ?? (_afterPerforms = new InputList<string>());
            set => _afterPerforms = value;
        }

        [Input("afterPlans")]
        private InputList<string>? _afterPlans;

        /// <summary>
        /// List of after-plan scripts
        /// </summary>
        public InputList<string> AfterPlans
        {
            get => _afterPlans ?? (_afterPlans = new InputList<string>());
            set => _afterPlans = value;
        }

        [Input("afterRuns")]
        private InputList<string>? _afterRuns;

        /// <summary>
        /// List of after-run scripts
        /// </summary>
        public InputList<string> AfterRuns
        {
            get => _afterRuns ?? (_afterRuns = new InputList<string>());
            set => _afterRuns = value;
        }

        [Input("beforeApplies")]
        private InputList<string>? _beforeApplies;

        /// <summary>
        /// List of before-apply scripts
        /// </summary>
        public InputList<string> BeforeApplies
        {
            get => _beforeApplies ?? (_beforeApplies = new InputList<string>());
            set => _beforeApplies = value;
        }

        [Input("beforeDestroys")]
        private InputList<string>? _beforeDestroys;

        /// <summary>
        /// List of before-destroy scripts
        /// </summary>
        public InputList<string> BeforeDestroys
        {
            get => _beforeDestroys ?? (_beforeDestroys = new InputList<string>());
            set => _beforeDestroys = value;
        }

        [Input("beforeInits")]
        private InputList<string>? _beforeInits;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public InputList<string> BeforeInits
        {
            get => _beforeInits ?? (_beforeInits = new InputList<string>());
            set => _beforeInits = value;
        }

        [Input("beforePerforms")]
        private InputList<string>? _beforePerforms;

        /// <summary>
        /// List of before-perform scripts
        /// </summary>
        public InputList<string> BeforePerforms
        {
            get => _beforePerforms ?? (_beforePerforms = new InputList<string>());
            set => _beforePerforms = value;
        }

        [Input("beforePlans")]
        private InputList<string>? _beforePlans;

        /// <summary>
        /// List of before-plan scripts
        /// </summary>
        public InputList<string> BeforePlans
        {
            get => _beforePlans ?? (_beforePlans = new InputList<string>());
            set => _beforePlans = value;
        }

        /// <summary>
        /// Free-form context description for users
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the context - should be unique in one account
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID (slug) of the space the context is in
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        public ContextArgs()
        {
        }
        public static new ContextArgs Empty => new ContextArgs();
    }

    public sealed class ContextState : global::Pulumi.ResourceArgs
    {
        [Input("afterApplies")]
        private InputList<string>? _afterApplies;

        /// <summary>
        /// List of after-apply scripts
        /// </summary>
        public InputList<string> AfterApplies
        {
            get => _afterApplies ?? (_afterApplies = new InputList<string>());
            set => _afterApplies = value;
        }

        [Input("afterDestroys")]
        private InputList<string>? _afterDestroys;

        /// <summary>
        /// List of after-destroy scripts
        /// </summary>
        public InputList<string> AfterDestroys
        {
            get => _afterDestroys ?? (_afterDestroys = new InputList<string>());
            set => _afterDestroys = value;
        }

        [Input("afterInits")]
        private InputList<string>? _afterInits;

        /// <summary>
        /// List of after-init scripts
        /// </summary>
        public InputList<string> AfterInits
        {
            get => _afterInits ?? (_afterInits = new InputList<string>());
            set => _afterInits = value;
        }

        [Input("afterPerforms")]
        private InputList<string>? _afterPerforms;

        /// <summary>
        /// List of after-perform scripts
        /// </summary>
        public InputList<string> AfterPerforms
        {
            get => _afterPerforms ?? (_afterPerforms = new InputList<string>());
            set => _afterPerforms = value;
        }

        [Input("afterPlans")]
        private InputList<string>? _afterPlans;

        /// <summary>
        /// List of after-plan scripts
        /// </summary>
        public InputList<string> AfterPlans
        {
            get => _afterPlans ?? (_afterPlans = new InputList<string>());
            set => _afterPlans = value;
        }

        [Input("afterRuns")]
        private InputList<string>? _afterRuns;

        /// <summary>
        /// List of after-run scripts
        /// </summary>
        public InputList<string> AfterRuns
        {
            get => _afterRuns ?? (_afterRuns = new InputList<string>());
            set => _afterRuns = value;
        }

        [Input("beforeApplies")]
        private InputList<string>? _beforeApplies;

        /// <summary>
        /// List of before-apply scripts
        /// </summary>
        public InputList<string> BeforeApplies
        {
            get => _beforeApplies ?? (_beforeApplies = new InputList<string>());
            set => _beforeApplies = value;
        }

        [Input("beforeDestroys")]
        private InputList<string>? _beforeDestroys;

        /// <summary>
        /// List of before-destroy scripts
        /// </summary>
        public InputList<string> BeforeDestroys
        {
            get => _beforeDestroys ?? (_beforeDestroys = new InputList<string>());
            set => _beforeDestroys = value;
        }

        [Input("beforeInits")]
        private InputList<string>? _beforeInits;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public InputList<string> BeforeInits
        {
            get => _beforeInits ?? (_beforeInits = new InputList<string>());
            set => _beforeInits = value;
        }

        [Input("beforePerforms")]
        private InputList<string>? _beforePerforms;

        /// <summary>
        /// List of before-perform scripts
        /// </summary>
        public InputList<string> BeforePerforms
        {
            get => _beforePerforms ?? (_beforePerforms = new InputList<string>());
            set => _beforePerforms = value;
        }

        [Input("beforePlans")]
        private InputList<string>? _beforePlans;

        /// <summary>
        /// List of before-plan scripts
        /// </summary>
        public InputList<string> BeforePlans
        {
            get => _beforePlans ?? (_beforePlans = new InputList<string>());
            set => _beforePlans = value;
        }

        /// <summary>
        /// Free-form context description for users
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the context - should be unique in one account
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID (slug) of the space the context is in
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        public ContextState()
        {
        }
        public static new ContextState Empty => new ContextState();
    }
}
