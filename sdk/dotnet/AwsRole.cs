// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.AwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.
    /// 
    /// If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).
    /// 
    /// Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and Run ID as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).
    /// 
    /// ## Schema
    /// 
    /// ### Required
    /// 
    /// - **role_arn** (String) ARN of the AWS IAM role to attach
    /// 
    /// ### Optional
    /// 
    /// - **external_id** (String) Custom external ID (works only for private workers).
    /// - **generate_credentials_in_worker** (Boolean) Generate AWS credentials in the private worker
    /// - **id** (String) The ID of this resource.
    /// - **module_id** (String) ID of the module which assumes the AWS IAM role
    /// - **stack_id** (String) ID of the stack which assumes the AWS IAM role
    /// 
    /// ## Import
    /// 
    /// Import is supported using the following syntax
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/awsRole:AwsRole k8s-core stack/$STACK_ID
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/awsRole:AwsRole k8s-core module/$MODULE_ID
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/awsRole:AwsRole")]
    public partial class AwsRole : Pulumi.CustomResource
    {
        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        [Output("externalId")]
        public Output<string?> ExternalId { get; private set; } = null!;

        /// <summary>
        /// Generate AWS credentials in the private worker
        /// </summary>
        [Output("generateCredentialsInWorker")]
        public Output<bool?> GenerateCredentialsInWorker { get; private set; } = null!;

        /// <summary>
        /// ID of the module which assumes the AWS IAM role
        /// </summary>
        [Output("moduleId")]
        public Output<string?> ModuleId { get; private set; } = null!;

        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// ID of the stack which assumes the AWS IAM role
        /// </summary>
        [Output("stackId")]
        public Output<string?> StackId { get; private set; } = null!;


        /// <summary>
        /// Create a AwsRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AwsRole(string name, AwsRoleArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/awsRole:AwsRole", name, args ?? new AwsRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AwsRole(string name, Input<string> id, AwsRoleState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/awsRole:AwsRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AwsRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AwsRole Get(string name, Input<string> id, AwsRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new AwsRole(name, id, state, options);
        }
    }

    public sealed class AwsRoleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Generate AWS credentials in the private worker
        /// </summary>
        [Input("generateCredentialsInWorker")]
        public Input<bool>? GenerateCredentialsInWorker { get; set; }

        /// <summary>
        /// ID of the module which assumes the AWS IAM role
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// ID of the stack which assumes the AWS IAM role
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public AwsRoleArgs()
        {
        }
    }

    public sealed class AwsRoleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Generate AWS credentials in the private worker
        /// </summary>
        [Input("generateCredentialsInWorker")]
        public Input<bool>? GenerateCredentialsInWorker { get; set; }

        /// <summary>
        /// ID of the module which assumes the AWS IAM role
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// ID of the stack which assumes the AWS IAM role
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public AwsRoleState()
        {
        }
    }
}
