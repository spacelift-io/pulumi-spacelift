// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetStack
    {
        /// <summary>
        /// `spacelift.Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var k8s_core = Spacelift.GetStack.Invoke(new()
        ///     {
        ///         StackId = "k8s-core",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetStackResult> InvokeAsync(GetStackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStackResult>("spacelift:index/getStack:getStack", args ?? new GetStackArgs(), options.WithDefaults());

        /// <summary>
        /// `spacelift.Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var k8s_core = Spacelift.GetStack.Invoke(new()
        ///     {
        ///         StackId = "k8s-core",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetStackResult> Invoke(GetStackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStackResult>("spacelift:index/getStack:getStack", args ?? new GetStackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStackArgs : global::Pulumi.InvokeArgs
    {
        [Input("additionalProjectGlobs")]
        private List<string>? _additionalProjectGlobs;

        /// <summary>
        /// Project globs is an optional list of paths to track changes of in addition to the project root.
        /// </summary>
        public List<string> AdditionalProjectGlobs
        {
            get => _additionalProjectGlobs ?? (_additionalProjectGlobs = new List<string>());
            set => _additionalProjectGlobs = value;
        }

        [Input("afterApplies")]
        private List<string>? _afterApplies;

        /// <summary>
        /// List of after-apply scripts
        /// </summary>
        public List<string> AfterApplies
        {
            get => _afterApplies ?? (_afterApplies = new List<string>());
            set => _afterApplies = value;
        }

        [Input("afterDestroys")]
        private List<string>? _afterDestroys;

        /// <summary>
        /// List of after-destroy scripts
        /// </summary>
        public List<string> AfterDestroys
        {
            get => _afterDestroys ?? (_afterDestroys = new List<string>());
            set => _afterDestroys = value;
        }

        [Input("afterInits")]
        private List<string>? _afterInits;

        /// <summary>
        /// List of after-init scripts
        /// </summary>
        public List<string> AfterInits
        {
            get => _afterInits ?? (_afterInits = new List<string>());
            set => _afterInits = value;
        }

        [Input("afterPerforms")]
        private List<string>? _afterPerforms;

        /// <summary>
        /// List of after-perform scripts
        /// </summary>
        public List<string> AfterPerforms
        {
            get => _afterPerforms ?? (_afterPerforms = new List<string>());
            set => _afterPerforms = value;
        }

        [Input("afterPlans")]
        private List<string>? _afterPlans;

        /// <summary>
        /// List of after-plan scripts
        /// </summary>
        public List<string> AfterPlans
        {
            get => _afterPlans ?? (_afterPlans = new List<string>());
            set => _afterPlans = value;
        }

        [Input("afterRuns")]
        private List<string>? _afterRuns;

        /// <summary>
        /// List of after-run scripts
        /// </summary>
        public List<string> AfterRuns
        {
            get => _afterRuns ?? (_afterRuns = new List<string>());
            set => _afterRuns = value;
        }

        [Input("beforeApplies")]
        private List<string>? _beforeApplies;

        /// <summary>
        /// List of before-apply scripts
        /// </summary>
        public List<string> BeforeApplies
        {
            get => _beforeApplies ?? (_beforeApplies = new List<string>());
            set => _beforeApplies = value;
        }

        [Input("beforeDestroys")]
        private List<string>? _beforeDestroys;

        /// <summary>
        /// List of before-destroy scripts
        /// </summary>
        public List<string> BeforeDestroys
        {
            get => _beforeDestroys ?? (_beforeDestroys = new List<string>());
            set => _beforeDestroys = value;
        }

        [Input("beforeInits")]
        private List<string>? _beforeInits;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public List<string> BeforeInits
        {
            get => _beforeInits ?? (_beforeInits = new List<string>());
            set => _beforeInits = value;
        }

        [Input("beforePerforms")]
        private List<string>? _beforePerforms;

        /// <summary>
        /// List of before-perform scripts
        /// </summary>
        public List<string> BeforePerforms
        {
            get => _beforePerforms ?? (_beforePerforms = new List<string>());
            set => _beforePerforms = value;
        }

        [Input("beforePlans")]
        private List<string>? _beforePlans;

        /// <summary>
        /// List of before-plan scripts
        /// </summary>
        public List<string> BeforePlans
        {
            get => _beforePlans ?? (_beforePlans = new List<string>());
            set => _beforePlans = value;
        }

        /// <summary>
        /// ID (slug) of the stack
        /// </summary>
        [Input("stackId", required: true)]
        public string StackId { get; set; } = null!;

        public GetStackArgs()
        {
        }
        public static new GetStackArgs Empty => new GetStackArgs();
    }

    public sealed class GetStackInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("additionalProjectGlobs")]
        private InputList<string>? _additionalProjectGlobs;

        /// <summary>
        /// Project globs is an optional list of paths to track changes of in addition to the project root.
        /// </summary>
        public InputList<string> AdditionalProjectGlobs
        {
            get => _additionalProjectGlobs ?? (_additionalProjectGlobs = new InputList<string>());
            set => _additionalProjectGlobs = value;
        }

        [Input("afterApplies")]
        private InputList<string>? _afterApplies;

        /// <summary>
        /// List of after-apply scripts
        /// </summary>
        public InputList<string> AfterApplies
        {
            get => _afterApplies ?? (_afterApplies = new InputList<string>());
            set => _afterApplies = value;
        }

        [Input("afterDestroys")]
        private InputList<string>? _afterDestroys;

        /// <summary>
        /// List of after-destroy scripts
        /// </summary>
        public InputList<string> AfterDestroys
        {
            get => _afterDestroys ?? (_afterDestroys = new InputList<string>());
            set => _afterDestroys = value;
        }

        [Input("afterInits")]
        private InputList<string>? _afterInits;

        /// <summary>
        /// List of after-init scripts
        /// </summary>
        public InputList<string> AfterInits
        {
            get => _afterInits ?? (_afterInits = new InputList<string>());
            set => _afterInits = value;
        }

        [Input("afterPerforms")]
        private InputList<string>? _afterPerforms;

        /// <summary>
        /// List of after-perform scripts
        /// </summary>
        public InputList<string> AfterPerforms
        {
            get => _afterPerforms ?? (_afterPerforms = new InputList<string>());
            set => _afterPerforms = value;
        }

        [Input("afterPlans")]
        private InputList<string>? _afterPlans;

        /// <summary>
        /// List of after-plan scripts
        /// </summary>
        public InputList<string> AfterPlans
        {
            get => _afterPlans ?? (_afterPlans = new InputList<string>());
            set => _afterPlans = value;
        }

        [Input("afterRuns")]
        private InputList<string>? _afterRuns;

        /// <summary>
        /// List of after-run scripts
        /// </summary>
        public InputList<string> AfterRuns
        {
            get => _afterRuns ?? (_afterRuns = new InputList<string>());
            set => _afterRuns = value;
        }

        [Input("beforeApplies")]
        private InputList<string>? _beforeApplies;

        /// <summary>
        /// List of before-apply scripts
        /// </summary>
        public InputList<string> BeforeApplies
        {
            get => _beforeApplies ?? (_beforeApplies = new InputList<string>());
            set => _beforeApplies = value;
        }

        [Input("beforeDestroys")]
        private InputList<string>? _beforeDestroys;

        /// <summary>
        /// List of before-destroy scripts
        /// </summary>
        public InputList<string> BeforeDestroys
        {
            get => _beforeDestroys ?? (_beforeDestroys = new InputList<string>());
            set => _beforeDestroys = value;
        }

        [Input("beforeInits")]
        private InputList<string>? _beforeInits;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public InputList<string> BeforeInits
        {
            get => _beforeInits ?? (_beforeInits = new InputList<string>());
            set => _beforeInits = value;
        }

        [Input("beforePerforms")]
        private InputList<string>? _beforePerforms;

        /// <summary>
        /// List of before-perform scripts
        /// </summary>
        public InputList<string> BeforePerforms
        {
            get => _beforePerforms ?? (_beforePerforms = new InputList<string>());
            set => _beforePerforms = value;
        }

        [Input("beforePlans")]
        private InputList<string>? _beforePlans;

        /// <summary>
        /// List of before-plan scripts
        /// </summary>
        public InputList<string> BeforePlans
        {
            get => _beforePlans ?? (_beforePlans = new InputList<string>());
            set => _beforePlans = value;
        }

        /// <summary>
        /// ID (slug) of the stack
        /// </summary>
        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        public GetStackInvokeArgs()
        {
        }
        public static new GetStackInvokeArgs Empty => new GetStackInvokeArgs();
    }


    [OutputType]
    public sealed class GetStackResult
    {
        /// <summary>
        /// Project globs is an optional list of paths to track changes of in addition to the project root.
        /// </summary>
        public readonly ImmutableArray<string> AdditionalProjectGlobs;
        /// <summary>
        /// indicates whether this stack can administer others
        /// </summary>
        public readonly bool Administrative;
        /// <summary>
        /// List of after-apply scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterApplies;
        /// <summary>
        /// List of after-destroy scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterDestroys;
        /// <summary>
        /// List of after-init scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterInits;
        /// <summary>
        /// List of after-perform scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterPerforms;
        /// <summary>
        /// List of after-plan scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterPlans;
        /// <summary>
        /// List of after-run scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterRuns;
        /// <summary>
        /// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackAnsibleResult> Ansibles;
        /// <summary>
        /// indicates whether changes to this stack can be automatically deployed
        /// </summary>
        public readonly bool Autodeploy;
        /// <summary>
        /// indicates whether obsolete proposed changes should automatically be retried
        /// </summary>
        public readonly bool Autoretry;
        /// <summary>
        /// AWS IAM assume role policy statement setting up trust relationship
        /// </summary>
        public readonly string AwsAssumeRolePolicyStatement;
        /// <summary>
        /// Azure DevOps VCS settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackAzureDevopResult> AzureDevops;
        /// <summary>
        /// List of before-apply scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforeApplies;
        /// <summary>
        /// List of before-destroy scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforeDestroys;
        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforeInits;
        /// <summary>
        /// List of before-perform scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforePerforms;
        /// <summary>
        /// List of before-plan scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforePlans;
        /// <summary>
        /// Bitbucket Cloud VCS settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackBitbucketCloudResult> BitbucketClouds;
        /// <summary>
        /// Bitbucket Datacenter VCS settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackBitbucketDatacenterResult> BitbucketDatacenters;
        /// <summary>
        /// Repository branch to treat as the default 'main' branch
        /// </summary>
        public readonly string Branch;
        /// <summary>
        /// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackCloudformationResult> Cloudformations;
        /// <summary>
        /// free-form stack description for users
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Indicates whether local preview runs can be triggered on this Stack.
        /// </summary>
        public readonly bool EnableLocalPreview;
        /// <summary>
        /// GitHub Enterprise (self-hosted) VCS settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackGithubEnterpriseResult> GithubEnterprises;
        /// <summary>
        /// GitLab VCS settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackGitlabResult> Gitlabs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackKuberneteResult> Kubernetes;
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// Determines if Spacelift should manage state for this stack
        /// </summary>
        public readonly bool ManageState;
        /// <summary>
        /// Name of the stack - should be unique in one account
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        /// </summary>
        public readonly string ProjectRoot;
        /// <summary>
        /// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail.
        /// </summary>
        public readonly bool ProtectFromDeletion;
        /// <summary>
        /// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackPulumiResult> Pulumis;
        /// <summary>
        /// One-way VCS integration using a raw Git repository link
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackRawGitResult> RawGits;
        /// <summary>
        /// Name of the repository, without the owner part
        /// </summary>
        public readonly string Repository;
        /// <summary>
        /// Name of the Docker image used to process Runs
        /// </summary>
        public readonly string RunnerImage;
        /// <summary>
        /// Showcase-related attributes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackShowcaseResult> Showcases;
        /// <summary>
        /// ID (slug) of the space the stack is in
        /// </summary>
        public readonly string SpaceId;
        /// <summary>
        /// ID (slug) of the stack
        /// </summary>
        public readonly string StackId;
        /// <summary>
        /// Indicates whether you can access the Stack state file from other stacks or outside of Spacelift.
        /// </summary>
        public readonly bool TerraformExternalStateAccess;
        public readonly bool TerraformSmartSanitization;
        public readonly string TerraformVersion;
        /// <summary>
        /// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
        /// </summary>
        public readonly string TerraformWorkflowTool;
        public readonly string TerraformWorkspace;
        /// <summary>
        /// ID of the worker pool to use
        /// </summary>
        public readonly string WorkerPoolId;

        [OutputConstructor]
        private GetStackResult(
            ImmutableArray<string> additionalProjectGlobs,

            bool administrative,

            ImmutableArray<string> afterApplies,

            ImmutableArray<string> afterDestroys,

            ImmutableArray<string> afterInits,

            ImmutableArray<string> afterPerforms,

            ImmutableArray<string> afterPlans,

            ImmutableArray<string> afterRuns,

            ImmutableArray<Outputs.GetStackAnsibleResult> ansibles,

            bool autodeploy,

            bool autoretry,

            string awsAssumeRolePolicyStatement,

            ImmutableArray<Outputs.GetStackAzureDevopResult> azureDevops,

            ImmutableArray<string> beforeApplies,

            ImmutableArray<string> beforeDestroys,

            ImmutableArray<string> beforeInits,

            ImmutableArray<string> beforePerforms,

            ImmutableArray<string> beforePlans,

            ImmutableArray<Outputs.GetStackBitbucketCloudResult> bitbucketClouds,

            ImmutableArray<Outputs.GetStackBitbucketDatacenterResult> bitbucketDatacenters,

            string branch,

            ImmutableArray<Outputs.GetStackCloudformationResult> cloudformations,

            string description,

            bool enableLocalPreview,

            ImmutableArray<Outputs.GetStackGithubEnterpriseResult> githubEnterprises,

            ImmutableArray<Outputs.GetStackGitlabResult> gitlabs,

            string id,

            ImmutableArray<Outputs.GetStackKuberneteResult> kubernetes,

            ImmutableArray<string> labels,

            bool manageState,

            string name,

            string projectRoot,

            bool protectFromDeletion,

            ImmutableArray<Outputs.GetStackPulumiResult> pulumis,

            ImmutableArray<Outputs.GetStackRawGitResult> rawGits,

            string repository,

            string runnerImage,

            ImmutableArray<Outputs.GetStackShowcaseResult> showcases,

            string spaceId,

            string stackId,

            bool terraformExternalStateAccess,

            bool terraformSmartSanitization,

            string terraformVersion,

            string terraformWorkflowTool,

            string terraformWorkspace,

            string workerPoolId)
        {
            AdditionalProjectGlobs = additionalProjectGlobs;
            Administrative = administrative;
            AfterApplies = afterApplies;
            AfterDestroys = afterDestroys;
            AfterInits = afterInits;
            AfterPerforms = afterPerforms;
            AfterPlans = afterPlans;
            AfterRuns = afterRuns;
            Ansibles = ansibles;
            Autodeploy = autodeploy;
            Autoretry = autoretry;
            AwsAssumeRolePolicyStatement = awsAssumeRolePolicyStatement;
            AzureDevops = azureDevops;
            BeforeApplies = beforeApplies;
            BeforeDestroys = beforeDestroys;
            BeforeInits = beforeInits;
            BeforePerforms = beforePerforms;
            BeforePlans = beforePlans;
            BitbucketClouds = bitbucketClouds;
            BitbucketDatacenters = bitbucketDatacenters;
            Branch = branch;
            Cloudformations = cloudformations;
            Description = description;
            EnableLocalPreview = enableLocalPreview;
            GithubEnterprises = githubEnterprises;
            Gitlabs = gitlabs;
            Id = id;
            Kubernetes = kubernetes;
            Labels = labels;
            ManageState = manageState;
            Name = name;
            ProjectRoot = projectRoot;
            ProtectFromDeletion = protectFromDeletion;
            Pulumis = pulumis;
            RawGits = rawGits;
            Repository = repository;
            RunnerImage = runnerImage;
            Showcases = showcases;
            SpaceId = spaceId;
            StackId = stackId;
            TerraformExternalStateAccess = terraformExternalStateAccess;
            TerraformSmartSanitization = terraformSmartSanitization;
            TerraformVersion = terraformVersion;
            TerraformWorkflowTool = terraformWorkflowTool;
            TerraformWorkspace = terraformWorkspace;
            WorkerPoolId = workerPoolId;
        }
    }
}
