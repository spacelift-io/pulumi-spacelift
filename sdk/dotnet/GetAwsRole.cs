// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetAwsRole
    {
        /// <summary>
        /// `spacelift.AwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.
        /// 
        /// If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).
        /// 
        /// Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var k8s_module = Spacelift.GetAwsRole.Invoke(new()
        ///     {
        ///         ModuleId = "k8s-module",
        ///     });
        /// 
        ///     var k8s_core = Spacelift.GetAwsRole.Invoke(new()
        ///     {
        ///         StackId = "k8s-core",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAwsRoleResult> InvokeAsync(GetAwsRoleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAwsRoleResult>("spacelift:index/getAwsRole:getAwsRole", args ?? new GetAwsRoleArgs(), options.WithDefaults());

        /// <summary>
        /// `spacelift.AwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.
        /// 
        /// If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).
        /// 
        /// Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var k8s_module = Spacelift.GetAwsRole.Invoke(new()
        ///     {
        ///         ModuleId = "k8s-module",
        ///     });
        /// 
        ///     var k8s_core = Spacelift.GetAwsRole.Invoke(new()
        ///     {
        ///         StackId = "k8s-core",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAwsRoleResult> Invoke(GetAwsRoleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAwsRoleResult>("spacelift:index/getAwsRole:getAwsRole", args ?? new GetAwsRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAwsRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the module which assumes the AWS IAM role
        /// </summary>
        [Input("moduleId")]
        public string? ModuleId { get; set; }

        /// <summary>
        /// ID of the stack which assumes the AWS IAM role
        /// </summary>
        [Input("stackId")]
        public string? StackId { get; set; }

        public GetAwsRoleArgs()
        {
        }
        public static new GetAwsRoleArgs Empty => new GetAwsRoleArgs();
    }

    public sealed class GetAwsRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the module which assumes the AWS IAM role
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// ID of the stack which assumes the AWS IAM role
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public GetAwsRoleInvokeArgs()
        {
        }
        public static new GetAwsRoleInvokeArgs Empty => new GetAwsRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetAwsRoleResult
    {
        /// <summary>
        /// AWS IAM role session duration in seconds
        /// </summary>
        public readonly int DurationSeconds;
        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        public readonly string ExternalId;
        /// <summary>
        /// Generate AWS credentials in the private worker
        /// </summary>
        public readonly bool GenerateCredentialsInWorker;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the module which assumes the AWS IAM role
        /// </summary>
        public readonly string? ModuleId;
        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        public readonly string RoleArn;
        /// <summary>
        /// ID of the stack which assumes the AWS IAM role
        /// </summary>
        public readonly string? StackId;

        [OutputConstructor]
        private GetAwsRoleResult(
            int durationSeconds,

            string externalId,

            bool generateCredentialsInWorker,

            string id,

            string? moduleId,

            string roleArn,

            string? stackId)
        {
            DurationSeconds = durationSeconds;
            ExternalId = externalId;
            GenerateCredentialsInWorker = generateCredentialsInWorker;
            Id = id;
            ModuleId = moduleId;
            RoleArn = roleArn;
            StackId = stackId;
        }
    }
}
