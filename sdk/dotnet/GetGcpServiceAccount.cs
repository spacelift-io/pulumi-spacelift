// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetGcpServiceAccount
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var k8s_module = Output.Create(Spacelift.GetGcpServiceAccount.InvokeAsync(new Spacelift.GetGcpServiceAccountArgs
        ///         {
        ///             ModuleId = "k8s-module",
        ///         }));
        ///         var k8s_core = Output.Create(Spacelift.GetGcpServiceAccount.InvokeAsync(new Spacelift.GetGcpServiceAccountArgs
        ///         {
        ///             StackId = "k8s-core",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGcpServiceAccountResult> InvokeAsync(GetGcpServiceAccountArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGcpServiceAccountResult>("spacelift:index/getGcpServiceAccount:getGcpServiceAccount", args ?? new GetGcpServiceAccountArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var k8s_module = Output.Create(Spacelift.GetGcpServiceAccount.InvokeAsync(new Spacelift.GetGcpServiceAccountArgs
        ///         {
        ///             ModuleId = "k8s-module",
        ///         }));
        ///         var k8s_core = Output.Create(Spacelift.GetGcpServiceAccount.InvokeAsync(new Spacelift.GetGcpServiceAccountArgs
        ///         {
        ///             StackId = "k8s-core",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGcpServiceAccountResult> Invoke(GetGcpServiceAccountInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGcpServiceAccountResult>("spacelift:index/getGcpServiceAccount:getGcpServiceAccount", args ?? new GetGcpServiceAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGcpServiceAccountArgs : Pulumi.InvokeArgs
    {
        [Input("moduleId")]
        public string? ModuleId { get; set; }

        [Input("stackId")]
        public string? StackId { get; set; }

        public GetGcpServiceAccountArgs()
        {
        }
    }

    public sealed class GetGcpServiceAccountInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public GetGcpServiceAccountInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGcpServiceAccountResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ModuleId;
        public readonly string ServiceAccountEmail;
        public readonly string? StackId;
        public readonly ImmutableArray<string> TokenScopes;

        [OutputConstructor]
        private GetGcpServiceAccountResult(
            string id,

            string? moduleId,

            string serviceAccountEmail,

            string? stackId,

            ImmutableArray<string> tokenScopes)
        {
            Id = id;
            ModuleId = moduleId;
            ServiceAccountEmail = serviceAccountEmail;
            StackId = stackId;
            TokenScopes = tokenScopes;
        }
    }
}
