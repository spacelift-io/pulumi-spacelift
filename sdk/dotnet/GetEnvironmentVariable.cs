// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetEnvironmentVariable
    {
        /// <summary>
        /// `spacelift.EnvironmentVariable` defines an environment variable on the context (`spacelift.Context`), stack (`spacelift.Stack`) or a module (`spacelift.Module`), thereby allowing to pass and share various secrets and configuration with Spacelift stacks.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ireland_kubeconfig = Output.Create(Spacelift.GetEnvironmentVariable.InvokeAsync(new Spacelift.GetEnvironmentVariableArgs
        ///         {
        ///             ContextId = "prod-k8s-ie",
        ///             Name = "KUBECONFIG",
        ///         }));
        ///         var module_kubeconfig = Output.Create(Spacelift.GetEnvironmentVariable.InvokeAsync(new Spacelift.GetEnvironmentVariableArgs
        ///         {
        ///             ModuleId = "k8s-module",
        ///             Name = "KUBECONFIG",
        ///         }));
        ///         var core_kubeconfig = Output.Create(Spacelift.GetEnvironmentVariable.InvokeAsync(new Spacelift.GetEnvironmentVariableArgs
        ///         {
        ///             Name = "KUBECONFIG",
        ///             StackId = "k8s-core",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEnvironmentVariableResult> InvokeAsync(GetEnvironmentVariableArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentVariableResult>("spacelift:index/getEnvironmentVariable:getEnvironmentVariable", args ?? new GetEnvironmentVariableArgs(), options.WithDefaults());

        /// <summary>
        /// `spacelift.EnvironmentVariable` defines an environment variable on the context (`spacelift.Context`), stack (`spacelift.Stack`) or a module (`spacelift.Module`), thereby allowing to pass and share various secrets and configuration with Spacelift stacks.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ireland_kubeconfig = Output.Create(Spacelift.GetEnvironmentVariable.InvokeAsync(new Spacelift.GetEnvironmentVariableArgs
        ///         {
        ///             ContextId = "prod-k8s-ie",
        ///             Name = "KUBECONFIG",
        ///         }));
        ///         var module_kubeconfig = Output.Create(Spacelift.GetEnvironmentVariable.InvokeAsync(new Spacelift.GetEnvironmentVariableArgs
        ///         {
        ///             ModuleId = "k8s-module",
        ///             Name = "KUBECONFIG",
        ///         }));
        ///         var core_kubeconfig = Output.Create(Spacelift.GetEnvironmentVariable.InvokeAsync(new Spacelift.GetEnvironmentVariableArgs
        ///         {
        ///             Name = "KUBECONFIG",
        ///             StackId = "k8s-core",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEnvironmentVariableResult> Invoke(GetEnvironmentVariableInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetEnvironmentVariableResult>("spacelift:index/getEnvironmentVariable:getEnvironmentVariable", args ?? new GetEnvironmentVariableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentVariableArgs : Pulumi.InvokeArgs
    {
        [Input("contextId")]
        public string? ContextId { get; set; }

        [Input("moduleId")]
        public string? ModuleId { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("stackId")]
        public string? StackId { get; set; }

        public GetEnvironmentVariableArgs()
        {
        }
    }

    public sealed class GetEnvironmentVariableInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("contextId")]
        public Input<string>? ContextId { get; set; }

        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public GetEnvironmentVariableInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEnvironmentVariableResult
    {
        public readonly string Checksum;
        public readonly string? ContextId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ModuleId;
        public readonly string Name;
        public readonly string? StackId;
        public readonly string Value;
        public readonly bool WriteOnly;

        [OutputConstructor]
        private GetEnvironmentVariableResult(
            string checksum,

            string? contextId,

            string id,

            string? moduleId,

            string name,

            string? stackId,

            string value,

            bool writeOnly)
        {
            Checksum = checksum;
            ContextId = contextId;
            Id = id;
            ModuleId = moduleId;
            Name = name;
            StackId = stackId;
            Value = value;
            WriteOnly = writeOnly;
        }
    }
}
