// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetMountedFile
    {
        /// <summary>
        /// `spacelift.MountedFile` represents a file mounted in each Run's workspace that is part of a configuration of a context (`spacelift.Context`), stack (`spacelift.Stack`) or a module (`spacelift.Module`). In principle, it's very similar to an environment variable (`spacelift.EnvironmentVariable`) except that the value is written to the filesystem rather than passed to the environment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ireland_kubeconfig = Output.Create(Spacelift.GetMountedFile.InvokeAsync(new Spacelift.GetMountedFileArgs
        ///         {
        ///             ContextId = "prod-k8s-ie",
        ///             RelativePath = "kubeconfig",
        ///         }));
        ///         var module_kubeconfig = Output.Create(Spacelift.GetMountedFile.InvokeAsync(new Spacelift.GetMountedFileArgs
        ///         {
        ///             ModuleId = "k8s-module",
        ///             RelativePath = "kubeconfig",
        ///         }));
        ///         var core_kubeconfig = Output.Create(Spacelift.GetMountedFile.InvokeAsync(new Spacelift.GetMountedFileArgs
        ///         {
        ///             RelativePath = "kubeconfig",
        ///             StackId = "k8s-core",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// &lt;!-- schema generated by tfplugindocs --&gt;
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Schema
        /// 
        /// ### Required
        /// 
        /// - **relative_path** (String) relative path to the mounted file
        /// 
        /// ### Optional
        /// 
        /// - **context_id** (String) ID of the context where the mounted file is stored
        /// - **id** (String) The ID of this resource.
        /// - **module_id** (String) ID of the module where the mounted file is stored
        /// - **stack_id** (String) ID of the stack where the mounted file is stored
        /// 
        /// ### Read-Only
        /// 
        /// - **checksum** (String) SHA-256 checksum of the value
        /// - **content** (String, Sensitive) content of the mounted file encoded using Base-64
        /// - **write_only** (Boolean) indicates whether the value can be read back outside a Run
        /// </summary>
        public static Task<GetMountedFileResult> InvokeAsync(GetMountedFileArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMountedFileResult>("spacelift:index/getMountedFile:getMountedFile", args ?? new GetMountedFileArgs(), options.WithVersion());
    }


    public sealed class GetMountedFileArgs : Pulumi.InvokeArgs
    {
        [Input("contextId")]
        public string? ContextId { get; set; }

        [Input("moduleId")]
        public string? ModuleId { get; set; }

        [Input("relativePath", required: true)]
        public string RelativePath { get; set; } = null!;

        [Input("stackId")]
        public string? StackId { get; set; }

        public GetMountedFileArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMountedFileResult
    {
        public readonly string Checksum;
        public readonly string Content;
        public readonly string? ContextId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ModuleId;
        public readonly string RelativePath;
        public readonly string? StackId;
        public readonly bool WriteOnly;

        [OutputConstructor]
        private GetMountedFileResult(
            string checksum,

            string content,

            string? contextId,

            string id,

            string? moduleId,

            string relativePath,

            string? stackId,

            bool writeOnly)
        {
            Checksum = checksum;
            Content = content;
            ContextId = contextId;
            Id = id;
            ModuleId = moduleId;
            RelativePath = relativePath;
            StackId = stackId;
            WriteOnly = writeOnly;
        }
    }
}
