// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// &gt; **Note:** `spacelift.StackAwsRole` is deprecated. Please use `spacelift.AwsRole` instead. The functionality is identical.
    /// 
    /// **NOTE:** while this resource continues to work, we have replaced it with the `spacelift.AwsIntegration` resource. The new resource allows integrations to be shared by multiple stacks/modules and also supports separate read vs write roles. Please use the `spacelift.AwsIntegration` resource instead.
    /// 
    /// `spacelift.StackAwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.
    /// 
    /// If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).
    /// 
    /// Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).
    /// </summary>
    [SpaceliftResourceType("spacelift:index/stackAwsRole:StackAwsRole")]
    public partial class StackAwsRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AWS IAM role session duration in seconds
        /// </summary>
        [Output("durationSeconds")]
        public Output<int> DurationSeconds { get; private set; } = null!;

        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        [Output("externalId")]
        public Output<string?> ExternalId { get; private set; } = null!;

        /// <summary>
        /// Generate AWS credentials in the private worker. Defaults to `false`.
        /// </summary>
        [Output("generateCredentialsInWorker")]
        public Output<bool?> GenerateCredentialsInWorker { get; private set; } = null!;

        /// <summary>
        /// ID of the module which assumes the AWS IAM role
        /// </summary>
        [Output("moduleId")]
        public Output<string?> ModuleId { get; private set; } = null!;

        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// ID of the stack which assumes the AWS IAM role
        /// </summary>
        [Output("stackId")]
        public Output<string?> StackId { get; private set; } = null!;


        /// <summary>
        /// Create a StackAwsRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StackAwsRole(string name, StackAwsRoleArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/stackAwsRole:StackAwsRole", name, args ?? new StackAwsRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StackAwsRole(string name, Input<string> id, StackAwsRoleState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/stackAwsRole:StackAwsRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StackAwsRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StackAwsRole Get(string name, Input<string> id, StackAwsRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new StackAwsRole(name, id, state, options);
        }
    }

    public sealed class StackAwsRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AWS IAM role session duration in seconds
        /// </summary>
        [Input("durationSeconds")]
        public Input<int>? DurationSeconds { get; set; }

        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Generate AWS credentials in the private worker. Defaults to `false`.
        /// </summary>
        [Input("generateCredentialsInWorker")]
        public Input<bool>? GenerateCredentialsInWorker { get; set; }

        /// <summary>
        /// ID of the module which assumes the AWS IAM role
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// ID of the stack which assumes the AWS IAM role
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public StackAwsRoleArgs()
        {
        }
        public static new StackAwsRoleArgs Empty => new StackAwsRoleArgs();
    }

    public sealed class StackAwsRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AWS IAM role session duration in seconds
        /// </summary>
        [Input("durationSeconds")]
        public Input<int>? DurationSeconds { get; set; }

        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Generate AWS credentials in the private worker. Defaults to `false`.
        /// </summary>
        [Input("generateCredentialsInWorker")]
        public Input<bool>? GenerateCredentialsInWorker { get; set; }

        /// <summary>
        /// ID of the module which assumes the AWS IAM role
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// ID of the stack which assumes the AWS IAM role
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public StackAwsRoleState()
        {
        }
        public static new StackAwsRoleState Empty => new StackAwsRoleState();
    }
}
