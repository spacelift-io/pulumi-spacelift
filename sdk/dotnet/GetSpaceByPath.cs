// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetSpaceByPath
    {
        /// <summary>
        /// `spacelift.getSpaceByPath` represents a Spacelift **space** - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space. In contrary to `spacelift.Space`, this resource is identified by a path, not by an ID. For this data source to work, path must be unique. If there are multiple spaces with the same path, this datasource will fail. 
        /// **Disclaimer:** 
        /// This datasource can only be used in a stack that resides in a space with inheritance enabled. In addition, the parent spaces (excluding root) must also have inheritance enabled.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var space = Spacelift.GetSpaceByPath.Invoke(new()
        ///     {
        ///         SpacePath = "root/second space/my space",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["spaceDescription"] = space.Apply(getSpaceByPathResult =&gt; getSpaceByPathResult.Description),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSpaceByPathResult> InvokeAsync(GetSpaceByPathArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSpaceByPathResult>("spacelift:index/getSpaceByPath:getSpaceByPath", args ?? new GetSpaceByPathArgs(), options.WithDefaults());

        /// <summary>
        /// `spacelift.getSpaceByPath` represents a Spacelift **space** - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space. In contrary to `spacelift.Space`, this resource is identified by a path, not by an ID. For this data source to work, path must be unique. If there are multiple spaces with the same path, this datasource will fail. 
        /// **Disclaimer:** 
        /// This datasource can only be used in a stack that resides in a space with inheritance enabled. In addition, the parent spaces (excluding root) must also have inheritance enabled.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var space = Spacelift.GetSpaceByPath.Invoke(new()
        ///     {
        ///         SpacePath = "root/second space/my space",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["spaceDescription"] = space.Apply(getSpaceByPathResult =&gt; getSpaceByPathResult.Description),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSpaceByPathResult> Invoke(GetSpaceByPathInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSpaceByPathResult>("spacelift:index/getSpaceByPath:getSpaceByPath", args ?? new GetSpaceByPathInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSpaceByPathArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// path to the space - a series of space names separated by `/`
        /// </summary>
        [Input("spacePath", required: true)]
        public string SpacePath { get; set; } = null!;

        public GetSpaceByPathArgs()
        {
        }
        public static new GetSpaceByPathArgs Empty => new GetSpaceByPathArgs();
    }

    public sealed class GetSpaceByPathInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// path to the space - a series of space names separated by `/`
        /// </summary>
        [Input("spacePath", required: true)]
        public Input<string> SpacePath { get; set; } = null!;

        public GetSpaceByPathInvokeArgs()
        {
        }
        public static new GetSpaceByPathInvokeArgs Empty => new GetSpaceByPathInvokeArgs();
    }


    [OutputType]
    public sealed class GetSpaceByPathResult
    {
        /// <summary>
        /// free-form space description for users
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// indication whether access to this space inherits read access to entities from the parent space
        /// </summary>
        public readonly bool InheritEntities;
        /// <summary>
        /// list of labels describing a space
        /// </summary>
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// name of the space
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// immutable ID (slug) of parent space
        /// </summary>
        public readonly string ParentSpaceId;
        /// <summary>
        /// path to the space - a series of space names separated by `/`
        /// </summary>
        public readonly string SpacePath;

        [OutputConstructor]
        private GetSpaceByPathResult(
            string description,

            string id,

            bool inheritEntities,

            ImmutableArray<string> labels,

            string name,

            string parentSpaceId,

            string spacePath)
        {
            Description = description;
            Id = id;
            InheritEntities = inheritEntities;
            Labels = labels;
            Name = name;
            ParentSpaceId = parentSpaceId;
            SpacePath = spacePath;
        }
    }
}
