// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetCurrentSpace
    {
        /// <summary>
        /// `spacelift.getCurrentSpace` is a data source that provides information about the space that an administrative stack is in if the run is executed within Spacelift by a stack or module. This  makes it easier to create resources within the same space.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Spacelift.GetCurrentSpace.Invoke();
        /// 
        ///     var prod_k8s_ie = new Spacelift.Context("prod-k8s-ie", new()
        ///     {
        ///         Description = "Configuration details for the compute cluster in ðŸ‡®ðŸ‡ª",
        ///         SpaceId = @this.Apply(@this =&gt; @this.Apply(getCurrentSpaceResult =&gt; getCurrentSpaceResult.Id)),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCurrentSpaceResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCurrentSpaceResult>("spacelift:index/getCurrentSpace:getCurrentSpace", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// `spacelift.getCurrentSpace` is a data source that provides information about the space that an administrative stack is in if the run is executed within Spacelift by a stack or module. This  makes it easier to create resources within the same space.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Spacelift.GetCurrentSpace.Invoke();
        /// 
        ///     var prod_k8s_ie = new Spacelift.Context("prod-k8s-ie", new()
        ///     {
        ///         Description = "Configuration details for the compute cluster in ðŸ‡®ðŸ‡ª",
        ///         SpaceId = @this.Apply(@this =&gt; @this.Apply(getCurrentSpaceResult =&gt; getCurrentSpaceResult.Id)),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCurrentSpaceResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCurrentSpaceResult>("spacelift:index/getCurrentSpace:getCurrentSpace", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetCurrentSpaceResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetCurrentSpaceResult(string id)
        {
            Id = id;
        }
    }
}
