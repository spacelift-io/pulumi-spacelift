// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.PolicyAttachment` represents a relationship between a policy (`spacelift.Policy`) and a stack (`spacelift.Stack`) or module (`spacelift.Module`). Each policy can only be attached to a stack/module once. `LOGIN` policies are the exception because they apply globally and not to individual stacks/modules. An attempt to attach one will fail.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var no_weekend_deploysPolicy = new Spacelift.Policy("no-weekend-deploysPolicy", new()
    ///     {
    ///         Body = File.ReadAllText("policies/no-weekend-deploys.rego"),
    ///         Type = "PLAN",
    ///     });
    /// 
    ///     var core_infra_production = new Spacelift.Stack("core-infra-production", new()
    ///     {
    ///         Branch = "master",
    ///         Repository = "core-infra",
    ///     });
    /// 
    ///     var no_weekend_deploysPolicyAttachment = new Spacelift.PolicyAttachment("no-weekend-deploysPolicyAttachment", new()
    ///     {
    ///         PolicyId = no_weekend_deploysPolicy.Id,
    ///         StackId = core_infra_production.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/policyAttachment:PolicyAttachment no-weekend-deploys $POLICY_ID/$STACK_ID
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/policyAttachment:PolicyAttachment")]
    public partial class PolicyAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the module to attach the policy to
        /// </summary>
        [Output("moduleId")]
        public Output<string?> ModuleId { get; private set; } = null!;

        /// <summary>
        /// ID of the policy to attach
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// ID of the stack to attach the policy to
        /// </summary>
        [Output("stackId")]
        public Output<string?> StackId { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyAttachment(string name, PolicyAttachmentArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/policyAttachment:PolicyAttachment", name, args ?? new PolicyAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyAttachment(string name, Input<string> id, PolicyAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/policyAttachment:PolicyAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyAttachment Get(string name, Input<string> id, PolicyAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyAttachment(name, id, state, options);
        }
    }

    public sealed class PolicyAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the module to attach the policy to
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// ID of the policy to attach
        /// </summary>
        [Input("policyId", required: true)]
        public Input<string> PolicyId { get; set; } = null!;

        /// <summary>
        /// ID of the stack to attach the policy to
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public PolicyAttachmentArgs()
        {
        }
        public static new PolicyAttachmentArgs Empty => new PolicyAttachmentArgs();
    }

    public sealed class PolicyAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the module to attach the policy to
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// ID of the policy to attach
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// ID of the stack to attach the policy to
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public PolicyAttachmentState()
        {
        }
        public static new PolicyAttachmentState Empty => new PolicyAttachmentState();
    }
}
