// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.Run` allows programmatically triggering runs in response to arbitrary changes in the keepers section.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var thisStack = new Spacelift.Stack("thisStack", new()
    ///     {
    ///         Repository = "test",
    ///         Branch = "main",
    ///     });
    /// 
    ///     var thisRun = new Spacelift.Run("thisRun", new()
    ///     {
    ///         StackId = thisStack.Id,
    ///         Keepers = 
    ///         {
    ///             { "branch", thisStack.Branch },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/run:Run")]
    public partial class Run : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The commit SHA for which to trigger a run.
        /// </summary>
        [Output("commitSha")]
        public Output<string?> CommitSha { get; private set; } = null!;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of the resource.
        /// </summary>
        [Output("keepers")]
        public Output<ImmutableDictionary<string, object>?> Keepers { get; private set; } = null!;

        /// <summary>
        /// Whether the run is a proposed run. Defaults to `false`.
        /// </summary>
        [Output("proposed")]
        public Output<bool?> Proposed { get; private set; } = null!;

        /// <summary>
        /// ID of the stack on which the run is to be triggered.
        /// </summary>
        [Output("stackId")]
        public Output<string> StackId { get; private set; } = null!;


        /// <summary>
        /// Create a Run resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Run(string name, RunArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/run:Run", name, args ?? new RunArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Run(string name, Input<string> id, RunState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/run:Run", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Run resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Run Get(string name, Input<string> id, RunState? state = null, CustomResourceOptions? options = null)
        {
            return new Run(name, id, state, options);
        }
    }

    public sealed class RunArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The commit SHA for which to trigger a run.
        /// </summary>
        [Input("commitSha")]
        public Input<string>? CommitSha { get; set; }

        [Input("keepers")]
        private InputMap<object>? _keepers;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of the resource.
        /// </summary>
        public InputMap<object> Keepers
        {
            get => _keepers ?? (_keepers = new InputMap<object>());
            set => _keepers = value;
        }

        /// <summary>
        /// Whether the run is a proposed run. Defaults to `false`.
        /// </summary>
        [Input("proposed")]
        public Input<bool>? Proposed { get; set; }

        /// <summary>
        /// ID of the stack on which the run is to be triggered.
        /// </summary>
        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        public RunArgs()
        {
        }
        public static new RunArgs Empty => new RunArgs();
    }

    public sealed class RunState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The commit SHA for which to trigger a run.
        /// </summary>
        [Input("commitSha")]
        public Input<string>? CommitSha { get; set; }

        [Input("keepers")]
        private InputMap<object>? _keepers;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of the resource.
        /// </summary>
        public InputMap<object> Keepers
        {
            get => _keepers ?? (_keepers = new InputMap<object>());
            set => _keepers = value;
        }

        /// <summary>
        /// Whether the run is a proposed run. Defaults to `false`.
        /// </summary>
        [Input("proposed")]
        public Input<bool>? Proposed { get; set; }

        /// <summary>
        /// ID of the stack on which the run is to be triggered.
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public RunState()
        {
        }
        public static new RunState Empty => new RunState();
    }
}
