// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.IdpGroupMapping` represents a mapping (binding) between a user group (as provided by IdP) and a Spacelift User Management Policy. If you assign permissions (a Policy) to a user group, all users in the group will have those permissions unless the user's permissions are higher than the group's permissions.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Spacelift.IdpGroupMapping("test", new()
    ///     {
    ///         Policies = new[]
    ///         {
    ///             new Spacelift.Inputs.IdpGroupMappingPolicyArgs
    ///             {
    ///                 Role = "ADMIN",
    ///                 SpaceId = "root",
    ///             },
    ///             new Spacelift.Inputs.IdpGroupMappingPolicyArgs
    ///             {
    ///                 Role = "ADMIN",
    ///                 SpaceId = "legacy",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/idpGroupMapping:IdpGroupMapping")]
    public partial class IdpGroupMapping : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the user group - should be unique in one account
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("policies")]
        public Output<ImmutableArray<Outputs.IdpGroupMappingPolicy>> Policies { get; private set; } = null!;


        /// <summary>
        /// Create a IdpGroupMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdpGroupMapping(string name, IdpGroupMappingArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/idpGroupMapping:IdpGroupMapping", name, args ?? new IdpGroupMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdpGroupMapping(string name, Input<string> id, IdpGroupMappingState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/idpGroupMapping:IdpGroupMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdpGroupMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdpGroupMapping Get(string name, Input<string> id, IdpGroupMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new IdpGroupMapping(name, id, state, options);
        }
    }

    public sealed class IdpGroupMappingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the user group - should be unique in one account
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policies", required: true)]
        private InputList<Inputs.IdpGroupMappingPolicyArgs>? _policies;
        public InputList<Inputs.IdpGroupMappingPolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.IdpGroupMappingPolicyArgs>());
            set => _policies = value;
        }

        public IdpGroupMappingArgs()
        {
        }
        public static new IdpGroupMappingArgs Empty => new IdpGroupMappingArgs();
    }

    public sealed class IdpGroupMappingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the user group - should be unique in one account
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policies")]
        private InputList<Inputs.IdpGroupMappingPolicyGetArgs>? _policies;
        public InputList<Inputs.IdpGroupMappingPolicyGetArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.IdpGroupMappingPolicyGetArgs>());
            set => _policies = value;
        }

        public IdpGroupMappingState()
        {
        }
        public static new IdpGroupMappingState Empty => new IdpGroupMappingState();
    }
}
