// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.StackDependency` represents a Spacelift **stack dependency** - a dependency between two stacks. When one stack depends on another, the tracked runs of the stack will not start until the dependent stack is successfully finished. Additionally, changes to the dependency will trigger the dependent.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var infra = new Spacelift.Stack("infra", new()
    ///     {
    ///         Branch = "master",
    ///         Repository = "core-infra",
    ///     });
    /// 
    ///     var app = new Spacelift.Stack("app", new()
    ///     {
    ///         Branch = "master",
    ///         Repository = "app",
    ///     });
    /// 
    ///     var test = new Spacelift.StackDependency("test", new()
    ///     {
    ///         StackId = app.Id,
    ///         DependsOnStackId = infra.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/stackDependency:StackDependency")]
    public partial class StackDependency : global::Pulumi.CustomResource
    {
        /// <summary>
        /// immutable ID (slug) of stack to depend on.
        /// </summary>
        [Output("dependsOnStackId")]
        public Output<string> DependsOnStackId { get; private set; } = null!;

        /// <summary>
        /// immutable ID (slug) of stack which has a dependency.
        /// </summary>
        [Output("stackId")]
        public Output<string> StackId { get; private set; } = null!;


        /// <summary>
        /// Create a StackDependency resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StackDependency(string name, StackDependencyArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/stackDependency:StackDependency", name, args ?? new StackDependencyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StackDependency(string name, Input<string> id, StackDependencyState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/stackDependency:StackDependency", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StackDependency resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StackDependency Get(string name, Input<string> id, StackDependencyState? state = null, CustomResourceOptions? options = null)
        {
            return new StackDependency(name, id, state, options);
        }
    }

    public sealed class StackDependencyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// immutable ID (slug) of stack to depend on.
        /// </summary>
        [Input("dependsOnStackId", required: true)]
        public Input<string> DependsOnStackId { get; set; } = null!;

        /// <summary>
        /// immutable ID (slug) of stack which has a dependency.
        /// </summary>
        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        public StackDependencyArgs()
        {
        }
        public static new StackDependencyArgs Empty => new StackDependencyArgs();
    }

    public sealed class StackDependencyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// immutable ID (slug) of stack to depend on.
        /// </summary>
        [Input("dependsOnStackId")]
        public Input<string>? DependsOnStackId { get; set; }

        /// <summary>
        /// immutable ID (slug) of stack which has a dependency.
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public StackDependencyState()
        {
        }
        public static new StackDependencyState Empty => new StackDependencyState();
    }
}
