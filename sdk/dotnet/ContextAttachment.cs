// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.ContextAttachment` represents a Spacelift attachment of a single context to a single stack or module, with a predefined priority.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // For a module
    ///     var attachment = new Spacelift.ContextAttachment("attachment", new()
    ///     {
    ///         ContextId = "prod-k8s-ie",
    ///         ModuleId = "k8s-module",
    ///         Priority = 0,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/contextAttachment:ContextAttachment test_stack $CONTEXT_ID/$STACK_ID
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/contextAttachment:ContextAttachment")]
    public partial class ContextAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the context to attach
        /// </summary>
        [Output("contextId")]
        public Output<string> ContextId { get; private set; } = null!;

        /// <summary>
        /// ID of the module to attach the context to
        /// </summary>
        [Output("moduleId")]
        public Output<string?> ModuleId { get; private set; } = null!;

        /// <summary>
        /// Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// ID of the stack to attach the context to
        /// </summary>
        [Output("stackId")]
        public Output<string?> StackId { get; private set; } = null!;


        /// <summary>
        /// Create a ContextAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContextAttachment(string name, ContextAttachmentArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/contextAttachment:ContextAttachment", name, args ?? new ContextAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContextAttachment(string name, Input<string> id, ContextAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/contextAttachment:ContextAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContextAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContextAttachment Get(string name, Input<string> id, ContextAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ContextAttachment(name, id, state, options);
        }
    }

    public sealed class ContextAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the context to attach
        /// </summary>
        [Input("contextId", required: true)]
        public Input<string> ContextId { get; set; } = null!;

        /// <summary>
        /// ID of the module to attach the context to
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// ID of the stack to attach the context to
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public ContextAttachmentArgs()
        {
        }
        public static new ContextAttachmentArgs Empty => new ContextAttachmentArgs();
    }

    public sealed class ContextAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the context to attach
        /// </summary>
        [Input("contextId")]
        public Input<string>? ContextId { get; set; }

        /// <summary>
        /// ID of the module to attach the context to
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// ID of the stack to attach the context to
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public ContextAttachmentState()
        {
        }
        public static new ContextAttachmentState Empty => new ContextAttachmentState();
    }
}
