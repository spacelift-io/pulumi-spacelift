// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// **Note:** This resource is experimental. Please continue to use `spacelift.AwsRole`.
    /// 
    /// `spacelift.AwsIntegration` represents an integration with an AWS account. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect.
    /// 
    /// Note: when assuming credentials for **shared workers**, Spacelift will use `$accountName-$integrationID@$stackID-$suffix` or `$accountName-$integrationID@$moduleID-$suffix` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole),$suffix will be `read` or `write`.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/awsIntegration:AwsIntegration read_write_integration $INTEGRATION_ID
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/awsIntegration:AwsIntegration")]
    public partial class AwsIntegration : Pulumi.CustomResource
    {
        /// <summary>
        /// Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.
        /// </summary>
        [Output("durationSeconds")]
        public Output<int?> DurationSeconds { get; private set; } = null!;

        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        [Output("externalId")]
        public Output<string?> ExternalId { get; private set; } = null!;

        /// <summary>
        /// Generate AWS credentials in the private worker. Defaults to `false`.
        /// </summary>
        [Output("generateCredentialsInWorker")]
        public Output<bool?> GenerateCredentialsInWorker { get; private set; } = null!;

        /// <summary>
        /// Labels to set on the integration
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The friendly name of the integration
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// ID (slug) of the space the integration is in
        /// </summary>
        [Output("spaceId")]
        public Output<string> SpaceId { get; private set; } = null!;


        /// <summary>
        /// Create a AwsIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AwsIntegration(string name, AwsIntegrationArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/awsIntegration:AwsIntegration", name, args ?? new AwsIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AwsIntegration(string name, Input<string> id, AwsIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/awsIntegration:AwsIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/spacelift-io/pulumi-spacelift/releases",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AwsIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AwsIntegration Get(string name, Input<string> id, AwsIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new AwsIntegration(name, id, state, options);
        }
    }

    public sealed class AwsIntegrationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.
        /// </summary>
        [Input("durationSeconds")]
        public Input<int>? DurationSeconds { get; set; }

        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Generate AWS credentials in the private worker. Defaults to `false`.
        /// </summary>
        [Input("generateCredentialsInWorker")]
        public Input<bool>? GenerateCredentialsInWorker { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// Labels to set on the integration
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The friendly name of the integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// ID (slug) of the space the integration is in
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        public AwsIntegrationArgs()
        {
        }
    }

    public sealed class AwsIntegrationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.
        /// </summary>
        [Input("durationSeconds")]
        public Input<int>? DurationSeconds { get; set; }

        /// <summary>
        /// Custom external ID (works only for private workers).
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Generate AWS credentials in the private worker. Defaults to `false`.
        /// </summary>
        [Input("generateCredentialsInWorker")]
        public Input<bool>? GenerateCredentialsInWorker { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// Labels to set on the integration
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The friendly name of the integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ARN of the AWS IAM role to attach
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// ID (slug) of the space the integration is in
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        public AwsIntegrationState()
        {
        }
    }
}
