// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    [SpaceliftResourceType("spacelift:index/stack:Stack")]
    public partial class Stack : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether this stack can manage others
        /// </summary>
        [Output("administrative")]
        public Output<bool?> Administrative { get; private set; } = null!;

        /// <summary>
        /// Indicates whether changes to this stack can be automatically deployed
        /// </summary>
        [Output("autodeploy")]
        public Output<bool?> Autodeploy { get; private set; } = null!;

        /// <summary>
        /// Indicates whether obsolete proposed changes should automatically be retried
        /// </summary>
        [Output("autoretry")]
        public Output<bool?> Autoretry { get; private set; } = null!;

        /// <summary>
        /// AWS IAM assume role policy statement setting up trust relationship
        /// </summary>
        [Output("awsAssumeRolePolicyStatement")]
        public Output<string> AwsAssumeRolePolicyStatement { get; private set; } = null!;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        [Output("beforeInits")]
        public Output<ImmutableArray<string>> BeforeInits { get; private set; } = null!;

        /// <summary>
        /// GitHub branch to apply changes to
        /// </summary>
        [Output("branch")]
        public Output<string> Branch { get; private set; } = null!;

        /// <summary>
        /// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        /// </summary>
        [Output("cloudformation")]
        public Output<Outputs.StackCloudformation?> Cloudformation { get; private set; } = null!;

        /// <summary>
        /// Free-form stack description for users
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("gitlab")]
        public Output<Outputs.StackGitlab?> Gitlab { get; private set; } = null!;

        /// <summary>
        /// State file to upload when creating a new stack
        /// </summary>
        [Output("importState")]
        public Output<string?> ImportState { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Determines if Spacelift should manage state for this stack
        /// </summary>
        [Output("manageState")]
        public Output<bool?> ManageState { get; private set; } = null!;

        /// <summary>
        /// Name of the stack - should be unique in one account
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        /// </summary>
        [Output("projectRoot")]
        public Output<string?> ProjectRoot { get; private set; } = null!;

        /// <summary>
        /// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        /// </summary>
        [Output("pulumi")]
        public Output<Outputs.StackPulumi?> Pulumi { get; private set; } = null!;

        /// <summary>
        /// Name of the repository, without the owner part
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// Name of the Docker image used to process Runs
        /// </summary>
        [Output("runnerImage")]
        public Output<string?> RunnerImage { get; private set; } = null!;

        /// <summary>
        /// Terraform version to use
        /// </summary>
        [Output("terraformVersion")]
        public Output<string?> TerraformVersion { get; private set; } = null!;

        /// <summary>
        /// Terraform workspace to select
        /// </summary>
        [Output("terraformWorkspace")]
        public Output<string?> TerraformWorkspace { get; private set; } = null!;

        /// <summary>
        /// ID of the worker pool to use
        /// </summary>
        [Output("workerPoolId")]
        public Output<string?> WorkerPoolId { get; private set; } = null!;


        /// <summary>
        /// Create a Stack resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stack(string name, StackArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/stack:Stack", name, args ?? new StackArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stack(string name, Input<string> id, StackState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/stack:Stack", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stack resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stack Get(string name, Input<string> id, StackState? state = null, CustomResourceOptions? options = null)
        {
            return new Stack(name, id, state, options);
        }
    }

    public sealed class StackArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether this stack can manage others
        /// </summary>
        [Input("administrative")]
        public Input<bool>? Administrative { get; set; }

        /// <summary>
        /// Indicates whether changes to this stack can be automatically deployed
        /// </summary>
        [Input("autodeploy")]
        public Input<bool>? Autodeploy { get; set; }

        /// <summary>
        /// Indicates whether obsolete proposed changes should automatically be retried
        /// </summary>
        [Input("autoretry")]
        public Input<bool>? Autoretry { get; set; }

        [Input("beforeInits")]
        private InputList<string>? _beforeInits;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public InputList<string> BeforeInits
        {
            get => _beforeInits ?? (_beforeInits = new InputList<string>());
            set => _beforeInits = value;
        }

        /// <summary>
        /// GitHub branch to apply changes to
        /// </summary>
        [Input("branch", required: true)]
        public Input<string> Branch { get; set; } = null!;

        /// <summary>
        /// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        /// </summary>
        [Input("cloudformation")]
        public Input<Inputs.StackCloudformationArgs>? Cloudformation { get; set; }

        /// <summary>
        /// Free-form stack description for users
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("gitlab")]
        public Input<Inputs.StackGitlabArgs>? Gitlab { get; set; }

        /// <summary>
        /// State file to upload when creating a new stack
        /// </summary>
        [Input("importState")]
        public Input<string>? ImportState { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Determines if Spacelift should manage state for this stack
        /// </summary>
        [Input("manageState")]
        public Input<bool>? ManageState { get; set; }

        /// <summary>
        /// Name of the stack - should be unique in one account
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        /// </summary>
        [Input("projectRoot")]
        public Input<string>? ProjectRoot { get; set; }

        /// <summary>
        /// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        /// </summary>
        [Input("pulumi")]
        public Input<Inputs.StackPulumiArgs>? Pulumi { get; set; }

        /// <summary>
        /// Name of the repository, without the owner part
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// Name of the Docker image used to process Runs
        /// </summary>
        [Input("runnerImage")]
        public Input<string>? RunnerImage { get; set; }

        /// <summary>
        /// Terraform version to use
        /// </summary>
        [Input("terraformVersion")]
        public Input<string>? TerraformVersion { get; set; }

        /// <summary>
        /// Terraform workspace to select
        /// </summary>
        [Input("terraformWorkspace")]
        public Input<string>? TerraformWorkspace { get; set; }

        /// <summary>
        /// ID of the worker pool to use
        /// </summary>
        [Input("workerPoolId")]
        public Input<string>? WorkerPoolId { get; set; }

        public StackArgs()
        {
        }
    }

    public sealed class StackState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether this stack can manage others
        /// </summary>
        [Input("administrative")]
        public Input<bool>? Administrative { get; set; }

        /// <summary>
        /// Indicates whether changes to this stack can be automatically deployed
        /// </summary>
        [Input("autodeploy")]
        public Input<bool>? Autodeploy { get; set; }

        /// <summary>
        /// Indicates whether obsolete proposed changes should automatically be retried
        /// </summary>
        [Input("autoretry")]
        public Input<bool>? Autoretry { get; set; }

        /// <summary>
        /// AWS IAM assume role policy statement setting up trust relationship
        /// </summary>
        [Input("awsAssumeRolePolicyStatement")]
        public Input<string>? AwsAssumeRolePolicyStatement { get; set; }

        [Input("beforeInits")]
        private InputList<string>? _beforeInits;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public InputList<string> BeforeInits
        {
            get => _beforeInits ?? (_beforeInits = new InputList<string>());
            set => _beforeInits = value;
        }

        /// <summary>
        /// GitHub branch to apply changes to
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        /// </summary>
        [Input("cloudformation")]
        public Input<Inputs.StackCloudformationGetArgs>? Cloudformation { get; set; }

        /// <summary>
        /// Free-form stack description for users
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("gitlab")]
        public Input<Inputs.StackGitlabGetArgs>? Gitlab { get; set; }

        /// <summary>
        /// State file to upload when creating a new stack
        /// </summary>
        [Input("importState")]
        public Input<string>? ImportState { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Determines if Spacelift should manage state for this stack
        /// </summary>
        [Input("manageState")]
        public Input<bool>? ManageState { get; set; }

        /// <summary>
        /// Name of the stack - should be unique in one account
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        /// </summary>
        [Input("projectRoot")]
        public Input<string>? ProjectRoot { get; set; }

        /// <summary>
        /// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        /// </summary>
        [Input("pulumi")]
        public Input<Inputs.StackPulumiGetArgs>? Pulumi { get; set; }

        /// <summary>
        /// Name of the repository, without the owner part
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Name of the Docker image used to process Runs
        /// </summary>
        [Input("runnerImage")]
        public Input<string>? RunnerImage { get; set; }

        /// <summary>
        /// Terraform version to use
        /// </summary>
        [Input("terraformVersion")]
        public Input<string>? TerraformVersion { get; set; }

        /// <summary>
        /// Terraform workspace to select
        /// </summary>
        [Input("terraformWorkspace")]
        public Input<string>? TerraformWorkspace { get; set; }

        /// <summary>
        /// ID of the worker pool to use
        /// </summary>
        [Input("workerPoolId")]
        public Input<string>? WorkerPoolId { get; set; }

        public StackState()
        {
        }
    }
}
