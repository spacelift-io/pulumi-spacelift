// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetAzureIntegration
    {
        /// <summary>
        /// `spacelift.AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Spacelift.GetAzureIntegration.InvokeAsync(new Spacelift.GetAzureIntegrationArgs
        ///         {
        ///             IntegrationId = "01FPAH5J0JFYSM5953T9KT2VS9",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAzureIntegrationResult> InvokeAsync(GetAzureIntegrationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAzureIntegrationResult>("spacelift:index/getAzureIntegration:getAzureIntegration", args ?? new GetAzureIntegrationArgs(), options.WithDefaults());

        /// <summary>
        /// `spacelift.AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Spacelift.GetAzureIntegration.InvokeAsync(new Spacelift.GetAzureIntegrationArgs
        ///         {
        ///             IntegrationId = "01FPAH5J0JFYSM5953T9KT2VS9",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAzureIntegrationResult> Invoke(GetAzureIntegrationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAzureIntegrationResult>("spacelift:index/getAzureIntegration:getAzureIntegration", args ?? new GetAzureIntegrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAzureIntegrationArgs : Pulumi.InvokeArgs
    {
        [Input("integrationId", required: true)]
        public string IntegrationId { get; set; } = null!;

        public GetAzureIntegrationArgs()
        {
        }
    }

    public sealed class GetAzureIntegrationInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("integrationId", required: true)]
        public Input<string> IntegrationId { get; set; } = null!;

        public GetAzureIntegrationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAzureIntegrationResult
    {
        public readonly bool AdminConsentProvided;
        public readonly string AdminConsentUrl;
        public readonly string ApplicationId;
        public readonly string DefaultSubscriptionId;
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IntegrationId;
        public readonly ImmutableArray<string> Labels;
        public readonly string Name;
        public readonly string SpaceId;
        public readonly string TenantId;

        [OutputConstructor]
        private GetAzureIntegrationResult(
            bool adminConsentProvided,

            string adminConsentUrl,

            string applicationId,

            string defaultSubscriptionId,

            string displayName,

            string id,

            string integrationId,

            ImmutableArray<string> labels,

            string name,

            string spaceId,

            string tenantId)
        {
            AdminConsentProvided = adminConsentProvided;
            AdminConsentUrl = adminConsentUrl;
            ApplicationId = applicationId;
            DefaultSubscriptionId = defaultSubscriptionId;
            DisplayName = displayName;
            Id = id;
            IntegrationId = integrationId;
            Labels = labels;
            Name = name;
            SpaceId = spaceId;
            TenantId = tenantId;
        }
    }
}
