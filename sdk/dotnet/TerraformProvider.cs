// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datadog = new Spacelift.TerraformProvider("datadog", new()
    ///     {
    ///         Description = "Our fork of the Datadog provider",
    ///         Labels = new[]
    ///         {
    ///             "fork",
    ///         },
    ///         Public = false,
    ///         SpaceId = "root",
    ///         Type = "datadog",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/terraformProvider:TerraformProvider")]
    public partial class TerraformProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Free-form description for human users, supports Markdown
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Whether the provider is public or not, defaults to false (private)
        /// </summary>
        [Output("public")]
        public Output<bool?> Public { get; private set; } = null!;

        /// <summary>
        /// ID (slug) of the space the provider is in
        /// </summary>
        [Output("spaceId")]
        public Output<string> SpaceId { get; private set; } = null!;

        /// <summary>
        /// Type of the provider - should be unique in one account
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a TerraformProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TerraformProvider(string name, TerraformProviderArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/terraformProvider:TerraformProvider", name, args ?? new TerraformProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TerraformProvider(string name, Input<string> id, TerraformProviderState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/terraformProvider:TerraformProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TerraformProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TerraformProvider Get(string name, Input<string> id, TerraformProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new TerraformProvider(name, id, state, options);
        }
    }

    public sealed class TerraformProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Free-form description for human users, supports Markdown
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Whether the provider is public or not, defaults to false (private)
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// ID (slug) of the space the provider is in
        /// </summary>
        [Input("spaceId", required: true)]
        public Input<string> SpaceId { get; set; } = null!;

        /// <summary>
        /// Type of the provider - should be unique in one account
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public TerraformProviderArgs()
        {
        }
        public static new TerraformProviderArgs Empty => new TerraformProviderArgs();
    }

    public sealed class TerraformProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Free-form description for human users, supports Markdown
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Whether the provider is public or not, defaults to false (private)
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// ID (slug) of the space the provider is in
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        /// <summary>
        /// Type of the provider - should be unique in one account
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TerraformProviderState()
        {
        }
        public static new TerraformProviderState Empty => new TerraformProviderState();
    }
}
