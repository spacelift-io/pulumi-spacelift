// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.AuditTrailWebhook` represents a webhook endpoint to which Spacelift sends POST requests about audit events.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Spacelift.AuditTrailWebhook("example", new()
    ///     {
    ///         Enabled = true,
    ///         Endpoint = "https://example.com",
    ///         Secret = "mysecretkey",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/auditTrailWebhook:AuditTrailWebhook")]
    public partial class AuditTrailWebhook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// `enabled` determines whether the webhook is enabled. If it is not, Spacelift will not send any requests to the endpoint.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// `endpoint` is the URL to which Spacelift will send POST requests about audit events.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// `include_runs` determines whether the webhook should include information about the run that triggered the event.
        /// </summary>
        [Output("includeRuns")]
        public Output<bool?> IncludeRuns { get; private set; } = null!;

        /// <summary>
        /// `secret` is a secret that Spacelift will send with the request
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;


        /// <summary>
        /// Create a AuditTrailWebhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuditTrailWebhook(string name, AuditTrailWebhookArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/auditTrailWebhook:AuditTrailWebhook", name, args ?? new AuditTrailWebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuditTrailWebhook(string name, Input<string> id, AuditTrailWebhookState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/auditTrailWebhook:AuditTrailWebhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuditTrailWebhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuditTrailWebhook Get(string name, Input<string> id, AuditTrailWebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new AuditTrailWebhook(name, id, state, options);
        }
    }

    public sealed class AuditTrailWebhookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `enabled` determines whether the webhook is enabled. If it is not, Spacelift will not send any requests to the endpoint.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// `endpoint` is the URL to which Spacelift will send POST requests about audit events.
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// `include_runs` determines whether the webhook should include information about the run that triggered the event.
        /// </summary>
        [Input("includeRuns")]
        public Input<bool>? IncludeRuns { get; set; }

        [Input("secret", required: true)]
        private Input<string>? _secret;

        /// <summary>
        /// `secret` is a secret that Spacelift will send with the request
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public AuditTrailWebhookArgs()
        {
        }
        public static new AuditTrailWebhookArgs Empty => new AuditTrailWebhookArgs();
    }

    public sealed class AuditTrailWebhookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `enabled` determines whether the webhook is enabled. If it is not, Spacelift will not send any requests to the endpoint.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// `endpoint` is the URL to which Spacelift will send POST requests about audit events.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// `include_runs` determines whether the webhook should include information about the run that triggered the event.
        /// </summary>
        [Input("includeRuns")]
        public Input<bool>? IncludeRuns { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// `secret` is a secret that Spacelift will send with the request
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public AuditTrailWebhookState()
        {
        }
        public static new AuditTrailWebhookState Empty => new AuditTrailWebhookState();
    }
}
