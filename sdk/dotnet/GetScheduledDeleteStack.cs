// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetScheduledDeleteStack
    {
        /// <summary>
        /// `spacelift.ScheduledDeleteTask` represents a scheduling configuration for a Stack. It will trigger a stack deletion task at the given timestamp.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ireland_kubeconfig_delete = Spacelift.GetScheduledDeleteStack.Invoke(new()
        ///     {
        ///         ScheduledDeleteStackId = "$STACK_ID/$SCHEDULED_DELETE_STACK_ID",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetScheduledDeleteStackResult> InvokeAsync(GetScheduledDeleteStackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScheduledDeleteStackResult>("spacelift:index/getScheduledDeleteStack:getScheduledDeleteStack", args ?? new GetScheduledDeleteStackArgs(), options.WithDefaults());

        /// <summary>
        /// `spacelift.ScheduledDeleteTask` represents a scheduling configuration for a Stack. It will trigger a stack deletion task at the given timestamp.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ireland_kubeconfig_delete = Spacelift.GetScheduledDeleteStack.Invoke(new()
        ///     {
        ///         ScheduledDeleteStackId = "$STACK_ID/$SCHEDULED_DELETE_STACK_ID",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetScheduledDeleteStackResult> Invoke(GetScheduledDeleteStackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScheduledDeleteStackResult>("spacelift:index/getScheduledDeleteStack:getScheduledDeleteStack", args ?? new GetScheduledDeleteStackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScheduledDeleteStackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the scheduled delete*stack (stack*id/schedule_id)
        /// </summary>
        [Input("scheduledDeleteStackId", required: true)]
        public string ScheduledDeleteStackId { get; set; } = null!;

        public GetScheduledDeleteStackArgs()
        {
        }
        public static new GetScheduledDeleteStackArgs Empty => new GetScheduledDeleteStackArgs();
    }

    public sealed class GetScheduledDeleteStackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the scheduled delete*stack (stack*id/schedule_id)
        /// </summary>
        [Input("scheduledDeleteStackId", required: true)]
        public Input<string> ScheduledDeleteStackId { get; set; } = null!;

        public GetScheduledDeleteStackInvokeArgs()
        {
        }
        public static new GetScheduledDeleteStackInvokeArgs Empty => new GetScheduledDeleteStackInvokeArgs();
    }


    [OutputType]
    public sealed class GetScheduledDeleteStackResult
    {
        /// <summary>
        /// Timestamp (unix timestamp) at which time the scheduling should happen.
        /// </summary>
        public readonly int At;
        /// <summary>
        /// Indicates whether the resources of the stack should be deleted.
        /// </summary>
        public readonly bool DeleteResources;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the schedule
        /// </summary>
        public readonly string ScheduleId;
        /// <summary>
        /// ID of the scheduled delete*stack (stack*id/schedule_id)
        /// </summary>
        public readonly string ScheduledDeleteStackId;
        /// <summary>
        /// Stack ID of the scheduling config
        /// </summary>
        public readonly string StackId;

        [OutputConstructor]
        private GetScheduledDeleteStackResult(
            int at,

            bool deleteResources,

            string id,

            string scheduleId,

            string scheduledDeleteStackId,

            string stackId)
        {
            At = at;
            DeleteResources = deleteResources;
            Id = id;
            ScheduleId = scheduleId;
            ScheduledDeleteStackId = scheduledDeleteStackId;
            StackId = stackId;
        }
    }
}
