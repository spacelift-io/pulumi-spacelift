// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    [SpaceliftResourceType("spacelift:index/module:Module")]
    public partial class Module : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether this module can manage others
        /// </summary>
        [Output("administrative")]
        public Output<bool?> Administrative { get; private set; } = null!;

        /// <summary>
        /// AWS IAM assume role policy statement setting up trust relationship
        /// </summary>
        [Output("awsAssumeRolePolicyStatement")]
        public Output<string> AwsAssumeRolePolicyStatement { get; private set; } = null!;

        /// <summary>
        /// GitHub branch to apply changes to
        /// </summary>
        [Output("branch")]
        public Output<string> Branch { get; private set; } = null!;

        /// <summary>
        /// Free-form module description for users
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("gitlab")]
        public Output<Outputs.ModuleGitlab?> Gitlab { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the repository, without the owner part
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// List of the accounts (subdomains) which should have access to the Module
        /// </summary>
        [Output("sharedAccounts")]
        public Output<ImmutableArray<string>> SharedAccounts { get; private set; } = null!;

        /// <summary>
        /// ID of the worker pool to use
        /// </summary>
        [Output("workerPoolId")]
        public Output<string?> WorkerPoolId { get; private set; } = null!;


        /// <summary>
        /// Create a Module resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Module(string name, ModuleArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/module:Module", name, args ?? new ModuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Module(string name, Input<string> id, ModuleState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/module:Module", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Module resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Module Get(string name, Input<string> id, ModuleState? state = null, CustomResourceOptions? options = null)
        {
            return new Module(name, id, state, options);
        }
    }

    public sealed class ModuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether this module can manage others
        /// </summary>
        [Input("administrative")]
        public Input<bool>? Administrative { get; set; }

        /// <summary>
        /// GitHub branch to apply changes to
        /// </summary>
        [Input("branch", required: true)]
        public Input<string> Branch { get; set; } = null!;

        /// <summary>
        /// Free-form module description for users
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("gitlab")]
        public Input<Inputs.ModuleGitlabArgs>? Gitlab { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the repository, without the owner part
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        [Input("sharedAccounts")]
        private InputList<string>? _sharedAccounts;

        /// <summary>
        /// List of the accounts (subdomains) which should have access to the Module
        /// </summary>
        public InputList<string> SharedAccounts
        {
            get => _sharedAccounts ?? (_sharedAccounts = new InputList<string>());
            set => _sharedAccounts = value;
        }

        /// <summary>
        /// ID of the worker pool to use
        /// </summary>
        [Input("workerPoolId")]
        public Input<string>? WorkerPoolId { get; set; }

        public ModuleArgs()
        {
        }
    }

    public sealed class ModuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether this module can manage others
        /// </summary>
        [Input("administrative")]
        public Input<bool>? Administrative { get; set; }

        /// <summary>
        /// AWS IAM assume role policy statement setting up trust relationship
        /// </summary>
        [Input("awsAssumeRolePolicyStatement")]
        public Input<string>? AwsAssumeRolePolicyStatement { get; set; }

        /// <summary>
        /// GitHub branch to apply changes to
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// Free-form module description for users
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("gitlab")]
        public Input<Inputs.ModuleGitlabGetArgs>? Gitlab { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the repository, without the owner part
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        [Input("sharedAccounts")]
        private InputList<string>? _sharedAccounts;

        /// <summary>
        /// List of the accounts (subdomains) which should have access to the Module
        /// </summary>
        public InputList<string> SharedAccounts
        {
            get => _sharedAccounts ?? (_sharedAccounts = new InputList<string>());
            set => _sharedAccounts = value;
        }

        /// <summary>
        /// ID of the worker pool to use
        /// </summary>
        [Input("workerPoolId")]
        public Input<string>? WorkerPoolId { get; set; }

        public ModuleState()
        {
        }
    }
}
