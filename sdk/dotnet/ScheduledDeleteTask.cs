// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.ScheduledDeleteTask` represents a scheduling configuration for a Stack. It will trigger a stack deletion task at the given timestamp.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var k8s_core = new Spacelift.Stack("k8s-core");
    /// 
    ///     // ...
    ///     // at a given timestamp (unix)
    ///     var k8s_core_delete = new Spacelift.ScheduledDeleteTask("k8s-core-delete", new()
    ///     {
    ///         StackId = k8s_core.Id,
    ///         At = 1663336895,
    ///         DeleteResources = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/scheduledDeleteTask:ScheduledDeleteTask ireland-kubeconfig $STACK_ID/$SCHEDULED_DELETE_STACK_ID
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/scheduledDeleteTask:ScheduledDeleteTask")]
    public partial class ScheduledDeleteTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp (unix timestamp) at which time the scheduling should happen.
        /// </summary>
        [Output("at")]
        public Output<int> At { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the resources of the stack should be deleted.
        /// </summary>
        [Output("deleteResources")]
        public Output<bool?> DeleteResources { get; private set; } = null!;

        /// <summary>
        /// ID of the schedule
        /// </summary>
        [Output("scheduleId")]
        public Output<string> ScheduleId { get; private set; } = null!;

        /// <summary>
        /// ID of the stack for which to set up scheduling
        /// </summary>
        [Output("stackId")]
        public Output<string> StackId { get; private set; } = null!;


        /// <summary>
        /// Create a ScheduledDeleteTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScheduledDeleteTask(string name, ScheduledDeleteTaskArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/scheduledDeleteTask:ScheduledDeleteTask", name, args ?? new ScheduledDeleteTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScheduledDeleteTask(string name, Input<string> id, ScheduledDeleteTaskState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/scheduledDeleteTask:ScheduledDeleteTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScheduledDeleteTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScheduledDeleteTask Get(string name, Input<string> id, ScheduledDeleteTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new ScheduledDeleteTask(name, id, state, options);
        }
    }

    public sealed class ScheduledDeleteTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp (unix timestamp) at which time the scheduling should happen.
        /// </summary>
        [Input("at", required: true)]
        public Input<int> At { get; set; } = null!;

        /// <summary>
        /// Indicates whether the resources of the stack should be deleted.
        /// </summary>
        [Input("deleteResources")]
        public Input<bool>? DeleteResources { get; set; }

        /// <summary>
        /// ID of the schedule
        /// </summary>
        [Input("scheduleId")]
        public Input<string>? ScheduleId { get; set; }

        /// <summary>
        /// ID of the stack for which to set up scheduling
        /// </summary>
        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        public ScheduledDeleteTaskArgs()
        {
        }
        public static new ScheduledDeleteTaskArgs Empty => new ScheduledDeleteTaskArgs();
    }

    public sealed class ScheduledDeleteTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp (unix timestamp) at which time the scheduling should happen.
        /// </summary>
        [Input("at")]
        public Input<int>? At { get; set; }

        /// <summary>
        /// Indicates whether the resources of the stack should be deleted.
        /// </summary>
        [Input("deleteResources")]
        public Input<bool>? DeleteResources { get; set; }

        /// <summary>
        /// ID of the schedule
        /// </summary>
        [Input("scheduleId")]
        public Input<string>? ScheduleId { get; set; }

        /// <summary>
        /// ID of the stack for which to set up scheduling
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public ScheduledDeleteTaskState()
        {
        }
        public static new ScheduledDeleteTaskState Empty => new ScheduledDeleteTaskState();
    }
}
