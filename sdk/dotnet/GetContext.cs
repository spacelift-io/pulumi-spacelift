// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetContext
    {
        /// <summary>
        /// `spacelift.Context` represents a Spacelift **context** - a collection of configuration elements (either environment variables or mounted files) that can be administratively attached to multiple stacks (`spacelift.Stack`) or modules (`spacelift.Module`) using a context attachment (`spacelift.ContextAttachment`)`
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prod_k8s_ie = Spacelift.GetContext.Invoke(new()
        ///     {
        ///         ContextId = "prod-k8s-ie",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetContextResult> InvokeAsync(GetContextArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContextResult>("spacelift:index/getContext:getContext", args ?? new GetContextArgs(), options.WithDefaults());

        /// <summary>
        /// `spacelift.Context` represents a Spacelift **context** - a collection of configuration elements (either environment variables or mounted files) that can be administratively attached to multiple stacks (`spacelift.Stack`) or modules (`spacelift.Module`) using a context attachment (`spacelift.ContextAttachment`)`
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prod_k8s_ie = Spacelift.GetContext.Invoke(new()
        ///     {
        ///         ContextId = "prod-k8s-ie",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetContextResult> Invoke(GetContextInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContextResult>("spacelift:index/getContext:getContext", args ?? new GetContextInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContextArgs : global::Pulumi.InvokeArgs
    {
        [Input("afterApplies")]
        private List<string>? _afterApplies;

        /// <summary>
        /// List of after-apply scripts
        /// </summary>
        public List<string> AfterApplies
        {
            get => _afterApplies ?? (_afterApplies = new List<string>());
            set => _afterApplies = value;
        }

        [Input("afterDestroys")]
        private List<string>? _afterDestroys;

        /// <summary>
        /// List of after-destroy scripts
        /// </summary>
        public List<string> AfterDestroys
        {
            get => _afterDestroys ?? (_afterDestroys = new List<string>());
            set => _afterDestroys = value;
        }

        [Input("afterInits")]
        private List<string>? _afterInits;

        /// <summary>
        /// List of after-init scripts
        /// </summary>
        public List<string> AfterInits
        {
            get => _afterInits ?? (_afterInits = new List<string>());
            set => _afterInits = value;
        }

        [Input("afterPerforms")]
        private List<string>? _afterPerforms;

        /// <summary>
        /// List of after-perform scripts
        /// </summary>
        public List<string> AfterPerforms
        {
            get => _afterPerforms ?? (_afterPerforms = new List<string>());
            set => _afterPerforms = value;
        }

        [Input("afterPlans")]
        private List<string>? _afterPlans;

        /// <summary>
        /// List of after-plan scripts
        /// </summary>
        public List<string> AfterPlans
        {
            get => _afterPlans ?? (_afterPlans = new List<string>());
            set => _afterPlans = value;
        }

        [Input("afterRuns")]
        private List<string>? _afterRuns;

        /// <summary>
        /// List of after-run scripts
        /// </summary>
        public List<string> AfterRuns
        {
            get => _afterRuns ?? (_afterRuns = new List<string>());
            set => _afterRuns = value;
        }

        [Input("beforeApplies")]
        private List<string>? _beforeApplies;

        /// <summary>
        /// List of before-apply scripts
        /// </summary>
        public List<string> BeforeApplies
        {
            get => _beforeApplies ?? (_beforeApplies = new List<string>());
            set => _beforeApplies = value;
        }

        [Input("beforeDestroys")]
        private List<string>? _beforeDestroys;

        /// <summary>
        /// List of before-destroy scripts
        /// </summary>
        public List<string> BeforeDestroys
        {
            get => _beforeDestroys ?? (_beforeDestroys = new List<string>());
            set => _beforeDestroys = value;
        }

        [Input("beforeInits")]
        private List<string>? _beforeInits;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public List<string> BeforeInits
        {
            get => _beforeInits ?? (_beforeInits = new List<string>());
            set => _beforeInits = value;
        }

        [Input("beforePerforms")]
        private List<string>? _beforePerforms;

        /// <summary>
        /// List of before-perform scripts
        /// </summary>
        public List<string> BeforePerforms
        {
            get => _beforePerforms ?? (_beforePerforms = new List<string>());
            set => _beforePerforms = value;
        }

        [Input("beforePlans")]
        private List<string>? _beforePlans;

        /// <summary>
        /// List of before-plan scripts
        /// </summary>
        public List<string> BeforePlans
        {
            get => _beforePlans ?? (_beforePlans = new List<string>());
            set => _beforePlans = value;
        }

        /// <summary>
        /// immutable ID (slug) of the context
        /// </summary>
        [Input("contextId", required: true)]
        public string ContextId { get; set; } = null!;

        public GetContextArgs()
        {
        }
        public static new GetContextArgs Empty => new GetContextArgs();
    }

    public sealed class GetContextInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("afterApplies")]
        private InputList<string>? _afterApplies;

        /// <summary>
        /// List of after-apply scripts
        /// </summary>
        public InputList<string> AfterApplies
        {
            get => _afterApplies ?? (_afterApplies = new InputList<string>());
            set => _afterApplies = value;
        }

        [Input("afterDestroys")]
        private InputList<string>? _afterDestroys;

        /// <summary>
        /// List of after-destroy scripts
        /// </summary>
        public InputList<string> AfterDestroys
        {
            get => _afterDestroys ?? (_afterDestroys = new InputList<string>());
            set => _afterDestroys = value;
        }

        [Input("afterInits")]
        private InputList<string>? _afterInits;

        /// <summary>
        /// List of after-init scripts
        /// </summary>
        public InputList<string> AfterInits
        {
            get => _afterInits ?? (_afterInits = new InputList<string>());
            set => _afterInits = value;
        }

        [Input("afterPerforms")]
        private InputList<string>? _afterPerforms;

        /// <summary>
        /// List of after-perform scripts
        /// </summary>
        public InputList<string> AfterPerforms
        {
            get => _afterPerforms ?? (_afterPerforms = new InputList<string>());
            set => _afterPerforms = value;
        }

        [Input("afterPlans")]
        private InputList<string>? _afterPlans;

        /// <summary>
        /// List of after-plan scripts
        /// </summary>
        public InputList<string> AfterPlans
        {
            get => _afterPlans ?? (_afterPlans = new InputList<string>());
            set => _afterPlans = value;
        }

        [Input("afterRuns")]
        private InputList<string>? _afterRuns;

        /// <summary>
        /// List of after-run scripts
        /// </summary>
        public InputList<string> AfterRuns
        {
            get => _afterRuns ?? (_afterRuns = new InputList<string>());
            set => _afterRuns = value;
        }

        [Input("beforeApplies")]
        private InputList<string>? _beforeApplies;

        /// <summary>
        /// List of before-apply scripts
        /// </summary>
        public InputList<string> BeforeApplies
        {
            get => _beforeApplies ?? (_beforeApplies = new InputList<string>());
            set => _beforeApplies = value;
        }

        [Input("beforeDestroys")]
        private InputList<string>? _beforeDestroys;

        /// <summary>
        /// List of before-destroy scripts
        /// </summary>
        public InputList<string> BeforeDestroys
        {
            get => _beforeDestroys ?? (_beforeDestroys = new InputList<string>());
            set => _beforeDestroys = value;
        }

        [Input("beforeInits")]
        private InputList<string>? _beforeInits;

        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public InputList<string> BeforeInits
        {
            get => _beforeInits ?? (_beforeInits = new InputList<string>());
            set => _beforeInits = value;
        }

        [Input("beforePerforms")]
        private InputList<string>? _beforePerforms;

        /// <summary>
        /// List of before-perform scripts
        /// </summary>
        public InputList<string> BeforePerforms
        {
            get => _beforePerforms ?? (_beforePerforms = new InputList<string>());
            set => _beforePerforms = value;
        }

        [Input("beforePlans")]
        private InputList<string>? _beforePlans;

        /// <summary>
        /// List of before-plan scripts
        /// </summary>
        public InputList<string> BeforePlans
        {
            get => _beforePlans ?? (_beforePlans = new InputList<string>());
            set => _beforePlans = value;
        }

        /// <summary>
        /// immutable ID (slug) of the context
        /// </summary>
        [Input("contextId", required: true)]
        public Input<string> ContextId { get; set; } = null!;

        public GetContextInvokeArgs()
        {
        }
        public static new GetContextInvokeArgs Empty => new GetContextInvokeArgs();
    }


    [OutputType]
    public sealed class GetContextResult
    {
        /// <summary>
        /// List of after-apply scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterApplies;
        /// <summary>
        /// List of after-destroy scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterDestroys;
        /// <summary>
        /// List of after-init scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterInits;
        /// <summary>
        /// List of after-perform scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterPerforms;
        /// <summary>
        /// List of after-plan scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterPlans;
        /// <summary>
        /// List of after-run scripts
        /// </summary>
        public readonly ImmutableArray<string> AfterRuns;
        /// <summary>
        /// List of before-apply scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforeApplies;
        /// <summary>
        /// List of before-destroy scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforeDestroys;
        /// <summary>
        /// List of before-init scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforeInits;
        /// <summary>
        /// List of before-perform scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforePerforms;
        /// <summary>
        /// List of before-plan scripts
        /// </summary>
        public readonly ImmutableArray<string> BeforePlans;
        /// <summary>
        /// immutable ID (slug) of the context
        /// </summary>
        public readonly string ContextId;
        /// <summary>
        /// free-form context description for users
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// name of the context
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ID (slug) of the space the context is in
        /// </summary>
        public readonly string SpaceId;

        [OutputConstructor]
        private GetContextResult(
            ImmutableArray<string> afterApplies,

            ImmutableArray<string> afterDestroys,

            ImmutableArray<string> afterInits,

            ImmutableArray<string> afterPerforms,

            ImmutableArray<string> afterPlans,

            ImmutableArray<string> afterRuns,

            ImmutableArray<string> beforeApplies,

            ImmutableArray<string> beforeDestroys,

            ImmutableArray<string> beforeInits,

            ImmutableArray<string> beforePerforms,

            ImmutableArray<string> beforePlans,

            string contextId,

            string description,

            string id,

            ImmutableArray<string> labels,

            string name,

            string spaceId)
        {
            AfterApplies = afterApplies;
            AfterDestroys = afterDestroys;
            AfterInits = afterInits;
            AfterPerforms = afterPerforms;
            AfterPlans = afterPlans;
            AfterRuns = afterRuns;
            BeforeApplies = beforeApplies;
            BeforeDestroys = beforeDestroys;
            BeforeInits = beforeInits;
            BeforePerforms = beforePerforms;
            BeforePlans = beforePlans;
            ContextId = contextId;
            Description = description;
            Id = id;
            Labels = labels;
            Name = name;
            SpaceId = spaceId;
        }
    }
}
