// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var core_infra_production = new Spacelift.Stack("core-infra-production", new Spacelift.StackArgs
    ///         {
    ///             Branch = "master",
    ///             Repository = "core-infra",
    ///         });
    ///         var core_infra_production_drift_detection = new Spacelift.DriftDetection("core-infra-production-drift-detection", new Spacelift.DriftDetectionArgs
    ///         {
    ///             Reconcile = true,
    ///             StackId = core_infra_production.Id,
    ///             Schedules = 
    ///             {
    ///                 "*/15 * * * *",
    ///             },
    ///         });
    ///         // Every 15 minutes
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection stack/$STACK_ID
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection module/$MODULE_ID
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/driftDetection:DriftDetection")]
    public partial class DriftDetection : Pulumi.CustomResource
    {
        /// <summary>
        /// Whether a tracked run should be triggered when drift is detected.
        /// </summary>
        [Output("reconcile")]
        public Output<bool?> Reconcile { get; private set; } = null!;

        /// <summary>
        /// List of cron schedule expressions based on which drift detection should be triggered.
        /// </summary>
        [Output("schedules")]
        public Output<ImmutableArray<string>> Schedules { get; private set; } = null!;

        /// <summary>
        /// ID of the stack for which to set up drift detection
        /// </summary>
        [Output("stackId")]
        public Output<string> StackId { get; private set; } = null!;

        /// <summary>
        /// Timezone in which the schedule is expressed. Defaults to `UTC`.
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a DriftDetection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DriftDetection(string name, DriftDetectionArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/driftDetection:DriftDetection", name, args ?? new DriftDetectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DriftDetection(string name, Input<string> id, DriftDetectionState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/driftDetection:DriftDetection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/spacelift-io/pulumi-spacelift/releases",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DriftDetection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DriftDetection Get(string name, Input<string> id, DriftDetectionState? state = null, CustomResourceOptions? options = null)
        {
            return new DriftDetection(name, id, state, options);
        }
    }

    public sealed class DriftDetectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether a tracked run should be triggered when drift is detected.
        /// </summary>
        [Input("reconcile")]
        public Input<bool>? Reconcile { get; set; }

        [Input("schedules", required: true)]
        private InputList<string>? _schedules;

        /// <summary>
        /// List of cron schedule expressions based on which drift detection should be triggered.
        /// </summary>
        public InputList<string> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<string>());
            set => _schedules = value;
        }

        /// <summary>
        /// ID of the stack for which to set up drift detection
        /// </summary>
        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        /// <summary>
        /// Timezone in which the schedule is expressed. Defaults to `UTC`.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public DriftDetectionArgs()
        {
        }
    }

    public sealed class DriftDetectionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether a tracked run should be triggered when drift is detected.
        /// </summary>
        [Input("reconcile")]
        public Input<bool>? Reconcile { get; set; }

        [Input("schedules")]
        private InputList<string>? _schedules;

        /// <summary>
        /// List of cron schedule expressions based on which drift detection should be triggered.
        /// </summary>
        public InputList<string> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<string>());
            set => _schedules = value;
        }

        /// <summary>
        /// ID of the stack for which to set up drift detection
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        /// <summary>
        /// Timezone in which the schedule is expressed. Defaults to `UTC`.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public DriftDetectionState()
        {
        }
    }
}
