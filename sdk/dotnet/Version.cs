// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.Version` allows to programmatically trigger a version creation in response to arbitrary changes in the keepers section.
    /// </summary>
    [SpaceliftResourceType("spacelift:index/version:Version")]
    public partial class Version : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The commit SHA for which to trigger a version.
        /// </summary>
        [Output("commitSha")]
        public Output<string?> CommitSha { get; private set; } = null!;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of the resource.
        /// </summary>
        [Output("keepers")]
        public Output<ImmutableDictionary<string, object>?> Keepers { get; private set; } = null!;

        /// <summary>
        /// ID of the module on which the version creation is to be triggered.
        /// </summary>
        [Output("moduleId")]
        public Output<string> ModuleId { get; private set; } = null!;

        /// <summary>
        /// A semantic version number to set for the triggered version, example: 0.11.2
        /// </summary>
        [Output("versionNumber")]
        public Output<string?> VersionNumber { get; private set; } = null!;


        /// <summary>
        /// Create a Version resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Version(string name, VersionArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/version:Version", name, args ?? new VersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Version(string name, Input<string> id, VersionState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/version:Version", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Version resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Version Get(string name, Input<string> id, VersionState? state = null, CustomResourceOptions? options = null)
        {
            return new Version(name, id, state, options);
        }
    }

    public sealed class VersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The commit SHA for which to trigger a version.
        /// </summary>
        [Input("commitSha")]
        public Input<string>? CommitSha { get; set; }

        [Input("keepers")]
        private InputMap<object>? _keepers;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of the resource.
        /// </summary>
        public InputMap<object> Keepers
        {
            get => _keepers ?? (_keepers = new InputMap<object>());
            set => _keepers = value;
        }

        /// <summary>
        /// ID of the module on which the version creation is to be triggered.
        /// </summary>
        [Input("moduleId", required: true)]
        public Input<string> ModuleId { get; set; } = null!;

        /// <summary>
        /// A semantic version number to set for the triggered version, example: 0.11.2
        /// </summary>
        [Input("versionNumber")]
        public Input<string>? VersionNumber { get; set; }

        public VersionArgs()
        {
        }
        public static new VersionArgs Empty => new VersionArgs();
    }

    public sealed class VersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The commit SHA for which to trigger a version.
        /// </summary>
        [Input("commitSha")]
        public Input<string>? CommitSha { get; set; }

        [Input("keepers")]
        private InputMap<object>? _keepers;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of the resource.
        /// </summary>
        public InputMap<object> Keepers
        {
            get => _keepers ?? (_keepers = new InputMap<object>());
            set => _keepers = value;
        }

        /// <summary>
        /// ID of the module on which the version creation is to be triggered.
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// A semantic version number to set for the triggered version, example: 0.11.2
        /// </summary>
        [Input("versionNumber")]
        public Input<string>? VersionNumber { get; set; }

        public VersionState()
        {
        }
        public static new VersionState Empty => new VersionState();
    }
}
