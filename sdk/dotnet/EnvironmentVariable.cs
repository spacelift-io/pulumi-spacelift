// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    [SpaceliftResourceType("spacelift:index/environmentVariable:EnvironmentVariable")]
    public partial class EnvironmentVariable : Pulumi.CustomResource
    {
        /// <summary>
        /// SHA-256 checksum of the value
        /// </summary>
        [Output("checksum")]
        public Output<string> Checksum { get; private set; } = null!;

        /// <summary>
        /// ID of the context on which the environment variable is defined
        /// </summary>
        [Output("contextId")]
        public Output<string?> ContextId { get; private set; } = null!;

        /// <summary>
        /// ID of the module on which the environment variable is defined
        /// </summary>
        [Output("moduleId")]
        public Output<string?> ModuleId { get; private set; } = null!;

        /// <summary>
        /// Name of the environment variable
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the stack on which the environment variable is defined
        /// </summary>
        [Output("stackId")]
        public Output<string?> StackId { get; private set; } = null!;

        /// <summary>
        /// Value of the environment variable
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the value can be read back outside a Run
        /// </summary>
        [Output("writeOnly")]
        public Output<bool?> WriteOnly { get; private set; } = null!;


        /// <summary>
        /// Create a EnvironmentVariable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EnvironmentVariable(string name, EnvironmentVariableArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/environmentVariable:EnvironmentVariable", name, args ?? new EnvironmentVariableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EnvironmentVariable(string name, Input<string> id, EnvironmentVariableState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/environmentVariable:EnvironmentVariable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EnvironmentVariable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EnvironmentVariable Get(string name, Input<string> id, EnvironmentVariableState? state = null, CustomResourceOptions? options = null)
        {
            return new EnvironmentVariable(name, id, state, options);
        }
    }

    public sealed class EnvironmentVariableArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the context on which the environment variable is defined
        /// </summary>
        [Input("contextId")]
        public Input<string>? ContextId { get; set; }

        /// <summary>
        /// ID of the module on which the environment variable is defined
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// Name of the environment variable
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// ID of the stack on which the environment variable is defined
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        /// <summary>
        /// Value of the environment variable
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        /// <summary>
        /// Indicates whether the value can be read back outside a Run
        /// </summary>
        [Input("writeOnly")]
        public Input<bool>? WriteOnly { get; set; }

        public EnvironmentVariableArgs()
        {
        }
    }

    public sealed class EnvironmentVariableState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// SHA-256 checksum of the value
        /// </summary>
        [Input("checksum")]
        public Input<string>? Checksum { get; set; }

        /// <summary>
        /// ID of the context on which the environment variable is defined
        /// </summary>
        [Input("contextId")]
        public Input<string>? ContextId { get; set; }

        /// <summary>
        /// ID of the module on which the environment variable is defined
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// Name of the environment variable
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the stack on which the environment variable is defined
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        /// <summary>
        /// Value of the environment variable
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// Indicates whether the value can be read back outside a Run
        /// </summary>
        [Input("writeOnly")]
        public Input<bool>? WriteOnly { get; set; }

        public EnvironmentVariableState()
        {
        }
    }
}
