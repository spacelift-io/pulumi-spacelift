// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.StackDependencyReference` represents a Spacelift **stack dependency reference** - a reference matches a stack's output to another stack's input. It is similar to an environment variable (`spacelift.EnvironmentVariable`), except that value is provided by another stack's output.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var infra = new Spacelift.Stack("infra", new()
    ///     {
    ///         Branch = "master",
    ///         Repository = "core-infra",
    ///     });
    /// 
    ///     var app = new Spacelift.Stack("app", new()
    ///     {
    ///         Branch = "master",
    ///         Repository = "app",
    ///     });
    /// 
    ///     var testStackDependency = new Spacelift.StackDependency("testStackDependency", new()
    ///     {
    ///         StackId = app.Id,
    ///         DependsOnStackId = infra.Id,
    ///     });
    /// 
    ///     var testStackDependencyReference = new Spacelift.StackDependencyReference("testStackDependencyReference", new()
    ///     {
    ///         StackDependencyId = testStackDependency.Id,
    ///         OutputName = "DB_CONNECTION_STRING",
    ///         InputName = "APP_DB_URL",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/stackDependencyReference:StackDependencyReference")]
    public partial class StackDependencyReference : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the input of the stack dependency reference
        /// </summary>
        [Output("inputName")]
        public Output<string> InputName { get; private set; } = null!;

        /// <summary>
        /// Name of the output of stack to depend on
        /// </summary>
        [Output("outputName")]
        public Output<string> OutputName { get; private set; } = null!;

        /// <summary>
        /// Immutable ID of stack dependency
        /// </summary>
        [Output("stackDependencyId")]
        public Output<string> StackDependencyId { get; private set; } = null!;


        /// <summary>
        /// Create a StackDependencyReference resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StackDependencyReference(string name, StackDependencyReferenceArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/stackDependencyReference:StackDependencyReference", name, args ?? new StackDependencyReferenceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StackDependencyReference(string name, Input<string> id, StackDependencyReferenceState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/stackDependencyReference:StackDependencyReference", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://downloads.spacelift.io/pulumi-plugins",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StackDependencyReference resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StackDependencyReference Get(string name, Input<string> id, StackDependencyReferenceState? state = null, CustomResourceOptions? options = null)
        {
            return new StackDependencyReference(name, id, state, options);
        }
    }

    public sealed class StackDependencyReferenceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the input of the stack dependency reference
        /// </summary>
        [Input("inputName", required: true)]
        public Input<string> InputName { get; set; } = null!;

        /// <summary>
        /// Name of the output of stack to depend on
        /// </summary>
        [Input("outputName", required: true)]
        public Input<string> OutputName { get; set; } = null!;

        /// <summary>
        /// Immutable ID of stack dependency
        /// </summary>
        [Input("stackDependencyId", required: true)]
        public Input<string> StackDependencyId { get; set; } = null!;

        public StackDependencyReferenceArgs()
        {
        }
        public static new StackDependencyReferenceArgs Empty => new StackDependencyReferenceArgs();
    }

    public sealed class StackDependencyReferenceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the input of the stack dependency reference
        /// </summary>
        [Input("inputName")]
        public Input<string>? InputName { get; set; }

        /// <summary>
        /// Name of the output of stack to depend on
        /// </summary>
        [Input("outputName")]
        public Input<string>? OutputName { get; set; }

        /// <summary>
        /// Immutable ID of stack dependency
        /// </summary>
        [Input("stackDependencyId")]
        public Input<string>? StackDependencyId { get; set; }

        public StackDependencyReferenceState()
        {
        }
        public static new StackDependencyReferenceState Empty => new StackDependencyReferenceState();
    }
}
