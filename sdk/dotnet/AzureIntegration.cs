// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    /// <summary>
    /// `spacelift.AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Spacelift = Pulumi.Spacelift;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Spacelift.AzureIntegration("example", new Spacelift.AzureIntegrationArgs
    ///         {
    ///             DefaultSubscriptionId = "default-subscription-id",
    ///             Labels = 
    ///             {
    ///                 "one",
    ///                 "two",
    ///             },
    ///             TenantId = "tenant-id",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import spacelift:index/azureIntegration:AzureIntegration example $INTEGRATION_ID
    /// ```
    /// </summary>
    [SpaceliftResourceType("spacelift:index/azureIntegration:AzureIntegration")]
    public partial class AzureIntegration : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether admin consent has been performed for the AAD Application.
        /// </summary>
        [Output("adminConsentProvided")]
        public Output<bool> AdminConsentProvided { get; private set; } = null!;

        /// <summary>
        /// The URL to use to provide admin consent to the application in the customer's tenant
        /// </summary>
        [Output("adminConsentUrl")]
        public Output<string> AdminConsentUrl { get; private set; } = null!;

        /// <summary>
        /// The applicationId of the Azure AD application used by the integration.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// The default subscription ID to use, if one isn't specified at the stack/module level
        /// </summary>
        [Output("defaultSubscriptionId")]
        public Output<string?> DefaultSubscriptionId { get; private set; } = null!;

        /// <summary>
        /// The display name for the application in Azure. This is automatically generated when the integration is created, and
        /// cannot be changed without deleting and recreating the integration.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Labels to set on the integration
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The friendly name of the integration
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID (slug) of the space the integration is in
        /// </summary>
        [Output("spaceId")]
        public Output<string> SpaceId { get; private set; } = null!;

        /// <summary>
        /// The Azure AD tenant ID
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a AzureIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzureIntegration(string name, AzureIntegrationArgs args, CustomResourceOptions? options = null)
            : base("spacelift:index/azureIntegration:AzureIntegration", name, args ?? new AzureIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AzureIntegration(string name, Input<string> id, AzureIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("spacelift:index/azureIntegration:AzureIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/spacelift-io/pulumi-spacelift/releases",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzureIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzureIntegration Get(string name, Input<string> id, AzureIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new AzureIntegration(name, id, state, options);
        }
    }

    public sealed class AzureIntegrationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default subscription ID to use, if one isn't specified at the stack/module level
        /// </summary>
        [Input("defaultSubscriptionId")]
        public Input<string>? DefaultSubscriptionId { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// Labels to set on the integration
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The friendly name of the integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID (slug) of the space the integration is in
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        /// <summary>
        /// The Azure AD tenant ID
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public AzureIntegrationArgs()
        {
        }
    }

    public sealed class AzureIntegrationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether admin consent has been performed for the AAD Application.
        /// </summary>
        [Input("adminConsentProvided")]
        public Input<bool>? AdminConsentProvided { get; set; }

        /// <summary>
        /// The URL to use to provide admin consent to the application in the customer's tenant
        /// </summary>
        [Input("adminConsentUrl")]
        public Input<string>? AdminConsentUrl { get; set; }

        /// <summary>
        /// The applicationId of the Azure AD application used by the integration.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// The default subscription ID to use, if one isn't specified at the stack/module level
        /// </summary>
        [Input("defaultSubscriptionId")]
        public Input<string>? DefaultSubscriptionId { get; set; }

        /// <summary>
        /// The display name for the application in Azure. This is automatically generated when the integration is created, and
        /// cannot be changed without deleting and recreating the integration.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// Labels to set on the integration
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The friendly name of the integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID (slug) of the space the integration is in
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        /// <summary>
        /// The Azure AD tenant ID
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public AzureIntegrationState()
        {
        }
    }
}
