// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetPolicies
    {
        /// <summary>
        /// `spacelift.getPolicies` can find all policies that have certain labels.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var all = Output.Create(Spacelift.GetPolicies.InvokeAsync());
        ///         var planAutoattach = Output.Create(Spacelift.GetPolicies.InvokeAsync(new Spacelift.GetPoliciesArgs
        ///         {
        ///             Type = "PLAN",
        ///             Labels = 
        ///             {
        ///                 "autoattach",
        ///             },
        ///         }));
        ///         this.PolicyIds = data.Spacelift_policies.This.Policies.Select(__item =&gt; __item.Id).ToList();
        ///     }
        /// 
        ///     [Output("policyIds")]
        ///     public Output&lt;string&gt; PolicyIds { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPoliciesResult> InvokeAsync(GetPoliciesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPoliciesResult>("spacelift:index/getPolicies:getPolicies", args ?? new GetPoliciesArgs(), options.WithDefaults());

        /// <summary>
        /// `spacelift.getPolicies` can find all policies that have certain labels.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var all = Output.Create(Spacelift.GetPolicies.InvokeAsync());
        ///         var planAutoattach = Output.Create(Spacelift.GetPolicies.InvokeAsync(new Spacelift.GetPoliciesArgs
        ///         {
        ///             Type = "PLAN",
        ///             Labels = 
        ///             {
        ///                 "autoattach",
        ///             },
        ///         }));
        ///         this.PolicyIds = data.Spacelift_policies.This.Policies.Select(__item =&gt; __item.Id).ToList();
        ///     }
        /// 
        ///     [Output("policyIds")]
        ///     public Output&lt;string&gt; PolicyIds { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPoliciesResult> Invoke(GetPoliciesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPoliciesResult>("spacelift:index/getPolicies:getPolicies", args ?? new GetPoliciesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPoliciesArgs : Pulumi.InvokeArgs
    {
        [Input("labels")]
        private List<string>? _labels;
        public List<string> Labels
        {
            get => _labels ?? (_labels = new List<string>());
            set => _labels = value;
        }

        [Input("type")]
        public string? Type { get; set; }

        public GetPoliciesArgs()
        {
        }
    }

    public sealed class GetPoliciesInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("labels")]
        private InputList<string>? _labels;
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetPoliciesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPoliciesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Labels;
        public readonly ImmutableArray<Outputs.GetPoliciesPolicyResult> Policies;
        public readonly string? Type;

        [OutputConstructor]
        private GetPoliciesResult(
            string id,

            ImmutableArray<string> labels,

            ImmutableArray<Outputs.GetPoliciesPolicyResult> policies,

            string? type)
        {
            Id = id;
            Labels = labels;
            Policies = policies;
            Type = type;
        }
    }
}
