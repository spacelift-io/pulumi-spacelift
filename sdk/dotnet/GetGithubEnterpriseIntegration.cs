// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Spacelift
{
    public static class GetGithubEnterpriseIntegration
    {
        /// <summary>
        /// `spacelift.getGithubEnterpriseIntegration` returns details about Github Enterprise integration
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var githubEnterpriseIntegration = Spacelift.GetGithubEnterpriseIntegration.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGithubEnterpriseIntegrationResult> InvokeAsync(GetGithubEnterpriseIntegrationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGithubEnterpriseIntegrationResult>("spacelift:index/getGithubEnterpriseIntegration:getGithubEnterpriseIntegration", args ?? new GetGithubEnterpriseIntegrationArgs(), options.WithDefaults());

        /// <summary>
        /// `spacelift.getGithubEnterpriseIntegration` returns details about Github Enterprise integration
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Spacelift = Pulumi.Spacelift;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var githubEnterpriseIntegration = Spacelift.GetGithubEnterpriseIntegration.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGithubEnterpriseIntegrationResult> Invoke(GetGithubEnterpriseIntegrationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGithubEnterpriseIntegrationResult>("spacelift:index/getGithubEnterpriseIntegration:getGithubEnterpriseIntegration", args ?? new GetGithubEnterpriseIntegrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGithubEnterpriseIntegrationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Github integration id. If not provided, the default integration will be returned
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetGithubEnterpriseIntegrationArgs()
        {
        }
        public static new GetGithubEnterpriseIntegrationArgs Empty => new GetGithubEnterpriseIntegrationArgs();
    }

    public sealed class GetGithubEnterpriseIntegrationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Github integration id. If not provided, the default integration will be returned
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetGithubEnterpriseIntegrationInvokeArgs()
        {
        }
        public static new GetGithubEnterpriseIntegrationInvokeArgs Empty => new GetGithubEnterpriseIntegrationInvokeArgs();
    }


    [OutputType]
    public sealed class GetGithubEnterpriseIntegrationResult
    {
        /// <summary>
        /// Github integration api host
        /// </summary>
        public readonly string ApiHost;
        /// <summary>
        /// Github integration app id
        /// </summary>
        public readonly string AppId;
        /// <summary>
        /// Github integration description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Github integration id. If not provided, the default integration will be returned
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Github integration is default
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// Github integration labels
        /// </summary>
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// Github integration name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Github integration space id
        /// </summary>
        public readonly string SpaceId;
        /// <summary>
        /// Github integration webhook secret
        /// </summary>
        public readonly string WebhookSecret;
        /// <summary>
        /// Github integration webhook url
        /// </summary>
        public readonly string WebhookUrl;

        [OutputConstructor]
        private GetGithubEnterpriseIntegrationResult(
            string apiHost,

            string appId,

            string description,

            string? id,

            bool isDefault,

            ImmutableArray<string> labels,

            string name,

            string spaceId,

            string webhookSecret,

            string webhookUrl)
        {
            ApiHost = apiHost;
            AppId = appId;
            Description = description;
            Id = id;
            IsDefault = isDefault;
            Labels = labels;
            Name = name;
            SpaceId = spaceId;
            WebhookSecret = webhookSecret;
            WebhookUrl = webhookUrl;
        }
    }
}
