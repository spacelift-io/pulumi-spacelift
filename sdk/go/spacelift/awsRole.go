// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AwsRole struct {
	pulumi.CustomResourceState

	// ID of the module which assumes the AWS IAM role
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// ID of the stack which assumes the AWS IAM role
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
}

// NewAwsRole registers a new resource with the given unique name, arguments, and options.
func NewAwsRole(ctx *pulumi.Context,
	name string, args *AwsRoleArgs, opts ...pulumi.ResourceOption) (*AwsRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource AwsRole
	err := ctx.RegisterResource("spacelift:index/awsRole:AwsRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsRole gets an existing AwsRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsRoleState, opts ...pulumi.ResourceOption) (*AwsRole, error) {
	var resource AwsRole
	err := ctx.ReadResource("spacelift:index/awsRole:AwsRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsRole resources.
type awsRoleState struct {
	// ID of the module which assumes the AWS IAM role
	ModuleId *string `pulumi:"moduleId"`
	// ARN of the AWS IAM role to attach
	RoleArn *string `pulumi:"roleArn"`
	// ID of the stack which assumes the AWS IAM role
	StackId *string `pulumi:"stackId"`
}

type AwsRoleState struct {
	// ID of the module which assumes the AWS IAM role
	ModuleId pulumi.StringPtrInput
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringPtrInput
	// ID of the stack which assumes the AWS IAM role
	StackId pulumi.StringPtrInput
}

func (AwsRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsRoleState)(nil)).Elem()
}

type awsRoleArgs struct {
	// ID of the module which assumes the AWS IAM role
	ModuleId *string `pulumi:"moduleId"`
	// ARN of the AWS IAM role to attach
	RoleArn string `pulumi:"roleArn"`
	// ID of the stack which assumes the AWS IAM role
	StackId *string `pulumi:"stackId"`
}

// The set of arguments for constructing a AwsRole resource.
type AwsRoleArgs struct {
	// ID of the module which assumes the AWS IAM role
	ModuleId pulumi.StringPtrInput
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringInput
	// ID of the stack which assumes the AWS IAM role
	StackId pulumi.StringPtrInput
}

func (AwsRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsRoleArgs)(nil)).Elem()
}

type AwsRoleInput interface {
	pulumi.Input

	ToAwsRoleOutput() AwsRoleOutput
	ToAwsRoleOutputWithContext(ctx context.Context) AwsRoleOutput
}

func (*AwsRole) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsRole)(nil))
}

func (i *AwsRole) ToAwsRoleOutput() AwsRoleOutput {
	return i.ToAwsRoleOutputWithContext(context.Background())
}

func (i *AwsRole) ToAwsRoleOutputWithContext(ctx context.Context) AwsRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsRoleOutput)
}

type AwsRoleOutput struct {
	*pulumi.OutputState
}

func (AwsRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsRole)(nil))
}

func (o AwsRoleOutput) ToAwsRoleOutput() AwsRoleOutput {
	return o
}

func (o AwsRoleOutput) ToAwsRoleOutputWithContext(ctx context.Context) AwsRoleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AwsRoleOutput{})
}
