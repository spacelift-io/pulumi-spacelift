// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `AwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.
//
// If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).
//
// Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and Run ID as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).
//
// ## Schema
//
// ### Required
//
// - **role_arn** (String) ARN of the AWS IAM role to attach
//
// ### Optional
//
// - **external_id** (String) Custom external ID (works only for private workers).
// - **generate_credentials_in_worker** (Boolean) Generate AWS credentials in the private worker
// - **id** (String) The ID of this resource.
// - **module_id** (String) ID of the module which assumes the AWS IAM role
// - **stack_id** (String) ID of the stack which assumes the AWS IAM role
//
// ## Import
//
// Import is supported using the following syntax
//
// ```sh
//  $ pulumi import spacelift:index/awsRole:AwsRole k8s-core stack/$STACK_ID
// ```
//
// ```sh
//  $ pulumi import spacelift:index/awsRole:AwsRole k8s-core module/$MODULE_ID
// ```
type AwsRole struct {
	pulumi.CustomResourceState

	// Custom external ID (works only for private workers).
	ExternalId pulumi.StringPtrOutput `pulumi:"externalId"`
	// Generate AWS credentials in the private worker
	GenerateCredentialsInWorker pulumi.BoolPtrOutput `pulumi:"generateCredentialsInWorker"`
	// ID of the module which assumes the AWS IAM role
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// ID of the stack which assumes the AWS IAM role
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
}

// NewAwsRole registers a new resource with the given unique name, arguments, and options.
func NewAwsRole(ctx *pulumi.Context,
	name string, args *AwsRoleArgs, opts ...pulumi.ResourceOption) (*AwsRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource AwsRole
	err := ctx.RegisterResource("spacelift:index/awsRole:AwsRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsRole gets an existing AwsRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsRoleState, opts ...pulumi.ResourceOption) (*AwsRole, error) {
	var resource AwsRole
	err := ctx.ReadResource("spacelift:index/awsRole:AwsRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsRole resources.
type awsRoleState struct {
	// Custom external ID (works only for private workers).
	ExternalId *string `pulumi:"externalId"`
	// Generate AWS credentials in the private worker
	GenerateCredentialsInWorker *bool `pulumi:"generateCredentialsInWorker"`
	// ID of the module which assumes the AWS IAM role
	ModuleId *string `pulumi:"moduleId"`
	// ARN of the AWS IAM role to attach
	RoleArn *string `pulumi:"roleArn"`
	// ID of the stack which assumes the AWS IAM role
	StackId *string `pulumi:"stackId"`
}

type AwsRoleState struct {
	// Custom external ID (works only for private workers).
	ExternalId pulumi.StringPtrInput
	// Generate AWS credentials in the private worker
	GenerateCredentialsInWorker pulumi.BoolPtrInput
	// ID of the module which assumes the AWS IAM role
	ModuleId pulumi.StringPtrInput
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringPtrInput
	// ID of the stack which assumes the AWS IAM role
	StackId pulumi.StringPtrInput
}

func (AwsRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsRoleState)(nil)).Elem()
}

type awsRoleArgs struct {
	// Custom external ID (works only for private workers).
	ExternalId *string `pulumi:"externalId"`
	// Generate AWS credentials in the private worker
	GenerateCredentialsInWorker *bool `pulumi:"generateCredentialsInWorker"`
	// ID of the module which assumes the AWS IAM role
	ModuleId *string `pulumi:"moduleId"`
	// ARN of the AWS IAM role to attach
	RoleArn string `pulumi:"roleArn"`
	// ID of the stack which assumes the AWS IAM role
	StackId *string `pulumi:"stackId"`
}

// The set of arguments for constructing a AwsRole resource.
type AwsRoleArgs struct {
	// Custom external ID (works only for private workers).
	ExternalId pulumi.StringPtrInput
	// Generate AWS credentials in the private worker
	GenerateCredentialsInWorker pulumi.BoolPtrInput
	// ID of the module which assumes the AWS IAM role
	ModuleId pulumi.StringPtrInput
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringInput
	// ID of the stack which assumes the AWS IAM role
	StackId pulumi.StringPtrInput
}

func (AwsRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsRoleArgs)(nil)).Elem()
}

type AwsRoleInput interface {
	pulumi.Input

	ToAwsRoleOutput() AwsRoleOutput
	ToAwsRoleOutputWithContext(ctx context.Context) AwsRoleOutput
}

func (*AwsRole) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsRole)(nil))
}

func (i *AwsRole) ToAwsRoleOutput() AwsRoleOutput {
	return i.ToAwsRoleOutputWithContext(context.Background())
}

func (i *AwsRole) ToAwsRoleOutputWithContext(ctx context.Context) AwsRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsRoleOutput)
}

type AwsRoleOutput struct {
	*pulumi.OutputState
}

func (AwsRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsRole)(nil))
}

func (o AwsRoleOutput) ToAwsRoleOutput() AwsRoleOutput {
	return o
}

func (o AwsRoleOutput) ToAwsRoleOutputWithContext(ctx context.Context) AwsRoleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AwsRoleOutput{})
}
