// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `StackDestructor` is used to destroy the resources of a Stack before deleting it. `dependsOn` should be used to make sure that all necessery resources (environment variables, roles, integrations, etc.) are still in place when the destruction run is executed. **Note:** Destroying this resource will delete the resources in the stack. If this resource needs to be deleted and the resources in the stacks are to be preserved, ensure that the `deactivated` attribute is set to `true`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// 	"github.com/spacelift-io/spacelift-spacelift/sdk/go/spacelift/"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := spacelift.NewStack(ctx, "k8s_coreStack", nil)
// 		if err != nil {
// 			return err
// 		}
// 		credentials, err := spacelift.NewEnvironmentVariable(ctx, "credentials", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = spacelift.NewStackDestructor(ctx, "k8s_coreStackDestructor", &spacelift.StackDestructorArgs{
// 			StackId: k8s_coreStack.ID(),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			credentials,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// <!-- schema generated by tfplugindocs -->
// ## Schema
//
// ### Required
//
// - **stack_id** (String) ID of the stack to delete and destroy on destruction
//
// ### Optional
//
// - **deactivated** (Boolean) If set to true, destruction won't delete the stack
// - **id** (String) The ID of this resource.
// - **timeouts** (Block, Optional) (see below for nested schema)
//
// <a id="nestedblock--timeouts"></a>
// ### Nested Schema for `timeouts`
//
// Optional:
//
// - **delete** (String)
type StackDestructor struct {
	pulumi.CustomResourceState

	// If set to true, destruction won't delete the stack
	Deactivated pulumi.BoolPtrOutput `pulumi:"deactivated"`
	// ID of the stack to delete and destroy on destruction
	StackId pulumi.StringOutput `pulumi:"stackId"`
}

// NewStackDestructor registers a new resource with the given unique name, arguments, and options.
func NewStackDestructor(ctx *pulumi.Context,
	name string, args *StackDestructorArgs, opts ...pulumi.ResourceOption) (*StackDestructor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	var resource StackDestructor
	err := ctx.RegisterResource("spacelift:index/stackDestructor:StackDestructor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackDestructor gets an existing StackDestructor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackDestructor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackDestructorState, opts ...pulumi.ResourceOption) (*StackDestructor, error) {
	var resource StackDestructor
	err := ctx.ReadResource("spacelift:index/stackDestructor:StackDestructor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackDestructor resources.
type stackDestructorState struct {
	// If set to true, destruction won't delete the stack
	Deactivated *bool `pulumi:"deactivated"`
	// ID of the stack to delete and destroy on destruction
	StackId *string `pulumi:"stackId"`
}

type StackDestructorState struct {
	// If set to true, destruction won't delete the stack
	Deactivated pulumi.BoolPtrInput
	// ID of the stack to delete and destroy on destruction
	StackId pulumi.StringPtrInput
}

func (StackDestructorState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackDestructorState)(nil)).Elem()
}

type stackDestructorArgs struct {
	// If set to true, destruction won't delete the stack
	Deactivated *bool `pulumi:"deactivated"`
	// ID of the stack to delete and destroy on destruction
	StackId string `pulumi:"stackId"`
}

// The set of arguments for constructing a StackDestructor resource.
type StackDestructorArgs struct {
	// If set to true, destruction won't delete the stack
	Deactivated pulumi.BoolPtrInput
	// ID of the stack to delete and destroy on destruction
	StackId pulumi.StringInput
}

func (StackDestructorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackDestructorArgs)(nil)).Elem()
}

type StackDestructorInput interface {
	pulumi.Input

	ToStackDestructorOutput() StackDestructorOutput
	ToStackDestructorOutputWithContext(ctx context.Context) StackDestructorOutput
}

func (*StackDestructor) ElementType() reflect.Type {
	return reflect.TypeOf((*StackDestructor)(nil))
}

func (i *StackDestructor) ToStackDestructorOutput() StackDestructorOutput {
	return i.ToStackDestructorOutputWithContext(context.Background())
}

func (i *StackDestructor) ToStackDestructorOutputWithContext(ctx context.Context) StackDestructorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackDestructorOutput)
}

type StackDestructorOutput struct {
	*pulumi.OutputState
}

func (StackDestructorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackDestructor)(nil))
}

func (o StackDestructorOutput) ToStackDestructorOutput() StackDestructorOutput {
	return o
}

func (o StackDestructorOutput) ToStackDestructorOutputWithContext(ctx context.Context) StackDestructorOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StackDestructorOutput{})
}
