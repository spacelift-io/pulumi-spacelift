// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `StackDestructor` is used to destroy the resources of a Stack before deleting it. `dependsOn` should be used to make sure that all necessary resources (environment variables, roles, integrations, etc.) are still in place when the destruction run is executed. **Note:** Destroying this resource will delete the resources in the stack. If this resource needs to be deleted and the resources in the stacks are to be preserved, ensure that the `deactivated` attribute is set to `true`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewStack(ctx, "k8s-coreStack", nil)
//			if err != nil {
//				return err
//			}
//			credentials, err := spacelift.NewEnvironmentVariable(ctx, "credentials", nil)
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStackDestructor(ctx, "k8s-coreStackDestructor", &spacelift.StackDestructorArgs{
//				StackId: k8s_coreStack.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				credentials,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StackDestructor struct {
	pulumi.CustomResourceState

	// If set to true, destruction won't delete the stack
	Deactivated pulumi.BoolPtrOutput `pulumi:"deactivated"`
	// ID of the stack to delete and destroy on destruction
	StackId pulumi.StringOutput `pulumi:"stackId"`
}

// NewStackDestructor registers a new resource with the given unique name, arguments, and options.
func NewStackDestructor(ctx *pulumi.Context,
	name string, args *StackDestructorArgs, opts ...pulumi.ResourceOption) (*StackDestructor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StackDestructor
	err := ctx.RegisterResource("spacelift:index/stackDestructor:StackDestructor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackDestructor gets an existing StackDestructor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackDestructor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackDestructorState, opts ...pulumi.ResourceOption) (*StackDestructor, error) {
	var resource StackDestructor
	err := ctx.ReadResource("spacelift:index/stackDestructor:StackDestructor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackDestructor resources.
type stackDestructorState struct {
	// If set to true, destruction won't delete the stack
	Deactivated *bool `pulumi:"deactivated"`
	// ID of the stack to delete and destroy on destruction
	StackId *string `pulumi:"stackId"`
}

type StackDestructorState struct {
	// If set to true, destruction won't delete the stack
	Deactivated pulumi.BoolPtrInput
	// ID of the stack to delete and destroy on destruction
	StackId pulumi.StringPtrInput
}

func (StackDestructorState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackDestructorState)(nil)).Elem()
}

type stackDestructorArgs struct {
	// If set to true, destruction won't delete the stack
	Deactivated *bool `pulumi:"deactivated"`
	// ID of the stack to delete and destroy on destruction
	StackId string `pulumi:"stackId"`
}

// The set of arguments for constructing a StackDestructor resource.
type StackDestructorArgs struct {
	// If set to true, destruction won't delete the stack
	Deactivated pulumi.BoolPtrInput
	// ID of the stack to delete and destroy on destruction
	StackId pulumi.StringInput
}

func (StackDestructorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackDestructorArgs)(nil)).Elem()
}

type StackDestructorInput interface {
	pulumi.Input

	ToStackDestructorOutput() StackDestructorOutput
	ToStackDestructorOutputWithContext(ctx context.Context) StackDestructorOutput
}

func (*StackDestructor) ElementType() reflect.Type {
	return reflect.TypeOf((**StackDestructor)(nil)).Elem()
}

func (i *StackDestructor) ToStackDestructorOutput() StackDestructorOutput {
	return i.ToStackDestructorOutputWithContext(context.Background())
}

func (i *StackDestructor) ToStackDestructorOutputWithContext(ctx context.Context) StackDestructorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackDestructorOutput)
}

func (i *StackDestructor) ToOutput(ctx context.Context) pulumix.Output[*StackDestructor] {
	return pulumix.Output[*StackDestructor]{
		OutputState: i.ToStackDestructorOutputWithContext(ctx).OutputState,
	}
}

// StackDestructorArrayInput is an input type that accepts StackDestructorArray and StackDestructorArrayOutput values.
// You can construct a concrete instance of `StackDestructorArrayInput` via:
//
//	StackDestructorArray{ StackDestructorArgs{...} }
type StackDestructorArrayInput interface {
	pulumi.Input

	ToStackDestructorArrayOutput() StackDestructorArrayOutput
	ToStackDestructorArrayOutputWithContext(context.Context) StackDestructorArrayOutput
}

type StackDestructorArray []StackDestructorInput

func (StackDestructorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackDestructor)(nil)).Elem()
}

func (i StackDestructorArray) ToStackDestructorArrayOutput() StackDestructorArrayOutput {
	return i.ToStackDestructorArrayOutputWithContext(context.Background())
}

func (i StackDestructorArray) ToStackDestructorArrayOutputWithContext(ctx context.Context) StackDestructorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackDestructorArrayOutput)
}

func (i StackDestructorArray) ToOutput(ctx context.Context) pulumix.Output[[]*StackDestructor] {
	return pulumix.Output[[]*StackDestructor]{
		OutputState: i.ToStackDestructorArrayOutputWithContext(ctx).OutputState,
	}
}

// StackDestructorMapInput is an input type that accepts StackDestructorMap and StackDestructorMapOutput values.
// You can construct a concrete instance of `StackDestructorMapInput` via:
//
//	StackDestructorMap{ "key": StackDestructorArgs{...} }
type StackDestructorMapInput interface {
	pulumi.Input

	ToStackDestructorMapOutput() StackDestructorMapOutput
	ToStackDestructorMapOutputWithContext(context.Context) StackDestructorMapOutput
}

type StackDestructorMap map[string]StackDestructorInput

func (StackDestructorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackDestructor)(nil)).Elem()
}

func (i StackDestructorMap) ToStackDestructorMapOutput() StackDestructorMapOutput {
	return i.ToStackDestructorMapOutputWithContext(context.Background())
}

func (i StackDestructorMap) ToStackDestructorMapOutputWithContext(ctx context.Context) StackDestructorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackDestructorMapOutput)
}

func (i StackDestructorMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*StackDestructor] {
	return pulumix.Output[map[string]*StackDestructor]{
		OutputState: i.ToStackDestructorMapOutputWithContext(ctx).OutputState,
	}
}

type StackDestructorOutput struct{ *pulumi.OutputState }

func (StackDestructorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackDestructor)(nil)).Elem()
}

func (o StackDestructorOutput) ToStackDestructorOutput() StackDestructorOutput {
	return o
}

func (o StackDestructorOutput) ToStackDestructorOutputWithContext(ctx context.Context) StackDestructorOutput {
	return o
}

func (o StackDestructorOutput) ToOutput(ctx context.Context) pulumix.Output[*StackDestructor] {
	return pulumix.Output[*StackDestructor]{
		OutputState: o.OutputState,
	}
}

// If set to true, destruction won't delete the stack
func (o StackDestructorOutput) Deactivated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackDestructor) pulumi.BoolPtrOutput { return v.Deactivated }).(pulumi.BoolPtrOutput)
}

// ID of the stack to delete and destroy on destruction
func (o StackDestructorOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *StackDestructor) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

type StackDestructorArrayOutput struct{ *pulumi.OutputState }

func (StackDestructorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackDestructor)(nil)).Elem()
}

func (o StackDestructorArrayOutput) ToStackDestructorArrayOutput() StackDestructorArrayOutput {
	return o
}

func (o StackDestructorArrayOutput) ToStackDestructorArrayOutputWithContext(ctx context.Context) StackDestructorArrayOutput {
	return o
}

func (o StackDestructorArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*StackDestructor] {
	return pulumix.Output[[]*StackDestructor]{
		OutputState: o.OutputState,
	}
}

func (o StackDestructorArrayOutput) Index(i pulumi.IntInput) StackDestructorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackDestructor {
		return vs[0].([]*StackDestructor)[vs[1].(int)]
	}).(StackDestructorOutput)
}

type StackDestructorMapOutput struct{ *pulumi.OutputState }

func (StackDestructorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackDestructor)(nil)).Elem()
}

func (o StackDestructorMapOutput) ToStackDestructorMapOutput() StackDestructorMapOutput {
	return o
}

func (o StackDestructorMapOutput) ToStackDestructorMapOutputWithContext(ctx context.Context) StackDestructorMapOutput {
	return o
}

func (o StackDestructorMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*StackDestructor] {
	return pulumix.Output[map[string]*StackDestructor]{
		OutputState: o.OutputState,
	}
}

func (o StackDestructorMapOutput) MapIndex(k pulumi.StringInput) StackDestructorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackDestructor {
		return vs[0].(map[string]*StackDestructor)[vs[1].(string)]
	}).(StackDestructorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackDestructorInput)(nil)).Elem(), &StackDestructor{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackDestructorArrayInput)(nil)).Elem(), StackDestructorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackDestructorMapInput)(nil)).Elem(), StackDestructorMap{})
	pulumi.RegisterOutputType(StackDestructorOutput{})
	pulumi.RegisterOutputType(StackDestructorArrayOutput{})
	pulumi.RegisterOutputType(StackDestructorMapOutput{})
}
