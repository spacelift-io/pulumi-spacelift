// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "spacelift:index/awsRole:AwsRole":
		r, err = NewAwsRole(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/context:Context":
		r, err = NewContext(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/contextAttachment:ContextAttachment":
		r, err = NewContextAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/environmentVariable:EnvironmentVariable":
		r, err = NewEnvironmentVariable(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/gcpServiceAccount:GcpServiceAccount":
		r, err = NewGcpServiceAccount(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/module:Module":
		r, err = NewModule(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/mountedFile:MountedFile":
		r, err = NewMountedFile(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/policy:Policy":
		r, err = NewPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/policyAttachment:PolicyAttachment":
		r, err = NewPolicyAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/stack:Stack":
		r, err = NewStack(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/stackAwsRole:StackAwsRole":
		r, err = NewStackAwsRole(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/stackGcpServiceAccount:StackGcpServiceAccount":
		r, err = NewStackGcpServiceAccount(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/webhook:Webhook":
		r, err = NewWebhook(ctx, name, nil, pulumi.URN_(urn))
	case "spacelift:index/workerPool:WorkerPool":
		r, err = NewWorkerPool(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:spacelift" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/awsRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/context",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/contextAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/environmentVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/gcpServiceAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/module",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/mountedFile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/policy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/policyAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/stack",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/stackAwsRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/stackGcpServiceAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/webhook",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"spacelift",
		"index/workerPool",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"spacelift",
		&pkg{version},
	)
}
