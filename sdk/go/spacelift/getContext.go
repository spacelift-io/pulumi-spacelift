// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `Context` represents a Spacelift **context** - a collection of configuration elements (either environment variables or mounted files) that can be administratively attached to multiple stacks (`Stack`) or modules (`Module`) using a context attachment (`ContextAttachment`)`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := spacelift.LookupContext(ctx, &GetContextArgs{
// 			ContextId: "prod-k8s-ie",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupContext(ctx *pulumi.Context, args *LookupContextArgs, opts ...pulumi.InvokeOption) (*LookupContextResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupContextResult
	err := ctx.Invoke("spacelift:index/getContext:getContext", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContext.
type LookupContextArgs struct {
	// immutable ID (slug) of the context
	ContextId string `pulumi:"contextId"`
}

// A collection of values returned by getContext.
type LookupContextResult struct {
	// immutable ID (slug) of the context
	ContextId string `pulumi:"contextId"`
	// free-form context description for users
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id     string   `pulumi:"id"`
	Labels []string `pulumi:"labels"`
	// name of the context
	Name string `pulumi:"name"`
	// ID (slug) of the space the context is in
	SpaceId string `pulumi:"spaceId"`
}

func LookupContextOutput(ctx *pulumi.Context, args LookupContextOutputArgs, opts ...pulumi.InvokeOption) LookupContextResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupContextResult, error) {
			args := v.(LookupContextArgs)
			r, err := LookupContext(ctx, &args, opts...)
			var s LookupContextResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupContextResultOutput)
}

// A collection of arguments for invoking getContext.
type LookupContextOutputArgs struct {
	// immutable ID (slug) of the context
	ContextId pulumi.StringInput `pulumi:"contextId"`
}

func (LookupContextOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContextArgs)(nil)).Elem()
}

// A collection of values returned by getContext.
type LookupContextResultOutput struct{ *pulumi.OutputState }

func (LookupContextResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContextResult)(nil)).Elem()
}

func (o LookupContextResultOutput) ToLookupContextResultOutput() LookupContextResultOutput {
	return o
}

func (o LookupContextResultOutput) ToLookupContextResultOutputWithContext(ctx context.Context) LookupContextResultOutput {
	return o
}

// immutable ID (slug) of the context
func (o LookupContextResultOutput) ContextId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContextResult) string { return v.ContextId }).(pulumi.StringOutput)
}

// free-form context description for users
func (o LookupContextResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContextResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupContextResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContextResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupContextResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContextResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// name of the context
func (o LookupContextResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContextResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID (slug) of the space the context is in
func (o LookupContextResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContextResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContextResultOutput{})
}
