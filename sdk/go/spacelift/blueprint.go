// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

type Blueprint struct {
	pulumi.CustomResourceState

	// Description of the blueprint
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Labels of the blueprint
	Labels pulumi.StringArrayOutput `pulumi:"labels"`
	// Name of the blueprint
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the space the blueprint is in
	Space pulumi.StringOutput `pulumi:"space"`
	// State of the blueprint. Value can be `DRAFT` or `PUBLISHED`.
	State pulumi.StringOutput `pulumi:"state"`
	// Body of the blueprint. If `state` is set to `PUBLISHED`, this field is required.
	Template pulumi.StringPtrOutput `pulumi:"template"`
}

// NewBlueprint registers a new resource with the given unique name, arguments, and options.
func NewBlueprint(ctx *pulumi.Context,
	name string, args *BlueprintArgs, opts ...pulumi.ResourceOption) (*Blueprint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Blueprint
	err := ctx.RegisterResource("spacelift:index/blueprint:Blueprint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlueprint gets an existing Blueprint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlueprint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlueprintState, opts ...pulumi.ResourceOption) (*Blueprint, error) {
	var resource Blueprint
	err := ctx.ReadResource("spacelift:index/blueprint:Blueprint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Blueprint resources.
type blueprintState struct {
	// Description of the blueprint
	Description *string `pulumi:"description"`
	// Labels of the blueprint
	Labels []string `pulumi:"labels"`
	// Name of the blueprint
	Name *string `pulumi:"name"`
	// ID of the space the blueprint is in
	Space *string `pulumi:"space"`
	// State of the blueprint. Value can be `DRAFT` or `PUBLISHED`.
	State *string `pulumi:"state"`
	// Body of the blueprint. If `state` is set to `PUBLISHED`, this field is required.
	Template *string `pulumi:"template"`
}

type BlueprintState struct {
	// Description of the blueprint
	Description pulumi.StringPtrInput
	// Labels of the blueprint
	Labels pulumi.StringArrayInput
	// Name of the blueprint
	Name pulumi.StringPtrInput
	// ID of the space the blueprint is in
	Space pulumi.StringPtrInput
	// State of the blueprint. Value can be `DRAFT` or `PUBLISHED`.
	State pulumi.StringPtrInput
	// Body of the blueprint. If `state` is set to `PUBLISHED`, this field is required.
	Template pulumi.StringPtrInput
}

func (BlueprintState) ElementType() reflect.Type {
	return reflect.TypeOf((*blueprintState)(nil)).Elem()
}

type blueprintArgs struct {
	// Description of the blueprint
	Description *string `pulumi:"description"`
	// Labels of the blueprint
	Labels []string `pulumi:"labels"`
	// Name of the blueprint
	Name *string `pulumi:"name"`
	// ID of the space the blueprint is in
	Space string `pulumi:"space"`
	// State of the blueprint. Value can be `DRAFT` or `PUBLISHED`.
	State string `pulumi:"state"`
	// Body of the blueprint. If `state` is set to `PUBLISHED`, this field is required.
	Template *string `pulumi:"template"`
}

// The set of arguments for constructing a Blueprint resource.
type BlueprintArgs struct {
	// Description of the blueprint
	Description pulumi.StringPtrInput
	// Labels of the blueprint
	Labels pulumi.StringArrayInput
	// Name of the blueprint
	Name pulumi.StringPtrInput
	// ID of the space the blueprint is in
	Space pulumi.StringInput
	// State of the blueprint. Value can be `DRAFT` or `PUBLISHED`.
	State pulumi.StringInput
	// Body of the blueprint. If `state` is set to `PUBLISHED`, this field is required.
	Template pulumi.StringPtrInput
}

func (BlueprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blueprintArgs)(nil)).Elem()
}

type BlueprintInput interface {
	pulumi.Input

	ToBlueprintOutput() BlueprintOutput
	ToBlueprintOutputWithContext(ctx context.Context) BlueprintOutput
}

func (*Blueprint) ElementType() reflect.Type {
	return reflect.TypeOf((**Blueprint)(nil)).Elem()
}

func (i *Blueprint) ToBlueprintOutput() BlueprintOutput {
	return i.ToBlueprintOutputWithContext(context.Background())
}

func (i *Blueprint) ToBlueprintOutputWithContext(ctx context.Context) BlueprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintOutput)
}

// BlueprintArrayInput is an input type that accepts BlueprintArray and BlueprintArrayOutput values.
// You can construct a concrete instance of `BlueprintArrayInput` via:
//
//	BlueprintArray{ BlueprintArgs{...} }
type BlueprintArrayInput interface {
	pulumi.Input

	ToBlueprintArrayOutput() BlueprintArrayOutput
	ToBlueprintArrayOutputWithContext(context.Context) BlueprintArrayOutput
}

type BlueprintArray []BlueprintInput

func (BlueprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Blueprint)(nil)).Elem()
}

func (i BlueprintArray) ToBlueprintArrayOutput() BlueprintArrayOutput {
	return i.ToBlueprintArrayOutputWithContext(context.Background())
}

func (i BlueprintArray) ToBlueprintArrayOutputWithContext(ctx context.Context) BlueprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintArrayOutput)
}

// BlueprintMapInput is an input type that accepts BlueprintMap and BlueprintMapOutput values.
// You can construct a concrete instance of `BlueprintMapInput` via:
//
//	BlueprintMap{ "key": BlueprintArgs{...} }
type BlueprintMapInput interface {
	pulumi.Input

	ToBlueprintMapOutput() BlueprintMapOutput
	ToBlueprintMapOutputWithContext(context.Context) BlueprintMapOutput
}

type BlueprintMap map[string]BlueprintInput

func (BlueprintMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Blueprint)(nil)).Elem()
}

func (i BlueprintMap) ToBlueprintMapOutput() BlueprintMapOutput {
	return i.ToBlueprintMapOutputWithContext(context.Background())
}

func (i BlueprintMap) ToBlueprintMapOutputWithContext(ctx context.Context) BlueprintMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintMapOutput)
}

type BlueprintOutput struct{ *pulumi.OutputState }

func (BlueprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Blueprint)(nil)).Elem()
}

func (o BlueprintOutput) ToBlueprintOutput() BlueprintOutput {
	return o
}

func (o BlueprintOutput) ToBlueprintOutputWithContext(ctx context.Context) BlueprintOutput {
	return o
}

// Description of the blueprint
func (o BlueprintOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Labels of the blueprint
func (o BlueprintOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// Name of the blueprint
func (o BlueprintOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the space the blueprint is in
func (o BlueprintOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

// State of the blueprint. Value can be `DRAFT` or `PUBLISHED`.
func (o BlueprintOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Body of the blueprint. If `state` is set to `PUBLISHED`, this field is required.
func (o BlueprintOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringPtrOutput { return v.Template }).(pulumi.StringPtrOutput)
}

type BlueprintArrayOutput struct{ *pulumi.OutputState }

func (BlueprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Blueprint)(nil)).Elem()
}

func (o BlueprintArrayOutput) ToBlueprintArrayOutput() BlueprintArrayOutput {
	return o
}

func (o BlueprintArrayOutput) ToBlueprintArrayOutputWithContext(ctx context.Context) BlueprintArrayOutput {
	return o
}

func (o BlueprintArrayOutput) Index(i pulumi.IntInput) BlueprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Blueprint {
		return vs[0].([]*Blueprint)[vs[1].(int)]
	}).(BlueprintOutput)
}

type BlueprintMapOutput struct{ *pulumi.OutputState }

func (BlueprintMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Blueprint)(nil)).Elem()
}

func (o BlueprintMapOutput) ToBlueprintMapOutput() BlueprintMapOutput {
	return o
}

func (o BlueprintMapOutput) ToBlueprintMapOutputWithContext(ctx context.Context) BlueprintMapOutput {
	return o
}

func (o BlueprintMapOutput) MapIndex(k pulumi.StringInput) BlueprintOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Blueprint {
		return vs[0].(map[string]*Blueprint)[vs[1].(string)]
	}).(BlueprintOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintInput)(nil)).Elem(), &Blueprint{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintArrayInput)(nil)).Elem(), BlueprintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintMapInput)(nil)).Elem(), BlueprintMap{})
	pulumi.RegisterOutputType(BlueprintOutput{})
	pulumi.RegisterOutputType(BlueprintArrayOutput{})
	pulumi.RegisterOutputType(BlueprintMapOutput{})
}
