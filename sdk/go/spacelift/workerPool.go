// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `WorkerPool` represents a worker pool assigned to the Spacelift account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func filebase64OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewWorkerPool(ctx, "k8s-core", &spacelift.WorkerPoolArgs{
//				Csr:         filebase64OrPanic("/path/to/csr"),
//				Description: pulumi.String("Used for all type jobs"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import spacelift:index/workerPool:WorkerPool k8s-core $WORKER_POOL_ID
//
// ```
type WorkerPool struct {
	pulumi.CustomResourceState

	// credentials necessary to connect WorkerPool's workers to the control plane
	Config pulumi.StringOutput `pulumi:"config"`
	// certificate signing request in base64
	Csr pulumi.StringOutput `pulumi:"csr"`
	// description of the worker pool
	Description pulumi.StringPtrOutput   `pulumi:"description"`
	Labels      pulumi.StringArrayOutput `pulumi:"labels"`
	// name of the worker pool
	Name pulumi.StringOutput `pulumi:"name"`
	// private key in base64
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// ID (slug) of the space the worker pool is in
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
}

// NewWorkerPool registers a new resource with the given unique name, arguments, and options.
func NewWorkerPool(ctx *pulumi.Context,
	name string, args *WorkerPoolArgs, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	if args == nil {
		args = &WorkerPoolArgs{}
	}

	if args.Csr != nil {
		args.Csr = pulumi.ToSecret(args.Csr).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"config",
		"csr",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkerPool
	err := ctx.RegisterResource("spacelift:index/workerPool:WorkerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerPool gets an existing WorkerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerPoolState, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	var resource WorkerPool
	err := ctx.ReadResource("spacelift:index/workerPool:WorkerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerPool resources.
type workerPoolState struct {
	// credentials necessary to connect WorkerPool's workers to the control plane
	Config *string `pulumi:"config"`
	// certificate signing request in base64
	Csr *string `pulumi:"csr"`
	// description of the worker pool
	Description *string  `pulumi:"description"`
	Labels      []string `pulumi:"labels"`
	// name of the worker pool
	Name *string `pulumi:"name"`
	// private key in base64
	PrivateKey *string `pulumi:"privateKey"`
	// ID (slug) of the space the worker pool is in
	SpaceId *string `pulumi:"spaceId"`
}

type WorkerPoolState struct {
	// credentials necessary to connect WorkerPool's workers to the control plane
	Config pulumi.StringPtrInput
	// certificate signing request in base64
	Csr pulumi.StringPtrInput
	// description of the worker pool
	Description pulumi.StringPtrInput
	Labels      pulumi.StringArrayInput
	// name of the worker pool
	Name pulumi.StringPtrInput
	// private key in base64
	PrivateKey pulumi.StringPtrInput
	// ID (slug) of the space the worker pool is in
	SpaceId pulumi.StringPtrInput
}

func (WorkerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolState)(nil)).Elem()
}

type workerPoolArgs struct {
	// certificate signing request in base64
	Csr *string `pulumi:"csr"`
	// description of the worker pool
	Description *string  `pulumi:"description"`
	Labels      []string `pulumi:"labels"`
	// name of the worker pool
	Name *string `pulumi:"name"`
	// ID (slug) of the space the worker pool is in
	SpaceId *string `pulumi:"spaceId"`
}

// The set of arguments for constructing a WorkerPool resource.
type WorkerPoolArgs struct {
	// certificate signing request in base64
	Csr pulumi.StringPtrInput
	// description of the worker pool
	Description pulumi.StringPtrInput
	Labels      pulumi.StringArrayInput
	// name of the worker pool
	Name pulumi.StringPtrInput
	// ID (slug) of the space the worker pool is in
	SpaceId pulumi.StringPtrInput
}

func (WorkerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolArgs)(nil)).Elem()
}

type WorkerPoolInput interface {
	pulumi.Input

	ToWorkerPoolOutput() WorkerPoolOutput
	ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput
}

func (*WorkerPool) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPool)(nil)).Elem()
}

func (i *WorkerPool) ToWorkerPoolOutput() WorkerPoolOutput {
	return i.ToWorkerPoolOutputWithContext(context.Background())
}

func (i *WorkerPool) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolOutput)
}

func (i *WorkerPool) ToOutput(ctx context.Context) pulumix.Output[*WorkerPool] {
	return pulumix.Output[*WorkerPool]{
		OutputState: i.ToWorkerPoolOutputWithContext(ctx).OutputState,
	}
}

// WorkerPoolArrayInput is an input type that accepts WorkerPoolArray and WorkerPoolArrayOutput values.
// You can construct a concrete instance of `WorkerPoolArrayInput` via:
//
//	WorkerPoolArray{ WorkerPoolArgs{...} }
type WorkerPoolArrayInput interface {
	pulumi.Input

	ToWorkerPoolArrayOutput() WorkerPoolArrayOutput
	ToWorkerPoolArrayOutputWithContext(context.Context) WorkerPoolArrayOutput
}

type WorkerPoolArray []WorkerPoolInput

func (WorkerPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPool)(nil)).Elem()
}

func (i WorkerPoolArray) ToWorkerPoolArrayOutput() WorkerPoolArrayOutput {
	return i.ToWorkerPoolArrayOutputWithContext(context.Background())
}

func (i WorkerPoolArray) ToWorkerPoolArrayOutputWithContext(ctx context.Context) WorkerPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolArrayOutput)
}

func (i WorkerPoolArray) ToOutput(ctx context.Context) pulumix.Output[[]*WorkerPool] {
	return pulumix.Output[[]*WorkerPool]{
		OutputState: i.ToWorkerPoolArrayOutputWithContext(ctx).OutputState,
	}
}

// WorkerPoolMapInput is an input type that accepts WorkerPoolMap and WorkerPoolMapOutput values.
// You can construct a concrete instance of `WorkerPoolMapInput` via:
//
//	WorkerPoolMap{ "key": WorkerPoolArgs{...} }
type WorkerPoolMapInput interface {
	pulumi.Input

	ToWorkerPoolMapOutput() WorkerPoolMapOutput
	ToWorkerPoolMapOutputWithContext(context.Context) WorkerPoolMapOutput
}

type WorkerPoolMap map[string]WorkerPoolInput

func (WorkerPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPool)(nil)).Elem()
}

func (i WorkerPoolMap) ToWorkerPoolMapOutput() WorkerPoolMapOutput {
	return i.ToWorkerPoolMapOutputWithContext(context.Background())
}

func (i WorkerPoolMap) ToWorkerPoolMapOutputWithContext(ctx context.Context) WorkerPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolMapOutput)
}

func (i WorkerPoolMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WorkerPool] {
	return pulumix.Output[map[string]*WorkerPool]{
		OutputState: i.ToWorkerPoolMapOutputWithContext(ctx).OutputState,
	}
}

type WorkerPoolOutput struct{ *pulumi.OutputState }

func (WorkerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPool)(nil)).Elem()
}

func (o WorkerPoolOutput) ToWorkerPoolOutput() WorkerPoolOutput {
	return o
}

func (o WorkerPoolOutput) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return o
}

func (o WorkerPoolOutput) ToOutput(ctx context.Context) pulumix.Output[*WorkerPool] {
	return pulumix.Output[*WorkerPool]{
		OutputState: o.OutputState,
	}
}

// credentials necessary to connect WorkerPool's workers to the control plane
func (o WorkerPoolOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// certificate signing request in base64
func (o WorkerPoolOutput) Csr() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Csr }).(pulumi.StringOutput)
}

// description of the worker pool
func (o WorkerPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o WorkerPoolOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// name of the worker pool
func (o WorkerPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// private key in base64
func (o WorkerPoolOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// ID (slug) of the space the worker pool is in
func (o WorkerPoolOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

type WorkerPoolArrayOutput struct{ *pulumi.OutputState }

func (WorkerPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPool)(nil)).Elem()
}

func (o WorkerPoolArrayOutput) ToWorkerPoolArrayOutput() WorkerPoolArrayOutput {
	return o
}

func (o WorkerPoolArrayOutput) ToWorkerPoolArrayOutputWithContext(ctx context.Context) WorkerPoolArrayOutput {
	return o
}

func (o WorkerPoolArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WorkerPool] {
	return pulumix.Output[[]*WorkerPool]{
		OutputState: o.OutputState,
	}
}

func (o WorkerPoolArrayOutput) Index(i pulumi.IntInput) WorkerPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkerPool {
		return vs[0].([]*WorkerPool)[vs[1].(int)]
	}).(WorkerPoolOutput)
}

type WorkerPoolMapOutput struct{ *pulumi.OutputState }

func (WorkerPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPool)(nil)).Elem()
}

func (o WorkerPoolMapOutput) ToWorkerPoolMapOutput() WorkerPoolMapOutput {
	return o
}

func (o WorkerPoolMapOutput) ToWorkerPoolMapOutputWithContext(ctx context.Context) WorkerPoolMapOutput {
	return o
}

func (o WorkerPoolMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WorkerPool] {
	return pulumix.Output[map[string]*WorkerPool]{
		OutputState: o.OutputState,
	}
}

func (o WorkerPoolMapOutput) MapIndex(k pulumi.StringInput) WorkerPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkerPool {
		return vs[0].(map[string]*WorkerPool)[vs[1].(string)]
	}).(WorkerPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolInput)(nil)).Elem(), &WorkerPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolArrayInput)(nil)).Elem(), WorkerPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolMapInput)(nil)).Elem(), WorkerPoolMap{})
	pulumi.RegisterOutputType(WorkerPoolOutput{})
	pulumi.RegisterOutputType(WorkerPoolArrayOutput{})
	pulumi.RegisterOutputType(WorkerPoolMapOutput{})
}
