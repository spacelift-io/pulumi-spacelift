// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type WorkerPool struct {
	pulumi.CustomResourceState

	// credentials necessary to connect WorkerPool's workers to the control plane
	Config pulumi.StringOutput `pulumi:"config"`
	// certificate signing request in base64
	Csr pulumi.StringOutput `pulumi:"csr"`
	// description of the worker pool
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// name of the worker pool
	Name pulumi.StringOutput `pulumi:"name"`
	// private key in base64
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
}

// NewWorkerPool registers a new resource with the given unique name, arguments, and options.
func NewWorkerPool(ctx *pulumi.Context,
	name string, args *WorkerPoolArgs, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource WorkerPool
	err := ctx.RegisterResource("spacelift:index/workerPool:WorkerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerPool gets an existing WorkerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerPoolState, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	var resource WorkerPool
	err := ctx.ReadResource("spacelift:index/workerPool:WorkerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerPool resources.
type workerPoolState struct {
	// credentials necessary to connect WorkerPool's workers to the control plane
	Config *string `pulumi:"config"`
	// certificate signing request in base64
	Csr *string `pulumi:"csr"`
	// description of the worker pool
	Description *string `pulumi:"description"`
	// name of the worker pool
	Name *string `pulumi:"name"`
	// private key in base64
	PrivateKey *string `pulumi:"privateKey"`
}

type WorkerPoolState struct {
	// credentials necessary to connect WorkerPool's workers to the control plane
	Config pulumi.StringPtrInput
	// certificate signing request in base64
	Csr pulumi.StringPtrInput
	// description of the worker pool
	Description pulumi.StringPtrInput
	// name of the worker pool
	Name pulumi.StringPtrInput
	// private key in base64
	PrivateKey pulumi.StringPtrInput
}

func (WorkerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolState)(nil)).Elem()
}

type workerPoolArgs struct {
	// certificate signing request in base64
	Csr *string `pulumi:"csr"`
	// description of the worker pool
	Description *string `pulumi:"description"`
	// name of the worker pool
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a WorkerPool resource.
type WorkerPoolArgs struct {
	// certificate signing request in base64
	Csr pulumi.StringPtrInput
	// description of the worker pool
	Description pulumi.StringPtrInput
	// name of the worker pool
	Name pulumi.StringInput
}

func (WorkerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolArgs)(nil)).Elem()
}

type WorkerPoolInput interface {
	pulumi.Input

	ToWorkerPoolOutput() WorkerPoolOutput
	ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput
}

func (*WorkerPool) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerPool)(nil))
}

func (i *WorkerPool) ToWorkerPoolOutput() WorkerPoolOutput {
	return i.ToWorkerPoolOutputWithContext(context.Background())
}

func (i *WorkerPool) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolOutput)
}

type WorkerPoolOutput struct {
	*pulumi.OutputState
}

func (WorkerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerPool)(nil))
}

func (o WorkerPoolOutput) ToWorkerPoolOutput() WorkerPoolOutput {
	return o
}

func (o WorkerPoolOutput) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WorkerPoolOutput{})
}
