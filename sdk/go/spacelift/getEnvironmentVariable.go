// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `EnvironmentVariable` defines an environment variable on the context (`Context`), stack (`Stack`) or a module (`Module`), thereby allowing to pass and share various secrets and configuration with Spacelift stacks.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spacelift/sdk/go/spacelift"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// 	"github.com/spacelift-io/spacelift-spacelift/sdk/go/spacelift/"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "prod-k8s-ie"
// 		_, err := spacelift.LookupEnvironmentVariable(ctx, &spacelift.LookupEnvironmentVariableArgs{
// 			ContextId: &opt0,
// 			Name:      "KUBECONFIG",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt1 := "k8s-module"
// 		_, err = spacelift.LookupEnvironmentVariable(ctx, &spacelift.LookupEnvironmentVariableArgs{
// 			ModuleId: &opt1,
// 			Name:     "KUBECONFIG",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt2 := "k8s-core"
// 		_, err = spacelift.LookupEnvironmentVariable(ctx, &spacelift.LookupEnvironmentVariableArgs{
// 			Name:    "KUBECONFIG",
// 			StackId: &opt2,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// <!-- schema generated by tfplugindocs -->
// ## Schema
//
// ### Required
//
// - **name** (String) name of the environment variable
//
// ### Optional
//
// - **context_id** (String) ID of the context on which the environment variable is defined
// - **id** (String) The ID of this resource.
// - **module_id** (String) ID of the module on which the environment variable is defined
// - **stack_id** (String) ID of the stack on which the environment variable is defined
//
// ### Read-Only
//
// - **checksum** (String) SHA-256 checksum of the value
// - **value** (String, Sensitive) value of the environment variable
// - **write_only** (Boolean) indicates whether the value can be read back outside a Run
func LookupEnvironmentVariable(ctx *pulumi.Context, args *LookupEnvironmentVariableArgs, opts ...pulumi.InvokeOption) (*LookupEnvironmentVariableResult, error) {
	var rv LookupEnvironmentVariableResult
	err := ctx.Invoke("spacelift:index/getEnvironmentVariable:getEnvironmentVariable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnvironmentVariable.
type LookupEnvironmentVariableArgs struct {
	ContextId *string `pulumi:"contextId"`
	ModuleId  *string `pulumi:"moduleId"`
	Name      string  `pulumi:"name"`
	StackId   *string `pulumi:"stackId"`
}

// A collection of values returned by getEnvironmentVariable.
type LookupEnvironmentVariableResult struct {
	Checksum  string  `pulumi:"checksum"`
	ContextId *string `pulumi:"contextId"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	ModuleId  *string `pulumi:"moduleId"`
	Name      string  `pulumi:"name"`
	StackId   *string `pulumi:"stackId"`
	Value     string  `pulumi:"value"`
	WriteOnly bool    `pulumi:"writeOnly"`
}
