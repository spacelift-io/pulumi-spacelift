// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `Context` represents a Spacelift **context** - a collection of configuration elements (either environment variables or mounted files) that can be administratively attached to multiple stacks (`Stack`) or modules (`Module`) using a context attachment (`ContextAttachment`)`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewContext(ctx, "prod-k8s-ie", &spacelift.ContextArgs{
//				Description: pulumi.String("Configuration details for the compute cluster in ðŸ‡®ðŸ‡ª"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import spacelift:index/context:Context prod-k8s-ie $CONTEXT_ID
//
// ```
type Context struct {
	pulumi.CustomResourceState

	// Free-form context description for users
	Description pulumi.StringPtrOutput   `pulumi:"description"`
	Labels      pulumi.StringArrayOutput `pulumi:"labels"`
	// Name of the context - should be unique in one account
	Name pulumi.StringOutput `pulumi:"name"`
	// ID (slug) of the space the context is in
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
}

// NewContext registers a new resource with the given unique name, arguments, and options.
func NewContext(ctx *pulumi.Context,
	name string, args *ContextArgs, opts ...pulumi.ResourceOption) (*Context, error) {
	if args == nil {
		args = &ContextArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Context
	err := ctx.RegisterResource("spacelift:index/context:Context", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContext gets an existing Context resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContextState, opts ...pulumi.ResourceOption) (*Context, error) {
	var resource Context
	err := ctx.ReadResource("spacelift:index/context:Context", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Context resources.
type contextState struct {
	// Free-form context description for users
	Description *string  `pulumi:"description"`
	Labels      []string `pulumi:"labels"`
	// Name of the context - should be unique in one account
	Name *string `pulumi:"name"`
	// ID (slug) of the space the context is in
	SpaceId *string `pulumi:"spaceId"`
}

type ContextState struct {
	// Free-form context description for users
	Description pulumi.StringPtrInput
	Labels      pulumi.StringArrayInput
	// Name of the context - should be unique in one account
	Name pulumi.StringPtrInput
	// ID (slug) of the space the context is in
	SpaceId pulumi.StringPtrInput
}

func (ContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*contextState)(nil)).Elem()
}

type contextArgs struct {
	// Free-form context description for users
	Description *string  `pulumi:"description"`
	Labels      []string `pulumi:"labels"`
	// Name of the context - should be unique in one account
	Name *string `pulumi:"name"`
	// ID (slug) of the space the context is in
	SpaceId *string `pulumi:"spaceId"`
}

// The set of arguments for constructing a Context resource.
type ContextArgs struct {
	// Free-form context description for users
	Description pulumi.StringPtrInput
	Labels      pulumi.StringArrayInput
	// Name of the context - should be unique in one account
	Name pulumi.StringPtrInput
	// ID (slug) of the space the context is in
	SpaceId pulumi.StringPtrInput
}

func (ContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contextArgs)(nil)).Elem()
}

type ContextInput interface {
	pulumi.Input

	ToContextOutput() ContextOutput
	ToContextOutputWithContext(ctx context.Context) ContextOutput
}

func (*Context) ElementType() reflect.Type {
	return reflect.TypeOf((**Context)(nil)).Elem()
}

func (i *Context) ToContextOutput() ContextOutput {
	return i.ToContextOutputWithContext(context.Background())
}

func (i *Context) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextOutput)
}

// ContextArrayInput is an input type that accepts ContextArray and ContextArrayOutput values.
// You can construct a concrete instance of `ContextArrayInput` via:
//
//	ContextArray{ ContextArgs{...} }
type ContextArrayInput interface {
	pulumi.Input

	ToContextArrayOutput() ContextArrayOutput
	ToContextArrayOutputWithContext(context.Context) ContextArrayOutput
}

type ContextArray []ContextInput

func (ContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Context)(nil)).Elem()
}

func (i ContextArray) ToContextArrayOutput() ContextArrayOutput {
	return i.ToContextArrayOutputWithContext(context.Background())
}

func (i ContextArray) ToContextArrayOutputWithContext(ctx context.Context) ContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextArrayOutput)
}

// ContextMapInput is an input type that accepts ContextMap and ContextMapOutput values.
// You can construct a concrete instance of `ContextMapInput` via:
//
//	ContextMap{ "key": ContextArgs{...} }
type ContextMapInput interface {
	pulumi.Input

	ToContextMapOutput() ContextMapOutput
	ToContextMapOutputWithContext(context.Context) ContextMapOutput
}

type ContextMap map[string]ContextInput

func (ContextMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Context)(nil)).Elem()
}

func (i ContextMap) ToContextMapOutput() ContextMapOutput {
	return i.ToContextMapOutputWithContext(context.Background())
}

func (i ContextMap) ToContextMapOutputWithContext(ctx context.Context) ContextMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextMapOutput)
}

type ContextOutput struct{ *pulumi.OutputState }

func (ContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Context)(nil)).Elem()
}

func (o ContextOutput) ToContextOutput() ContextOutput {
	return o
}

func (o ContextOutput) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return o
}

// Free-form context description for users
func (o ContextOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Context) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ContextOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Context) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// Name of the context - should be unique in one account
func (o ContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID (slug) of the space the context is in
func (o ContextOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

type ContextArrayOutput struct{ *pulumi.OutputState }

func (ContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Context)(nil)).Elem()
}

func (o ContextArrayOutput) ToContextArrayOutput() ContextArrayOutput {
	return o
}

func (o ContextArrayOutput) ToContextArrayOutputWithContext(ctx context.Context) ContextArrayOutput {
	return o
}

func (o ContextArrayOutput) Index(i pulumi.IntInput) ContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Context {
		return vs[0].([]*Context)[vs[1].(int)]
	}).(ContextOutput)
}

type ContextMapOutput struct{ *pulumi.OutputState }

func (ContextMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Context)(nil)).Elem()
}

func (o ContextMapOutput) ToContextMapOutput() ContextMapOutput {
	return o
}

func (o ContextMapOutput) ToContextMapOutputWithContext(ctx context.Context) ContextMapOutput {
	return o
}

func (o ContextMapOutput) MapIndex(k pulumi.StringInput) ContextOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Context {
		return vs[0].(map[string]*Context)[vs[1].(string)]
	}).(ContextOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContextInput)(nil)).Elem(), &Context{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextArrayInput)(nil)).Elem(), ContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextMapInput)(nil)).Elem(), ContextMap{})
	pulumi.RegisterOutputType(ContextOutput{})
	pulumi.RegisterOutputType(ContextArrayOutput{})
	pulumi.RegisterOutputType(ContextMapOutput{})
}
