// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `AzureIntegrationAttachment` represents the attachment between a reusable Azure integration and a single stack or module.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.LookupAzureIntegrationAttachment(ctx, &spacelift.LookupAzureIntegrationAttachmentArgs{
//				IntegrationId: "some-integration-id",
//				StackId:       pulumi.StringRef("some-stack-id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAzureIntegrationAttachment(ctx *pulumi.Context, args *LookupAzureIntegrationAttachmentArgs, opts ...pulumi.InvokeOption) (*LookupAzureIntegrationAttachmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAzureIntegrationAttachmentResult
	err := ctx.Invoke("spacelift:index/getAzureIntegrationAttachment:getAzureIntegrationAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAzureIntegrationAttachment.
type LookupAzureIntegrationAttachmentArgs struct {
	// ID of the integration to attach
	IntegrationId string `pulumi:"integrationId"`
	// ID of the module to attach the integration to
	ModuleId *string `pulumi:"moduleId"`
	// ID of the stack to attach the integration to
	StackId *string `pulumi:"stackId"`
}

// A collection of values returned by getAzureIntegrationAttachment.
type LookupAzureIntegrationAttachmentResult struct {
	// Internal ID of the attachment entity
	AttachmentId string `pulumi:"attachmentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the integration to attach
	IntegrationId string `pulumi:"integrationId"`
	// ID of the module to attach the integration to
	ModuleId *string `pulumi:"moduleId"`
	// Indicates whether this attachment is used for read operations
	Read bool `pulumi:"read"`
	// ID of the stack to attach the integration to
	StackId *string `pulumi:"stackId"`
	// Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.
	SubscriptionId string `pulumi:"subscriptionId"`
	// Indicates whether this attachment is used for write operations
	Write bool `pulumi:"write"`
}

func LookupAzureIntegrationAttachmentOutput(ctx *pulumi.Context, args LookupAzureIntegrationAttachmentOutputArgs, opts ...pulumi.InvokeOption) LookupAzureIntegrationAttachmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAzureIntegrationAttachmentResult, error) {
			args := v.(LookupAzureIntegrationAttachmentArgs)
			r, err := LookupAzureIntegrationAttachment(ctx, &args, opts...)
			var s LookupAzureIntegrationAttachmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAzureIntegrationAttachmentResultOutput)
}

// A collection of arguments for invoking getAzureIntegrationAttachment.
type LookupAzureIntegrationAttachmentOutputArgs struct {
	// ID of the integration to attach
	IntegrationId pulumi.StringInput `pulumi:"integrationId"`
	// ID of the module to attach the integration to
	ModuleId pulumi.StringPtrInput `pulumi:"moduleId"`
	// ID of the stack to attach the integration to
	StackId pulumi.StringPtrInput `pulumi:"stackId"`
}

func (LookupAzureIntegrationAttachmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureIntegrationAttachmentArgs)(nil)).Elem()
}

// A collection of values returned by getAzureIntegrationAttachment.
type LookupAzureIntegrationAttachmentResultOutput struct{ *pulumi.OutputState }

func (LookupAzureIntegrationAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureIntegrationAttachmentResult)(nil)).Elem()
}

func (o LookupAzureIntegrationAttachmentResultOutput) ToLookupAzureIntegrationAttachmentResultOutput() LookupAzureIntegrationAttachmentResultOutput {
	return o
}

func (o LookupAzureIntegrationAttachmentResultOutput) ToLookupAzureIntegrationAttachmentResultOutputWithContext(ctx context.Context) LookupAzureIntegrationAttachmentResultOutput {
	return o
}

func (o LookupAzureIntegrationAttachmentResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupAzureIntegrationAttachmentResult] {
	return pulumix.Output[LookupAzureIntegrationAttachmentResult]{
		OutputState: o.OutputState,
	}
}

// Internal ID of the attachment entity
func (o LookupAzureIntegrationAttachmentResultOutput) AttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationAttachmentResult) string { return v.AttachmentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAzureIntegrationAttachmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationAttachmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the integration to attach
func (o LookupAzureIntegrationAttachmentResultOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationAttachmentResult) string { return v.IntegrationId }).(pulumi.StringOutput)
}

// ID of the module to attach the integration to
func (o LookupAzureIntegrationAttachmentResultOutput) ModuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAzureIntegrationAttachmentResult) *string { return v.ModuleId }).(pulumi.StringPtrOutput)
}

// Indicates whether this attachment is used for read operations
func (o LookupAzureIntegrationAttachmentResultOutput) Read() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAzureIntegrationAttachmentResult) bool { return v.Read }).(pulumi.BoolOutput)
}

// ID of the stack to attach the integration to
func (o LookupAzureIntegrationAttachmentResultOutput) StackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAzureIntegrationAttachmentResult) *string { return v.StackId }).(pulumi.StringPtrOutput)
}

// Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.
func (o LookupAzureIntegrationAttachmentResultOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationAttachmentResult) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Indicates whether this attachment is used for write operations
func (o LookupAzureIntegrationAttachmentResultOutput) Write() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAzureIntegrationAttachmentResult) bool { return v.Write }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAzureIntegrationAttachmentResultOutput{})
}
