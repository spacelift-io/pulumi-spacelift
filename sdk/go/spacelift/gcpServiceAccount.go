// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GcpServiceAccount struct {
	pulumi.CustomResourceState

	// ID of the module which uses GCP service account credentials
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// Email address of the GCP service account dedicated for this stack
	ServiceAccountEmail pulumi.StringOutput `pulumi:"serviceAccountEmail"`
	// ID of the stack which uses GCP service account credentials
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes pulumi.StringArrayOutput `pulumi:"tokenScopes"`
}

// NewGcpServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewGcpServiceAccount(ctx *pulumi.Context,
	name string, args *GcpServiceAccountArgs, opts ...pulumi.ResourceOption) (*GcpServiceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TokenScopes == nil {
		return nil, errors.New("invalid value for required argument 'TokenScopes'")
	}
	var resource GcpServiceAccount
	err := ctx.RegisterResource("spacelift:index/gcpServiceAccount:GcpServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpServiceAccount gets an existing GcpServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpServiceAccountState, opts ...pulumi.ResourceOption) (*GcpServiceAccount, error) {
	var resource GcpServiceAccount
	err := ctx.ReadResource("spacelift:index/gcpServiceAccount:GcpServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpServiceAccount resources.
type gcpServiceAccountState struct {
	// ID of the module which uses GCP service account credentials
	ModuleId *string `pulumi:"moduleId"`
	// Email address of the GCP service account dedicated for this stack
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
	// ID of the stack which uses GCP service account credentials
	StackId *string `pulumi:"stackId"`
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes []string `pulumi:"tokenScopes"`
}

type GcpServiceAccountState struct {
	// ID of the module which uses GCP service account credentials
	ModuleId pulumi.StringPtrInput
	// Email address of the GCP service account dedicated for this stack
	ServiceAccountEmail pulumi.StringPtrInput
	// ID of the stack which uses GCP service account credentials
	StackId pulumi.StringPtrInput
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes pulumi.StringArrayInput
}

func (GcpServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpServiceAccountState)(nil)).Elem()
}

type gcpServiceAccountArgs struct {
	// ID of the module which uses GCP service account credentials
	ModuleId *string `pulumi:"moduleId"`
	// ID of the stack which uses GCP service account credentials
	StackId *string `pulumi:"stackId"`
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes []string `pulumi:"tokenScopes"`
}

// The set of arguments for constructing a GcpServiceAccount resource.
type GcpServiceAccountArgs struct {
	// ID of the module which uses GCP service account credentials
	ModuleId pulumi.StringPtrInput
	// ID of the stack which uses GCP service account credentials
	StackId pulumi.StringPtrInput
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes pulumi.StringArrayInput
}

func (GcpServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpServiceAccountArgs)(nil)).Elem()
}

type GcpServiceAccountInput interface {
	pulumi.Input

	ToGcpServiceAccountOutput() GcpServiceAccountOutput
	ToGcpServiceAccountOutputWithContext(ctx context.Context) GcpServiceAccountOutput
}

func (*GcpServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpServiceAccount)(nil))
}

func (i *GcpServiceAccount) ToGcpServiceAccountOutput() GcpServiceAccountOutput {
	return i.ToGcpServiceAccountOutputWithContext(context.Background())
}

func (i *GcpServiceAccount) ToGcpServiceAccountOutputWithContext(ctx context.Context) GcpServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpServiceAccountOutput)
}

type GcpServiceAccountOutput struct {
	*pulumi.OutputState
}

func (GcpServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpServiceAccount)(nil))
}

func (o GcpServiceAccountOutput) ToGcpServiceAccountOutput() GcpServiceAccountOutput {
	return o
}

func (o GcpServiceAccountOutput) ToGcpServiceAccountOutputWithContext(ctx context.Context) GcpServiceAccountOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GcpServiceAccountOutput{})
}
