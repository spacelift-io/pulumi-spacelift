// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.LookupStack(ctx, &spacelift.LookupStackArgs{
//				StackId: "k8s-core",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStack(ctx *pulumi.Context, args *LookupStackArgs, opts ...pulumi.InvokeOption) (*LookupStackResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStackResult
	err := ctx.Invoke("spacelift:index/getStack:getStack", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStack.
type LookupStackArgs struct {
	// List of after-apply scripts
	AfterApplies []string `pulumi:"afterApplies"`
	// List of after-destroy scripts
	AfterDestroys []string `pulumi:"afterDestroys"`
	// List of after-init scripts
	AfterInits []string `pulumi:"afterInits"`
	// List of after-perform scripts
	AfterPerforms []string `pulumi:"afterPerforms"`
	// List of after-plan scripts
	AfterPlans []string `pulumi:"afterPlans"`
	// List of after-run scripts
	AfterRuns []string `pulumi:"afterRuns"`
	// List of before-apply scripts
	BeforeApplies []string `pulumi:"beforeApplies"`
	// List of before-destroy scripts
	BeforeDestroys []string `pulumi:"beforeDestroys"`
	// List of before-init scripts
	BeforeInits []string `pulumi:"beforeInits"`
	// List of before-perform scripts
	BeforePerforms []string `pulumi:"beforePerforms"`
	// List of before-plan scripts
	BeforePlans []string `pulumi:"beforePlans"`
	// ID (slug) of the stack
	StackId string `pulumi:"stackId"`
}

// A collection of values returned by getStack.
type LookupStackResult struct {
	// indicates whether this stack can administer others
	Administrative bool `pulumi:"administrative"`
	// List of after-apply scripts
	AfterApplies []string `pulumi:"afterApplies"`
	// List of after-destroy scripts
	AfterDestroys []string `pulumi:"afterDestroys"`
	// List of after-init scripts
	AfterInits []string `pulumi:"afterInits"`
	// List of after-perform scripts
	AfterPerforms []string `pulumi:"afterPerforms"`
	// List of after-plan scripts
	AfterPlans []string `pulumi:"afterPlans"`
	// List of after-run scripts
	AfterRuns []string `pulumi:"afterRuns"`
	// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
	Ansibles []GetStackAnsible `pulumi:"ansibles"`
	// indicates whether changes to this stack can be automatically deployed
	Autodeploy bool `pulumi:"autodeploy"`
	// indicates whether obsolete proposed changes should automatically be retried
	Autoretry bool `pulumi:"autoretry"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement string `pulumi:"awsAssumeRolePolicyStatement"`
	// Azure DevOps VCS settings
	AzureDevops []GetStackAzureDevop `pulumi:"azureDevops"`
	// List of before-apply scripts
	BeforeApplies []string `pulumi:"beforeApplies"`
	// List of before-destroy scripts
	BeforeDestroys []string `pulumi:"beforeDestroys"`
	// List of before-init scripts
	BeforeInits []string `pulumi:"beforeInits"`
	// List of before-perform scripts
	BeforePerforms []string `pulumi:"beforePerforms"`
	// List of before-plan scripts
	BeforePlans []string `pulumi:"beforePlans"`
	// Bitbucket Cloud VCS settings
	BitbucketClouds []GetStackBitbucketCloud `pulumi:"bitbucketClouds"`
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenters []GetStackBitbucketDatacenter `pulumi:"bitbucketDatacenters"`
	// Repository branch to treat as the default 'main' branch
	Branch string `pulumi:"branch"`
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformations []GetStackCloudformation `pulumi:"cloudformations"`
	// free-form stack description for users
	Description string `pulumi:"description"`
	// Indicates whether local preview runs can be triggered on this Stack.
	EnableLocalPreview bool `pulumi:"enableLocalPreview"`
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprises []GetStackGithubEnterprise `pulumi:"githubEnterprises"`
	// GitLab VCS settings
	Gitlabs []GetStackGitlab `pulumi:"gitlabs"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
	Kubernetes []GetStackKubernete `pulumi:"kubernetes"`
	Labels     []string            `pulumi:"labels"`
	// Determines if Spacelift should manage state for this stack
	ManageState bool `pulumi:"manageState"`
	// Name of the stack - should be unique in one account
	Name string `pulumi:"name"`
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot string `pulumi:"projectRoot"`
	// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail.
	ProtectFromDeletion bool `pulumi:"protectFromDeletion"`
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumis []GetStackPulumi `pulumi:"pulumis"`
	// One-way VCS integration using a raw Git repository link
	RawGits []GetStackRawGit `pulumi:"rawGits"`
	// Name of the repository, without the owner part
	Repository string `pulumi:"repository"`
	// Name of the Docker image used to process Runs
	RunnerImage string `pulumi:"runnerImage"`
	// Showcase-related attributes
	Showcases []GetStackShowcase `pulumi:"showcases"`
	// ID (slug) of the space the stack is in
	SpaceId string `pulumi:"spaceId"`
	// ID (slug) of the stack
	StackId string `pulumi:"stackId"`
	// Indicates whether you can access the Stack state file from other stacks or outside of Spacelift.
	TerraformExternalStateAccess bool   `pulumi:"terraformExternalStateAccess"`
	TerraformSmartSanitization   bool   `pulumi:"terraformSmartSanitization"`
	TerraformVersion             string `pulumi:"terraformVersion"`
	// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
	TerraformWorkflowTool string `pulumi:"terraformWorkflowTool"`
	TerraformWorkspace    string `pulumi:"terraformWorkspace"`
	// ID of the worker pool to use
	WorkerPoolId string `pulumi:"workerPoolId"`
}

func LookupStackOutput(ctx *pulumi.Context, args LookupStackOutputArgs, opts ...pulumi.InvokeOption) LookupStackResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStackResult, error) {
			args := v.(LookupStackArgs)
			r, err := LookupStack(ctx, &args, opts...)
			var s LookupStackResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStackResultOutput)
}

// A collection of arguments for invoking getStack.
type LookupStackOutputArgs struct {
	// List of after-apply scripts
	AfterApplies pulumi.StringArrayInput `pulumi:"afterApplies"`
	// List of after-destroy scripts
	AfterDestroys pulumi.StringArrayInput `pulumi:"afterDestroys"`
	// List of after-init scripts
	AfterInits pulumi.StringArrayInput `pulumi:"afterInits"`
	// List of after-perform scripts
	AfterPerforms pulumi.StringArrayInput `pulumi:"afterPerforms"`
	// List of after-plan scripts
	AfterPlans pulumi.StringArrayInput `pulumi:"afterPlans"`
	// List of after-run scripts
	AfterRuns pulumi.StringArrayInput `pulumi:"afterRuns"`
	// List of before-apply scripts
	BeforeApplies pulumi.StringArrayInput `pulumi:"beforeApplies"`
	// List of before-destroy scripts
	BeforeDestroys pulumi.StringArrayInput `pulumi:"beforeDestroys"`
	// List of before-init scripts
	BeforeInits pulumi.StringArrayInput `pulumi:"beforeInits"`
	// List of before-perform scripts
	BeforePerforms pulumi.StringArrayInput `pulumi:"beforePerforms"`
	// List of before-plan scripts
	BeforePlans pulumi.StringArrayInput `pulumi:"beforePlans"`
	// ID (slug) of the stack
	StackId pulumi.StringInput `pulumi:"stackId"`
}

func (LookupStackOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStackArgs)(nil)).Elem()
}

// A collection of values returned by getStack.
type LookupStackResultOutput struct{ *pulumi.OutputState }

func (LookupStackResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStackResult)(nil)).Elem()
}

func (o LookupStackResultOutput) ToLookupStackResultOutput() LookupStackResultOutput {
	return o
}

func (o LookupStackResultOutput) ToLookupStackResultOutputWithContext(ctx context.Context) LookupStackResultOutput {
	return o
}

func (o LookupStackResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupStackResult] {
	return pulumix.Output[LookupStackResult]{
		OutputState: o.OutputState,
	}
}

// indicates whether this stack can administer others
func (o LookupStackResultOutput) Administrative() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStackResult) bool { return v.Administrative }).(pulumi.BoolOutput)
}

// List of after-apply scripts
func (o LookupStackResultOutput) AfterApplies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.AfterApplies }).(pulumi.StringArrayOutput)
}

// List of after-destroy scripts
func (o LookupStackResultOutput) AfterDestroys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.AfterDestroys }).(pulumi.StringArrayOutput)
}

// List of after-init scripts
func (o LookupStackResultOutput) AfterInits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.AfterInits }).(pulumi.StringArrayOutput)
}

// List of after-perform scripts
func (o LookupStackResultOutput) AfterPerforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.AfterPerforms }).(pulumi.StringArrayOutput)
}

// List of after-plan scripts
func (o LookupStackResultOutput) AfterPlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.AfterPlans }).(pulumi.StringArrayOutput)
}

// List of after-run scripts
func (o LookupStackResultOutput) AfterRuns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.AfterRuns }).(pulumi.StringArrayOutput)
}

// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
func (o LookupStackResultOutput) Ansibles() GetStackAnsibleArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackAnsible { return v.Ansibles }).(GetStackAnsibleArrayOutput)
}

// indicates whether changes to this stack can be automatically deployed
func (o LookupStackResultOutput) Autodeploy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStackResult) bool { return v.Autodeploy }).(pulumi.BoolOutput)
}

// indicates whether obsolete proposed changes should automatically be retried
func (o LookupStackResultOutput) Autoretry() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStackResult) bool { return v.Autoretry }).(pulumi.BoolOutput)
}

// AWS IAM assume role policy statement setting up trust relationship
func (o LookupStackResultOutput) AwsAssumeRolePolicyStatement() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.AwsAssumeRolePolicyStatement }).(pulumi.StringOutput)
}

// Azure DevOps VCS settings
func (o LookupStackResultOutput) AzureDevops() GetStackAzureDevopArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackAzureDevop { return v.AzureDevops }).(GetStackAzureDevopArrayOutput)
}

// List of before-apply scripts
func (o LookupStackResultOutput) BeforeApplies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.BeforeApplies }).(pulumi.StringArrayOutput)
}

// List of before-destroy scripts
func (o LookupStackResultOutput) BeforeDestroys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.BeforeDestroys }).(pulumi.StringArrayOutput)
}

// List of before-init scripts
func (o LookupStackResultOutput) BeforeInits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.BeforeInits }).(pulumi.StringArrayOutput)
}

// List of before-perform scripts
func (o LookupStackResultOutput) BeforePerforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.BeforePerforms }).(pulumi.StringArrayOutput)
}

// List of before-plan scripts
func (o LookupStackResultOutput) BeforePlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.BeforePlans }).(pulumi.StringArrayOutput)
}

// Bitbucket Cloud VCS settings
func (o LookupStackResultOutput) BitbucketClouds() GetStackBitbucketCloudArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackBitbucketCloud { return v.BitbucketClouds }).(GetStackBitbucketCloudArrayOutput)
}

// Bitbucket Datacenter VCS settings
func (o LookupStackResultOutput) BitbucketDatacenters() GetStackBitbucketDatacenterArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackBitbucketDatacenter { return v.BitbucketDatacenters }).(GetStackBitbucketDatacenterArrayOutput)
}

// Repository branch to treat as the default 'main' branch
func (o LookupStackResultOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.Branch }).(pulumi.StringOutput)
}

// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
func (o LookupStackResultOutput) Cloudformations() GetStackCloudformationArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackCloudformation { return v.Cloudformations }).(GetStackCloudformationArrayOutput)
}

// free-form stack description for users
func (o LookupStackResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.Description }).(pulumi.StringOutput)
}

// Indicates whether local preview runs can be triggered on this Stack.
func (o LookupStackResultOutput) EnableLocalPreview() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStackResult) bool { return v.EnableLocalPreview }).(pulumi.BoolOutput)
}

// GitHub Enterprise (self-hosted) VCS settings
func (o LookupStackResultOutput) GithubEnterprises() GetStackGithubEnterpriseArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackGithubEnterprise { return v.GithubEnterprises }).(GetStackGithubEnterpriseArrayOutput)
}

// GitLab VCS settings
func (o LookupStackResultOutput) Gitlabs() GetStackGitlabArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackGitlab { return v.Gitlabs }).(GetStackGitlabArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStackResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.Id }).(pulumi.StringOutput)
}

// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
func (o LookupStackResultOutput) Kubernetes() GetStackKuberneteArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackKubernete { return v.Kubernetes }).(GetStackKuberneteArrayOutput)
}

func (o LookupStackResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// Determines if Spacelift should manage state for this stack
func (o LookupStackResultOutput) ManageState() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStackResult) bool { return v.ManageState }).(pulumi.BoolOutput)
}

// Name of the stack - should be unique in one account
func (o LookupStackResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.Name }).(pulumi.StringOutput)
}

// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
func (o LookupStackResultOutput) ProjectRoot() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.ProjectRoot }).(pulumi.StringOutput)
}

// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail.
func (o LookupStackResultOutput) ProtectFromDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStackResult) bool { return v.ProtectFromDeletion }).(pulumi.BoolOutput)
}

// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
func (o LookupStackResultOutput) Pulumis() GetStackPulumiArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackPulumi { return v.Pulumis }).(GetStackPulumiArrayOutput)
}

// One-way VCS integration using a raw Git repository link
func (o LookupStackResultOutput) RawGits() GetStackRawGitArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackRawGit { return v.RawGits }).(GetStackRawGitArrayOutput)
}

// Name of the repository, without the owner part
func (o LookupStackResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.Repository }).(pulumi.StringOutput)
}

// Name of the Docker image used to process Runs
func (o LookupStackResultOutput) RunnerImage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.RunnerImage }).(pulumi.StringOutput)
}

// Showcase-related attributes
func (o LookupStackResultOutput) Showcases() GetStackShowcaseArrayOutput {
	return o.ApplyT(func(v LookupStackResult) []GetStackShowcase { return v.Showcases }).(GetStackShowcaseArrayOutput)
}

// ID (slug) of the space the stack is in
func (o LookupStackResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

// ID (slug) of the stack
func (o LookupStackResultOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.StackId }).(pulumi.StringOutput)
}

// Indicates whether you can access the Stack state file from other stacks or outside of Spacelift.
func (o LookupStackResultOutput) TerraformExternalStateAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStackResult) bool { return v.TerraformExternalStateAccess }).(pulumi.BoolOutput)
}

func (o LookupStackResultOutput) TerraformSmartSanitization() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStackResult) bool { return v.TerraformSmartSanitization }).(pulumi.BoolOutput)
}

func (o LookupStackResultOutput) TerraformVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.TerraformVersion }).(pulumi.StringOutput)
}

// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
func (o LookupStackResultOutput) TerraformWorkflowTool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.TerraformWorkflowTool }).(pulumi.StringOutput)
}

func (o LookupStackResultOutput) TerraformWorkspace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.TerraformWorkspace }).(pulumi.StringOutput)
}

// ID of the worker pool to use
func (o LookupStackResultOutput) WorkerPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStackResult) string { return v.WorkerPoolId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStackResultOutput{})
}
