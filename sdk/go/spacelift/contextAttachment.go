// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ContextAttachment struct {
	pulumi.CustomResourceState

	// ID of the context to attach
	ContextId pulumi.StringOutput `pulumi:"contextId"`
	// ID of the module to attach the context to
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// Priority of the context attachment, used in case of conflicts
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// ID of the stack to attach the context to
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
}

// NewContextAttachment registers a new resource with the given unique name, arguments, and options.
func NewContextAttachment(ctx *pulumi.Context,
	name string, args *ContextAttachmentArgs, opts ...pulumi.ResourceOption) (*ContextAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContextId == nil {
		return nil, errors.New("invalid value for required argument 'ContextId'")
	}
	var resource ContextAttachment
	err := ctx.RegisterResource("spacelift:index/contextAttachment:ContextAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContextAttachment gets an existing ContextAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContextAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContextAttachmentState, opts ...pulumi.ResourceOption) (*ContextAttachment, error) {
	var resource ContextAttachment
	err := ctx.ReadResource("spacelift:index/contextAttachment:ContextAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContextAttachment resources.
type contextAttachmentState struct {
	// ID of the context to attach
	ContextId *string `pulumi:"contextId"`
	// ID of the module to attach the context to
	ModuleId *string `pulumi:"moduleId"`
	// Priority of the context attachment, used in case of conflicts
	Priority *int `pulumi:"priority"`
	// ID of the stack to attach the context to
	StackId *string `pulumi:"stackId"`
}

type ContextAttachmentState struct {
	// ID of the context to attach
	ContextId pulumi.StringPtrInput
	// ID of the module to attach the context to
	ModuleId pulumi.StringPtrInput
	// Priority of the context attachment, used in case of conflicts
	Priority pulumi.IntPtrInput
	// ID of the stack to attach the context to
	StackId pulumi.StringPtrInput
}

func (ContextAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*contextAttachmentState)(nil)).Elem()
}

type contextAttachmentArgs struct {
	// ID of the context to attach
	ContextId string `pulumi:"contextId"`
	// ID of the module to attach the context to
	ModuleId *string `pulumi:"moduleId"`
	// Priority of the context attachment, used in case of conflicts
	Priority *int `pulumi:"priority"`
	// ID of the stack to attach the context to
	StackId *string `pulumi:"stackId"`
}

// The set of arguments for constructing a ContextAttachment resource.
type ContextAttachmentArgs struct {
	// ID of the context to attach
	ContextId pulumi.StringInput
	// ID of the module to attach the context to
	ModuleId pulumi.StringPtrInput
	// Priority of the context attachment, used in case of conflicts
	Priority pulumi.IntPtrInput
	// ID of the stack to attach the context to
	StackId pulumi.StringPtrInput
}

func (ContextAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contextAttachmentArgs)(nil)).Elem()
}

type ContextAttachmentInput interface {
	pulumi.Input

	ToContextAttachmentOutput() ContextAttachmentOutput
	ToContextAttachmentOutputWithContext(ctx context.Context) ContextAttachmentOutput
}

func (*ContextAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextAttachment)(nil))
}

func (i *ContextAttachment) ToContextAttachmentOutput() ContextAttachmentOutput {
	return i.ToContextAttachmentOutputWithContext(context.Background())
}

func (i *ContextAttachment) ToContextAttachmentOutputWithContext(ctx context.Context) ContextAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextAttachmentOutput)
}

type ContextAttachmentOutput struct {
	*pulumi.OutputState
}

func (ContextAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextAttachment)(nil))
}

func (o ContextAttachmentOutput) ToContextAttachmentOutput() ContextAttachmentOutput {
	return o
}

func (o ContextAttachmentOutput) ToContextAttachmentOutputWithContext(ctx context.Context) ContextAttachmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ContextAttachmentOutput{})
}
