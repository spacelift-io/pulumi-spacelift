// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type MountedFile struct {
	pulumi.CustomResourceState

	// SHA-256 checksum of the value
	Checksum pulumi.StringOutput `pulumi:"checksum"`
	// Content of the mounted file encoded using Base-64
	Content pulumi.StringOutput `pulumi:"content"`
	// ID of the context on which the mounted file is defined
	ContextId pulumi.StringPtrOutput `pulumi:"contextId"`
	// ID of the module on which the mounted file is defined
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath pulumi.StringOutput `pulumi:"relativePath"`
	// ID of the stack on which the mounted file is defined
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
	// Indicates whether the content can be read back outside a Run
	WriteOnly pulumi.BoolPtrOutput `pulumi:"writeOnly"`
}

// NewMountedFile registers a new resource with the given unique name, arguments, and options.
func NewMountedFile(ctx *pulumi.Context,
	name string, args *MountedFileArgs, opts ...pulumi.ResourceOption) (*MountedFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.RelativePath == nil {
		return nil, errors.New("invalid value for required argument 'RelativePath'")
	}
	var resource MountedFile
	err := ctx.RegisterResource("spacelift:index/mountedFile:MountedFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMountedFile gets an existing MountedFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountedFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountedFileState, opts ...pulumi.ResourceOption) (*MountedFile, error) {
	var resource MountedFile
	err := ctx.ReadResource("spacelift:index/mountedFile:MountedFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MountedFile resources.
type mountedFileState struct {
	// SHA-256 checksum of the value
	Checksum *string `pulumi:"checksum"`
	// Content of the mounted file encoded using Base-64
	Content *string `pulumi:"content"`
	// ID of the context on which the mounted file is defined
	ContextId *string `pulumi:"contextId"`
	// ID of the module on which the mounted file is defined
	ModuleId *string `pulumi:"moduleId"`
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath *string `pulumi:"relativePath"`
	// ID of the stack on which the mounted file is defined
	StackId *string `pulumi:"stackId"`
	// Indicates whether the content can be read back outside a Run
	WriteOnly *bool `pulumi:"writeOnly"`
}

type MountedFileState struct {
	// SHA-256 checksum of the value
	Checksum pulumi.StringPtrInput
	// Content of the mounted file encoded using Base-64
	Content pulumi.StringPtrInput
	// ID of the context on which the mounted file is defined
	ContextId pulumi.StringPtrInput
	// ID of the module on which the mounted file is defined
	ModuleId pulumi.StringPtrInput
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath pulumi.StringPtrInput
	// ID of the stack on which the mounted file is defined
	StackId pulumi.StringPtrInput
	// Indicates whether the content can be read back outside a Run
	WriteOnly pulumi.BoolPtrInput
}

func (MountedFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*mountedFileState)(nil)).Elem()
}

type mountedFileArgs struct {
	// Content of the mounted file encoded using Base-64
	Content string `pulumi:"content"`
	// ID of the context on which the mounted file is defined
	ContextId *string `pulumi:"contextId"`
	// ID of the module on which the mounted file is defined
	ModuleId *string `pulumi:"moduleId"`
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath string `pulumi:"relativePath"`
	// ID of the stack on which the mounted file is defined
	StackId *string `pulumi:"stackId"`
	// Indicates whether the content can be read back outside a Run
	WriteOnly *bool `pulumi:"writeOnly"`
}

// The set of arguments for constructing a MountedFile resource.
type MountedFileArgs struct {
	// Content of the mounted file encoded using Base-64
	Content pulumi.StringInput
	// ID of the context on which the mounted file is defined
	ContextId pulumi.StringPtrInput
	// ID of the module on which the mounted file is defined
	ModuleId pulumi.StringPtrInput
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath pulumi.StringInput
	// ID of the stack on which the mounted file is defined
	StackId pulumi.StringPtrInput
	// Indicates whether the content can be read back outside a Run
	WriteOnly pulumi.BoolPtrInput
}

func (MountedFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mountedFileArgs)(nil)).Elem()
}

type MountedFileInput interface {
	pulumi.Input

	ToMountedFileOutput() MountedFileOutput
	ToMountedFileOutputWithContext(ctx context.Context) MountedFileOutput
}

func (*MountedFile) ElementType() reflect.Type {
	return reflect.TypeOf((*MountedFile)(nil))
}

func (i *MountedFile) ToMountedFileOutput() MountedFileOutput {
	return i.ToMountedFileOutputWithContext(context.Background())
}

func (i *MountedFile) ToMountedFileOutputWithContext(ctx context.Context) MountedFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountedFileOutput)
}

type MountedFileOutput struct {
	*pulumi.OutputState
}

func (MountedFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountedFile)(nil))
}

func (o MountedFileOutput) ToMountedFileOutput() MountedFileOutput {
	return o
}

func (o MountedFileOutput) ToMountedFileOutputWithContext(ctx context.Context) MountedFileOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MountedFileOutput{})
}
