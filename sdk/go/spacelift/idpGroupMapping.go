// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `IdpGroupMapping` represents a mapping (binding) between a user group (as provided by IdP) and a Spacelift User Management Policy. If you assign permissions (a Policy) to a user group, all users in the group will have those permissions unless the user's permissions are higher than the group's permissions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewIdpGroupMapping(ctx, "test", &spacelift.IdpGroupMappingArgs{
//				Policies: spacelift.IdpGroupMappingPolicyArray{
//					&spacelift.IdpGroupMappingPolicyArgs{
//						Role:    pulumi.String("ADMIN"),
//						SpaceId: pulumi.String("root"),
//					},
//					&spacelift.IdpGroupMappingPolicyArgs{
//						Role:    pulumi.String("ADMIN"),
//						SpaceId: pulumi.String("legacy"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IdpGroupMapping struct {
	pulumi.CustomResourceState

	// Name of the user group - should be unique in one account
	Name     pulumi.StringOutput              `pulumi:"name"`
	Policies IdpGroupMappingPolicyArrayOutput `pulumi:"policies"`
}

// NewIdpGroupMapping registers a new resource with the given unique name, arguments, and options.
func NewIdpGroupMapping(ctx *pulumi.Context,
	name string, args *IdpGroupMappingArgs, opts ...pulumi.ResourceOption) (*IdpGroupMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdpGroupMapping
	err := ctx.RegisterResource("spacelift:index/idpGroupMapping:IdpGroupMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdpGroupMapping gets an existing IdpGroupMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdpGroupMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdpGroupMappingState, opts ...pulumi.ResourceOption) (*IdpGroupMapping, error) {
	var resource IdpGroupMapping
	err := ctx.ReadResource("spacelift:index/idpGroupMapping:IdpGroupMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdpGroupMapping resources.
type idpGroupMappingState struct {
	// Name of the user group - should be unique in one account
	Name     *string                 `pulumi:"name"`
	Policies []IdpGroupMappingPolicy `pulumi:"policies"`
}

type IdpGroupMappingState struct {
	// Name of the user group - should be unique in one account
	Name     pulumi.StringPtrInput
	Policies IdpGroupMappingPolicyArrayInput
}

func (IdpGroupMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*idpGroupMappingState)(nil)).Elem()
}

type idpGroupMappingArgs struct {
	// Name of the user group - should be unique in one account
	Name     *string                 `pulumi:"name"`
	Policies []IdpGroupMappingPolicy `pulumi:"policies"`
}

// The set of arguments for constructing a IdpGroupMapping resource.
type IdpGroupMappingArgs struct {
	// Name of the user group - should be unique in one account
	Name     pulumi.StringPtrInput
	Policies IdpGroupMappingPolicyArrayInput
}

func (IdpGroupMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*idpGroupMappingArgs)(nil)).Elem()
}

type IdpGroupMappingInput interface {
	pulumi.Input

	ToIdpGroupMappingOutput() IdpGroupMappingOutput
	ToIdpGroupMappingOutputWithContext(ctx context.Context) IdpGroupMappingOutput
}

func (*IdpGroupMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpGroupMapping)(nil)).Elem()
}

func (i *IdpGroupMapping) ToIdpGroupMappingOutput() IdpGroupMappingOutput {
	return i.ToIdpGroupMappingOutputWithContext(context.Background())
}

func (i *IdpGroupMapping) ToIdpGroupMappingOutputWithContext(ctx context.Context) IdpGroupMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpGroupMappingOutput)
}

func (i *IdpGroupMapping) ToOutput(ctx context.Context) pulumix.Output[*IdpGroupMapping] {
	return pulumix.Output[*IdpGroupMapping]{
		OutputState: i.ToIdpGroupMappingOutputWithContext(ctx).OutputState,
	}
}

// IdpGroupMappingArrayInput is an input type that accepts IdpGroupMappingArray and IdpGroupMappingArrayOutput values.
// You can construct a concrete instance of `IdpGroupMappingArrayInput` via:
//
//	IdpGroupMappingArray{ IdpGroupMappingArgs{...} }
type IdpGroupMappingArrayInput interface {
	pulumi.Input

	ToIdpGroupMappingArrayOutput() IdpGroupMappingArrayOutput
	ToIdpGroupMappingArrayOutputWithContext(context.Context) IdpGroupMappingArrayOutput
}

type IdpGroupMappingArray []IdpGroupMappingInput

func (IdpGroupMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdpGroupMapping)(nil)).Elem()
}

func (i IdpGroupMappingArray) ToIdpGroupMappingArrayOutput() IdpGroupMappingArrayOutput {
	return i.ToIdpGroupMappingArrayOutputWithContext(context.Background())
}

func (i IdpGroupMappingArray) ToIdpGroupMappingArrayOutputWithContext(ctx context.Context) IdpGroupMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpGroupMappingArrayOutput)
}

func (i IdpGroupMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]*IdpGroupMapping] {
	return pulumix.Output[[]*IdpGroupMapping]{
		OutputState: i.ToIdpGroupMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// IdpGroupMappingMapInput is an input type that accepts IdpGroupMappingMap and IdpGroupMappingMapOutput values.
// You can construct a concrete instance of `IdpGroupMappingMapInput` via:
//
//	IdpGroupMappingMap{ "key": IdpGroupMappingArgs{...} }
type IdpGroupMappingMapInput interface {
	pulumi.Input

	ToIdpGroupMappingMapOutput() IdpGroupMappingMapOutput
	ToIdpGroupMappingMapOutputWithContext(context.Context) IdpGroupMappingMapOutput
}

type IdpGroupMappingMap map[string]IdpGroupMappingInput

func (IdpGroupMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdpGroupMapping)(nil)).Elem()
}

func (i IdpGroupMappingMap) ToIdpGroupMappingMapOutput() IdpGroupMappingMapOutput {
	return i.ToIdpGroupMappingMapOutputWithContext(context.Background())
}

func (i IdpGroupMappingMap) ToIdpGroupMappingMapOutputWithContext(ctx context.Context) IdpGroupMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpGroupMappingMapOutput)
}

func (i IdpGroupMappingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IdpGroupMapping] {
	return pulumix.Output[map[string]*IdpGroupMapping]{
		OutputState: i.ToIdpGroupMappingMapOutputWithContext(ctx).OutputState,
	}
}

type IdpGroupMappingOutput struct{ *pulumi.OutputState }

func (IdpGroupMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpGroupMapping)(nil)).Elem()
}

func (o IdpGroupMappingOutput) ToIdpGroupMappingOutput() IdpGroupMappingOutput {
	return o
}

func (o IdpGroupMappingOutput) ToIdpGroupMappingOutputWithContext(ctx context.Context) IdpGroupMappingOutput {
	return o
}

func (o IdpGroupMappingOutput) ToOutput(ctx context.Context) pulumix.Output[*IdpGroupMapping] {
	return pulumix.Output[*IdpGroupMapping]{
		OutputState: o.OutputState,
	}
}

// Name of the user group - should be unique in one account
func (o IdpGroupMappingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpGroupMapping) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IdpGroupMappingOutput) Policies() IdpGroupMappingPolicyArrayOutput {
	return o.ApplyT(func(v *IdpGroupMapping) IdpGroupMappingPolicyArrayOutput { return v.Policies }).(IdpGroupMappingPolicyArrayOutput)
}

type IdpGroupMappingArrayOutput struct{ *pulumi.OutputState }

func (IdpGroupMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdpGroupMapping)(nil)).Elem()
}

func (o IdpGroupMappingArrayOutput) ToIdpGroupMappingArrayOutput() IdpGroupMappingArrayOutput {
	return o
}

func (o IdpGroupMappingArrayOutput) ToIdpGroupMappingArrayOutputWithContext(ctx context.Context) IdpGroupMappingArrayOutput {
	return o
}

func (o IdpGroupMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IdpGroupMapping] {
	return pulumix.Output[[]*IdpGroupMapping]{
		OutputState: o.OutputState,
	}
}

func (o IdpGroupMappingArrayOutput) Index(i pulumi.IntInput) IdpGroupMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdpGroupMapping {
		return vs[0].([]*IdpGroupMapping)[vs[1].(int)]
	}).(IdpGroupMappingOutput)
}

type IdpGroupMappingMapOutput struct{ *pulumi.OutputState }

func (IdpGroupMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdpGroupMapping)(nil)).Elem()
}

func (o IdpGroupMappingMapOutput) ToIdpGroupMappingMapOutput() IdpGroupMappingMapOutput {
	return o
}

func (o IdpGroupMappingMapOutput) ToIdpGroupMappingMapOutputWithContext(ctx context.Context) IdpGroupMappingMapOutput {
	return o
}

func (o IdpGroupMappingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IdpGroupMapping] {
	return pulumix.Output[map[string]*IdpGroupMapping]{
		OutputState: o.OutputState,
	}
}

func (o IdpGroupMappingMapOutput) MapIndex(k pulumi.StringInput) IdpGroupMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdpGroupMapping {
		return vs[0].(map[string]*IdpGroupMapping)[vs[1].(string)]
	}).(IdpGroupMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdpGroupMappingInput)(nil)).Elem(), &IdpGroupMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpGroupMappingArrayInput)(nil)).Elem(), IdpGroupMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpGroupMappingMapInput)(nil)).Elem(), IdpGroupMappingMap{})
	pulumi.RegisterOutputType(IdpGroupMappingOutput{})
	pulumi.RegisterOutputType(IdpGroupMappingArrayOutput{})
	pulumi.RegisterOutputType(IdpGroupMappingMapOutput{})
}
