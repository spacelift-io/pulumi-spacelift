// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// 	"github.com/spacelift-io/spacelift-spacelift/sdk/go/spacelift/"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := spacelift.NewStack(ctx, "core_infra_production", &spacelift.StackArgs{
// 			Name:       pulumi.String("Core Infrastructure (production)"),
// 			Branch:     pulumi.String("master"),
// 			Repository: pulumi.String("core-infra"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = spacelift.NewDriftDetection(ctx, "core_infra_production_drift_detection", &spacelift.DriftDetectionArgs{
// 			Reconcile: pulumi.Bool(true),
// 			StackId:   core_infra_production.ID(),
// 			Schedules: pulumi.StringArray{
// 				pulumi.String("*/15 * * * *"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// <!-- schema generated by tfplugindocs -->
// ## Schema
//
// ### Required
//
// - **schedule** (List of String) List of cron schedule expressions based on which drift detection should be triggered.
// - **stack_id** (String) ID of the stack for which to set up drift detection
//
// ### Optional
//
// - **id** (String) The ID of this resource.
// - **reconcile** (Boolean) Whether a tracked run should be triggered when drift is detected.
//
// ## Import
//
// Import is supported using the following syntax
//
// ```sh
//  $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection stack/$STACK_ID
// ```
//
// ```sh
//  $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection module/$MODULE_ID
// ```
type DriftDetection struct {
	pulumi.CustomResourceState

	// Whether a tracked run should be triggered when drift is detected.
	Reconcile pulumi.BoolPtrOutput `pulumi:"reconcile"`
	// List of cron schedule expressions based on which drift detection should be triggered.
	Schedules pulumi.StringArrayOutput `pulumi:"schedules"`
	// ID of the stack for which to set up drift detection
	StackId pulumi.StringOutput `pulumi:"stackId"`
}

// NewDriftDetection registers a new resource with the given unique name, arguments, and options.
func NewDriftDetection(ctx *pulumi.Context,
	name string, args *DriftDetectionArgs, opts ...pulumi.ResourceOption) (*DriftDetection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Schedules == nil {
		return nil, errors.New("invalid value for required argument 'Schedules'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	var resource DriftDetection
	err := ctx.RegisterResource("spacelift:index/driftDetection:DriftDetection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDriftDetection gets an existing DriftDetection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDriftDetection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DriftDetectionState, opts ...pulumi.ResourceOption) (*DriftDetection, error) {
	var resource DriftDetection
	err := ctx.ReadResource("spacelift:index/driftDetection:DriftDetection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DriftDetection resources.
type driftDetectionState struct {
	// Whether a tracked run should be triggered when drift is detected.
	Reconcile *bool `pulumi:"reconcile"`
	// List of cron schedule expressions based on which drift detection should be triggered.
	Schedules []string `pulumi:"schedules"`
	// ID of the stack for which to set up drift detection
	StackId *string `pulumi:"stackId"`
}

type DriftDetectionState struct {
	// Whether a tracked run should be triggered when drift is detected.
	Reconcile pulumi.BoolPtrInput
	// List of cron schedule expressions based on which drift detection should be triggered.
	Schedules pulumi.StringArrayInput
	// ID of the stack for which to set up drift detection
	StackId pulumi.StringPtrInput
}

func (DriftDetectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*driftDetectionState)(nil)).Elem()
}

type driftDetectionArgs struct {
	// Whether a tracked run should be triggered when drift is detected.
	Reconcile *bool `pulumi:"reconcile"`
	// List of cron schedule expressions based on which drift detection should be triggered.
	Schedules []string `pulumi:"schedules"`
	// ID of the stack for which to set up drift detection
	StackId string `pulumi:"stackId"`
}

// The set of arguments for constructing a DriftDetection resource.
type DriftDetectionArgs struct {
	// Whether a tracked run should be triggered when drift is detected.
	Reconcile pulumi.BoolPtrInput
	// List of cron schedule expressions based on which drift detection should be triggered.
	Schedules pulumi.StringArrayInput
	// ID of the stack for which to set up drift detection
	StackId pulumi.StringInput
}

func (DriftDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*driftDetectionArgs)(nil)).Elem()
}

type DriftDetectionInput interface {
	pulumi.Input

	ToDriftDetectionOutput() DriftDetectionOutput
	ToDriftDetectionOutputWithContext(ctx context.Context) DriftDetectionOutput
}

func (*DriftDetection) ElementType() reflect.Type {
	return reflect.TypeOf((*DriftDetection)(nil))
}

func (i *DriftDetection) ToDriftDetectionOutput() DriftDetectionOutput {
	return i.ToDriftDetectionOutputWithContext(context.Background())
}

func (i *DriftDetection) ToDriftDetectionOutputWithContext(ctx context.Context) DriftDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriftDetectionOutput)
}

type DriftDetectionOutput struct {
	*pulumi.OutputState
}

func (DriftDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DriftDetection)(nil))
}

func (o DriftDetectionOutput) ToDriftDetectionOutput() DriftDetectionOutput {
	return o
}

func (o DriftDetectionOutput) ToDriftDetectionOutputWithContext(ctx context.Context) DriftDetectionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DriftDetectionOutput{})
}
