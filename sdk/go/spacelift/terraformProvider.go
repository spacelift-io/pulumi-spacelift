// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewTerraformProvider(ctx, "datadog", &spacelift.TerraformProviderArgs{
//				Description: pulumi.String("Our fork of the Datadog provider"),
//				Labels: pulumi.StringArray{
//					pulumi.String("fork"),
//				},
//				Public:  pulumi.Bool(false),
//				SpaceId: pulumi.String("root"),
//				Type:    pulumi.String("datadog"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TerraformProvider struct {
	pulumi.CustomResourceState

	// Free-form description for human users, supports Markdown
	Description pulumi.StringPtrOutput   `pulumi:"description"`
	Labels      pulumi.StringArrayOutput `pulumi:"labels"`
	// Whether the provider is public or not, defaults to false (private)
	Public pulumi.BoolPtrOutput `pulumi:"public"`
	// ID (slug) of the space the provider is in
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
	// Type of the provider - should be unique in one account
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTerraformProvider registers a new resource with the given unique name, arguments, and options.
func NewTerraformProvider(ctx *pulumi.Context,
	name string, args *TerraformProviderArgs, opts ...pulumi.ResourceOption) (*TerraformProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SpaceId == nil {
		return nil, errors.New("invalid value for required argument 'SpaceId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TerraformProvider
	err := ctx.RegisterResource("spacelift:index/terraformProvider:TerraformProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTerraformProvider gets an existing TerraformProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTerraformProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TerraformProviderState, opts ...pulumi.ResourceOption) (*TerraformProvider, error) {
	var resource TerraformProvider
	err := ctx.ReadResource("spacelift:index/terraformProvider:TerraformProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TerraformProvider resources.
type terraformProviderState struct {
	// Free-form description for human users, supports Markdown
	Description *string  `pulumi:"description"`
	Labels      []string `pulumi:"labels"`
	// Whether the provider is public or not, defaults to false (private)
	Public *bool `pulumi:"public"`
	// ID (slug) of the space the provider is in
	SpaceId *string `pulumi:"spaceId"`
	// Type of the provider - should be unique in one account
	Type *string `pulumi:"type"`
}

type TerraformProviderState struct {
	// Free-form description for human users, supports Markdown
	Description pulumi.StringPtrInput
	Labels      pulumi.StringArrayInput
	// Whether the provider is public or not, defaults to false (private)
	Public pulumi.BoolPtrInput
	// ID (slug) of the space the provider is in
	SpaceId pulumi.StringPtrInput
	// Type of the provider - should be unique in one account
	Type pulumi.StringPtrInput
}

func (TerraformProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*terraformProviderState)(nil)).Elem()
}

type terraformProviderArgs struct {
	// Free-form description for human users, supports Markdown
	Description *string  `pulumi:"description"`
	Labels      []string `pulumi:"labels"`
	// Whether the provider is public or not, defaults to false (private)
	Public *bool `pulumi:"public"`
	// ID (slug) of the space the provider is in
	SpaceId string `pulumi:"spaceId"`
	// Type of the provider - should be unique in one account
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a TerraformProvider resource.
type TerraformProviderArgs struct {
	// Free-form description for human users, supports Markdown
	Description pulumi.StringPtrInput
	Labels      pulumi.StringArrayInput
	// Whether the provider is public or not, defaults to false (private)
	Public pulumi.BoolPtrInput
	// ID (slug) of the space the provider is in
	SpaceId pulumi.StringInput
	// Type of the provider - should be unique in one account
	Type pulumi.StringInput
}

func (TerraformProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*terraformProviderArgs)(nil)).Elem()
}

type TerraformProviderInput interface {
	pulumi.Input

	ToTerraformProviderOutput() TerraformProviderOutput
	ToTerraformProviderOutputWithContext(ctx context.Context) TerraformProviderOutput
}

func (*TerraformProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**TerraformProvider)(nil)).Elem()
}

func (i *TerraformProvider) ToTerraformProviderOutput() TerraformProviderOutput {
	return i.ToTerraformProviderOutputWithContext(context.Background())
}

func (i *TerraformProvider) ToTerraformProviderOutputWithContext(ctx context.Context) TerraformProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerraformProviderOutput)
}

func (i *TerraformProvider) ToOutput(ctx context.Context) pulumix.Output[*TerraformProvider] {
	return pulumix.Output[*TerraformProvider]{
		OutputState: i.ToTerraformProviderOutputWithContext(ctx).OutputState,
	}
}

// TerraformProviderArrayInput is an input type that accepts TerraformProviderArray and TerraformProviderArrayOutput values.
// You can construct a concrete instance of `TerraformProviderArrayInput` via:
//
//	TerraformProviderArray{ TerraformProviderArgs{...} }
type TerraformProviderArrayInput interface {
	pulumi.Input

	ToTerraformProviderArrayOutput() TerraformProviderArrayOutput
	ToTerraformProviderArrayOutputWithContext(context.Context) TerraformProviderArrayOutput
}

type TerraformProviderArray []TerraformProviderInput

func (TerraformProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TerraformProvider)(nil)).Elem()
}

func (i TerraformProviderArray) ToTerraformProviderArrayOutput() TerraformProviderArrayOutput {
	return i.ToTerraformProviderArrayOutputWithContext(context.Background())
}

func (i TerraformProviderArray) ToTerraformProviderArrayOutputWithContext(ctx context.Context) TerraformProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerraformProviderArrayOutput)
}

func (i TerraformProviderArray) ToOutput(ctx context.Context) pulumix.Output[[]*TerraformProvider] {
	return pulumix.Output[[]*TerraformProvider]{
		OutputState: i.ToTerraformProviderArrayOutputWithContext(ctx).OutputState,
	}
}

// TerraformProviderMapInput is an input type that accepts TerraformProviderMap and TerraformProviderMapOutput values.
// You can construct a concrete instance of `TerraformProviderMapInput` via:
//
//	TerraformProviderMap{ "key": TerraformProviderArgs{...} }
type TerraformProviderMapInput interface {
	pulumi.Input

	ToTerraformProviderMapOutput() TerraformProviderMapOutput
	ToTerraformProviderMapOutputWithContext(context.Context) TerraformProviderMapOutput
}

type TerraformProviderMap map[string]TerraformProviderInput

func (TerraformProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TerraformProvider)(nil)).Elem()
}

func (i TerraformProviderMap) ToTerraformProviderMapOutput() TerraformProviderMapOutput {
	return i.ToTerraformProviderMapOutputWithContext(context.Background())
}

func (i TerraformProviderMap) ToTerraformProviderMapOutputWithContext(ctx context.Context) TerraformProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerraformProviderMapOutput)
}

func (i TerraformProviderMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TerraformProvider] {
	return pulumix.Output[map[string]*TerraformProvider]{
		OutputState: i.ToTerraformProviderMapOutputWithContext(ctx).OutputState,
	}
}

type TerraformProviderOutput struct{ *pulumi.OutputState }

func (TerraformProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TerraformProvider)(nil)).Elem()
}

func (o TerraformProviderOutput) ToTerraformProviderOutput() TerraformProviderOutput {
	return o
}

func (o TerraformProviderOutput) ToTerraformProviderOutputWithContext(ctx context.Context) TerraformProviderOutput {
	return o
}

func (o TerraformProviderOutput) ToOutput(ctx context.Context) pulumix.Output[*TerraformProvider] {
	return pulumix.Output[*TerraformProvider]{
		OutputState: o.OutputState,
	}
}

// Free-form description for human users, supports Markdown
func (o TerraformProviderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TerraformProvider) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TerraformProviderOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TerraformProvider) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// Whether the provider is public or not, defaults to false (private)
func (o TerraformProviderOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TerraformProvider) pulumi.BoolPtrOutput { return v.Public }).(pulumi.BoolPtrOutput)
}

// ID (slug) of the space the provider is in
func (o TerraformProviderOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TerraformProvider) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

// Type of the provider - should be unique in one account
func (o TerraformProviderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TerraformProvider) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type TerraformProviderArrayOutput struct{ *pulumi.OutputState }

func (TerraformProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TerraformProvider)(nil)).Elem()
}

func (o TerraformProviderArrayOutput) ToTerraformProviderArrayOutput() TerraformProviderArrayOutput {
	return o
}

func (o TerraformProviderArrayOutput) ToTerraformProviderArrayOutputWithContext(ctx context.Context) TerraformProviderArrayOutput {
	return o
}

func (o TerraformProviderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TerraformProvider] {
	return pulumix.Output[[]*TerraformProvider]{
		OutputState: o.OutputState,
	}
}

func (o TerraformProviderArrayOutput) Index(i pulumi.IntInput) TerraformProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TerraformProvider {
		return vs[0].([]*TerraformProvider)[vs[1].(int)]
	}).(TerraformProviderOutput)
}

type TerraformProviderMapOutput struct{ *pulumi.OutputState }

func (TerraformProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TerraformProvider)(nil)).Elem()
}

func (o TerraformProviderMapOutput) ToTerraformProviderMapOutput() TerraformProviderMapOutput {
	return o
}

func (o TerraformProviderMapOutput) ToTerraformProviderMapOutputWithContext(ctx context.Context) TerraformProviderMapOutput {
	return o
}

func (o TerraformProviderMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TerraformProvider] {
	return pulumix.Output[map[string]*TerraformProvider]{
		OutputState: o.OutputState,
	}
}

func (o TerraformProviderMapOutput) MapIndex(k pulumi.StringInput) TerraformProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TerraformProvider {
		return vs[0].(map[string]*TerraformProvider)[vs[1].(string)]
	}).(TerraformProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TerraformProviderInput)(nil)).Elem(), &TerraformProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*TerraformProviderArrayInput)(nil)).Elem(), TerraformProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TerraformProviderMapInput)(nil)).Elem(), TerraformProviderMap{})
	pulumi.RegisterOutputType(TerraformProviderOutput{})
	pulumi.RegisterOutputType(TerraformProviderArrayOutput{})
	pulumi.RegisterOutputType(TerraformProviderMapOutput{})
}
