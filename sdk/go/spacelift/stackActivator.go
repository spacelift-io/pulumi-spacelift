// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `StackActivator` is used to to enable/disable Spacelift Stack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			app, err := spacelift.NewStack(ctx, "app", &spacelift.StackArgs{
//				Branch:     pulumi.String("master"),
//				Repository: pulumi.String("app"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStackActivator(ctx, "test", &spacelift.StackActivatorArgs{
//				Enabled: pulumi.Bool(true),
//				StackId: app.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StackActivator struct {
	pulumi.CustomResourceState

	// Enable/disable stack
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// ID of the stack to enable/disable
	StackId pulumi.StringOutput `pulumi:"stackId"`
}

// NewStackActivator registers a new resource with the given unique name, arguments, and options.
func NewStackActivator(ctx *pulumi.Context,
	name string, args *StackActivatorArgs, opts ...pulumi.ResourceOption) (*StackActivator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StackActivator
	err := ctx.RegisterResource("spacelift:index/stackActivator:StackActivator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackActivator gets an existing StackActivator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackActivator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackActivatorState, opts ...pulumi.ResourceOption) (*StackActivator, error) {
	var resource StackActivator
	err := ctx.ReadResource("spacelift:index/stackActivator:StackActivator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackActivator resources.
type stackActivatorState struct {
	// Enable/disable stack
	Enabled *bool `pulumi:"enabled"`
	// ID of the stack to enable/disable
	StackId *string `pulumi:"stackId"`
}

type StackActivatorState struct {
	// Enable/disable stack
	Enabled pulumi.BoolPtrInput
	// ID of the stack to enable/disable
	StackId pulumi.StringPtrInput
}

func (StackActivatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackActivatorState)(nil)).Elem()
}

type stackActivatorArgs struct {
	// Enable/disable stack
	Enabled bool `pulumi:"enabled"`
	// ID of the stack to enable/disable
	StackId string `pulumi:"stackId"`
}

// The set of arguments for constructing a StackActivator resource.
type StackActivatorArgs struct {
	// Enable/disable stack
	Enabled pulumi.BoolInput
	// ID of the stack to enable/disable
	StackId pulumi.StringInput
}

func (StackActivatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackActivatorArgs)(nil)).Elem()
}

type StackActivatorInput interface {
	pulumi.Input

	ToStackActivatorOutput() StackActivatorOutput
	ToStackActivatorOutputWithContext(ctx context.Context) StackActivatorOutput
}

func (*StackActivator) ElementType() reflect.Type {
	return reflect.TypeOf((**StackActivator)(nil)).Elem()
}

func (i *StackActivator) ToStackActivatorOutput() StackActivatorOutput {
	return i.ToStackActivatorOutputWithContext(context.Background())
}

func (i *StackActivator) ToStackActivatorOutputWithContext(ctx context.Context) StackActivatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackActivatorOutput)
}

// StackActivatorArrayInput is an input type that accepts StackActivatorArray and StackActivatorArrayOutput values.
// You can construct a concrete instance of `StackActivatorArrayInput` via:
//
//	StackActivatorArray{ StackActivatorArgs{...} }
type StackActivatorArrayInput interface {
	pulumi.Input

	ToStackActivatorArrayOutput() StackActivatorArrayOutput
	ToStackActivatorArrayOutputWithContext(context.Context) StackActivatorArrayOutput
}

type StackActivatorArray []StackActivatorInput

func (StackActivatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackActivator)(nil)).Elem()
}

func (i StackActivatorArray) ToStackActivatorArrayOutput() StackActivatorArrayOutput {
	return i.ToStackActivatorArrayOutputWithContext(context.Background())
}

func (i StackActivatorArray) ToStackActivatorArrayOutputWithContext(ctx context.Context) StackActivatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackActivatorArrayOutput)
}

// StackActivatorMapInput is an input type that accepts StackActivatorMap and StackActivatorMapOutput values.
// You can construct a concrete instance of `StackActivatorMapInput` via:
//
//	StackActivatorMap{ "key": StackActivatorArgs{...} }
type StackActivatorMapInput interface {
	pulumi.Input

	ToStackActivatorMapOutput() StackActivatorMapOutput
	ToStackActivatorMapOutputWithContext(context.Context) StackActivatorMapOutput
}

type StackActivatorMap map[string]StackActivatorInput

func (StackActivatorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackActivator)(nil)).Elem()
}

func (i StackActivatorMap) ToStackActivatorMapOutput() StackActivatorMapOutput {
	return i.ToStackActivatorMapOutputWithContext(context.Background())
}

func (i StackActivatorMap) ToStackActivatorMapOutputWithContext(ctx context.Context) StackActivatorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackActivatorMapOutput)
}

type StackActivatorOutput struct{ *pulumi.OutputState }

func (StackActivatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackActivator)(nil)).Elem()
}

func (o StackActivatorOutput) ToStackActivatorOutput() StackActivatorOutput {
	return o
}

func (o StackActivatorOutput) ToStackActivatorOutputWithContext(ctx context.Context) StackActivatorOutput {
	return o
}

// Enable/disable stack
func (o StackActivatorOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *StackActivator) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// ID of the stack to enable/disable
func (o StackActivatorOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *StackActivator) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

type StackActivatorArrayOutput struct{ *pulumi.OutputState }

func (StackActivatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackActivator)(nil)).Elem()
}

func (o StackActivatorArrayOutput) ToStackActivatorArrayOutput() StackActivatorArrayOutput {
	return o
}

func (o StackActivatorArrayOutput) ToStackActivatorArrayOutputWithContext(ctx context.Context) StackActivatorArrayOutput {
	return o
}

func (o StackActivatorArrayOutput) Index(i pulumi.IntInput) StackActivatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackActivator {
		return vs[0].([]*StackActivator)[vs[1].(int)]
	}).(StackActivatorOutput)
}

type StackActivatorMapOutput struct{ *pulumi.OutputState }

func (StackActivatorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackActivator)(nil)).Elem()
}

func (o StackActivatorMapOutput) ToStackActivatorMapOutput() StackActivatorMapOutput {
	return o
}

func (o StackActivatorMapOutput) ToStackActivatorMapOutputWithContext(ctx context.Context) StackActivatorMapOutput {
	return o
}

func (o StackActivatorMapOutput) MapIndex(k pulumi.StringInput) StackActivatorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackActivator {
		return vs[0].(map[string]*StackActivator)[vs[1].(string)]
	}).(StackActivatorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackActivatorInput)(nil)).Elem(), &StackActivator{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackActivatorArrayInput)(nil)).Elem(), StackActivatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackActivatorMapInput)(nil)).Elem(), StackActivatorMap{})
	pulumi.RegisterOutputType(StackActivatorOutput{})
	pulumi.RegisterOutputType(StackActivatorArrayOutput{})
	pulumi.RegisterOutputType(StackActivatorMapOutput{})
}
