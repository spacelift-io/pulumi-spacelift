// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `Version` allows to programmatically trigger a version creation in response to arbitrary changes in the keepers section.
type Version struct {
	pulumi.CustomResourceState

	// The commit SHA for which to trigger a version.
	CommitSha pulumi.StringPtrOutput `pulumi:"commitSha"`
	// Arbitrary map of values that, when changed, will trigger recreation of the resource.
	Keepers pulumi.MapOutput `pulumi:"keepers"`
	// ID of the module on which the version creation is to be triggered.
	ModuleId pulumi.StringOutput `pulumi:"moduleId"`
	// A semantic version number to set for the triggered version, example: 0.11.2
	VersionNumber pulumi.StringPtrOutput `pulumi:"versionNumber"`
}

// NewVersion registers a new resource with the given unique name, arguments, and options.
func NewVersion(ctx *pulumi.Context,
	name string, args *VersionArgs, opts ...pulumi.ResourceOption) (*Version, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModuleId == nil {
		return nil, errors.New("invalid value for required argument 'ModuleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Version
	err := ctx.RegisterResource("spacelift:index/version:Version", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVersion gets an existing Version resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VersionState, opts ...pulumi.ResourceOption) (*Version, error) {
	var resource Version
	err := ctx.ReadResource("spacelift:index/version:Version", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Version resources.
type versionState struct {
	// The commit SHA for which to trigger a version.
	CommitSha *string `pulumi:"commitSha"`
	// Arbitrary map of values that, when changed, will trigger recreation of the resource.
	Keepers map[string]interface{} `pulumi:"keepers"`
	// ID of the module on which the version creation is to be triggered.
	ModuleId *string `pulumi:"moduleId"`
	// A semantic version number to set for the triggered version, example: 0.11.2
	VersionNumber *string `pulumi:"versionNumber"`
}

type VersionState struct {
	// The commit SHA for which to trigger a version.
	CommitSha pulumi.StringPtrInput
	// Arbitrary map of values that, when changed, will trigger recreation of the resource.
	Keepers pulumi.MapInput
	// ID of the module on which the version creation is to be triggered.
	ModuleId pulumi.StringPtrInput
	// A semantic version number to set for the triggered version, example: 0.11.2
	VersionNumber pulumi.StringPtrInput
}

func (VersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*versionState)(nil)).Elem()
}

type versionArgs struct {
	// The commit SHA for which to trigger a version.
	CommitSha *string `pulumi:"commitSha"`
	// Arbitrary map of values that, when changed, will trigger recreation of the resource.
	Keepers map[string]interface{} `pulumi:"keepers"`
	// ID of the module on which the version creation is to be triggered.
	ModuleId string `pulumi:"moduleId"`
	// A semantic version number to set for the triggered version, example: 0.11.2
	VersionNumber *string `pulumi:"versionNumber"`
}

// The set of arguments for constructing a Version resource.
type VersionArgs struct {
	// The commit SHA for which to trigger a version.
	CommitSha pulumi.StringPtrInput
	// Arbitrary map of values that, when changed, will trigger recreation of the resource.
	Keepers pulumi.MapInput
	// ID of the module on which the version creation is to be triggered.
	ModuleId pulumi.StringInput
	// A semantic version number to set for the triggered version, example: 0.11.2
	VersionNumber pulumi.StringPtrInput
}

func (VersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*versionArgs)(nil)).Elem()
}

type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(ctx context.Context) VersionOutput
}

func (*Version) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (i *Version) ToVersionOutput() VersionOutput {
	return i.ToVersionOutputWithContext(context.Background())
}

func (i *Version) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput)
}

func (i *Version) ToOutput(ctx context.Context) pulumix.Output[*Version] {
	return pulumix.Output[*Version]{
		OutputState: i.ToVersionOutputWithContext(ctx).OutputState,
	}
}

// VersionArrayInput is an input type that accepts VersionArray and VersionArrayOutput values.
// You can construct a concrete instance of `VersionArrayInput` via:
//
//	VersionArray{ VersionArgs{...} }
type VersionArrayInput interface {
	pulumi.Input

	ToVersionArrayOutput() VersionArrayOutput
	ToVersionArrayOutputWithContext(context.Context) VersionArrayOutput
}

type VersionArray []VersionInput

func (VersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Version)(nil)).Elem()
}

func (i VersionArray) ToVersionArrayOutput() VersionArrayOutput {
	return i.ToVersionArrayOutputWithContext(context.Background())
}

func (i VersionArray) ToVersionArrayOutputWithContext(ctx context.Context) VersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionArrayOutput)
}

func (i VersionArray) ToOutput(ctx context.Context) pulumix.Output[[]*Version] {
	return pulumix.Output[[]*Version]{
		OutputState: i.ToVersionArrayOutputWithContext(ctx).OutputState,
	}
}

// VersionMapInput is an input type that accepts VersionMap and VersionMapOutput values.
// You can construct a concrete instance of `VersionMapInput` via:
//
//	VersionMap{ "key": VersionArgs{...} }
type VersionMapInput interface {
	pulumi.Input

	ToVersionMapOutput() VersionMapOutput
	ToVersionMapOutputWithContext(context.Context) VersionMapOutput
}

type VersionMap map[string]VersionInput

func (VersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Version)(nil)).Elem()
}

func (i VersionMap) ToVersionMapOutput() VersionMapOutput {
	return i.ToVersionMapOutputWithContext(context.Background())
}

func (i VersionMap) ToVersionMapOutputWithContext(ctx context.Context) VersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionMapOutput)
}

func (i VersionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Version] {
	return pulumix.Output[map[string]*Version]{
		OutputState: i.ToVersionMapOutputWithContext(ctx).OutputState,
	}
}

type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

func (o VersionOutput) ToOutput(ctx context.Context) pulumix.Output[*Version] {
	return pulumix.Output[*Version]{
		OutputState: o.OutputState,
	}
}

// The commit SHA for which to trigger a version.
func (o VersionOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) pulumi.StringPtrOutput { return v.CommitSha }).(pulumi.StringPtrOutput)
}

// Arbitrary map of values that, when changed, will trigger recreation of the resource.
func (o VersionOutput) Keepers() pulumi.MapOutput {
	return o.ApplyT(func(v *Version) pulumi.MapOutput { return v.Keepers }).(pulumi.MapOutput)
}

// ID of the module on which the version creation is to be triggered.
func (o VersionOutput) ModuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.ModuleId }).(pulumi.StringOutput)
}

// A semantic version number to set for the triggered version, example: 0.11.2
func (o VersionOutput) VersionNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) pulumi.StringPtrOutput { return v.VersionNumber }).(pulumi.StringPtrOutput)
}

type VersionArrayOutput struct{ *pulumi.OutputState }

func (VersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Version)(nil)).Elem()
}

func (o VersionArrayOutput) ToVersionArrayOutput() VersionArrayOutput {
	return o
}

func (o VersionArrayOutput) ToVersionArrayOutputWithContext(ctx context.Context) VersionArrayOutput {
	return o
}

func (o VersionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Version] {
	return pulumix.Output[[]*Version]{
		OutputState: o.OutputState,
	}
}

func (o VersionArrayOutput) Index(i pulumi.IntInput) VersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Version {
		return vs[0].([]*Version)[vs[1].(int)]
	}).(VersionOutput)
}

type VersionMapOutput struct{ *pulumi.OutputState }

func (VersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Version)(nil)).Elem()
}

func (o VersionMapOutput) ToVersionMapOutput() VersionMapOutput {
	return o
}

func (o VersionMapOutput) ToVersionMapOutputWithContext(ctx context.Context) VersionMapOutput {
	return o
}

func (o VersionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Version] {
	return pulumix.Output[map[string]*Version]{
		OutputState: o.OutputState,
	}
}

func (o VersionMapOutput) MapIndex(k pulumi.StringInput) VersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Version {
		return vs[0].(map[string]*Version)[vs[1].(string)]
	}).(VersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VersionInput)(nil)).Elem(), &Version{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionArrayInput)(nil)).Elem(), VersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionMapInput)(nil)).Elem(), VersionMap{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionArrayOutput{})
	pulumi.RegisterOutputType(VersionMapOutput{})
}
