// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `StackDependencyReference` represents a Spacelift **stack dependency reference** - a reference matches a stack's output to another stack's input. It is similar to an environment variable (`EnvironmentVariable`), except that value is provided by another stack's output.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			infra, err := spacelift.NewStack(ctx, "infra", &spacelift.StackArgs{
//				Branch:     pulumi.String("master"),
//				Repository: pulumi.String("core-infra"),
//			})
//			if err != nil {
//				return err
//			}
//			app, err := spacelift.NewStack(ctx, "app", &spacelift.StackArgs{
//				Branch:     pulumi.String("master"),
//				Repository: pulumi.String("app"),
//			})
//			if err != nil {
//				return err
//			}
//			testStackDependency, err := spacelift.NewStackDependency(ctx, "testStackDependency", &spacelift.StackDependencyArgs{
//				StackId:          app.ID(),
//				DependsOnStackId: infra.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStackDependencyReference(ctx, "testStackDependencyReference", &spacelift.StackDependencyReferenceArgs{
//				StackDependencyId: testStackDependency.ID(),
//				OutputName:        pulumi.String("DB_CONNECTION_STRING"),
//				InputName:         pulumi.String("APP_DB_URL"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StackDependencyReference struct {
	pulumi.CustomResourceState

	// Name of the input of the stack dependency reference
	InputName pulumi.StringOutput `pulumi:"inputName"`
	// Name of the output of stack to depend on
	OutputName pulumi.StringOutput `pulumi:"outputName"`
	// Immutable ID of stack dependency
	StackDependencyId pulumi.StringOutput `pulumi:"stackDependencyId"`
}

// NewStackDependencyReference registers a new resource with the given unique name, arguments, and options.
func NewStackDependencyReference(ctx *pulumi.Context,
	name string, args *StackDependencyReferenceArgs, opts ...pulumi.ResourceOption) (*StackDependencyReference, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InputName == nil {
		return nil, errors.New("invalid value for required argument 'InputName'")
	}
	if args.OutputName == nil {
		return nil, errors.New("invalid value for required argument 'OutputName'")
	}
	if args.StackDependencyId == nil {
		return nil, errors.New("invalid value for required argument 'StackDependencyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StackDependencyReference
	err := ctx.RegisterResource("spacelift:index/stackDependencyReference:StackDependencyReference", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackDependencyReference gets an existing StackDependencyReference resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackDependencyReference(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackDependencyReferenceState, opts ...pulumi.ResourceOption) (*StackDependencyReference, error) {
	var resource StackDependencyReference
	err := ctx.ReadResource("spacelift:index/stackDependencyReference:StackDependencyReference", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackDependencyReference resources.
type stackDependencyReferenceState struct {
	// Name of the input of the stack dependency reference
	InputName *string `pulumi:"inputName"`
	// Name of the output of stack to depend on
	OutputName *string `pulumi:"outputName"`
	// Immutable ID of stack dependency
	StackDependencyId *string `pulumi:"stackDependencyId"`
}

type StackDependencyReferenceState struct {
	// Name of the input of the stack dependency reference
	InputName pulumi.StringPtrInput
	// Name of the output of stack to depend on
	OutputName pulumi.StringPtrInput
	// Immutable ID of stack dependency
	StackDependencyId pulumi.StringPtrInput
}

func (StackDependencyReferenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackDependencyReferenceState)(nil)).Elem()
}

type stackDependencyReferenceArgs struct {
	// Name of the input of the stack dependency reference
	InputName string `pulumi:"inputName"`
	// Name of the output of stack to depend on
	OutputName string `pulumi:"outputName"`
	// Immutable ID of stack dependency
	StackDependencyId string `pulumi:"stackDependencyId"`
}

// The set of arguments for constructing a StackDependencyReference resource.
type StackDependencyReferenceArgs struct {
	// Name of the input of the stack dependency reference
	InputName pulumi.StringInput
	// Name of the output of stack to depend on
	OutputName pulumi.StringInput
	// Immutable ID of stack dependency
	StackDependencyId pulumi.StringInput
}

func (StackDependencyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackDependencyReferenceArgs)(nil)).Elem()
}

type StackDependencyReferenceInput interface {
	pulumi.Input

	ToStackDependencyReferenceOutput() StackDependencyReferenceOutput
	ToStackDependencyReferenceOutputWithContext(ctx context.Context) StackDependencyReferenceOutput
}

func (*StackDependencyReference) ElementType() reflect.Type {
	return reflect.TypeOf((**StackDependencyReference)(nil)).Elem()
}

func (i *StackDependencyReference) ToStackDependencyReferenceOutput() StackDependencyReferenceOutput {
	return i.ToStackDependencyReferenceOutputWithContext(context.Background())
}

func (i *StackDependencyReference) ToStackDependencyReferenceOutputWithContext(ctx context.Context) StackDependencyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackDependencyReferenceOutput)
}

// StackDependencyReferenceArrayInput is an input type that accepts StackDependencyReferenceArray and StackDependencyReferenceArrayOutput values.
// You can construct a concrete instance of `StackDependencyReferenceArrayInput` via:
//
//	StackDependencyReferenceArray{ StackDependencyReferenceArgs{...} }
type StackDependencyReferenceArrayInput interface {
	pulumi.Input

	ToStackDependencyReferenceArrayOutput() StackDependencyReferenceArrayOutput
	ToStackDependencyReferenceArrayOutputWithContext(context.Context) StackDependencyReferenceArrayOutput
}

type StackDependencyReferenceArray []StackDependencyReferenceInput

func (StackDependencyReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackDependencyReference)(nil)).Elem()
}

func (i StackDependencyReferenceArray) ToStackDependencyReferenceArrayOutput() StackDependencyReferenceArrayOutput {
	return i.ToStackDependencyReferenceArrayOutputWithContext(context.Background())
}

func (i StackDependencyReferenceArray) ToStackDependencyReferenceArrayOutputWithContext(ctx context.Context) StackDependencyReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackDependencyReferenceArrayOutput)
}

// StackDependencyReferenceMapInput is an input type that accepts StackDependencyReferenceMap and StackDependencyReferenceMapOutput values.
// You can construct a concrete instance of `StackDependencyReferenceMapInput` via:
//
//	StackDependencyReferenceMap{ "key": StackDependencyReferenceArgs{...} }
type StackDependencyReferenceMapInput interface {
	pulumi.Input

	ToStackDependencyReferenceMapOutput() StackDependencyReferenceMapOutput
	ToStackDependencyReferenceMapOutputWithContext(context.Context) StackDependencyReferenceMapOutput
}

type StackDependencyReferenceMap map[string]StackDependencyReferenceInput

func (StackDependencyReferenceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackDependencyReference)(nil)).Elem()
}

func (i StackDependencyReferenceMap) ToStackDependencyReferenceMapOutput() StackDependencyReferenceMapOutput {
	return i.ToStackDependencyReferenceMapOutputWithContext(context.Background())
}

func (i StackDependencyReferenceMap) ToStackDependencyReferenceMapOutputWithContext(ctx context.Context) StackDependencyReferenceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackDependencyReferenceMapOutput)
}

type StackDependencyReferenceOutput struct{ *pulumi.OutputState }

func (StackDependencyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackDependencyReference)(nil)).Elem()
}

func (o StackDependencyReferenceOutput) ToStackDependencyReferenceOutput() StackDependencyReferenceOutput {
	return o
}

func (o StackDependencyReferenceOutput) ToStackDependencyReferenceOutputWithContext(ctx context.Context) StackDependencyReferenceOutput {
	return o
}

// Name of the input of the stack dependency reference
func (o StackDependencyReferenceOutput) InputName() pulumi.StringOutput {
	return o.ApplyT(func(v *StackDependencyReference) pulumi.StringOutput { return v.InputName }).(pulumi.StringOutput)
}

// Name of the output of stack to depend on
func (o StackDependencyReferenceOutput) OutputName() pulumi.StringOutput {
	return o.ApplyT(func(v *StackDependencyReference) pulumi.StringOutput { return v.OutputName }).(pulumi.StringOutput)
}

// Immutable ID of stack dependency
func (o StackDependencyReferenceOutput) StackDependencyId() pulumi.StringOutput {
	return o.ApplyT(func(v *StackDependencyReference) pulumi.StringOutput { return v.StackDependencyId }).(pulumi.StringOutput)
}

type StackDependencyReferenceArrayOutput struct{ *pulumi.OutputState }

func (StackDependencyReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackDependencyReference)(nil)).Elem()
}

func (o StackDependencyReferenceArrayOutput) ToStackDependencyReferenceArrayOutput() StackDependencyReferenceArrayOutput {
	return o
}

func (o StackDependencyReferenceArrayOutput) ToStackDependencyReferenceArrayOutputWithContext(ctx context.Context) StackDependencyReferenceArrayOutput {
	return o
}

func (o StackDependencyReferenceArrayOutput) Index(i pulumi.IntInput) StackDependencyReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackDependencyReference {
		return vs[0].([]*StackDependencyReference)[vs[1].(int)]
	}).(StackDependencyReferenceOutput)
}

type StackDependencyReferenceMapOutput struct{ *pulumi.OutputState }

func (StackDependencyReferenceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackDependencyReference)(nil)).Elem()
}

func (o StackDependencyReferenceMapOutput) ToStackDependencyReferenceMapOutput() StackDependencyReferenceMapOutput {
	return o
}

func (o StackDependencyReferenceMapOutput) ToStackDependencyReferenceMapOutputWithContext(ctx context.Context) StackDependencyReferenceMapOutput {
	return o
}

func (o StackDependencyReferenceMapOutput) MapIndex(k pulumi.StringInput) StackDependencyReferenceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackDependencyReference {
		return vs[0].(map[string]*StackDependencyReference)[vs[1].(string)]
	}).(StackDependencyReferenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackDependencyReferenceInput)(nil)).Elem(), &StackDependencyReference{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackDependencyReferenceArrayInput)(nil)).Elem(), StackDependencyReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackDependencyReferenceMapInput)(nil)).Elem(), StackDependencyReferenceMap{})
	pulumi.RegisterOutputType(StackDependencyReferenceOutput{})
	pulumi.RegisterOutputType(StackDependencyReferenceArrayOutput{})
	pulumi.RegisterOutputType(StackDependencyReferenceMapOutput{})
}
