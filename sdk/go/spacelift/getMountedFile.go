// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `MountedFile` represents a file mounted in each Run's workspace that is part of a configuration of a context (`Context`), stack (`Stack`) or a module (`Module`). In principle, it's very similar to an environment variable (`EnvironmentVariable`) except that the value is written to the filesystem rather than passed to the environment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spacelift/sdk/go/spacelift"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// 	"github.com/spacelift-io/spacelift-spacelift/sdk/go/spacelift/"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "prod-k8s-ie"
// 		_, err := spacelift.LookupMountedFile(ctx, &spacelift.LookupMountedFileArgs{
// 			ContextId:    &opt0,
// 			RelativePath: "kubeconfig",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt1 := "k8s-module"
// 		_, err = spacelift.LookupMountedFile(ctx, &spacelift.LookupMountedFileArgs{
// 			ModuleId:     &opt1,
// 			RelativePath: "kubeconfig",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt2 := "k8s-core"
// 		_, err = spacelift.LookupMountedFile(ctx, &spacelift.LookupMountedFileArgs{
// 			RelativePath: "kubeconfig",
// 			StackId:      &opt2,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// <!-- schema generated by tfplugindocs -->
// ## Schema
//
// ### Required
//
// - **relative_path** (String) relative path to the mounted file
//
// ### Optional
//
// - **context_id** (String) ID of the context where the mounted file is stored
// - **id** (String) The ID of this resource.
// - **module_id** (String) ID of the module where the mounted file is stored
// - **stack_id** (String) ID of the stack where the mounted file is stored
//
// ### Read-Only
//
// - **checksum** (String) SHA-256 checksum of the value
// - **content** (String, Sensitive) content of the mounted file encoded using Base-64
// - **write_only** (Boolean) indicates whether the value can be read back outside a Run
func LookupMountedFile(ctx *pulumi.Context, args *LookupMountedFileArgs, opts ...pulumi.InvokeOption) (*LookupMountedFileResult, error) {
	var rv LookupMountedFileResult
	err := ctx.Invoke("spacelift:index/getMountedFile:getMountedFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMountedFile.
type LookupMountedFileArgs struct {
	ContextId    *string `pulumi:"contextId"`
	ModuleId     *string `pulumi:"moduleId"`
	RelativePath string  `pulumi:"relativePath"`
	StackId      *string `pulumi:"stackId"`
}

// A collection of values returned by getMountedFile.
type LookupMountedFileResult struct {
	Checksum  string  `pulumi:"checksum"`
	Content   string  `pulumi:"content"`
	ContextId *string `pulumi:"contextId"`
	// The provider-assigned unique ID for this managed resource.
	Id           string  `pulumi:"id"`
	ModuleId     *string `pulumi:"moduleId"`
	RelativePath string  `pulumi:"relativePath"`
	StackId      *string `pulumi:"stackId"`
	WriteOnly    bool    `pulumi:"writeOnly"`
}
