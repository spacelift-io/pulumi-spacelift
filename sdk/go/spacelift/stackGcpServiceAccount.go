// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type StackGcpServiceAccount struct {
	pulumi.CustomResourceState

	// ID of the module which uses GCP service account credentials
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// Email address of the GCP service account dedicated for this stack
	ServiceAccountEmail pulumi.StringOutput `pulumi:"serviceAccountEmail"`
	// ID of the stack which uses GCP service account credentials
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes pulumi.StringArrayOutput `pulumi:"tokenScopes"`
}

// NewStackGcpServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewStackGcpServiceAccount(ctx *pulumi.Context,
	name string, args *StackGcpServiceAccountArgs, opts ...pulumi.ResourceOption) (*StackGcpServiceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TokenScopes == nil {
		return nil, errors.New("invalid value for required argument 'TokenScopes'")
	}
	var resource StackGcpServiceAccount
	err := ctx.RegisterResource("spacelift:index/stackGcpServiceAccount:StackGcpServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackGcpServiceAccount gets an existing StackGcpServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackGcpServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackGcpServiceAccountState, opts ...pulumi.ResourceOption) (*StackGcpServiceAccount, error) {
	var resource StackGcpServiceAccount
	err := ctx.ReadResource("spacelift:index/stackGcpServiceAccount:StackGcpServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackGcpServiceAccount resources.
type stackGcpServiceAccountState struct {
	// ID of the module which uses GCP service account credentials
	ModuleId *string `pulumi:"moduleId"`
	// Email address of the GCP service account dedicated for this stack
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
	// ID of the stack which uses GCP service account credentials
	StackId *string `pulumi:"stackId"`
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes []string `pulumi:"tokenScopes"`
}

type StackGcpServiceAccountState struct {
	// ID of the module which uses GCP service account credentials
	ModuleId pulumi.StringPtrInput
	// Email address of the GCP service account dedicated for this stack
	ServiceAccountEmail pulumi.StringPtrInput
	// ID of the stack which uses GCP service account credentials
	StackId pulumi.StringPtrInput
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes pulumi.StringArrayInput
}

func (StackGcpServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackGcpServiceAccountState)(nil)).Elem()
}

type stackGcpServiceAccountArgs struct {
	// ID of the module which uses GCP service account credentials
	ModuleId *string `pulumi:"moduleId"`
	// ID of the stack which uses GCP service account credentials
	StackId *string `pulumi:"stackId"`
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes []string `pulumi:"tokenScopes"`
}

// The set of arguments for constructing a StackGcpServiceAccount resource.
type StackGcpServiceAccountArgs struct {
	// ID of the module which uses GCP service account credentials
	ModuleId pulumi.StringPtrInput
	// ID of the stack which uses GCP service account credentials
	StackId pulumi.StringPtrInput
	// List of scopes that will be requested when generating temporary GCP service account credentials
	TokenScopes pulumi.StringArrayInput
}

func (StackGcpServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackGcpServiceAccountArgs)(nil)).Elem()
}

type StackGcpServiceAccountInput interface {
	pulumi.Input

	ToStackGcpServiceAccountOutput() StackGcpServiceAccountOutput
	ToStackGcpServiceAccountOutputWithContext(ctx context.Context) StackGcpServiceAccountOutput
}

func (*StackGcpServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((*StackGcpServiceAccount)(nil))
}

func (i *StackGcpServiceAccount) ToStackGcpServiceAccountOutput() StackGcpServiceAccountOutput {
	return i.ToStackGcpServiceAccountOutputWithContext(context.Background())
}

func (i *StackGcpServiceAccount) ToStackGcpServiceAccountOutputWithContext(ctx context.Context) StackGcpServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackGcpServiceAccountOutput)
}

type StackGcpServiceAccountOutput struct {
	*pulumi.OutputState
}

func (StackGcpServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackGcpServiceAccount)(nil))
}

func (o StackGcpServiceAccountOutput) ToStackGcpServiceAccountOutput() StackGcpServiceAccountOutput {
	return o
}

func (o StackGcpServiceAccountOutput) ToStackGcpServiceAccountOutputWithContext(ctx context.Context) StackGcpServiceAccountOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StackGcpServiceAccountOutput{})
}
