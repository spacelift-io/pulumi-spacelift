// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureIntegrationAttachment` represents the attachment between a reusable Azure integration and a single stack or module.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewAzureIntegrationAttachment(ctx, "readonly", &spacelift.AzureIntegrationAttachmentArgs{
//				IntegrationId:  pulumi.Any(spacelift_azure_integration.Example.Id),
//				StackId:        pulumi.Any(spacelift_stack.Example.Id),
//				Write:          pulumi.Bool(false),
//				SubscriptionId: pulumi.String("subscription_id"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewAzureIntegrationAttachment(ctx, "writeonly", &spacelift.AzureIntegrationAttachmentArgs{
//				IntegrationId:  pulumi.Any(spacelift_azure_integration.Example.Id),
//				StackId:        pulumi.Any(spacelift_module.Example.Id),
//				Read:           pulumi.Bool(false),
//				SubscriptionId: pulumi.String("subscription_id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import spacelift:index/azureIntegrationAttachment:AzureIntegrationAttachment readonly $INTEGRATION_ID/$STACK_ID
//
// ```
//
// ```sh
//
//	$ pulumi import spacelift:index/azureIntegrationAttachment:AzureIntegrationAttachment writeonly $INTEGRATION_ID/$MODULE_ID
//
// ```
type AzureIntegrationAttachment struct {
	pulumi.CustomResourceState

	// Internal ID of the attachment entity
	AttachmentId pulumi.StringOutput `pulumi:"attachmentId"`
	// ID of the integration to attach
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// ID of the module to attach the integration to
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// Indicates whether this attachment is used for read operations. Defaults to `true`.
	Read pulumi.BoolPtrOutput `pulumi:"read"`
	// ID of the stack to attach the integration to
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
	// Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.
	SubscriptionId pulumi.StringPtrOutput `pulumi:"subscriptionId"`
	// Indicates whether this attachment is used for write operations. Defaults to `true`.
	Write pulumi.BoolPtrOutput `pulumi:"write"`
}

// NewAzureIntegrationAttachment registers a new resource with the given unique name, arguments, and options.
func NewAzureIntegrationAttachment(ctx *pulumi.Context,
	name string, args *AzureIntegrationAttachmentArgs, opts ...pulumi.ResourceOption) (*AzureIntegrationAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AzureIntegrationAttachment
	err := ctx.RegisterResource("spacelift:index/azureIntegrationAttachment:AzureIntegrationAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureIntegrationAttachment gets an existing AzureIntegrationAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureIntegrationAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureIntegrationAttachmentState, opts ...pulumi.ResourceOption) (*AzureIntegrationAttachment, error) {
	var resource AzureIntegrationAttachment
	err := ctx.ReadResource("spacelift:index/azureIntegrationAttachment:AzureIntegrationAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureIntegrationAttachment resources.
type azureIntegrationAttachmentState struct {
	// Internal ID of the attachment entity
	AttachmentId *string `pulumi:"attachmentId"`
	// ID of the integration to attach
	IntegrationId *string `pulumi:"integrationId"`
	// ID of the module to attach the integration to
	ModuleId *string `pulumi:"moduleId"`
	// Indicates whether this attachment is used for read operations. Defaults to `true`.
	Read *bool `pulumi:"read"`
	// ID of the stack to attach the integration to
	StackId *string `pulumi:"stackId"`
	// Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Indicates whether this attachment is used for write operations. Defaults to `true`.
	Write *bool `pulumi:"write"`
}

type AzureIntegrationAttachmentState struct {
	// Internal ID of the attachment entity
	AttachmentId pulumi.StringPtrInput
	// ID of the integration to attach
	IntegrationId pulumi.StringPtrInput
	// ID of the module to attach the integration to
	ModuleId pulumi.StringPtrInput
	// Indicates whether this attachment is used for read operations. Defaults to `true`.
	Read pulumi.BoolPtrInput
	// ID of the stack to attach the integration to
	StackId pulumi.StringPtrInput
	// Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.
	SubscriptionId pulumi.StringPtrInput
	// Indicates whether this attachment is used for write operations. Defaults to `true`.
	Write pulumi.BoolPtrInput
}

func (AzureIntegrationAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureIntegrationAttachmentState)(nil)).Elem()
}

type azureIntegrationAttachmentArgs struct {
	// ID of the integration to attach
	IntegrationId string `pulumi:"integrationId"`
	// ID of the module to attach the integration to
	ModuleId *string `pulumi:"moduleId"`
	// Indicates whether this attachment is used for read operations. Defaults to `true`.
	Read *bool `pulumi:"read"`
	// ID of the stack to attach the integration to
	StackId *string `pulumi:"stackId"`
	// Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Indicates whether this attachment is used for write operations. Defaults to `true`.
	Write *bool `pulumi:"write"`
}

// The set of arguments for constructing a AzureIntegrationAttachment resource.
type AzureIntegrationAttachmentArgs struct {
	// ID of the integration to attach
	IntegrationId pulumi.StringInput
	// ID of the module to attach the integration to
	ModuleId pulumi.StringPtrInput
	// Indicates whether this attachment is used for read operations. Defaults to `true`.
	Read pulumi.BoolPtrInput
	// ID of the stack to attach the integration to
	StackId pulumi.StringPtrInput
	// Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.
	SubscriptionId pulumi.StringPtrInput
	// Indicates whether this attachment is used for write operations. Defaults to `true`.
	Write pulumi.BoolPtrInput
}

func (AzureIntegrationAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureIntegrationAttachmentArgs)(nil)).Elem()
}

type AzureIntegrationAttachmentInput interface {
	pulumi.Input

	ToAzureIntegrationAttachmentOutput() AzureIntegrationAttachmentOutput
	ToAzureIntegrationAttachmentOutputWithContext(ctx context.Context) AzureIntegrationAttachmentOutput
}

func (*AzureIntegrationAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureIntegrationAttachment)(nil)).Elem()
}

func (i *AzureIntegrationAttachment) ToAzureIntegrationAttachmentOutput() AzureIntegrationAttachmentOutput {
	return i.ToAzureIntegrationAttachmentOutputWithContext(context.Background())
}

func (i *AzureIntegrationAttachment) ToAzureIntegrationAttachmentOutputWithContext(ctx context.Context) AzureIntegrationAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureIntegrationAttachmentOutput)
}

// AzureIntegrationAttachmentArrayInput is an input type that accepts AzureIntegrationAttachmentArray and AzureIntegrationAttachmentArrayOutput values.
// You can construct a concrete instance of `AzureIntegrationAttachmentArrayInput` via:
//
//	AzureIntegrationAttachmentArray{ AzureIntegrationAttachmentArgs{...} }
type AzureIntegrationAttachmentArrayInput interface {
	pulumi.Input

	ToAzureIntegrationAttachmentArrayOutput() AzureIntegrationAttachmentArrayOutput
	ToAzureIntegrationAttachmentArrayOutputWithContext(context.Context) AzureIntegrationAttachmentArrayOutput
}

type AzureIntegrationAttachmentArray []AzureIntegrationAttachmentInput

func (AzureIntegrationAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureIntegrationAttachment)(nil)).Elem()
}

func (i AzureIntegrationAttachmentArray) ToAzureIntegrationAttachmentArrayOutput() AzureIntegrationAttachmentArrayOutput {
	return i.ToAzureIntegrationAttachmentArrayOutputWithContext(context.Background())
}

func (i AzureIntegrationAttachmentArray) ToAzureIntegrationAttachmentArrayOutputWithContext(ctx context.Context) AzureIntegrationAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureIntegrationAttachmentArrayOutput)
}

// AzureIntegrationAttachmentMapInput is an input type that accepts AzureIntegrationAttachmentMap and AzureIntegrationAttachmentMapOutput values.
// You can construct a concrete instance of `AzureIntegrationAttachmentMapInput` via:
//
//	AzureIntegrationAttachmentMap{ "key": AzureIntegrationAttachmentArgs{...} }
type AzureIntegrationAttachmentMapInput interface {
	pulumi.Input

	ToAzureIntegrationAttachmentMapOutput() AzureIntegrationAttachmentMapOutput
	ToAzureIntegrationAttachmentMapOutputWithContext(context.Context) AzureIntegrationAttachmentMapOutput
}

type AzureIntegrationAttachmentMap map[string]AzureIntegrationAttachmentInput

func (AzureIntegrationAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureIntegrationAttachment)(nil)).Elem()
}

func (i AzureIntegrationAttachmentMap) ToAzureIntegrationAttachmentMapOutput() AzureIntegrationAttachmentMapOutput {
	return i.ToAzureIntegrationAttachmentMapOutputWithContext(context.Background())
}

func (i AzureIntegrationAttachmentMap) ToAzureIntegrationAttachmentMapOutputWithContext(ctx context.Context) AzureIntegrationAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureIntegrationAttachmentMapOutput)
}

type AzureIntegrationAttachmentOutput struct{ *pulumi.OutputState }

func (AzureIntegrationAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureIntegrationAttachment)(nil)).Elem()
}

func (o AzureIntegrationAttachmentOutput) ToAzureIntegrationAttachmentOutput() AzureIntegrationAttachmentOutput {
	return o
}

func (o AzureIntegrationAttachmentOutput) ToAzureIntegrationAttachmentOutputWithContext(ctx context.Context) AzureIntegrationAttachmentOutput {
	return o
}

// Internal ID of the attachment entity
func (o AzureIntegrationAttachmentOutput) AttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureIntegrationAttachment) pulumi.StringOutput { return v.AttachmentId }).(pulumi.StringOutput)
}

// ID of the integration to attach
func (o AzureIntegrationAttachmentOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureIntegrationAttachment) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// ID of the module to attach the integration to
func (o AzureIntegrationAttachmentOutput) ModuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureIntegrationAttachment) pulumi.StringPtrOutput { return v.ModuleId }).(pulumi.StringPtrOutput)
}

// Indicates whether this attachment is used for read operations. Defaults to `true`.
func (o AzureIntegrationAttachmentOutput) Read() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureIntegrationAttachment) pulumi.BoolPtrOutput { return v.Read }).(pulumi.BoolPtrOutput)
}

// ID of the stack to attach the integration to
func (o AzureIntegrationAttachmentOutput) StackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureIntegrationAttachment) pulumi.StringPtrOutput { return v.StackId }).(pulumi.StringPtrOutput)
}

// Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.
func (o AzureIntegrationAttachmentOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureIntegrationAttachment) pulumi.StringPtrOutput { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Indicates whether this attachment is used for write operations. Defaults to `true`.
func (o AzureIntegrationAttachmentOutput) Write() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureIntegrationAttachment) pulumi.BoolPtrOutput { return v.Write }).(pulumi.BoolPtrOutput)
}

type AzureIntegrationAttachmentArrayOutput struct{ *pulumi.OutputState }

func (AzureIntegrationAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureIntegrationAttachment)(nil)).Elem()
}

func (o AzureIntegrationAttachmentArrayOutput) ToAzureIntegrationAttachmentArrayOutput() AzureIntegrationAttachmentArrayOutput {
	return o
}

func (o AzureIntegrationAttachmentArrayOutput) ToAzureIntegrationAttachmentArrayOutputWithContext(ctx context.Context) AzureIntegrationAttachmentArrayOutput {
	return o
}

func (o AzureIntegrationAttachmentArrayOutput) Index(i pulumi.IntInput) AzureIntegrationAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureIntegrationAttachment {
		return vs[0].([]*AzureIntegrationAttachment)[vs[1].(int)]
	}).(AzureIntegrationAttachmentOutput)
}

type AzureIntegrationAttachmentMapOutput struct{ *pulumi.OutputState }

func (AzureIntegrationAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureIntegrationAttachment)(nil)).Elem()
}

func (o AzureIntegrationAttachmentMapOutput) ToAzureIntegrationAttachmentMapOutput() AzureIntegrationAttachmentMapOutput {
	return o
}

func (o AzureIntegrationAttachmentMapOutput) ToAzureIntegrationAttachmentMapOutputWithContext(ctx context.Context) AzureIntegrationAttachmentMapOutput {
	return o
}

func (o AzureIntegrationAttachmentMapOutput) MapIndex(k pulumi.StringInput) AzureIntegrationAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureIntegrationAttachment {
		return vs[0].(map[string]*AzureIntegrationAttachment)[vs[1].(string)]
	}).(AzureIntegrationAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureIntegrationAttachmentInput)(nil)).Elem(), &AzureIntegrationAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureIntegrationAttachmentArrayInput)(nil)).Elem(), AzureIntegrationAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureIntegrationAttachmentMapInput)(nil)).Elem(), AzureIntegrationAttachmentMap{})
	pulumi.RegisterOutputType(AzureIntegrationAttachmentOutput{})
	pulumi.RegisterOutputType(AzureIntegrationAttachmentArrayOutput{})
	pulumi.RegisterOutputType(AzureIntegrationAttachmentMapOutput{})
}
