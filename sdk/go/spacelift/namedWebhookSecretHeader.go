// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `NamedWebhookSecretHeader` represents secret key value combination used as a custom headerwhen delivering webhook requests. It depends on `NamedWebhook` resource which should exist.
type NamedWebhookSecretHeader struct {
	pulumi.CustomResourceState

	// key for the header
	Key pulumi.StringOutput `pulumi:"key"`
	// value for the header
	Value pulumi.StringOutput `pulumi:"value"`
	// ID of the stack on which the environment variable is defined
	WebhookId pulumi.StringOutput `pulumi:"webhookId"`
}

// NewNamedWebhookSecretHeader registers a new resource with the given unique name, arguments, and options.
func NewNamedWebhookSecretHeader(ctx *pulumi.Context,
	name string, args *NamedWebhookSecretHeaderArgs, opts ...pulumi.ResourceOption) (*NamedWebhookSecretHeader, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.WebhookId == nil {
		return nil, errors.New("invalid value for required argument 'WebhookId'")
	}
	if args.Value != nil {
		args.Value = pulumi.ToSecret(args.Value).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NamedWebhookSecretHeader
	err := ctx.RegisterResource("spacelift:index/namedWebhookSecretHeader:NamedWebhookSecretHeader", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamedWebhookSecretHeader gets an existing NamedWebhookSecretHeader resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamedWebhookSecretHeader(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamedWebhookSecretHeaderState, opts ...pulumi.ResourceOption) (*NamedWebhookSecretHeader, error) {
	var resource NamedWebhookSecretHeader
	err := ctx.ReadResource("spacelift:index/namedWebhookSecretHeader:NamedWebhookSecretHeader", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamedWebhookSecretHeader resources.
type namedWebhookSecretHeaderState struct {
	// key for the header
	Key *string `pulumi:"key"`
	// value for the header
	Value *string `pulumi:"value"`
	// ID of the stack on which the environment variable is defined
	WebhookId *string `pulumi:"webhookId"`
}

type NamedWebhookSecretHeaderState struct {
	// key for the header
	Key pulumi.StringPtrInput
	// value for the header
	Value pulumi.StringPtrInput
	// ID of the stack on which the environment variable is defined
	WebhookId pulumi.StringPtrInput
}

func (NamedWebhookSecretHeaderState) ElementType() reflect.Type {
	return reflect.TypeOf((*namedWebhookSecretHeaderState)(nil)).Elem()
}

type namedWebhookSecretHeaderArgs struct {
	// key for the header
	Key string `pulumi:"key"`
	// value for the header
	Value string `pulumi:"value"`
	// ID of the stack on which the environment variable is defined
	WebhookId string `pulumi:"webhookId"`
}

// The set of arguments for constructing a NamedWebhookSecretHeader resource.
type NamedWebhookSecretHeaderArgs struct {
	// key for the header
	Key pulumi.StringInput
	// value for the header
	Value pulumi.StringInput
	// ID of the stack on which the environment variable is defined
	WebhookId pulumi.StringInput
}

func (NamedWebhookSecretHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namedWebhookSecretHeaderArgs)(nil)).Elem()
}

type NamedWebhookSecretHeaderInput interface {
	pulumi.Input

	ToNamedWebhookSecretHeaderOutput() NamedWebhookSecretHeaderOutput
	ToNamedWebhookSecretHeaderOutputWithContext(ctx context.Context) NamedWebhookSecretHeaderOutput
}

func (*NamedWebhookSecretHeader) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedWebhookSecretHeader)(nil)).Elem()
}

func (i *NamedWebhookSecretHeader) ToNamedWebhookSecretHeaderOutput() NamedWebhookSecretHeaderOutput {
	return i.ToNamedWebhookSecretHeaderOutputWithContext(context.Background())
}

func (i *NamedWebhookSecretHeader) ToNamedWebhookSecretHeaderOutputWithContext(ctx context.Context) NamedWebhookSecretHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedWebhookSecretHeaderOutput)
}

// NamedWebhookSecretHeaderArrayInput is an input type that accepts NamedWebhookSecretHeaderArray and NamedWebhookSecretHeaderArrayOutput values.
// You can construct a concrete instance of `NamedWebhookSecretHeaderArrayInput` via:
//
//	NamedWebhookSecretHeaderArray{ NamedWebhookSecretHeaderArgs{...} }
type NamedWebhookSecretHeaderArrayInput interface {
	pulumi.Input

	ToNamedWebhookSecretHeaderArrayOutput() NamedWebhookSecretHeaderArrayOutput
	ToNamedWebhookSecretHeaderArrayOutputWithContext(context.Context) NamedWebhookSecretHeaderArrayOutput
}

type NamedWebhookSecretHeaderArray []NamedWebhookSecretHeaderInput

func (NamedWebhookSecretHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamedWebhookSecretHeader)(nil)).Elem()
}

func (i NamedWebhookSecretHeaderArray) ToNamedWebhookSecretHeaderArrayOutput() NamedWebhookSecretHeaderArrayOutput {
	return i.ToNamedWebhookSecretHeaderArrayOutputWithContext(context.Background())
}

func (i NamedWebhookSecretHeaderArray) ToNamedWebhookSecretHeaderArrayOutputWithContext(ctx context.Context) NamedWebhookSecretHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedWebhookSecretHeaderArrayOutput)
}

// NamedWebhookSecretHeaderMapInput is an input type that accepts NamedWebhookSecretHeaderMap and NamedWebhookSecretHeaderMapOutput values.
// You can construct a concrete instance of `NamedWebhookSecretHeaderMapInput` via:
//
//	NamedWebhookSecretHeaderMap{ "key": NamedWebhookSecretHeaderArgs{...} }
type NamedWebhookSecretHeaderMapInput interface {
	pulumi.Input

	ToNamedWebhookSecretHeaderMapOutput() NamedWebhookSecretHeaderMapOutput
	ToNamedWebhookSecretHeaderMapOutputWithContext(context.Context) NamedWebhookSecretHeaderMapOutput
}

type NamedWebhookSecretHeaderMap map[string]NamedWebhookSecretHeaderInput

func (NamedWebhookSecretHeaderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamedWebhookSecretHeader)(nil)).Elem()
}

func (i NamedWebhookSecretHeaderMap) ToNamedWebhookSecretHeaderMapOutput() NamedWebhookSecretHeaderMapOutput {
	return i.ToNamedWebhookSecretHeaderMapOutputWithContext(context.Background())
}

func (i NamedWebhookSecretHeaderMap) ToNamedWebhookSecretHeaderMapOutputWithContext(ctx context.Context) NamedWebhookSecretHeaderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedWebhookSecretHeaderMapOutput)
}

type NamedWebhookSecretHeaderOutput struct{ *pulumi.OutputState }

func (NamedWebhookSecretHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedWebhookSecretHeader)(nil)).Elem()
}

func (o NamedWebhookSecretHeaderOutput) ToNamedWebhookSecretHeaderOutput() NamedWebhookSecretHeaderOutput {
	return o
}

func (o NamedWebhookSecretHeaderOutput) ToNamedWebhookSecretHeaderOutputWithContext(ctx context.Context) NamedWebhookSecretHeaderOutput {
	return o
}

// key for the header
func (o NamedWebhookSecretHeaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *NamedWebhookSecretHeader) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// value for the header
func (o NamedWebhookSecretHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *NamedWebhookSecretHeader) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// ID of the stack on which the environment variable is defined
func (o NamedWebhookSecretHeaderOutput) WebhookId() pulumi.StringOutput {
	return o.ApplyT(func(v *NamedWebhookSecretHeader) pulumi.StringOutput { return v.WebhookId }).(pulumi.StringOutput)
}

type NamedWebhookSecretHeaderArrayOutput struct{ *pulumi.OutputState }

func (NamedWebhookSecretHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamedWebhookSecretHeader)(nil)).Elem()
}

func (o NamedWebhookSecretHeaderArrayOutput) ToNamedWebhookSecretHeaderArrayOutput() NamedWebhookSecretHeaderArrayOutput {
	return o
}

func (o NamedWebhookSecretHeaderArrayOutput) ToNamedWebhookSecretHeaderArrayOutputWithContext(ctx context.Context) NamedWebhookSecretHeaderArrayOutput {
	return o
}

func (o NamedWebhookSecretHeaderArrayOutput) Index(i pulumi.IntInput) NamedWebhookSecretHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NamedWebhookSecretHeader {
		return vs[0].([]*NamedWebhookSecretHeader)[vs[1].(int)]
	}).(NamedWebhookSecretHeaderOutput)
}

type NamedWebhookSecretHeaderMapOutput struct{ *pulumi.OutputState }

func (NamedWebhookSecretHeaderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamedWebhookSecretHeader)(nil)).Elem()
}

func (o NamedWebhookSecretHeaderMapOutput) ToNamedWebhookSecretHeaderMapOutput() NamedWebhookSecretHeaderMapOutput {
	return o
}

func (o NamedWebhookSecretHeaderMapOutput) ToNamedWebhookSecretHeaderMapOutputWithContext(ctx context.Context) NamedWebhookSecretHeaderMapOutput {
	return o
}

func (o NamedWebhookSecretHeaderMapOutput) MapIndex(k pulumi.StringInput) NamedWebhookSecretHeaderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NamedWebhookSecretHeader {
		return vs[0].(map[string]*NamedWebhookSecretHeader)[vs[1].(string)]
	}).(NamedWebhookSecretHeaderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamedWebhookSecretHeaderInput)(nil)).Elem(), &NamedWebhookSecretHeader{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedWebhookSecretHeaderArrayInput)(nil)).Elem(), NamedWebhookSecretHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedWebhookSecretHeaderMapInput)(nil)).Elem(), NamedWebhookSecretHeaderMap{})
	pulumi.RegisterOutputType(NamedWebhookSecretHeaderOutput{})
	pulumi.RegisterOutputType(NamedWebhookSecretHeaderArrayOutput{})
	pulumi.RegisterOutputType(NamedWebhookSecretHeaderMapOutput{})
}
