// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `ScheduledTask` represents a scheduling configuration for a Stack. It will trigger task on the given schedule or timestamp
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewStack(ctx, "k8s-core", nil)
//			if err != nil {
//				return err
//			}
//			// create the resources of a stack on a given schedule
//			_, err = spacelift.NewScheduledTask(ctx, "k8s-core-create", &spacelift.ScheduledTaskArgs{
//				StackId: k8s_core.ID(),
//				Command: pulumi.String("pulumi up -auto-approve"),
//				Everies: pulumi.StringArray{
//					pulumi.String("0 7 * * 1-5"),
//				},
//				Timezone: pulumi.String("CET"),
//			})
//			if err != nil {
//				return err
//			}
//			// destroy the resources of a stack on a given schedule
//			_, err = spacelift.NewScheduledTask(ctx, "k8s-core-destroyScheduledTask", &spacelift.ScheduledTaskArgs{
//				StackId: k8s_core.ID(),
//				Command: pulumi.String("terraform destroy -auto-approve"),
//				Everies: pulumi.StringArray{
//					pulumi.String("0 21 * * 1-5"),
//				},
//				Timezone: pulumi.String("CET"),
//			})
//			if err != nil {
//				return err
//			}
//			// at a given timestamp (unix)
//			_, err = spacelift.NewScheduledTask(ctx, "k8s-core-destroyIndex/scheduledTaskScheduledTask", &spacelift.ScheduledTaskArgs{
//				StackId: k8s_core.ID(),
//				Command: pulumi.String("terraform destroy -auto-approve"),
//				At:      pulumi.Int(1663336895),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import spacelift:index/scheduledTask:ScheduledTask ireland-kubeconfig $STACK_ID/$SCHEDULED_TASK_ID
//
// ```
type ScheduledTask struct {
	pulumi.CustomResourceState

	// Timestamp (unix timestamp) at which time the scheduled task should happen.
	At pulumi.IntPtrOutput `pulumi:"at"`
	// Command that will be run.
	Command pulumi.StringOutput `pulumi:"command"`
	// List of cron schedule expressions based on which the scheduled task should be triggered.
	Everies pulumi.StringArrayOutput `pulumi:"everies"`
	// ID of the schedule
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
	// ID of the stack for which to set up the scheduled task
	StackId pulumi.StringOutput `pulumi:"stackId"`
	// Timezone in which the schedule is expressed. Defaults to `UTC`.
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
}

// NewScheduledTask registers a new resource with the given unique name, arguments, and options.
func NewScheduledTask(ctx *pulumi.Context,
	name string, args *ScheduledTaskArgs, opts ...pulumi.ResourceOption) (*ScheduledTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Command == nil {
		return nil, errors.New("invalid value for required argument 'Command'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduledTask
	err := ctx.RegisterResource("spacelift:index/scheduledTask:ScheduledTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledTask gets an existing ScheduledTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledTaskState, opts ...pulumi.ResourceOption) (*ScheduledTask, error) {
	var resource ScheduledTask
	err := ctx.ReadResource("spacelift:index/scheduledTask:ScheduledTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledTask resources.
type scheduledTaskState struct {
	// Timestamp (unix timestamp) at which time the scheduled task should happen.
	At *int `pulumi:"at"`
	// Command that will be run.
	Command *string `pulumi:"command"`
	// List of cron schedule expressions based on which the scheduled task should be triggered.
	Everies []string `pulumi:"everies"`
	// ID of the schedule
	ScheduleId *string `pulumi:"scheduleId"`
	// ID of the stack for which to set up the scheduled task
	StackId *string `pulumi:"stackId"`
	// Timezone in which the schedule is expressed. Defaults to `UTC`.
	Timezone *string `pulumi:"timezone"`
}

type ScheduledTaskState struct {
	// Timestamp (unix timestamp) at which time the scheduled task should happen.
	At pulumi.IntPtrInput
	// Command that will be run.
	Command pulumi.StringPtrInput
	// List of cron schedule expressions based on which the scheduled task should be triggered.
	Everies pulumi.StringArrayInput
	// ID of the schedule
	ScheduleId pulumi.StringPtrInput
	// ID of the stack for which to set up the scheduled task
	StackId pulumi.StringPtrInput
	// Timezone in which the schedule is expressed. Defaults to `UTC`.
	Timezone pulumi.StringPtrInput
}

func (ScheduledTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledTaskState)(nil)).Elem()
}

type scheduledTaskArgs struct {
	// Timestamp (unix timestamp) at which time the scheduled task should happen.
	At *int `pulumi:"at"`
	// Command that will be run.
	Command string `pulumi:"command"`
	// List of cron schedule expressions based on which the scheduled task should be triggered.
	Everies []string `pulumi:"everies"`
	// ID of the schedule
	ScheduleId *string `pulumi:"scheduleId"`
	// ID of the stack for which to set up the scheduled task
	StackId string `pulumi:"stackId"`
	// Timezone in which the schedule is expressed. Defaults to `UTC`.
	Timezone *string `pulumi:"timezone"`
}

// The set of arguments for constructing a ScheduledTask resource.
type ScheduledTaskArgs struct {
	// Timestamp (unix timestamp) at which time the scheduled task should happen.
	At pulumi.IntPtrInput
	// Command that will be run.
	Command pulumi.StringInput
	// List of cron schedule expressions based on which the scheduled task should be triggered.
	Everies pulumi.StringArrayInput
	// ID of the schedule
	ScheduleId pulumi.StringPtrInput
	// ID of the stack for which to set up the scheduled task
	StackId pulumi.StringInput
	// Timezone in which the schedule is expressed. Defaults to `UTC`.
	Timezone pulumi.StringPtrInput
}

func (ScheduledTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledTaskArgs)(nil)).Elem()
}

type ScheduledTaskInput interface {
	pulumi.Input

	ToScheduledTaskOutput() ScheduledTaskOutput
	ToScheduledTaskOutputWithContext(ctx context.Context) ScheduledTaskOutput
}

func (*ScheduledTask) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledTask)(nil)).Elem()
}

func (i *ScheduledTask) ToScheduledTaskOutput() ScheduledTaskOutput {
	return i.ToScheduledTaskOutputWithContext(context.Background())
}

func (i *ScheduledTask) ToScheduledTaskOutputWithContext(ctx context.Context) ScheduledTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledTaskOutput)
}

// ScheduledTaskArrayInput is an input type that accepts ScheduledTaskArray and ScheduledTaskArrayOutput values.
// You can construct a concrete instance of `ScheduledTaskArrayInput` via:
//
//	ScheduledTaskArray{ ScheduledTaskArgs{...} }
type ScheduledTaskArrayInput interface {
	pulumi.Input

	ToScheduledTaskArrayOutput() ScheduledTaskArrayOutput
	ToScheduledTaskArrayOutputWithContext(context.Context) ScheduledTaskArrayOutput
}

type ScheduledTaskArray []ScheduledTaskInput

func (ScheduledTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledTask)(nil)).Elem()
}

func (i ScheduledTaskArray) ToScheduledTaskArrayOutput() ScheduledTaskArrayOutput {
	return i.ToScheduledTaskArrayOutputWithContext(context.Background())
}

func (i ScheduledTaskArray) ToScheduledTaskArrayOutputWithContext(ctx context.Context) ScheduledTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledTaskArrayOutput)
}

// ScheduledTaskMapInput is an input type that accepts ScheduledTaskMap and ScheduledTaskMapOutput values.
// You can construct a concrete instance of `ScheduledTaskMapInput` via:
//
//	ScheduledTaskMap{ "key": ScheduledTaskArgs{...} }
type ScheduledTaskMapInput interface {
	pulumi.Input

	ToScheduledTaskMapOutput() ScheduledTaskMapOutput
	ToScheduledTaskMapOutputWithContext(context.Context) ScheduledTaskMapOutput
}

type ScheduledTaskMap map[string]ScheduledTaskInput

func (ScheduledTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledTask)(nil)).Elem()
}

func (i ScheduledTaskMap) ToScheduledTaskMapOutput() ScheduledTaskMapOutput {
	return i.ToScheduledTaskMapOutputWithContext(context.Background())
}

func (i ScheduledTaskMap) ToScheduledTaskMapOutputWithContext(ctx context.Context) ScheduledTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledTaskMapOutput)
}

type ScheduledTaskOutput struct{ *pulumi.OutputState }

func (ScheduledTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledTask)(nil)).Elem()
}

func (o ScheduledTaskOutput) ToScheduledTaskOutput() ScheduledTaskOutput {
	return o
}

func (o ScheduledTaskOutput) ToScheduledTaskOutputWithContext(ctx context.Context) ScheduledTaskOutput {
	return o
}

// Timestamp (unix timestamp) at which time the scheduled task should happen.
func (o ScheduledTaskOutput) At() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduledTask) pulumi.IntPtrOutput { return v.At }).(pulumi.IntPtrOutput)
}

// Command that will be run.
func (o ScheduledTaskOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTask) pulumi.StringOutput { return v.Command }).(pulumi.StringOutput)
}

// List of cron schedule expressions based on which the scheduled task should be triggered.
func (o ScheduledTaskOutput) Everies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduledTask) pulumi.StringArrayOutput { return v.Everies }).(pulumi.StringArrayOutput)
}

// ID of the schedule
func (o ScheduledTaskOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTask) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

// ID of the stack for which to set up the scheduled task
func (o ScheduledTaskOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTask) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

// Timezone in which the schedule is expressed. Defaults to `UTC`.
func (o ScheduledTaskOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledTask) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

type ScheduledTaskArrayOutput struct{ *pulumi.OutputState }

func (ScheduledTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledTask)(nil)).Elem()
}

func (o ScheduledTaskArrayOutput) ToScheduledTaskArrayOutput() ScheduledTaskArrayOutput {
	return o
}

func (o ScheduledTaskArrayOutput) ToScheduledTaskArrayOutputWithContext(ctx context.Context) ScheduledTaskArrayOutput {
	return o
}

func (o ScheduledTaskArrayOutput) Index(i pulumi.IntInput) ScheduledTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScheduledTask {
		return vs[0].([]*ScheduledTask)[vs[1].(int)]
	}).(ScheduledTaskOutput)
}

type ScheduledTaskMapOutput struct{ *pulumi.OutputState }

func (ScheduledTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledTask)(nil)).Elem()
}

func (o ScheduledTaskMapOutput) ToScheduledTaskMapOutput() ScheduledTaskMapOutput {
	return o
}

func (o ScheduledTaskMapOutput) ToScheduledTaskMapOutputWithContext(ctx context.Context) ScheduledTaskMapOutput {
	return o
}

func (o ScheduledTaskMapOutput) MapIndex(k pulumi.StringInput) ScheduledTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScheduledTask {
		return vs[0].(map[string]*ScheduledTask)[vs[1].(string)]
	}).(ScheduledTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledTaskInput)(nil)).Elem(), &ScheduledTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledTaskArrayInput)(nil)).Elem(), ScheduledTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledTaskMapInput)(nil)).Elem(), ScheduledTaskMap{})
	pulumi.RegisterOutputType(ScheduledTaskOutput{})
	pulumi.RegisterOutputType(ScheduledTaskArrayOutput{})
	pulumi.RegisterOutputType(ScheduledTaskMapOutput{})
}
