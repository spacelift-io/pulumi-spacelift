// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewStack(ctx, "k8s-cluster-bitbucket-cloud", &spacelift.StackArgs{
//				Administrative: pulumi.Bool(true),
//				Autodeploy:     pulumi.Bool(true),
//				BitbucketCloud: &StackBitbucketCloudArgs{
//					Namespace: pulumi.String("SPACELIFT"),
//				},
//				Branch:           pulumi.String("master"),
//				Description:      pulumi.String("Provisions a Kubernetes cluster"),
//				ProjectRoot:      pulumi.String("cluster"),
//				Repository:       pulumi.String("core-infra"),
//				TerraformVersion: pulumi.String("0.12.6"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStack(ctx, "k8s-cluster-bitbucket-datacenter", &spacelift.StackArgs{
//				Administrative: pulumi.Bool(true),
//				Autodeploy:     pulumi.Bool(true),
//				BitbucketDatacenter: &StackBitbucketDatacenterArgs{
//					Namespace: pulumi.String("SPACELIFT"),
//				},
//				Branch:           pulumi.String("master"),
//				Description:      pulumi.String("Provisions a Kubernetes cluster"),
//				ProjectRoot:      pulumi.String("cluster"),
//				Repository:       pulumi.String("core-infra"),
//				TerraformVersion: pulumi.String("0.12.6"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStack(ctx, "k8s-cluster-github-enterprise", &spacelift.StackArgs{
//				Administrative: pulumi.Bool(true),
//				Autodeploy:     pulumi.Bool(true),
//				Branch:         pulumi.String("master"),
//				Description:    pulumi.String("Provisions a Kubernetes cluster"),
//				GithubEnterprise: &StackGithubEnterpriseArgs{
//					Namespace: pulumi.String("spacelift"),
//				},
//				ProjectRoot:      pulumi.String("cluster"),
//				Repository:       pulumi.String("core-infra"),
//				TerraformVersion: pulumi.String("0.12.6"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStack(ctx, "k8s-cluster-gitlab", &spacelift.StackArgs{
//				Administrative: pulumi.Bool(true),
//				Autodeploy:     pulumi.Bool(true),
//				Branch:         pulumi.String("master"),
//				Description:    pulumi.String("Provisions a Kubernetes cluster"),
//				Gitlab: &StackGitlabArgs{
//					Namespace: pulumi.String("spacelift"),
//				},
//				ProjectRoot:      pulumi.String("cluster"),
//				Repository:       pulumi.String("core-infra"),
//				TerraformVersion: pulumi.String("0.12.6"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStack(ctx, "k8s-cluster", &spacelift.StackArgs{
//				Administrative:             pulumi.Bool(true),
//				Autodeploy:                 pulumi.Bool(true),
//				Branch:                     pulumi.String("master"),
//				Description:                pulumi.String("Provisions a Kubernetes cluster"),
//				ProjectRoot:                pulumi.String("cluster"),
//				Repository:                 pulumi.String("core-infra"),
//				TerraformSmartSanitization: pulumi.Bool(true),
//				TerraformVersion:           pulumi.String("1.2.6"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStack(ctx, "k8s-cluster-cloudformation", &spacelift.StackArgs{
//				Autodeploy: pulumi.Bool(true),
//				Branch:     pulumi.String("master"),
//				Cloudformation: &StackCloudformationArgs{
//					EntryTemplateFile: pulumi.String("main.yaml"),
//					Region:            pulumi.String("eu-central-1"),
//					StackName:         pulumi.String("k8s-cluster"),
//					TemplateBucket:    pulumi.String("s3://bucket"),
//				},
//				Description: pulumi.String("Provisions a Kubernetes cluster"),
//				ProjectRoot: pulumi.String("cluster"),
//				Repository:  pulumi.String("core-infra"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStack(ctx, "k8s-cluster-pulumi", &spacelift.StackArgs{
//				Autodeploy:  pulumi.Bool(true),
//				Branch:      pulumi.String("master"),
//				Description: pulumi.String("Provisions a Kubernetes cluster"),
//				ProjectRoot: pulumi.String("cluster"),
//				Pulumi: &StackPulumiArgs{
//					LoginUrl:  pulumi.String("s3://pulumi-state-bucket"),
//					StackName: pulumi.String("kubernetes-core-services"),
//				},
//				Repository:  pulumi.String("core-infra"),
//				RunnerImage: pulumi.String("public.ecr.aws/t0p9w2l5/runner-pulumi-javascript:latest"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStack(ctx, "k8s-core-kubernetes", &spacelift.StackArgs{
//				Autodeploy: pulumi.Bool(true),
//				BeforeInits: pulumi.StringArray{
//					pulumi.String("aws eks update-kubeconfig --region us-east-2 --name k8s-cluster"),
//				},
//				Branch:      pulumi.String("master"),
//				Description: pulumi.String("Shared cluster services (Datadog, Istio etc.)"),
//				Kubernetes: &StackKubernetesArgs{
//					Namespace: pulumi.String("core"),
//				},
//				ProjectRoot: pulumi.String("core-services"),
//				Repository:  pulumi.String("core-infra"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewStack(ctx, "ansible-stack", &spacelift.StackArgs{
//				Ansible: &StackAnsibleArgs{
//					Playbook: pulumi.String("main.yml"),
//				},
//				Autodeploy:  pulumi.Bool(true),
//				Branch:      pulumi.String("master"),
//				Description: pulumi.String("Provisioning EC2 machines"),
//				Repository:  pulumi.String("ansible-playbooks"),
//				RunnerImage: pulumi.String("public.ecr.aws/spacelift/runner-ansible:latest"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import spacelift:index/stack:Stack k8s_core $STACK_ID
//
// ```
type Stack struct {
	pulumi.CustomResourceState

	// Indicates whether this stack can manage others. Defaults to `false`.
	Administrative pulumi.BoolPtrOutput `pulumi:"administrative"`
	// List of after-apply scripts
	AfterApplies pulumi.StringArrayOutput `pulumi:"afterApplies"`
	// List of after-destroy scripts
	AfterDestroys pulumi.StringArrayOutput `pulumi:"afterDestroys"`
	// List of after-init scripts
	AfterInits pulumi.StringArrayOutput `pulumi:"afterInits"`
	// List of after-perform scripts
	AfterPerforms pulumi.StringArrayOutput `pulumi:"afterPerforms"`
	// List of after-plan scripts
	AfterPlans pulumi.StringArrayOutput `pulumi:"afterPlans"`
	// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
	Ansible StackAnsiblePtrOutput `pulumi:"ansible"`
	// Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
	Autodeploy pulumi.BoolPtrOutput `pulumi:"autodeploy"`
	// Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
	Autoretry pulumi.BoolPtrOutput `pulumi:"autoretry"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement pulumi.StringOutput `pulumi:"awsAssumeRolePolicyStatement"`
	// Azure DevOps VCS settings
	AzureDevops StackAzureDevopsPtrOutput `pulumi:"azureDevops"`
	// List of before-apply scripts
	BeforeApplies pulumi.StringArrayOutput `pulumi:"beforeApplies"`
	// List of before-destroy scripts
	BeforeDestroys pulumi.StringArrayOutput `pulumi:"beforeDestroys"`
	// List of before-init scripts
	BeforeInits pulumi.StringArrayOutput `pulumi:"beforeInits"`
	// List of before-perform scripts
	BeforePerforms pulumi.StringArrayOutput `pulumi:"beforePerforms"`
	// List of before-plan scripts
	BeforePlans pulumi.StringArrayOutput `pulumi:"beforePlans"`
	// Bitbucket Cloud VCS settings
	BitbucketCloud StackBitbucketCloudPtrOutput `pulumi:"bitbucketCloud"`
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter StackBitbucketDatacenterPtrOutput `pulumi:"bitbucketDatacenter"`
	// GitHub branch to apply changes to
	Branch pulumi.StringOutput `pulumi:"branch"`
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation StackCloudformationPtrOutput `pulumi:"cloudformation"`
	// Free-form stack description for users
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
	EnableLocalPreview pulumi.BoolPtrOutput `pulumi:"enableLocalPreview"`
	// Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
	GithubActionDeploy pulumi.BoolPtrOutput `pulumi:"githubActionDeploy"`
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise StackGithubEnterprisePtrOutput `pulumi:"githubEnterprise"`
	// GitLab VCS settings
	Gitlab StackGitlabPtrOutput `pulumi:"gitlab"`
	// State file to upload when creating a new stack
	ImportState pulumi.StringPtrOutput `pulumi:"importState"`
	// Path to the state file to upload when creating a new stack
	ImportStateFile pulumi.StringPtrOutput `pulumi:"importStateFile"`
	// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
	Kubernetes StackKubernetesPtrOutput `pulumi:"kubernetes"`
	Labels     pulumi.StringArrayOutput `pulumi:"labels"`
	// Determines if Spacelift should manage state for this stack. Defaults to `true`.
	ManageState pulumi.BoolPtrOutput `pulumi:"manageState"`
	// Name of the stack - should be unique in one account
	Name pulumi.StringOutput `pulumi:"name"`
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot pulumi.StringPtrOutput `pulumi:"projectRoot"`
	// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
	ProtectFromDeletion pulumi.BoolPtrOutput `pulumi:"protectFromDeletion"`
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi StackPulumiPtrOutput `pulumi:"pulumi"`
	// Name of the repository, without the owner part
	Repository pulumi.StringOutput `pulumi:"repository"`
	// Name of the Docker image used to process Runs
	RunnerImage pulumi.StringPtrOutput `pulumi:"runnerImage"`
	Showcase    StackShowcasePtrOutput `pulumi:"showcase"`
	// Allows setting the custom ID (slug) for the stack
	Slug pulumi.StringOutput `pulumi:"slug"`
	// ID (slug) of the space the stack is in
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
	// Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
	// and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
	// Defaults to `false`.
	TerraformSmartSanitization pulumi.BoolPtrOutput `pulumi:"terraformSmartSanitization"`
	// Terraform version to use
	TerraformVersion pulumi.StringPtrOutput `pulumi:"terraformVersion"`
	// Terraform workspace to select
	TerraformWorkspace pulumi.StringPtrOutput `pulumi:"terraformWorkspace"`
	// ID of the worker pool to use
	WorkerPoolId pulumi.StringPtrOutput `pulumi:"workerPoolId"`
}

// NewStack registers a new resource with the given unique name, arguments, and options.
func NewStack(ctx *pulumi.Context,
	name string, args *StackArgs, opts ...pulumi.ResourceOption) (*Stack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Branch == nil {
		return nil, errors.New("invalid value for required argument 'Branch'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Stack
	err := ctx.RegisterResource("spacelift:index/stack:Stack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStack gets an existing Stack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackState, opts ...pulumi.ResourceOption) (*Stack, error) {
	var resource Stack
	err := ctx.ReadResource("spacelift:index/stack:Stack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stack resources.
type stackState struct {
	// Indicates whether this stack can manage others. Defaults to `false`.
	Administrative *bool `pulumi:"administrative"`
	// List of after-apply scripts
	AfterApplies []string `pulumi:"afterApplies"`
	// List of after-destroy scripts
	AfterDestroys []string `pulumi:"afterDestroys"`
	// List of after-init scripts
	AfterInits []string `pulumi:"afterInits"`
	// List of after-perform scripts
	AfterPerforms []string `pulumi:"afterPerforms"`
	// List of after-plan scripts
	AfterPlans []string `pulumi:"afterPlans"`
	// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
	Ansible *StackAnsible `pulumi:"ansible"`
	// Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
	Autodeploy *bool `pulumi:"autodeploy"`
	// Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
	Autoretry *bool `pulumi:"autoretry"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement *string `pulumi:"awsAssumeRolePolicyStatement"`
	// Azure DevOps VCS settings
	AzureDevops *StackAzureDevops `pulumi:"azureDevops"`
	// List of before-apply scripts
	BeforeApplies []string `pulumi:"beforeApplies"`
	// List of before-destroy scripts
	BeforeDestroys []string `pulumi:"beforeDestroys"`
	// List of before-init scripts
	BeforeInits []string `pulumi:"beforeInits"`
	// List of before-perform scripts
	BeforePerforms []string `pulumi:"beforePerforms"`
	// List of before-plan scripts
	BeforePlans []string `pulumi:"beforePlans"`
	// Bitbucket Cloud VCS settings
	BitbucketCloud *StackBitbucketCloud `pulumi:"bitbucketCloud"`
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter *StackBitbucketDatacenter `pulumi:"bitbucketDatacenter"`
	// GitHub branch to apply changes to
	Branch *string `pulumi:"branch"`
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation *StackCloudformation `pulumi:"cloudformation"`
	// Free-form stack description for users
	Description *string `pulumi:"description"`
	// Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
	EnableLocalPreview *bool `pulumi:"enableLocalPreview"`
	// Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
	GithubActionDeploy *bool `pulumi:"githubActionDeploy"`
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise *StackGithubEnterprise `pulumi:"githubEnterprise"`
	// GitLab VCS settings
	Gitlab *StackGitlab `pulumi:"gitlab"`
	// State file to upload when creating a new stack
	ImportState *string `pulumi:"importState"`
	// Path to the state file to upload when creating a new stack
	ImportStateFile *string `pulumi:"importStateFile"`
	// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
	Kubernetes *StackKubernetes `pulumi:"kubernetes"`
	Labels     []string         `pulumi:"labels"`
	// Determines if Spacelift should manage state for this stack. Defaults to `true`.
	ManageState *bool `pulumi:"manageState"`
	// Name of the stack - should be unique in one account
	Name *string `pulumi:"name"`
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot *string `pulumi:"projectRoot"`
	// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
	ProtectFromDeletion *bool `pulumi:"protectFromDeletion"`
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi *StackPulumi `pulumi:"pulumi"`
	// Name of the repository, without the owner part
	Repository *string `pulumi:"repository"`
	// Name of the Docker image used to process Runs
	RunnerImage *string        `pulumi:"runnerImage"`
	Showcase    *StackShowcase `pulumi:"showcase"`
	// Allows setting the custom ID (slug) for the stack
	Slug *string `pulumi:"slug"`
	// ID (slug) of the space the stack is in
	SpaceId *string `pulumi:"spaceId"`
	// Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
	// and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
	// Defaults to `false`.
	TerraformSmartSanitization *bool `pulumi:"terraformSmartSanitization"`
	// Terraform version to use
	TerraformVersion *string `pulumi:"terraformVersion"`
	// Terraform workspace to select
	TerraformWorkspace *string `pulumi:"terraformWorkspace"`
	// ID of the worker pool to use
	WorkerPoolId *string `pulumi:"workerPoolId"`
}

type StackState struct {
	// Indicates whether this stack can manage others. Defaults to `false`.
	Administrative pulumi.BoolPtrInput
	// List of after-apply scripts
	AfterApplies pulumi.StringArrayInput
	// List of after-destroy scripts
	AfterDestroys pulumi.StringArrayInput
	// List of after-init scripts
	AfterInits pulumi.StringArrayInput
	// List of after-perform scripts
	AfterPerforms pulumi.StringArrayInput
	// List of after-plan scripts
	AfterPlans pulumi.StringArrayInput
	// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
	Ansible StackAnsiblePtrInput
	// Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
	Autodeploy pulumi.BoolPtrInput
	// Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
	Autoretry pulumi.BoolPtrInput
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement pulumi.StringPtrInput
	// Azure DevOps VCS settings
	AzureDevops StackAzureDevopsPtrInput
	// List of before-apply scripts
	BeforeApplies pulumi.StringArrayInput
	// List of before-destroy scripts
	BeforeDestroys pulumi.StringArrayInput
	// List of before-init scripts
	BeforeInits pulumi.StringArrayInput
	// List of before-perform scripts
	BeforePerforms pulumi.StringArrayInput
	// List of before-plan scripts
	BeforePlans pulumi.StringArrayInput
	// Bitbucket Cloud VCS settings
	BitbucketCloud StackBitbucketCloudPtrInput
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter StackBitbucketDatacenterPtrInput
	// GitHub branch to apply changes to
	Branch pulumi.StringPtrInput
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation StackCloudformationPtrInput
	// Free-form stack description for users
	Description pulumi.StringPtrInput
	// Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
	EnableLocalPreview pulumi.BoolPtrInput
	// Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
	GithubActionDeploy pulumi.BoolPtrInput
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise StackGithubEnterprisePtrInput
	// GitLab VCS settings
	Gitlab StackGitlabPtrInput
	// State file to upload when creating a new stack
	ImportState pulumi.StringPtrInput
	// Path to the state file to upload when creating a new stack
	ImportStateFile pulumi.StringPtrInput
	// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
	Kubernetes StackKubernetesPtrInput
	Labels     pulumi.StringArrayInput
	// Determines if Spacelift should manage state for this stack. Defaults to `true`.
	ManageState pulumi.BoolPtrInput
	// Name of the stack - should be unique in one account
	Name pulumi.StringPtrInput
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot pulumi.StringPtrInput
	// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
	ProtectFromDeletion pulumi.BoolPtrInput
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi StackPulumiPtrInput
	// Name of the repository, without the owner part
	Repository pulumi.StringPtrInput
	// Name of the Docker image used to process Runs
	RunnerImage pulumi.StringPtrInput
	Showcase    StackShowcasePtrInput
	// Allows setting the custom ID (slug) for the stack
	Slug pulumi.StringPtrInput
	// ID (slug) of the space the stack is in
	SpaceId pulumi.StringPtrInput
	// Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
	// and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
	// Defaults to `false`.
	TerraformSmartSanitization pulumi.BoolPtrInput
	// Terraform version to use
	TerraformVersion pulumi.StringPtrInput
	// Terraform workspace to select
	TerraformWorkspace pulumi.StringPtrInput
	// ID of the worker pool to use
	WorkerPoolId pulumi.StringPtrInput
}

func (StackState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackState)(nil)).Elem()
}

type stackArgs struct {
	// Indicates whether this stack can manage others. Defaults to `false`.
	Administrative *bool `pulumi:"administrative"`
	// List of after-apply scripts
	AfterApplies []string `pulumi:"afterApplies"`
	// List of after-destroy scripts
	AfterDestroys []string `pulumi:"afterDestroys"`
	// List of after-init scripts
	AfterInits []string `pulumi:"afterInits"`
	// List of after-perform scripts
	AfterPerforms []string `pulumi:"afterPerforms"`
	// List of after-plan scripts
	AfterPlans []string `pulumi:"afterPlans"`
	// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
	Ansible *StackAnsible `pulumi:"ansible"`
	// Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
	Autodeploy *bool `pulumi:"autodeploy"`
	// Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
	Autoretry *bool `pulumi:"autoretry"`
	// Azure DevOps VCS settings
	AzureDevops *StackAzureDevops `pulumi:"azureDevops"`
	// List of before-apply scripts
	BeforeApplies []string `pulumi:"beforeApplies"`
	// List of before-destroy scripts
	BeforeDestroys []string `pulumi:"beforeDestroys"`
	// List of before-init scripts
	BeforeInits []string `pulumi:"beforeInits"`
	// List of before-perform scripts
	BeforePerforms []string `pulumi:"beforePerforms"`
	// List of before-plan scripts
	BeforePlans []string `pulumi:"beforePlans"`
	// Bitbucket Cloud VCS settings
	BitbucketCloud *StackBitbucketCloud `pulumi:"bitbucketCloud"`
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter *StackBitbucketDatacenter `pulumi:"bitbucketDatacenter"`
	// GitHub branch to apply changes to
	Branch string `pulumi:"branch"`
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation *StackCloudformation `pulumi:"cloudformation"`
	// Free-form stack description for users
	Description *string `pulumi:"description"`
	// Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
	EnableLocalPreview *bool `pulumi:"enableLocalPreview"`
	// Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
	GithubActionDeploy *bool `pulumi:"githubActionDeploy"`
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise *StackGithubEnterprise `pulumi:"githubEnterprise"`
	// GitLab VCS settings
	Gitlab *StackGitlab `pulumi:"gitlab"`
	// State file to upload when creating a new stack
	ImportState *string `pulumi:"importState"`
	// Path to the state file to upload when creating a new stack
	ImportStateFile *string `pulumi:"importStateFile"`
	// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
	Kubernetes *StackKubernetes `pulumi:"kubernetes"`
	Labels     []string         `pulumi:"labels"`
	// Determines if Spacelift should manage state for this stack. Defaults to `true`.
	ManageState *bool `pulumi:"manageState"`
	// Name of the stack - should be unique in one account
	Name *string `pulumi:"name"`
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot *string `pulumi:"projectRoot"`
	// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
	ProtectFromDeletion *bool `pulumi:"protectFromDeletion"`
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi *StackPulumi `pulumi:"pulumi"`
	// Name of the repository, without the owner part
	Repository string `pulumi:"repository"`
	// Name of the Docker image used to process Runs
	RunnerImage *string        `pulumi:"runnerImage"`
	Showcase    *StackShowcase `pulumi:"showcase"`
	// Allows setting the custom ID (slug) for the stack
	Slug *string `pulumi:"slug"`
	// ID (slug) of the space the stack is in
	SpaceId *string `pulumi:"spaceId"`
	// Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
	// and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
	// Defaults to `false`.
	TerraformSmartSanitization *bool `pulumi:"terraformSmartSanitization"`
	// Terraform version to use
	TerraformVersion *string `pulumi:"terraformVersion"`
	// Terraform workspace to select
	TerraformWorkspace *string `pulumi:"terraformWorkspace"`
	// ID of the worker pool to use
	WorkerPoolId *string `pulumi:"workerPoolId"`
}

// The set of arguments for constructing a Stack resource.
type StackArgs struct {
	// Indicates whether this stack can manage others. Defaults to `false`.
	Administrative pulumi.BoolPtrInput
	// List of after-apply scripts
	AfterApplies pulumi.StringArrayInput
	// List of after-destroy scripts
	AfterDestroys pulumi.StringArrayInput
	// List of after-init scripts
	AfterInits pulumi.StringArrayInput
	// List of after-perform scripts
	AfterPerforms pulumi.StringArrayInput
	// List of after-plan scripts
	AfterPlans pulumi.StringArrayInput
	// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
	Ansible StackAnsiblePtrInput
	// Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
	Autodeploy pulumi.BoolPtrInput
	// Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
	Autoretry pulumi.BoolPtrInput
	// Azure DevOps VCS settings
	AzureDevops StackAzureDevopsPtrInput
	// List of before-apply scripts
	BeforeApplies pulumi.StringArrayInput
	// List of before-destroy scripts
	BeforeDestroys pulumi.StringArrayInput
	// List of before-init scripts
	BeforeInits pulumi.StringArrayInput
	// List of before-perform scripts
	BeforePerforms pulumi.StringArrayInput
	// List of before-plan scripts
	BeforePlans pulumi.StringArrayInput
	// Bitbucket Cloud VCS settings
	BitbucketCloud StackBitbucketCloudPtrInput
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter StackBitbucketDatacenterPtrInput
	// GitHub branch to apply changes to
	Branch pulumi.StringInput
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation StackCloudformationPtrInput
	// Free-form stack description for users
	Description pulumi.StringPtrInput
	// Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
	EnableLocalPreview pulumi.BoolPtrInput
	// Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
	GithubActionDeploy pulumi.BoolPtrInput
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise StackGithubEnterprisePtrInput
	// GitLab VCS settings
	Gitlab StackGitlabPtrInput
	// State file to upload when creating a new stack
	ImportState pulumi.StringPtrInput
	// Path to the state file to upload when creating a new stack
	ImportStateFile pulumi.StringPtrInput
	// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
	Kubernetes StackKubernetesPtrInput
	Labels     pulumi.StringArrayInput
	// Determines if Spacelift should manage state for this stack. Defaults to `true`.
	ManageState pulumi.BoolPtrInput
	// Name of the stack - should be unique in one account
	Name pulumi.StringPtrInput
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot pulumi.StringPtrInput
	// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
	ProtectFromDeletion pulumi.BoolPtrInput
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi StackPulumiPtrInput
	// Name of the repository, without the owner part
	Repository pulumi.StringInput
	// Name of the Docker image used to process Runs
	RunnerImage pulumi.StringPtrInput
	Showcase    StackShowcasePtrInput
	// Allows setting the custom ID (slug) for the stack
	Slug pulumi.StringPtrInput
	// ID (slug) of the space the stack is in
	SpaceId pulumi.StringPtrInput
	// Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
	// and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
	// Defaults to `false`.
	TerraformSmartSanitization pulumi.BoolPtrInput
	// Terraform version to use
	TerraformVersion pulumi.StringPtrInput
	// Terraform workspace to select
	TerraformWorkspace pulumi.StringPtrInput
	// ID of the worker pool to use
	WorkerPoolId pulumi.StringPtrInput
}

func (StackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackArgs)(nil)).Elem()
}

type StackInput interface {
	pulumi.Input

	ToStackOutput() StackOutput
	ToStackOutputWithContext(ctx context.Context) StackOutput
}

func (*Stack) ElementType() reflect.Type {
	return reflect.TypeOf((**Stack)(nil)).Elem()
}

func (i *Stack) ToStackOutput() StackOutput {
	return i.ToStackOutputWithContext(context.Background())
}

func (i *Stack) ToStackOutputWithContext(ctx context.Context) StackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackOutput)
}

// StackArrayInput is an input type that accepts StackArray and StackArrayOutput values.
// You can construct a concrete instance of `StackArrayInput` via:
//
//	StackArray{ StackArgs{...} }
type StackArrayInput interface {
	pulumi.Input

	ToStackArrayOutput() StackArrayOutput
	ToStackArrayOutputWithContext(context.Context) StackArrayOutput
}

type StackArray []StackInput

func (StackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stack)(nil)).Elem()
}

func (i StackArray) ToStackArrayOutput() StackArrayOutput {
	return i.ToStackArrayOutputWithContext(context.Background())
}

func (i StackArray) ToStackArrayOutputWithContext(ctx context.Context) StackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackArrayOutput)
}

// StackMapInput is an input type that accepts StackMap and StackMapOutput values.
// You can construct a concrete instance of `StackMapInput` via:
//
//	StackMap{ "key": StackArgs{...} }
type StackMapInput interface {
	pulumi.Input

	ToStackMapOutput() StackMapOutput
	ToStackMapOutputWithContext(context.Context) StackMapOutput
}

type StackMap map[string]StackInput

func (StackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stack)(nil)).Elem()
}

func (i StackMap) ToStackMapOutput() StackMapOutput {
	return i.ToStackMapOutputWithContext(context.Background())
}

func (i StackMap) ToStackMapOutputWithContext(ctx context.Context) StackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackMapOutput)
}

type StackOutput struct{ *pulumi.OutputState }

func (StackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Stack)(nil)).Elem()
}

func (o StackOutput) ToStackOutput() StackOutput {
	return o
}

func (o StackOutput) ToStackOutputWithContext(ctx context.Context) StackOutput {
	return o
}

// Indicates whether this stack can manage others. Defaults to `false`.
func (o StackOutput) Administrative() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.BoolPtrOutput { return v.Administrative }).(pulumi.BoolPtrOutput)
}

// List of after-apply scripts
func (o StackOutput) AfterApplies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.AfterApplies }).(pulumi.StringArrayOutput)
}

// List of after-destroy scripts
func (o StackOutput) AfterDestroys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.AfterDestroys }).(pulumi.StringArrayOutput)
}

// List of after-init scripts
func (o StackOutput) AfterInits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.AfterInits }).(pulumi.StringArrayOutput)
}

// List of after-perform scripts
func (o StackOutput) AfterPerforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.AfterPerforms }).(pulumi.StringArrayOutput)
}

// List of after-plan scripts
func (o StackOutput) AfterPlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.AfterPlans }).(pulumi.StringArrayOutput)
}

// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
func (o StackOutput) Ansible() StackAnsiblePtrOutput {
	return o.ApplyT(func(v *Stack) StackAnsiblePtrOutput { return v.Ansible }).(StackAnsiblePtrOutput)
}

// Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
func (o StackOutput) Autodeploy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.BoolPtrOutput { return v.Autodeploy }).(pulumi.BoolPtrOutput)
}

// Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
func (o StackOutput) Autoretry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.BoolPtrOutput { return v.Autoretry }).(pulumi.BoolPtrOutput)
}

// AWS IAM assume role policy statement setting up trust relationship
func (o StackOutput) AwsAssumeRolePolicyStatement() pulumi.StringOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringOutput { return v.AwsAssumeRolePolicyStatement }).(pulumi.StringOutput)
}

// Azure DevOps VCS settings
func (o StackOutput) AzureDevops() StackAzureDevopsPtrOutput {
	return o.ApplyT(func(v *Stack) StackAzureDevopsPtrOutput { return v.AzureDevops }).(StackAzureDevopsPtrOutput)
}

// List of before-apply scripts
func (o StackOutput) BeforeApplies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.BeforeApplies }).(pulumi.StringArrayOutput)
}

// List of before-destroy scripts
func (o StackOutput) BeforeDestroys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.BeforeDestroys }).(pulumi.StringArrayOutput)
}

// List of before-init scripts
func (o StackOutput) BeforeInits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.BeforeInits }).(pulumi.StringArrayOutput)
}

// List of before-perform scripts
func (o StackOutput) BeforePerforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.BeforePerforms }).(pulumi.StringArrayOutput)
}

// List of before-plan scripts
func (o StackOutput) BeforePlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.BeforePlans }).(pulumi.StringArrayOutput)
}

// Bitbucket Cloud VCS settings
func (o StackOutput) BitbucketCloud() StackBitbucketCloudPtrOutput {
	return o.ApplyT(func(v *Stack) StackBitbucketCloudPtrOutput { return v.BitbucketCloud }).(StackBitbucketCloudPtrOutput)
}

// Bitbucket Datacenter VCS settings
func (o StackOutput) BitbucketDatacenter() StackBitbucketDatacenterPtrOutput {
	return o.ApplyT(func(v *Stack) StackBitbucketDatacenterPtrOutput { return v.BitbucketDatacenter }).(StackBitbucketDatacenterPtrOutput)
}

// GitHub branch to apply changes to
func (o StackOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringOutput { return v.Branch }).(pulumi.StringOutput)
}

// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
func (o StackOutput) Cloudformation() StackCloudformationPtrOutput {
	return o.ApplyT(func(v *Stack) StackCloudformationPtrOutput { return v.Cloudformation }).(StackCloudformationPtrOutput)
}

// Free-form stack description for users
func (o StackOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
func (o StackOutput) EnableLocalPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.BoolPtrOutput { return v.EnableLocalPreview }).(pulumi.BoolPtrOutput)
}

// Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
func (o StackOutput) GithubActionDeploy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.BoolPtrOutput { return v.GithubActionDeploy }).(pulumi.BoolPtrOutput)
}

// GitHub Enterprise (self-hosted) VCS settings
func (o StackOutput) GithubEnterprise() StackGithubEnterprisePtrOutput {
	return o.ApplyT(func(v *Stack) StackGithubEnterprisePtrOutput { return v.GithubEnterprise }).(StackGithubEnterprisePtrOutput)
}

// GitLab VCS settings
func (o StackOutput) Gitlab() StackGitlabPtrOutput {
	return o.ApplyT(func(v *Stack) StackGitlabPtrOutput { return v.Gitlab }).(StackGitlabPtrOutput)
}

// State file to upload when creating a new stack
func (o StackOutput) ImportState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.ImportState }).(pulumi.StringPtrOutput)
}

// Path to the state file to upload when creating a new stack
func (o StackOutput) ImportStateFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.ImportStateFile }).(pulumi.StringPtrOutput)
}

// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
func (o StackOutput) Kubernetes() StackKubernetesPtrOutput {
	return o.ApplyT(func(v *Stack) StackKubernetesPtrOutput { return v.Kubernetes }).(StackKubernetesPtrOutput)
}

func (o StackOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// Determines if Spacelift should manage state for this stack. Defaults to `true`.
func (o StackOutput) ManageState() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.BoolPtrOutput { return v.ManageState }).(pulumi.BoolPtrOutput)
}

// Name of the stack - should be unique in one account
func (o StackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
func (o StackOutput) ProjectRoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.ProjectRoot }).(pulumi.StringPtrOutput)
}

// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
func (o StackOutput) ProtectFromDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.BoolPtrOutput { return v.ProtectFromDeletion }).(pulumi.BoolPtrOutput)
}

// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
func (o StackOutput) Pulumi() StackPulumiPtrOutput {
	return o.ApplyT(func(v *Stack) StackPulumiPtrOutput { return v.Pulumi }).(StackPulumiPtrOutput)
}

// Name of the repository, without the owner part
func (o StackOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// Name of the Docker image used to process Runs
func (o StackOutput) RunnerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.RunnerImage }).(pulumi.StringPtrOutput)
}

func (o StackOutput) Showcase() StackShowcasePtrOutput {
	return o.ApplyT(func(v *Stack) StackShowcasePtrOutput { return v.Showcase }).(StackShowcasePtrOutput)
}

// Allows setting the custom ID (slug) for the stack
func (o StackOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// ID (slug) of the space the stack is in
func (o StackOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

// Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
// and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
// Defaults to `false`.
func (o StackOutput) TerraformSmartSanitization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.BoolPtrOutput { return v.TerraformSmartSanitization }).(pulumi.BoolPtrOutput)
}

// Terraform version to use
func (o StackOutput) TerraformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.TerraformVersion }).(pulumi.StringPtrOutput)
}

// Terraform workspace to select
func (o StackOutput) TerraformWorkspace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.TerraformWorkspace }).(pulumi.StringPtrOutput)
}

// ID of the worker pool to use
func (o StackOutput) WorkerPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.WorkerPoolId }).(pulumi.StringPtrOutput)
}

type StackArrayOutput struct{ *pulumi.OutputState }

func (StackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stack)(nil)).Elem()
}

func (o StackArrayOutput) ToStackArrayOutput() StackArrayOutput {
	return o
}

func (o StackArrayOutput) ToStackArrayOutputWithContext(ctx context.Context) StackArrayOutput {
	return o
}

func (o StackArrayOutput) Index(i pulumi.IntInput) StackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Stack {
		return vs[0].([]*Stack)[vs[1].(int)]
	}).(StackOutput)
}

type StackMapOutput struct{ *pulumi.OutputState }

func (StackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stack)(nil)).Elem()
}

func (o StackMapOutput) ToStackMapOutput() StackMapOutput {
	return o
}

func (o StackMapOutput) ToStackMapOutputWithContext(ctx context.Context) StackMapOutput {
	return o
}

func (o StackMapOutput) MapIndex(k pulumi.StringInput) StackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Stack {
		return vs[0].(map[string]*Stack)[vs[1].(string)]
	}).(StackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackInput)(nil)).Elem(), &Stack{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackArrayInput)(nil)).Elem(), StackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackMapInput)(nil)).Elem(), StackMap{})
	pulumi.RegisterOutputType(StackOutput{})
	pulumi.RegisterOutputType(StackArrayOutput{})
	pulumi.RegisterOutputType(StackMapOutput{})
}
