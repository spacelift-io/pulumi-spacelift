// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Stack struct {
	pulumi.CustomResourceState

	// Indicates whether this stack can manage others
	Administrative pulumi.BoolPtrOutput `pulumi:"administrative"`
	// Indicates whether changes to this stack can be automatically deployed
	Autodeploy pulumi.BoolPtrOutput `pulumi:"autodeploy"`
	// Indicates whether obsolete proposed changes should automatically be retried
	Autoretry pulumi.BoolPtrOutput `pulumi:"autoretry"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement pulumi.StringOutput `pulumi:"awsAssumeRolePolicyStatement"`
	// List of before-init scripts
	BeforeInits pulumi.StringArrayOutput `pulumi:"beforeInits"`
	// GitHub branch to apply changes to
	Branch pulumi.StringOutput `pulumi:"branch"`
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation StackCloudformationPtrOutput `pulumi:"cloudformation"`
	// Free-form stack description for users
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Gitlab      StackGitlabPtrOutput   `pulumi:"gitlab"`
	// State file to upload when creating a new stack
	ImportState pulumi.StringPtrOutput   `pulumi:"importState"`
	Labels      pulumi.StringArrayOutput `pulumi:"labels"`
	// Determines if Spacelift should manage state for this stack
	ManageState pulumi.BoolPtrOutput `pulumi:"manageState"`
	// Name of the stack - should be unique in one account
	Name pulumi.StringOutput `pulumi:"name"`
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot pulumi.StringPtrOutput `pulumi:"projectRoot"`
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi StackPulumiPtrOutput `pulumi:"pulumi"`
	// Name of the repository, without the owner part
	Repository pulumi.StringOutput `pulumi:"repository"`
	// Name of the Docker image used to process Runs
	RunnerImage pulumi.StringPtrOutput `pulumi:"runnerImage"`
	// Terraform version to use
	TerraformVersion pulumi.StringPtrOutput `pulumi:"terraformVersion"`
	// Terraform workspace to select
	TerraformWorkspace pulumi.StringPtrOutput `pulumi:"terraformWorkspace"`
	// ID of the worker pool to use
	WorkerPoolId pulumi.StringPtrOutput `pulumi:"workerPoolId"`
}

// NewStack registers a new resource with the given unique name, arguments, and options.
func NewStack(ctx *pulumi.Context,
	name string, args *StackArgs, opts ...pulumi.ResourceOption) (*Stack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Branch == nil {
		return nil, errors.New("invalid value for required argument 'Branch'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	var resource Stack
	err := ctx.RegisterResource("spacelift:index/stack:Stack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStack gets an existing Stack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackState, opts ...pulumi.ResourceOption) (*Stack, error) {
	var resource Stack
	err := ctx.ReadResource("spacelift:index/stack:Stack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stack resources.
type stackState struct {
	// Indicates whether this stack can manage others
	Administrative *bool `pulumi:"administrative"`
	// Indicates whether changes to this stack can be automatically deployed
	Autodeploy *bool `pulumi:"autodeploy"`
	// Indicates whether obsolete proposed changes should automatically be retried
	Autoretry *bool `pulumi:"autoretry"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement *string `pulumi:"awsAssumeRolePolicyStatement"`
	// List of before-init scripts
	BeforeInits []string `pulumi:"beforeInits"`
	// GitHub branch to apply changes to
	Branch *string `pulumi:"branch"`
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation *StackCloudformation `pulumi:"cloudformation"`
	// Free-form stack description for users
	Description *string      `pulumi:"description"`
	Gitlab      *StackGitlab `pulumi:"gitlab"`
	// State file to upload when creating a new stack
	ImportState *string  `pulumi:"importState"`
	Labels      []string `pulumi:"labels"`
	// Determines if Spacelift should manage state for this stack
	ManageState *bool `pulumi:"manageState"`
	// Name of the stack - should be unique in one account
	Name *string `pulumi:"name"`
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot *string `pulumi:"projectRoot"`
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi *StackPulumi `pulumi:"pulumi"`
	// Name of the repository, without the owner part
	Repository *string `pulumi:"repository"`
	// Name of the Docker image used to process Runs
	RunnerImage *string `pulumi:"runnerImage"`
	// Terraform version to use
	TerraformVersion *string `pulumi:"terraformVersion"`
	// Terraform workspace to select
	TerraformWorkspace *string `pulumi:"terraformWorkspace"`
	// ID of the worker pool to use
	WorkerPoolId *string `pulumi:"workerPoolId"`
}

type StackState struct {
	// Indicates whether this stack can manage others
	Administrative pulumi.BoolPtrInput
	// Indicates whether changes to this stack can be automatically deployed
	Autodeploy pulumi.BoolPtrInput
	// Indicates whether obsolete proposed changes should automatically be retried
	Autoretry pulumi.BoolPtrInput
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement pulumi.StringPtrInput
	// List of before-init scripts
	BeforeInits pulumi.StringArrayInput
	// GitHub branch to apply changes to
	Branch pulumi.StringPtrInput
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation StackCloudformationPtrInput
	// Free-form stack description for users
	Description pulumi.StringPtrInput
	Gitlab      StackGitlabPtrInput
	// State file to upload when creating a new stack
	ImportState pulumi.StringPtrInput
	Labels      pulumi.StringArrayInput
	// Determines if Spacelift should manage state for this stack
	ManageState pulumi.BoolPtrInput
	// Name of the stack - should be unique in one account
	Name pulumi.StringPtrInput
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot pulumi.StringPtrInput
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi StackPulumiPtrInput
	// Name of the repository, without the owner part
	Repository pulumi.StringPtrInput
	// Name of the Docker image used to process Runs
	RunnerImage pulumi.StringPtrInput
	// Terraform version to use
	TerraformVersion pulumi.StringPtrInput
	// Terraform workspace to select
	TerraformWorkspace pulumi.StringPtrInput
	// ID of the worker pool to use
	WorkerPoolId pulumi.StringPtrInput
}

func (StackState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackState)(nil)).Elem()
}

type stackArgs struct {
	// Indicates whether this stack can manage others
	Administrative *bool `pulumi:"administrative"`
	// Indicates whether changes to this stack can be automatically deployed
	Autodeploy *bool `pulumi:"autodeploy"`
	// Indicates whether obsolete proposed changes should automatically be retried
	Autoretry *bool `pulumi:"autoretry"`
	// List of before-init scripts
	BeforeInits []string `pulumi:"beforeInits"`
	// GitHub branch to apply changes to
	Branch string `pulumi:"branch"`
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation *StackCloudformation `pulumi:"cloudformation"`
	// Free-form stack description for users
	Description *string      `pulumi:"description"`
	Gitlab      *StackGitlab `pulumi:"gitlab"`
	// State file to upload when creating a new stack
	ImportState *string  `pulumi:"importState"`
	Labels      []string `pulumi:"labels"`
	// Determines if Spacelift should manage state for this stack
	ManageState *bool `pulumi:"manageState"`
	// Name of the stack - should be unique in one account
	Name string `pulumi:"name"`
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot *string `pulumi:"projectRoot"`
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi *StackPulumi `pulumi:"pulumi"`
	// Name of the repository, without the owner part
	Repository string `pulumi:"repository"`
	// Name of the Docker image used to process Runs
	RunnerImage *string `pulumi:"runnerImage"`
	// Terraform version to use
	TerraformVersion *string `pulumi:"terraformVersion"`
	// Terraform workspace to select
	TerraformWorkspace *string `pulumi:"terraformWorkspace"`
	// ID of the worker pool to use
	WorkerPoolId *string `pulumi:"workerPoolId"`
}

// The set of arguments for constructing a Stack resource.
type StackArgs struct {
	// Indicates whether this stack can manage others
	Administrative pulumi.BoolPtrInput
	// Indicates whether changes to this stack can be automatically deployed
	Autodeploy pulumi.BoolPtrInput
	// Indicates whether obsolete proposed changes should automatically be retried
	Autoretry pulumi.BoolPtrInput
	// List of before-init scripts
	BeforeInits pulumi.StringArrayInput
	// GitHub branch to apply changes to
	Branch pulumi.StringInput
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	Cloudformation StackCloudformationPtrInput
	// Free-form stack description for users
	Description pulumi.StringPtrInput
	Gitlab      StackGitlabPtrInput
	// State file to upload when creating a new stack
	ImportState pulumi.StringPtrInput
	Labels      pulumi.StringArrayInput
	// Determines if Spacelift should manage state for this stack
	ManageState pulumi.BoolPtrInput
	// Name of the stack - should be unique in one account
	Name pulumi.StringInput
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot pulumi.StringPtrInput
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi StackPulumiPtrInput
	// Name of the repository, without the owner part
	Repository pulumi.StringInput
	// Name of the Docker image used to process Runs
	RunnerImage pulumi.StringPtrInput
	// Terraform version to use
	TerraformVersion pulumi.StringPtrInput
	// Terraform workspace to select
	TerraformWorkspace pulumi.StringPtrInput
	// ID of the worker pool to use
	WorkerPoolId pulumi.StringPtrInput
}

func (StackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackArgs)(nil)).Elem()
}

type StackInput interface {
	pulumi.Input

	ToStackOutput() StackOutput
	ToStackOutputWithContext(ctx context.Context) StackOutput
}

func (*Stack) ElementType() reflect.Type {
	return reflect.TypeOf((*Stack)(nil))
}

func (i *Stack) ToStackOutput() StackOutput {
	return i.ToStackOutputWithContext(context.Background())
}

func (i *Stack) ToStackOutputWithContext(ctx context.Context) StackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackOutput)
}

type StackOutput struct {
	*pulumi.OutputState
}

func (StackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Stack)(nil))
}

func (o StackOutput) ToStackOutput() StackOutput {
	return o
}

func (o StackOutput) ToStackOutputWithContext(ctx context.Context) StackOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StackOutput{})
}
