// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsIntegration` represents an integration with an AWS account. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect.
//
// Note: when assuming credentials for **shared workers**, Spacelift will use `$accountName-$integrationID@$stackID-$suffix` or `$accountName-$integrationID@$moduleID-$suffix` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole),$suffix will be `read` or `write`.
//
// ## Import
//
// ```sh
//
//	$ pulumi import spacelift:index/awsIntegration:AwsIntegration read_write_integration $INTEGRATION_ID
//
// ```
type AwsIntegration struct {
	pulumi.CustomResourceState

	// Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.
	DurationSeconds pulumi.IntPtrOutput `pulumi:"durationSeconds"`
	// Custom external ID (works only for private workers).
	ExternalId pulumi.StringPtrOutput `pulumi:"externalId"`
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker pulumi.BoolPtrOutput `pulumi:"generateCredentialsInWorker"`
	// Labels to set on the integration
	Labels pulumi.StringArrayOutput `pulumi:"labels"`
	// The friendly name of the integration
	Name pulumi.StringOutput `pulumi:"name"`
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// ID (slug) of the space the integration is in
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
}

// NewAwsIntegration registers a new resource with the given unique name, arguments, and options.
func NewAwsIntegration(ctx *pulumi.Context,
	name string, args *AwsIntegrationArgs, opts ...pulumi.ResourceOption) (*AwsIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AwsIntegration
	err := ctx.RegisterResource("spacelift:index/awsIntegration:AwsIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsIntegration gets an existing AwsIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsIntegrationState, opts ...pulumi.ResourceOption) (*AwsIntegration, error) {
	var resource AwsIntegration
	err := ctx.ReadResource("spacelift:index/awsIntegration:AwsIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsIntegration resources.
type awsIntegrationState struct {
	// Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.
	DurationSeconds *int `pulumi:"durationSeconds"`
	// Custom external ID (works only for private workers).
	ExternalId *string `pulumi:"externalId"`
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker *bool `pulumi:"generateCredentialsInWorker"`
	// Labels to set on the integration
	Labels []string `pulumi:"labels"`
	// The friendly name of the integration
	Name *string `pulumi:"name"`
	// ARN of the AWS IAM role to attach
	RoleArn *string `pulumi:"roleArn"`
	// ID (slug) of the space the integration is in
	SpaceId *string `pulumi:"spaceId"`
}

type AwsIntegrationState struct {
	// Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.
	DurationSeconds pulumi.IntPtrInput
	// Custom external ID (works only for private workers).
	ExternalId pulumi.StringPtrInput
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker pulumi.BoolPtrInput
	// Labels to set on the integration
	Labels pulumi.StringArrayInput
	// The friendly name of the integration
	Name pulumi.StringPtrInput
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringPtrInput
	// ID (slug) of the space the integration is in
	SpaceId pulumi.StringPtrInput
}

func (AwsIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsIntegrationState)(nil)).Elem()
}

type awsIntegrationArgs struct {
	// Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.
	DurationSeconds *int `pulumi:"durationSeconds"`
	// Custom external ID (works only for private workers).
	ExternalId *string `pulumi:"externalId"`
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker *bool `pulumi:"generateCredentialsInWorker"`
	// Labels to set on the integration
	Labels []string `pulumi:"labels"`
	// The friendly name of the integration
	Name *string `pulumi:"name"`
	// ARN of the AWS IAM role to attach
	RoleArn string `pulumi:"roleArn"`
	// ID (slug) of the space the integration is in
	SpaceId *string `pulumi:"spaceId"`
}

// The set of arguments for constructing a AwsIntegration resource.
type AwsIntegrationArgs struct {
	// Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.
	DurationSeconds pulumi.IntPtrInput
	// Custom external ID (works only for private workers).
	ExternalId pulumi.StringPtrInput
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker pulumi.BoolPtrInput
	// Labels to set on the integration
	Labels pulumi.StringArrayInput
	// The friendly name of the integration
	Name pulumi.StringPtrInput
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringInput
	// ID (slug) of the space the integration is in
	SpaceId pulumi.StringPtrInput
}

func (AwsIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsIntegrationArgs)(nil)).Elem()
}

type AwsIntegrationInput interface {
	pulumi.Input

	ToAwsIntegrationOutput() AwsIntegrationOutput
	ToAwsIntegrationOutputWithContext(ctx context.Context) AwsIntegrationOutput
}

func (*AwsIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsIntegration)(nil)).Elem()
}

func (i *AwsIntegration) ToAwsIntegrationOutput() AwsIntegrationOutput {
	return i.ToAwsIntegrationOutputWithContext(context.Background())
}

func (i *AwsIntegration) ToAwsIntegrationOutputWithContext(ctx context.Context) AwsIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsIntegrationOutput)
}

// AwsIntegrationArrayInput is an input type that accepts AwsIntegrationArray and AwsIntegrationArrayOutput values.
// You can construct a concrete instance of `AwsIntegrationArrayInput` via:
//
//	AwsIntegrationArray{ AwsIntegrationArgs{...} }
type AwsIntegrationArrayInput interface {
	pulumi.Input

	ToAwsIntegrationArrayOutput() AwsIntegrationArrayOutput
	ToAwsIntegrationArrayOutputWithContext(context.Context) AwsIntegrationArrayOutput
}

type AwsIntegrationArray []AwsIntegrationInput

func (AwsIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsIntegration)(nil)).Elem()
}

func (i AwsIntegrationArray) ToAwsIntegrationArrayOutput() AwsIntegrationArrayOutput {
	return i.ToAwsIntegrationArrayOutputWithContext(context.Background())
}

func (i AwsIntegrationArray) ToAwsIntegrationArrayOutputWithContext(ctx context.Context) AwsIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsIntegrationArrayOutput)
}

// AwsIntegrationMapInput is an input type that accepts AwsIntegrationMap and AwsIntegrationMapOutput values.
// You can construct a concrete instance of `AwsIntegrationMapInput` via:
//
//	AwsIntegrationMap{ "key": AwsIntegrationArgs{...} }
type AwsIntegrationMapInput interface {
	pulumi.Input

	ToAwsIntegrationMapOutput() AwsIntegrationMapOutput
	ToAwsIntegrationMapOutputWithContext(context.Context) AwsIntegrationMapOutput
}

type AwsIntegrationMap map[string]AwsIntegrationInput

func (AwsIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsIntegration)(nil)).Elem()
}

func (i AwsIntegrationMap) ToAwsIntegrationMapOutput() AwsIntegrationMapOutput {
	return i.ToAwsIntegrationMapOutputWithContext(context.Background())
}

func (i AwsIntegrationMap) ToAwsIntegrationMapOutputWithContext(ctx context.Context) AwsIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsIntegrationMapOutput)
}

type AwsIntegrationOutput struct{ *pulumi.OutputState }

func (AwsIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsIntegration)(nil)).Elem()
}

func (o AwsIntegrationOutput) ToAwsIntegrationOutput() AwsIntegrationOutput {
	return o
}

func (o AwsIntegrationOutput) ToAwsIntegrationOutputWithContext(ctx context.Context) AwsIntegrationOutput {
	return o
}

// Duration in seconds for which the assumed role credentials should be valid. Defaults to `900`.
func (o AwsIntegrationOutput) DurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AwsIntegration) pulumi.IntPtrOutput { return v.DurationSeconds }).(pulumi.IntPtrOutput)
}

// Custom external ID (works only for private workers).
func (o AwsIntegrationOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsIntegration) pulumi.StringPtrOutput { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// Generate AWS credentials in the private worker. Defaults to `false`.
func (o AwsIntegrationOutput) GenerateCredentialsInWorker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsIntegration) pulumi.BoolPtrOutput { return v.GenerateCredentialsInWorker }).(pulumi.BoolPtrOutput)
}

// Labels to set on the integration
func (o AwsIntegrationOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsIntegration) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// The friendly name of the integration
func (o AwsIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ARN of the AWS IAM role to attach
func (o AwsIntegrationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsIntegration) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// ID (slug) of the space the integration is in
func (o AwsIntegrationOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsIntegration) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

type AwsIntegrationArrayOutput struct{ *pulumi.OutputState }

func (AwsIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsIntegration)(nil)).Elem()
}

func (o AwsIntegrationArrayOutput) ToAwsIntegrationArrayOutput() AwsIntegrationArrayOutput {
	return o
}

func (o AwsIntegrationArrayOutput) ToAwsIntegrationArrayOutputWithContext(ctx context.Context) AwsIntegrationArrayOutput {
	return o
}

func (o AwsIntegrationArrayOutput) Index(i pulumi.IntInput) AwsIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsIntegration {
		return vs[0].([]*AwsIntegration)[vs[1].(int)]
	}).(AwsIntegrationOutput)
}

type AwsIntegrationMapOutput struct{ *pulumi.OutputState }

func (AwsIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsIntegration)(nil)).Elem()
}

func (o AwsIntegrationMapOutput) ToAwsIntegrationMapOutput() AwsIntegrationMapOutput {
	return o
}

func (o AwsIntegrationMapOutput) ToAwsIntegrationMapOutputWithContext(ctx context.Context) AwsIntegrationMapOutput {
	return o
}

func (o AwsIntegrationMapOutput) MapIndex(k pulumi.StringInput) AwsIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsIntegration {
		return vs[0].(map[string]*AwsIntegration)[vs[1].(string)]
	}).(AwsIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsIntegrationInput)(nil)).Elem(), &AwsIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsIntegrationArrayInput)(nil)).Elem(), AwsIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsIntegrationMapInput)(nil)).Elem(), AwsIntegrationMap{})
	pulumi.RegisterOutputType(AwsIntegrationOutput{})
	pulumi.RegisterOutputType(AwsIntegrationArrayOutput{})
	pulumi.RegisterOutputType(AwsIntegrationMapOutput{})
}
