// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `ScheduledTask` represents a scheduling configuration for a Stack. It will trigger a task on the given timestamp/schedule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.LookupScheduledTask(ctx, &spacelift.LookupScheduledTaskArgs{
//				ScheduledTaskId: "$STACK_ID/$SCHEDULED_TASK_ID",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupScheduledTask(ctx *pulumi.Context, args *LookupScheduledTaskArgs, opts ...pulumi.InvokeOption) (*LookupScheduledTaskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScheduledTaskResult
	err := ctx.Invoke("spacelift:index/getScheduledTask:getScheduledTask", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getScheduledTask.
type LookupScheduledTaskArgs struct {
	// ID of the scheduled task (stack*id/schedule*id)
	ScheduledTaskId string `pulumi:"scheduledTaskId"`
}

// A collection of values returned by getScheduledTask.
type LookupScheduledTaskResult struct {
	// Timestamp (unix timestamp) at which time the scheduling should happen.
	At int `pulumi:"at"`
	// Command that will be run.
	Command string `pulumi:"command"`
	// List of cron schedule expressions based on which the scheduled task should be triggered.
	Everies []string `pulumi:"everies"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the schedule
	ScheduleId string `pulumi:"scheduleId"`
	// ID of the scheduled task (stack*id/schedule*id)
	ScheduledTaskId string `pulumi:"scheduledTaskId"`
	// Stack ID of the scheduled task
	StackId string `pulumi:"stackId"`
	// Timezone in which the schedule is expressed. Defaults to `UTC`.
	Timezone string `pulumi:"timezone"`
}

func LookupScheduledTaskOutput(ctx *pulumi.Context, args LookupScheduledTaskOutputArgs, opts ...pulumi.InvokeOption) LookupScheduledTaskResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScheduledTaskResult, error) {
			args := v.(LookupScheduledTaskArgs)
			r, err := LookupScheduledTask(ctx, &args, opts...)
			var s LookupScheduledTaskResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScheduledTaskResultOutput)
}

// A collection of arguments for invoking getScheduledTask.
type LookupScheduledTaskOutputArgs struct {
	// ID of the scheduled task (stack*id/schedule*id)
	ScheduledTaskId pulumi.StringInput `pulumi:"scheduledTaskId"`
}

func (LookupScheduledTaskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduledTaskArgs)(nil)).Elem()
}

// A collection of values returned by getScheduledTask.
type LookupScheduledTaskResultOutput struct{ *pulumi.OutputState }

func (LookupScheduledTaskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduledTaskResult)(nil)).Elem()
}

func (o LookupScheduledTaskResultOutput) ToLookupScheduledTaskResultOutput() LookupScheduledTaskResultOutput {
	return o
}

func (o LookupScheduledTaskResultOutput) ToLookupScheduledTaskResultOutputWithContext(ctx context.Context) LookupScheduledTaskResultOutput {
	return o
}

// Timestamp (unix timestamp) at which time the scheduling should happen.
func (o LookupScheduledTaskResultOutput) At() pulumi.IntOutput {
	return o.ApplyT(func(v LookupScheduledTaskResult) int { return v.At }).(pulumi.IntOutput)
}

// Command that will be run.
func (o LookupScheduledTaskResultOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledTaskResult) string { return v.Command }).(pulumi.StringOutput)
}

// List of cron schedule expressions based on which the scheduled task should be triggered.
func (o LookupScheduledTaskResultOutput) Everies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupScheduledTaskResult) []string { return v.Everies }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupScheduledTaskResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledTaskResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the schedule
func (o LookupScheduledTaskResultOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledTaskResult) string { return v.ScheduleId }).(pulumi.StringOutput)
}

// ID of the scheduled task (stack*id/schedule*id)
func (o LookupScheduledTaskResultOutput) ScheduledTaskId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledTaskResult) string { return v.ScheduledTaskId }).(pulumi.StringOutput)
}

// Stack ID of the scheduled task
func (o LookupScheduledTaskResultOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledTaskResult) string { return v.StackId }).(pulumi.StringOutput)
}

// Timezone in which the schedule is expressed. Defaults to `UTC`.
func (o LookupScheduledTaskResultOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduledTaskResult) string { return v.Timezone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScheduledTaskResultOutput{})
}
