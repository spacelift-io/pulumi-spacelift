// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.LookupModule(ctx, &spacelift.LookupModuleArgs{
//				ModuleId: "k8s-module",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupModule(ctx *pulumi.Context, args *LookupModuleArgs, opts ...pulumi.InvokeOption) (*LookupModuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupModuleResult
	err := ctx.Invoke("spacelift:index/getModule:getModule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getModule.
type LookupModuleArgs struct {
	// ID (slug) of the module
	ModuleId string `pulumi:"moduleId"`
}

// A collection of values returned by getModule.
type LookupModuleResult struct {
	// indicates whether this module can administer others
	Administrative bool `pulumi:"administrative"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement string `pulumi:"awsAssumeRolePolicyStatement"`
	// Azure DevOps VCS settings
	AzureDevops []GetModuleAzureDevop `pulumi:"azureDevops"`
	// Bitbucket Cloud VCS settings
	BitbucketClouds []GetModuleBitbucketCloud `pulumi:"bitbucketClouds"`
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenters []GetModuleBitbucketDatacenter `pulumi:"bitbucketDatacenters"`
	// GitHub branch to apply changes to
	Branch string `pulumi:"branch"`
	// free-form module description for human users (supports Markdown)
	Description string `pulumi:"description"`
	// Indicates whether local preview versions can be triggered on this Module.
	EnableLocalPreview bool `pulumi:"enableLocalPreview"`
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprises []GetModuleGithubEnterprise `pulumi:"githubEnterprises"`
	// GitLab VCS settings
	Gitlabs []GetModuleGitlab `pulumi:"gitlabs"`
	// The provider-assigned unique ID for this managed resource.
	Id     string   `pulumi:"id"`
	Labels []string `pulumi:"labels"`
	// ID (slug) of the module
	ModuleId string `pulumi:"moduleId"`
	Name     string `pulumi:"name"`
	// Project root is the optional directory relative to the repository root containing the module source code.
	ProjectRoot string `pulumi:"projectRoot"`
	// Protect this module from accidental deletion. If set, attempts to delete this module will fail.
	ProtectFromDeletion bool `pulumi:"protectFromDeletion"`
	// Name of the repository, without the owner part
	Repository string `pulumi:"repository"`
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts []string `pulumi:"sharedAccounts"`
	// ID (slug) of the space the module is in
	SpaceId           string `pulumi:"spaceId"`
	TerraformProvider string `pulumi:"terraformProvider"`
	// ID of the worker pool to use
	WorkerPoolId string `pulumi:"workerPoolId"`
	// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
	WorkflowTool string `pulumi:"workflowTool"`
}

func LookupModuleOutput(ctx *pulumi.Context, args LookupModuleOutputArgs, opts ...pulumi.InvokeOption) LookupModuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupModuleResult, error) {
			args := v.(LookupModuleArgs)
			r, err := LookupModule(ctx, &args, opts...)
			var s LookupModuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupModuleResultOutput)
}

// A collection of arguments for invoking getModule.
type LookupModuleOutputArgs struct {
	// ID (slug) of the module
	ModuleId pulumi.StringInput `pulumi:"moduleId"`
}

func (LookupModuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModuleArgs)(nil)).Elem()
}

// A collection of values returned by getModule.
type LookupModuleResultOutput struct{ *pulumi.OutputState }

func (LookupModuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModuleResult)(nil)).Elem()
}

func (o LookupModuleResultOutput) ToLookupModuleResultOutput() LookupModuleResultOutput {
	return o
}

func (o LookupModuleResultOutput) ToLookupModuleResultOutputWithContext(ctx context.Context) LookupModuleResultOutput {
	return o
}

// indicates whether this module can administer others
func (o LookupModuleResultOutput) Administrative() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupModuleResult) bool { return v.Administrative }).(pulumi.BoolOutput)
}

// AWS IAM assume role policy statement setting up trust relationship
func (o LookupModuleResultOutput) AwsAssumeRolePolicyStatement() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.AwsAssumeRolePolicyStatement }).(pulumi.StringOutput)
}

// Azure DevOps VCS settings
func (o LookupModuleResultOutput) AzureDevops() GetModuleAzureDevopArrayOutput {
	return o.ApplyT(func(v LookupModuleResult) []GetModuleAzureDevop { return v.AzureDevops }).(GetModuleAzureDevopArrayOutput)
}

// Bitbucket Cloud VCS settings
func (o LookupModuleResultOutput) BitbucketClouds() GetModuleBitbucketCloudArrayOutput {
	return o.ApplyT(func(v LookupModuleResult) []GetModuleBitbucketCloud { return v.BitbucketClouds }).(GetModuleBitbucketCloudArrayOutput)
}

// Bitbucket Datacenter VCS settings
func (o LookupModuleResultOutput) BitbucketDatacenters() GetModuleBitbucketDatacenterArrayOutput {
	return o.ApplyT(func(v LookupModuleResult) []GetModuleBitbucketDatacenter { return v.BitbucketDatacenters }).(GetModuleBitbucketDatacenterArrayOutput)
}

// GitHub branch to apply changes to
func (o LookupModuleResultOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.Branch }).(pulumi.StringOutput)
}

// free-form module description for human users (supports Markdown)
func (o LookupModuleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.Description }).(pulumi.StringOutput)
}

// Indicates whether local preview versions can be triggered on this Module.
func (o LookupModuleResultOutput) EnableLocalPreview() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupModuleResult) bool { return v.EnableLocalPreview }).(pulumi.BoolOutput)
}

// GitHub Enterprise (self-hosted) VCS settings
func (o LookupModuleResultOutput) GithubEnterprises() GetModuleGithubEnterpriseArrayOutput {
	return o.ApplyT(func(v LookupModuleResult) []GetModuleGithubEnterprise { return v.GithubEnterprises }).(GetModuleGithubEnterpriseArrayOutput)
}

// GitLab VCS settings
func (o LookupModuleResultOutput) Gitlabs() GetModuleGitlabArrayOutput {
	return o.ApplyT(func(v LookupModuleResult) []GetModuleGitlab { return v.Gitlabs }).(GetModuleGitlabArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupModuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupModuleResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupModuleResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// ID (slug) of the module
func (o LookupModuleResultOutput) ModuleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.ModuleId }).(pulumi.StringOutput)
}

func (o LookupModuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Project root is the optional directory relative to the repository root containing the module source code.
func (o LookupModuleResultOutput) ProjectRoot() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.ProjectRoot }).(pulumi.StringOutput)
}

// Protect this module from accidental deletion. If set, attempts to delete this module will fail.
func (o LookupModuleResultOutput) ProtectFromDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupModuleResult) bool { return v.ProtectFromDeletion }).(pulumi.BoolOutput)
}

// Name of the repository, without the owner part
func (o LookupModuleResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.Repository }).(pulumi.StringOutput)
}

// List of the accounts (subdomains) which should have access to the Module
func (o LookupModuleResultOutput) SharedAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupModuleResult) []string { return v.SharedAccounts }).(pulumi.StringArrayOutput)
}

// ID (slug) of the space the module is in
func (o LookupModuleResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

func (o LookupModuleResultOutput) TerraformProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.TerraformProvider }).(pulumi.StringOutput)
}

// ID of the worker pool to use
func (o LookupModuleResultOutput) WorkerPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.WorkerPoolId }).(pulumi.StringOutput)
}

// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
func (o LookupModuleResultOutput) WorkflowTool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModuleResult) string { return v.WorkflowTool }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupModuleResultOutput{})
}
