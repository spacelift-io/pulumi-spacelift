// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ModuleAzureDevops struct {
	Project string `pulumi:"project"`
}

// ModuleAzureDevopsInput is an input type that accepts ModuleAzureDevopsArgs and ModuleAzureDevopsOutput values.
// You can construct a concrete instance of `ModuleAzureDevopsInput` via:
//
//          ModuleAzureDevopsArgs{...}
type ModuleAzureDevopsInput interface {
	pulumi.Input

	ToModuleAzureDevopsOutput() ModuleAzureDevopsOutput
	ToModuleAzureDevopsOutputWithContext(context.Context) ModuleAzureDevopsOutput
}

type ModuleAzureDevopsArgs struct {
	Project pulumi.StringInput `pulumi:"project"`
}

func (ModuleAzureDevopsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleAzureDevops)(nil)).Elem()
}

func (i ModuleAzureDevopsArgs) ToModuleAzureDevopsOutput() ModuleAzureDevopsOutput {
	return i.ToModuleAzureDevopsOutputWithContext(context.Background())
}

func (i ModuleAzureDevopsArgs) ToModuleAzureDevopsOutputWithContext(ctx context.Context) ModuleAzureDevopsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleAzureDevopsOutput)
}

func (i ModuleAzureDevopsArgs) ToModuleAzureDevopsPtrOutput() ModuleAzureDevopsPtrOutput {
	return i.ToModuleAzureDevopsPtrOutputWithContext(context.Background())
}

func (i ModuleAzureDevopsArgs) ToModuleAzureDevopsPtrOutputWithContext(ctx context.Context) ModuleAzureDevopsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleAzureDevopsOutput).ToModuleAzureDevopsPtrOutputWithContext(ctx)
}

// ModuleAzureDevopsPtrInput is an input type that accepts ModuleAzureDevopsArgs, ModuleAzureDevopsPtr and ModuleAzureDevopsPtrOutput values.
// You can construct a concrete instance of `ModuleAzureDevopsPtrInput` via:
//
//          ModuleAzureDevopsArgs{...}
//
//  or:
//
//          nil
type ModuleAzureDevopsPtrInput interface {
	pulumi.Input

	ToModuleAzureDevopsPtrOutput() ModuleAzureDevopsPtrOutput
	ToModuleAzureDevopsPtrOutputWithContext(context.Context) ModuleAzureDevopsPtrOutput
}

type moduleAzureDevopsPtrType ModuleAzureDevopsArgs

func ModuleAzureDevopsPtr(v *ModuleAzureDevopsArgs) ModuleAzureDevopsPtrInput {
	return (*moduleAzureDevopsPtrType)(v)
}

func (*moduleAzureDevopsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleAzureDevops)(nil)).Elem()
}

func (i *moduleAzureDevopsPtrType) ToModuleAzureDevopsPtrOutput() ModuleAzureDevopsPtrOutput {
	return i.ToModuleAzureDevopsPtrOutputWithContext(context.Background())
}

func (i *moduleAzureDevopsPtrType) ToModuleAzureDevopsPtrOutputWithContext(ctx context.Context) ModuleAzureDevopsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleAzureDevopsPtrOutput)
}

type ModuleAzureDevopsOutput struct{ *pulumi.OutputState }

func (ModuleAzureDevopsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleAzureDevops)(nil)).Elem()
}

func (o ModuleAzureDevopsOutput) ToModuleAzureDevopsOutput() ModuleAzureDevopsOutput {
	return o
}

func (o ModuleAzureDevopsOutput) ToModuleAzureDevopsOutputWithContext(ctx context.Context) ModuleAzureDevopsOutput {
	return o
}

func (o ModuleAzureDevopsOutput) ToModuleAzureDevopsPtrOutput() ModuleAzureDevopsPtrOutput {
	return o.ToModuleAzureDevopsPtrOutputWithContext(context.Background())
}

func (o ModuleAzureDevopsOutput) ToModuleAzureDevopsPtrOutputWithContext(ctx context.Context) ModuleAzureDevopsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModuleAzureDevops) *ModuleAzureDevops {
		return &v
	}).(ModuleAzureDevopsPtrOutput)
}

func (o ModuleAzureDevopsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ModuleAzureDevops) string { return v.Project }).(pulumi.StringOutput)
}

type ModuleAzureDevopsPtrOutput struct{ *pulumi.OutputState }

func (ModuleAzureDevopsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleAzureDevops)(nil)).Elem()
}

func (o ModuleAzureDevopsPtrOutput) ToModuleAzureDevopsPtrOutput() ModuleAzureDevopsPtrOutput {
	return o
}

func (o ModuleAzureDevopsPtrOutput) ToModuleAzureDevopsPtrOutputWithContext(ctx context.Context) ModuleAzureDevopsPtrOutput {
	return o
}

func (o ModuleAzureDevopsPtrOutput) Elem() ModuleAzureDevopsOutput {
	return o.ApplyT(func(v *ModuleAzureDevops) ModuleAzureDevops {
		if v != nil {
			return *v
		}
		var ret ModuleAzureDevops
		return ret
	}).(ModuleAzureDevopsOutput)
}

func (o ModuleAzureDevopsPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModuleAzureDevops) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

type ModuleBitbucketCloud struct {
	Namespace string `pulumi:"namespace"`
}

// ModuleBitbucketCloudInput is an input type that accepts ModuleBitbucketCloudArgs and ModuleBitbucketCloudOutput values.
// You can construct a concrete instance of `ModuleBitbucketCloudInput` via:
//
//          ModuleBitbucketCloudArgs{...}
type ModuleBitbucketCloudInput interface {
	pulumi.Input

	ToModuleBitbucketCloudOutput() ModuleBitbucketCloudOutput
	ToModuleBitbucketCloudOutputWithContext(context.Context) ModuleBitbucketCloudOutput
}

type ModuleBitbucketCloudArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (ModuleBitbucketCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleBitbucketCloud)(nil)).Elem()
}

func (i ModuleBitbucketCloudArgs) ToModuleBitbucketCloudOutput() ModuleBitbucketCloudOutput {
	return i.ToModuleBitbucketCloudOutputWithContext(context.Background())
}

func (i ModuleBitbucketCloudArgs) ToModuleBitbucketCloudOutputWithContext(ctx context.Context) ModuleBitbucketCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleBitbucketCloudOutput)
}

func (i ModuleBitbucketCloudArgs) ToModuleBitbucketCloudPtrOutput() ModuleBitbucketCloudPtrOutput {
	return i.ToModuleBitbucketCloudPtrOutputWithContext(context.Background())
}

func (i ModuleBitbucketCloudArgs) ToModuleBitbucketCloudPtrOutputWithContext(ctx context.Context) ModuleBitbucketCloudPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleBitbucketCloudOutput).ToModuleBitbucketCloudPtrOutputWithContext(ctx)
}

// ModuleBitbucketCloudPtrInput is an input type that accepts ModuleBitbucketCloudArgs, ModuleBitbucketCloudPtr and ModuleBitbucketCloudPtrOutput values.
// You can construct a concrete instance of `ModuleBitbucketCloudPtrInput` via:
//
//          ModuleBitbucketCloudArgs{...}
//
//  or:
//
//          nil
type ModuleBitbucketCloudPtrInput interface {
	pulumi.Input

	ToModuleBitbucketCloudPtrOutput() ModuleBitbucketCloudPtrOutput
	ToModuleBitbucketCloudPtrOutputWithContext(context.Context) ModuleBitbucketCloudPtrOutput
}

type moduleBitbucketCloudPtrType ModuleBitbucketCloudArgs

func ModuleBitbucketCloudPtr(v *ModuleBitbucketCloudArgs) ModuleBitbucketCloudPtrInput {
	return (*moduleBitbucketCloudPtrType)(v)
}

func (*moduleBitbucketCloudPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleBitbucketCloud)(nil)).Elem()
}

func (i *moduleBitbucketCloudPtrType) ToModuleBitbucketCloudPtrOutput() ModuleBitbucketCloudPtrOutput {
	return i.ToModuleBitbucketCloudPtrOutputWithContext(context.Background())
}

func (i *moduleBitbucketCloudPtrType) ToModuleBitbucketCloudPtrOutputWithContext(ctx context.Context) ModuleBitbucketCloudPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleBitbucketCloudPtrOutput)
}

type ModuleBitbucketCloudOutput struct{ *pulumi.OutputState }

func (ModuleBitbucketCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleBitbucketCloud)(nil)).Elem()
}

func (o ModuleBitbucketCloudOutput) ToModuleBitbucketCloudOutput() ModuleBitbucketCloudOutput {
	return o
}

func (o ModuleBitbucketCloudOutput) ToModuleBitbucketCloudOutputWithContext(ctx context.Context) ModuleBitbucketCloudOutput {
	return o
}

func (o ModuleBitbucketCloudOutput) ToModuleBitbucketCloudPtrOutput() ModuleBitbucketCloudPtrOutput {
	return o.ToModuleBitbucketCloudPtrOutputWithContext(context.Background())
}

func (o ModuleBitbucketCloudOutput) ToModuleBitbucketCloudPtrOutputWithContext(ctx context.Context) ModuleBitbucketCloudPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModuleBitbucketCloud) *ModuleBitbucketCloud {
		return &v
	}).(ModuleBitbucketCloudPtrOutput)
}

func (o ModuleBitbucketCloudOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ModuleBitbucketCloud) string { return v.Namespace }).(pulumi.StringOutput)
}

type ModuleBitbucketCloudPtrOutput struct{ *pulumi.OutputState }

func (ModuleBitbucketCloudPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleBitbucketCloud)(nil)).Elem()
}

func (o ModuleBitbucketCloudPtrOutput) ToModuleBitbucketCloudPtrOutput() ModuleBitbucketCloudPtrOutput {
	return o
}

func (o ModuleBitbucketCloudPtrOutput) ToModuleBitbucketCloudPtrOutputWithContext(ctx context.Context) ModuleBitbucketCloudPtrOutput {
	return o
}

func (o ModuleBitbucketCloudPtrOutput) Elem() ModuleBitbucketCloudOutput {
	return o.ApplyT(func(v *ModuleBitbucketCloud) ModuleBitbucketCloud {
		if v != nil {
			return *v
		}
		var ret ModuleBitbucketCloud
		return ret
	}).(ModuleBitbucketCloudOutput)
}

func (o ModuleBitbucketCloudPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModuleBitbucketCloud) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ModuleBitbucketDatacenter struct {
	Namespace string `pulumi:"namespace"`
}

// ModuleBitbucketDatacenterInput is an input type that accepts ModuleBitbucketDatacenterArgs and ModuleBitbucketDatacenterOutput values.
// You can construct a concrete instance of `ModuleBitbucketDatacenterInput` via:
//
//          ModuleBitbucketDatacenterArgs{...}
type ModuleBitbucketDatacenterInput interface {
	pulumi.Input

	ToModuleBitbucketDatacenterOutput() ModuleBitbucketDatacenterOutput
	ToModuleBitbucketDatacenterOutputWithContext(context.Context) ModuleBitbucketDatacenterOutput
}

type ModuleBitbucketDatacenterArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (ModuleBitbucketDatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleBitbucketDatacenter)(nil)).Elem()
}

func (i ModuleBitbucketDatacenterArgs) ToModuleBitbucketDatacenterOutput() ModuleBitbucketDatacenterOutput {
	return i.ToModuleBitbucketDatacenterOutputWithContext(context.Background())
}

func (i ModuleBitbucketDatacenterArgs) ToModuleBitbucketDatacenterOutputWithContext(ctx context.Context) ModuleBitbucketDatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleBitbucketDatacenterOutput)
}

func (i ModuleBitbucketDatacenterArgs) ToModuleBitbucketDatacenterPtrOutput() ModuleBitbucketDatacenterPtrOutput {
	return i.ToModuleBitbucketDatacenterPtrOutputWithContext(context.Background())
}

func (i ModuleBitbucketDatacenterArgs) ToModuleBitbucketDatacenterPtrOutputWithContext(ctx context.Context) ModuleBitbucketDatacenterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleBitbucketDatacenterOutput).ToModuleBitbucketDatacenterPtrOutputWithContext(ctx)
}

// ModuleBitbucketDatacenterPtrInput is an input type that accepts ModuleBitbucketDatacenterArgs, ModuleBitbucketDatacenterPtr and ModuleBitbucketDatacenterPtrOutput values.
// You can construct a concrete instance of `ModuleBitbucketDatacenterPtrInput` via:
//
//          ModuleBitbucketDatacenterArgs{...}
//
//  or:
//
//          nil
type ModuleBitbucketDatacenterPtrInput interface {
	pulumi.Input

	ToModuleBitbucketDatacenterPtrOutput() ModuleBitbucketDatacenterPtrOutput
	ToModuleBitbucketDatacenterPtrOutputWithContext(context.Context) ModuleBitbucketDatacenterPtrOutput
}

type moduleBitbucketDatacenterPtrType ModuleBitbucketDatacenterArgs

func ModuleBitbucketDatacenterPtr(v *ModuleBitbucketDatacenterArgs) ModuleBitbucketDatacenterPtrInput {
	return (*moduleBitbucketDatacenterPtrType)(v)
}

func (*moduleBitbucketDatacenterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleBitbucketDatacenter)(nil)).Elem()
}

func (i *moduleBitbucketDatacenterPtrType) ToModuleBitbucketDatacenterPtrOutput() ModuleBitbucketDatacenterPtrOutput {
	return i.ToModuleBitbucketDatacenterPtrOutputWithContext(context.Background())
}

func (i *moduleBitbucketDatacenterPtrType) ToModuleBitbucketDatacenterPtrOutputWithContext(ctx context.Context) ModuleBitbucketDatacenterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleBitbucketDatacenterPtrOutput)
}

type ModuleBitbucketDatacenterOutput struct{ *pulumi.OutputState }

func (ModuleBitbucketDatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleBitbucketDatacenter)(nil)).Elem()
}

func (o ModuleBitbucketDatacenterOutput) ToModuleBitbucketDatacenterOutput() ModuleBitbucketDatacenterOutput {
	return o
}

func (o ModuleBitbucketDatacenterOutput) ToModuleBitbucketDatacenterOutputWithContext(ctx context.Context) ModuleBitbucketDatacenterOutput {
	return o
}

func (o ModuleBitbucketDatacenterOutput) ToModuleBitbucketDatacenterPtrOutput() ModuleBitbucketDatacenterPtrOutput {
	return o.ToModuleBitbucketDatacenterPtrOutputWithContext(context.Background())
}

func (o ModuleBitbucketDatacenterOutput) ToModuleBitbucketDatacenterPtrOutputWithContext(ctx context.Context) ModuleBitbucketDatacenterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModuleBitbucketDatacenter) *ModuleBitbucketDatacenter {
		return &v
	}).(ModuleBitbucketDatacenterPtrOutput)
}

func (o ModuleBitbucketDatacenterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ModuleBitbucketDatacenter) string { return v.Namespace }).(pulumi.StringOutput)
}

type ModuleBitbucketDatacenterPtrOutput struct{ *pulumi.OutputState }

func (ModuleBitbucketDatacenterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleBitbucketDatacenter)(nil)).Elem()
}

func (o ModuleBitbucketDatacenterPtrOutput) ToModuleBitbucketDatacenterPtrOutput() ModuleBitbucketDatacenterPtrOutput {
	return o
}

func (o ModuleBitbucketDatacenterPtrOutput) ToModuleBitbucketDatacenterPtrOutputWithContext(ctx context.Context) ModuleBitbucketDatacenterPtrOutput {
	return o
}

func (o ModuleBitbucketDatacenterPtrOutput) Elem() ModuleBitbucketDatacenterOutput {
	return o.ApplyT(func(v *ModuleBitbucketDatacenter) ModuleBitbucketDatacenter {
		if v != nil {
			return *v
		}
		var ret ModuleBitbucketDatacenter
		return ret
	}).(ModuleBitbucketDatacenterOutput)
}

func (o ModuleBitbucketDatacenterPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModuleBitbucketDatacenter) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ModuleGithubEnterprise struct {
	Namespace string `pulumi:"namespace"`
}

// ModuleGithubEnterpriseInput is an input type that accepts ModuleGithubEnterpriseArgs and ModuleGithubEnterpriseOutput values.
// You can construct a concrete instance of `ModuleGithubEnterpriseInput` via:
//
//          ModuleGithubEnterpriseArgs{...}
type ModuleGithubEnterpriseInput interface {
	pulumi.Input

	ToModuleGithubEnterpriseOutput() ModuleGithubEnterpriseOutput
	ToModuleGithubEnterpriseOutputWithContext(context.Context) ModuleGithubEnterpriseOutput
}

type ModuleGithubEnterpriseArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (ModuleGithubEnterpriseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleGithubEnterprise)(nil)).Elem()
}

func (i ModuleGithubEnterpriseArgs) ToModuleGithubEnterpriseOutput() ModuleGithubEnterpriseOutput {
	return i.ToModuleGithubEnterpriseOutputWithContext(context.Background())
}

func (i ModuleGithubEnterpriseArgs) ToModuleGithubEnterpriseOutputWithContext(ctx context.Context) ModuleGithubEnterpriseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleGithubEnterpriseOutput)
}

func (i ModuleGithubEnterpriseArgs) ToModuleGithubEnterprisePtrOutput() ModuleGithubEnterprisePtrOutput {
	return i.ToModuleGithubEnterprisePtrOutputWithContext(context.Background())
}

func (i ModuleGithubEnterpriseArgs) ToModuleGithubEnterprisePtrOutputWithContext(ctx context.Context) ModuleGithubEnterprisePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleGithubEnterpriseOutput).ToModuleGithubEnterprisePtrOutputWithContext(ctx)
}

// ModuleGithubEnterprisePtrInput is an input type that accepts ModuleGithubEnterpriseArgs, ModuleGithubEnterprisePtr and ModuleGithubEnterprisePtrOutput values.
// You can construct a concrete instance of `ModuleGithubEnterprisePtrInput` via:
//
//          ModuleGithubEnterpriseArgs{...}
//
//  or:
//
//          nil
type ModuleGithubEnterprisePtrInput interface {
	pulumi.Input

	ToModuleGithubEnterprisePtrOutput() ModuleGithubEnterprisePtrOutput
	ToModuleGithubEnterprisePtrOutputWithContext(context.Context) ModuleGithubEnterprisePtrOutput
}

type moduleGithubEnterprisePtrType ModuleGithubEnterpriseArgs

func ModuleGithubEnterprisePtr(v *ModuleGithubEnterpriseArgs) ModuleGithubEnterprisePtrInput {
	return (*moduleGithubEnterprisePtrType)(v)
}

func (*moduleGithubEnterprisePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleGithubEnterprise)(nil)).Elem()
}

func (i *moduleGithubEnterprisePtrType) ToModuleGithubEnterprisePtrOutput() ModuleGithubEnterprisePtrOutput {
	return i.ToModuleGithubEnterprisePtrOutputWithContext(context.Background())
}

func (i *moduleGithubEnterprisePtrType) ToModuleGithubEnterprisePtrOutputWithContext(ctx context.Context) ModuleGithubEnterprisePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleGithubEnterprisePtrOutput)
}

type ModuleGithubEnterpriseOutput struct{ *pulumi.OutputState }

func (ModuleGithubEnterpriseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleGithubEnterprise)(nil)).Elem()
}

func (o ModuleGithubEnterpriseOutput) ToModuleGithubEnterpriseOutput() ModuleGithubEnterpriseOutput {
	return o
}

func (o ModuleGithubEnterpriseOutput) ToModuleGithubEnterpriseOutputWithContext(ctx context.Context) ModuleGithubEnterpriseOutput {
	return o
}

func (o ModuleGithubEnterpriseOutput) ToModuleGithubEnterprisePtrOutput() ModuleGithubEnterprisePtrOutput {
	return o.ToModuleGithubEnterprisePtrOutputWithContext(context.Background())
}

func (o ModuleGithubEnterpriseOutput) ToModuleGithubEnterprisePtrOutputWithContext(ctx context.Context) ModuleGithubEnterprisePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModuleGithubEnterprise) *ModuleGithubEnterprise {
		return &v
	}).(ModuleGithubEnterprisePtrOutput)
}

func (o ModuleGithubEnterpriseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ModuleGithubEnterprise) string { return v.Namespace }).(pulumi.StringOutput)
}

type ModuleGithubEnterprisePtrOutput struct{ *pulumi.OutputState }

func (ModuleGithubEnterprisePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleGithubEnterprise)(nil)).Elem()
}

func (o ModuleGithubEnterprisePtrOutput) ToModuleGithubEnterprisePtrOutput() ModuleGithubEnterprisePtrOutput {
	return o
}

func (o ModuleGithubEnterprisePtrOutput) ToModuleGithubEnterprisePtrOutputWithContext(ctx context.Context) ModuleGithubEnterprisePtrOutput {
	return o
}

func (o ModuleGithubEnterprisePtrOutput) Elem() ModuleGithubEnterpriseOutput {
	return o.ApplyT(func(v *ModuleGithubEnterprise) ModuleGithubEnterprise {
		if v != nil {
			return *v
		}
		var ret ModuleGithubEnterprise
		return ret
	}).(ModuleGithubEnterpriseOutput)
}

func (o ModuleGithubEnterprisePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModuleGithubEnterprise) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ModuleGitlab struct {
	Namespace string `pulumi:"namespace"`
}

// ModuleGitlabInput is an input type that accepts ModuleGitlabArgs and ModuleGitlabOutput values.
// You can construct a concrete instance of `ModuleGitlabInput` via:
//
//          ModuleGitlabArgs{...}
type ModuleGitlabInput interface {
	pulumi.Input

	ToModuleGitlabOutput() ModuleGitlabOutput
	ToModuleGitlabOutputWithContext(context.Context) ModuleGitlabOutput
}

type ModuleGitlabArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (ModuleGitlabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleGitlab)(nil)).Elem()
}

func (i ModuleGitlabArgs) ToModuleGitlabOutput() ModuleGitlabOutput {
	return i.ToModuleGitlabOutputWithContext(context.Background())
}

func (i ModuleGitlabArgs) ToModuleGitlabOutputWithContext(ctx context.Context) ModuleGitlabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleGitlabOutput)
}

func (i ModuleGitlabArgs) ToModuleGitlabPtrOutput() ModuleGitlabPtrOutput {
	return i.ToModuleGitlabPtrOutputWithContext(context.Background())
}

func (i ModuleGitlabArgs) ToModuleGitlabPtrOutputWithContext(ctx context.Context) ModuleGitlabPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleGitlabOutput).ToModuleGitlabPtrOutputWithContext(ctx)
}

// ModuleGitlabPtrInput is an input type that accepts ModuleGitlabArgs, ModuleGitlabPtr and ModuleGitlabPtrOutput values.
// You can construct a concrete instance of `ModuleGitlabPtrInput` via:
//
//          ModuleGitlabArgs{...}
//
//  or:
//
//          nil
type ModuleGitlabPtrInput interface {
	pulumi.Input

	ToModuleGitlabPtrOutput() ModuleGitlabPtrOutput
	ToModuleGitlabPtrOutputWithContext(context.Context) ModuleGitlabPtrOutput
}

type moduleGitlabPtrType ModuleGitlabArgs

func ModuleGitlabPtr(v *ModuleGitlabArgs) ModuleGitlabPtrInput {
	return (*moduleGitlabPtrType)(v)
}

func (*moduleGitlabPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleGitlab)(nil)).Elem()
}

func (i *moduleGitlabPtrType) ToModuleGitlabPtrOutput() ModuleGitlabPtrOutput {
	return i.ToModuleGitlabPtrOutputWithContext(context.Background())
}

func (i *moduleGitlabPtrType) ToModuleGitlabPtrOutputWithContext(ctx context.Context) ModuleGitlabPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleGitlabPtrOutput)
}

type ModuleGitlabOutput struct{ *pulumi.OutputState }

func (ModuleGitlabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleGitlab)(nil)).Elem()
}

func (o ModuleGitlabOutput) ToModuleGitlabOutput() ModuleGitlabOutput {
	return o
}

func (o ModuleGitlabOutput) ToModuleGitlabOutputWithContext(ctx context.Context) ModuleGitlabOutput {
	return o
}

func (o ModuleGitlabOutput) ToModuleGitlabPtrOutput() ModuleGitlabPtrOutput {
	return o.ToModuleGitlabPtrOutputWithContext(context.Background())
}

func (o ModuleGitlabOutput) ToModuleGitlabPtrOutputWithContext(ctx context.Context) ModuleGitlabPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModuleGitlab) *ModuleGitlab {
		return &v
	}).(ModuleGitlabPtrOutput)
}

func (o ModuleGitlabOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ModuleGitlab) string { return v.Namespace }).(pulumi.StringOutput)
}

type ModuleGitlabPtrOutput struct{ *pulumi.OutputState }

func (ModuleGitlabPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleGitlab)(nil)).Elem()
}

func (o ModuleGitlabPtrOutput) ToModuleGitlabPtrOutput() ModuleGitlabPtrOutput {
	return o
}

func (o ModuleGitlabPtrOutput) ToModuleGitlabPtrOutputWithContext(ctx context.Context) ModuleGitlabPtrOutput {
	return o
}

func (o ModuleGitlabPtrOutput) Elem() ModuleGitlabOutput {
	return o.ApplyT(func(v *ModuleGitlab) ModuleGitlab {
		if v != nil {
			return *v
		}
		var ret ModuleGitlab
		return ret
	}).(ModuleGitlabOutput)
}

func (o ModuleGitlabPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModuleGitlab) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type StackAnsible struct {
	Playbook string `pulumi:"playbook"`
}

// StackAnsibleInput is an input type that accepts StackAnsibleArgs and StackAnsibleOutput values.
// You can construct a concrete instance of `StackAnsibleInput` via:
//
//          StackAnsibleArgs{...}
type StackAnsibleInput interface {
	pulumi.Input

	ToStackAnsibleOutput() StackAnsibleOutput
	ToStackAnsibleOutputWithContext(context.Context) StackAnsibleOutput
}

type StackAnsibleArgs struct {
	Playbook pulumi.StringInput `pulumi:"playbook"`
}

func (StackAnsibleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackAnsible)(nil)).Elem()
}

func (i StackAnsibleArgs) ToStackAnsibleOutput() StackAnsibleOutput {
	return i.ToStackAnsibleOutputWithContext(context.Background())
}

func (i StackAnsibleArgs) ToStackAnsibleOutputWithContext(ctx context.Context) StackAnsibleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAnsibleOutput)
}

func (i StackAnsibleArgs) ToStackAnsiblePtrOutput() StackAnsiblePtrOutput {
	return i.ToStackAnsiblePtrOutputWithContext(context.Background())
}

func (i StackAnsibleArgs) ToStackAnsiblePtrOutputWithContext(ctx context.Context) StackAnsiblePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAnsibleOutput).ToStackAnsiblePtrOutputWithContext(ctx)
}

// StackAnsiblePtrInput is an input type that accepts StackAnsibleArgs, StackAnsiblePtr and StackAnsiblePtrOutput values.
// You can construct a concrete instance of `StackAnsiblePtrInput` via:
//
//          StackAnsibleArgs{...}
//
//  or:
//
//          nil
type StackAnsiblePtrInput interface {
	pulumi.Input

	ToStackAnsiblePtrOutput() StackAnsiblePtrOutput
	ToStackAnsiblePtrOutputWithContext(context.Context) StackAnsiblePtrOutput
}

type stackAnsiblePtrType StackAnsibleArgs

func StackAnsiblePtr(v *StackAnsibleArgs) StackAnsiblePtrInput {
	return (*stackAnsiblePtrType)(v)
}

func (*stackAnsiblePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackAnsible)(nil)).Elem()
}

func (i *stackAnsiblePtrType) ToStackAnsiblePtrOutput() StackAnsiblePtrOutput {
	return i.ToStackAnsiblePtrOutputWithContext(context.Background())
}

func (i *stackAnsiblePtrType) ToStackAnsiblePtrOutputWithContext(ctx context.Context) StackAnsiblePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAnsiblePtrOutput)
}

type StackAnsibleOutput struct{ *pulumi.OutputState }

func (StackAnsibleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackAnsible)(nil)).Elem()
}

func (o StackAnsibleOutput) ToStackAnsibleOutput() StackAnsibleOutput {
	return o
}

func (o StackAnsibleOutput) ToStackAnsibleOutputWithContext(ctx context.Context) StackAnsibleOutput {
	return o
}

func (o StackAnsibleOutput) ToStackAnsiblePtrOutput() StackAnsiblePtrOutput {
	return o.ToStackAnsiblePtrOutputWithContext(context.Background())
}

func (o StackAnsibleOutput) ToStackAnsiblePtrOutputWithContext(ctx context.Context) StackAnsiblePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackAnsible) *StackAnsible {
		return &v
	}).(StackAnsiblePtrOutput)
}

func (o StackAnsibleOutput) Playbook() pulumi.StringOutput {
	return o.ApplyT(func(v StackAnsible) string { return v.Playbook }).(pulumi.StringOutput)
}

type StackAnsiblePtrOutput struct{ *pulumi.OutputState }

func (StackAnsiblePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackAnsible)(nil)).Elem()
}

func (o StackAnsiblePtrOutput) ToStackAnsiblePtrOutput() StackAnsiblePtrOutput {
	return o
}

func (o StackAnsiblePtrOutput) ToStackAnsiblePtrOutputWithContext(ctx context.Context) StackAnsiblePtrOutput {
	return o
}

func (o StackAnsiblePtrOutput) Elem() StackAnsibleOutput {
	return o.ApplyT(func(v *StackAnsible) StackAnsible {
		if v != nil {
			return *v
		}
		var ret StackAnsible
		return ret
	}).(StackAnsibleOutput)
}

func (o StackAnsiblePtrOutput) Playbook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackAnsible) *string {
		if v == nil {
			return nil
		}
		return &v.Playbook
	}).(pulumi.StringPtrOutput)
}

type StackAzureDevops struct {
	Project string `pulumi:"project"`
}

// StackAzureDevopsInput is an input type that accepts StackAzureDevopsArgs and StackAzureDevopsOutput values.
// You can construct a concrete instance of `StackAzureDevopsInput` via:
//
//          StackAzureDevopsArgs{...}
type StackAzureDevopsInput interface {
	pulumi.Input

	ToStackAzureDevopsOutput() StackAzureDevopsOutput
	ToStackAzureDevopsOutputWithContext(context.Context) StackAzureDevopsOutput
}

type StackAzureDevopsArgs struct {
	Project pulumi.StringInput `pulumi:"project"`
}

func (StackAzureDevopsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackAzureDevops)(nil)).Elem()
}

func (i StackAzureDevopsArgs) ToStackAzureDevopsOutput() StackAzureDevopsOutput {
	return i.ToStackAzureDevopsOutputWithContext(context.Background())
}

func (i StackAzureDevopsArgs) ToStackAzureDevopsOutputWithContext(ctx context.Context) StackAzureDevopsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAzureDevopsOutput)
}

func (i StackAzureDevopsArgs) ToStackAzureDevopsPtrOutput() StackAzureDevopsPtrOutput {
	return i.ToStackAzureDevopsPtrOutputWithContext(context.Background())
}

func (i StackAzureDevopsArgs) ToStackAzureDevopsPtrOutputWithContext(ctx context.Context) StackAzureDevopsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAzureDevopsOutput).ToStackAzureDevopsPtrOutputWithContext(ctx)
}

// StackAzureDevopsPtrInput is an input type that accepts StackAzureDevopsArgs, StackAzureDevopsPtr and StackAzureDevopsPtrOutput values.
// You can construct a concrete instance of `StackAzureDevopsPtrInput` via:
//
//          StackAzureDevopsArgs{...}
//
//  or:
//
//          nil
type StackAzureDevopsPtrInput interface {
	pulumi.Input

	ToStackAzureDevopsPtrOutput() StackAzureDevopsPtrOutput
	ToStackAzureDevopsPtrOutputWithContext(context.Context) StackAzureDevopsPtrOutput
}

type stackAzureDevopsPtrType StackAzureDevopsArgs

func StackAzureDevopsPtr(v *StackAzureDevopsArgs) StackAzureDevopsPtrInput {
	return (*stackAzureDevopsPtrType)(v)
}

func (*stackAzureDevopsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackAzureDevops)(nil)).Elem()
}

func (i *stackAzureDevopsPtrType) ToStackAzureDevopsPtrOutput() StackAzureDevopsPtrOutput {
	return i.ToStackAzureDevopsPtrOutputWithContext(context.Background())
}

func (i *stackAzureDevopsPtrType) ToStackAzureDevopsPtrOutputWithContext(ctx context.Context) StackAzureDevopsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAzureDevopsPtrOutput)
}

type StackAzureDevopsOutput struct{ *pulumi.OutputState }

func (StackAzureDevopsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackAzureDevops)(nil)).Elem()
}

func (o StackAzureDevopsOutput) ToStackAzureDevopsOutput() StackAzureDevopsOutput {
	return o
}

func (o StackAzureDevopsOutput) ToStackAzureDevopsOutputWithContext(ctx context.Context) StackAzureDevopsOutput {
	return o
}

func (o StackAzureDevopsOutput) ToStackAzureDevopsPtrOutput() StackAzureDevopsPtrOutput {
	return o.ToStackAzureDevopsPtrOutputWithContext(context.Background())
}

func (o StackAzureDevopsOutput) ToStackAzureDevopsPtrOutputWithContext(ctx context.Context) StackAzureDevopsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackAzureDevops) *StackAzureDevops {
		return &v
	}).(StackAzureDevopsPtrOutput)
}

func (o StackAzureDevopsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v StackAzureDevops) string { return v.Project }).(pulumi.StringOutput)
}

type StackAzureDevopsPtrOutput struct{ *pulumi.OutputState }

func (StackAzureDevopsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackAzureDevops)(nil)).Elem()
}

func (o StackAzureDevopsPtrOutput) ToStackAzureDevopsPtrOutput() StackAzureDevopsPtrOutput {
	return o
}

func (o StackAzureDevopsPtrOutput) ToStackAzureDevopsPtrOutputWithContext(ctx context.Context) StackAzureDevopsPtrOutput {
	return o
}

func (o StackAzureDevopsPtrOutput) Elem() StackAzureDevopsOutput {
	return o.ApplyT(func(v *StackAzureDevops) StackAzureDevops {
		if v != nil {
			return *v
		}
		var ret StackAzureDevops
		return ret
	}).(StackAzureDevopsOutput)
}

func (o StackAzureDevopsPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackAzureDevops) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

type StackBitbucketCloud struct {
	Namespace string `pulumi:"namespace"`
}

// StackBitbucketCloudInput is an input type that accepts StackBitbucketCloudArgs and StackBitbucketCloudOutput values.
// You can construct a concrete instance of `StackBitbucketCloudInput` via:
//
//          StackBitbucketCloudArgs{...}
type StackBitbucketCloudInput interface {
	pulumi.Input

	ToStackBitbucketCloudOutput() StackBitbucketCloudOutput
	ToStackBitbucketCloudOutputWithContext(context.Context) StackBitbucketCloudOutput
}

type StackBitbucketCloudArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (StackBitbucketCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackBitbucketCloud)(nil)).Elem()
}

func (i StackBitbucketCloudArgs) ToStackBitbucketCloudOutput() StackBitbucketCloudOutput {
	return i.ToStackBitbucketCloudOutputWithContext(context.Background())
}

func (i StackBitbucketCloudArgs) ToStackBitbucketCloudOutputWithContext(ctx context.Context) StackBitbucketCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackBitbucketCloudOutput)
}

func (i StackBitbucketCloudArgs) ToStackBitbucketCloudPtrOutput() StackBitbucketCloudPtrOutput {
	return i.ToStackBitbucketCloudPtrOutputWithContext(context.Background())
}

func (i StackBitbucketCloudArgs) ToStackBitbucketCloudPtrOutputWithContext(ctx context.Context) StackBitbucketCloudPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackBitbucketCloudOutput).ToStackBitbucketCloudPtrOutputWithContext(ctx)
}

// StackBitbucketCloudPtrInput is an input type that accepts StackBitbucketCloudArgs, StackBitbucketCloudPtr and StackBitbucketCloudPtrOutput values.
// You can construct a concrete instance of `StackBitbucketCloudPtrInput` via:
//
//          StackBitbucketCloudArgs{...}
//
//  or:
//
//          nil
type StackBitbucketCloudPtrInput interface {
	pulumi.Input

	ToStackBitbucketCloudPtrOutput() StackBitbucketCloudPtrOutput
	ToStackBitbucketCloudPtrOutputWithContext(context.Context) StackBitbucketCloudPtrOutput
}

type stackBitbucketCloudPtrType StackBitbucketCloudArgs

func StackBitbucketCloudPtr(v *StackBitbucketCloudArgs) StackBitbucketCloudPtrInput {
	return (*stackBitbucketCloudPtrType)(v)
}

func (*stackBitbucketCloudPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackBitbucketCloud)(nil)).Elem()
}

func (i *stackBitbucketCloudPtrType) ToStackBitbucketCloudPtrOutput() StackBitbucketCloudPtrOutput {
	return i.ToStackBitbucketCloudPtrOutputWithContext(context.Background())
}

func (i *stackBitbucketCloudPtrType) ToStackBitbucketCloudPtrOutputWithContext(ctx context.Context) StackBitbucketCloudPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackBitbucketCloudPtrOutput)
}

type StackBitbucketCloudOutput struct{ *pulumi.OutputState }

func (StackBitbucketCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackBitbucketCloud)(nil)).Elem()
}

func (o StackBitbucketCloudOutput) ToStackBitbucketCloudOutput() StackBitbucketCloudOutput {
	return o
}

func (o StackBitbucketCloudOutput) ToStackBitbucketCloudOutputWithContext(ctx context.Context) StackBitbucketCloudOutput {
	return o
}

func (o StackBitbucketCloudOutput) ToStackBitbucketCloudPtrOutput() StackBitbucketCloudPtrOutput {
	return o.ToStackBitbucketCloudPtrOutputWithContext(context.Background())
}

func (o StackBitbucketCloudOutput) ToStackBitbucketCloudPtrOutputWithContext(ctx context.Context) StackBitbucketCloudPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackBitbucketCloud) *StackBitbucketCloud {
		return &v
	}).(StackBitbucketCloudPtrOutput)
}

func (o StackBitbucketCloudOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v StackBitbucketCloud) string { return v.Namespace }).(pulumi.StringOutput)
}

type StackBitbucketCloudPtrOutput struct{ *pulumi.OutputState }

func (StackBitbucketCloudPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackBitbucketCloud)(nil)).Elem()
}

func (o StackBitbucketCloudPtrOutput) ToStackBitbucketCloudPtrOutput() StackBitbucketCloudPtrOutput {
	return o
}

func (o StackBitbucketCloudPtrOutput) ToStackBitbucketCloudPtrOutputWithContext(ctx context.Context) StackBitbucketCloudPtrOutput {
	return o
}

func (o StackBitbucketCloudPtrOutput) Elem() StackBitbucketCloudOutput {
	return o.ApplyT(func(v *StackBitbucketCloud) StackBitbucketCloud {
		if v != nil {
			return *v
		}
		var ret StackBitbucketCloud
		return ret
	}).(StackBitbucketCloudOutput)
}

func (o StackBitbucketCloudPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackBitbucketCloud) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type StackBitbucketDatacenter struct {
	Namespace string `pulumi:"namespace"`
}

// StackBitbucketDatacenterInput is an input type that accepts StackBitbucketDatacenterArgs and StackBitbucketDatacenterOutput values.
// You can construct a concrete instance of `StackBitbucketDatacenterInput` via:
//
//          StackBitbucketDatacenterArgs{...}
type StackBitbucketDatacenterInput interface {
	pulumi.Input

	ToStackBitbucketDatacenterOutput() StackBitbucketDatacenterOutput
	ToStackBitbucketDatacenterOutputWithContext(context.Context) StackBitbucketDatacenterOutput
}

type StackBitbucketDatacenterArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (StackBitbucketDatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackBitbucketDatacenter)(nil)).Elem()
}

func (i StackBitbucketDatacenterArgs) ToStackBitbucketDatacenterOutput() StackBitbucketDatacenterOutput {
	return i.ToStackBitbucketDatacenterOutputWithContext(context.Background())
}

func (i StackBitbucketDatacenterArgs) ToStackBitbucketDatacenterOutputWithContext(ctx context.Context) StackBitbucketDatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackBitbucketDatacenterOutput)
}

func (i StackBitbucketDatacenterArgs) ToStackBitbucketDatacenterPtrOutput() StackBitbucketDatacenterPtrOutput {
	return i.ToStackBitbucketDatacenterPtrOutputWithContext(context.Background())
}

func (i StackBitbucketDatacenterArgs) ToStackBitbucketDatacenterPtrOutputWithContext(ctx context.Context) StackBitbucketDatacenterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackBitbucketDatacenterOutput).ToStackBitbucketDatacenterPtrOutputWithContext(ctx)
}

// StackBitbucketDatacenterPtrInput is an input type that accepts StackBitbucketDatacenterArgs, StackBitbucketDatacenterPtr and StackBitbucketDatacenterPtrOutput values.
// You can construct a concrete instance of `StackBitbucketDatacenterPtrInput` via:
//
//          StackBitbucketDatacenterArgs{...}
//
//  or:
//
//          nil
type StackBitbucketDatacenterPtrInput interface {
	pulumi.Input

	ToStackBitbucketDatacenterPtrOutput() StackBitbucketDatacenterPtrOutput
	ToStackBitbucketDatacenterPtrOutputWithContext(context.Context) StackBitbucketDatacenterPtrOutput
}

type stackBitbucketDatacenterPtrType StackBitbucketDatacenterArgs

func StackBitbucketDatacenterPtr(v *StackBitbucketDatacenterArgs) StackBitbucketDatacenterPtrInput {
	return (*stackBitbucketDatacenterPtrType)(v)
}

func (*stackBitbucketDatacenterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackBitbucketDatacenter)(nil)).Elem()
}

func (i *stackBitbucketDatacenterPtrType) ToStackBitbucketDatacenterPtrOutput() StackBitbucketDatacenterPtrOutput {
	return i.ToStackBitbucketDatacenterPtrOutputWithContext(context.Background())
}

func (i *stackBitbucketDatacenterPtrType) ToStackBitbucketDatacenterPtrOutputWithContext(ctx context.Context) StackBitbucketDatacenterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackBitbucketDatacenterPtrOutput)
}

type StackBitbucketDatacenterOutput struct{ *pulumi.OutputState }

func (StackBitbucketDatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackBitbucketDatacenter)(nil)).Elem()
}

func (o StackBitbucketDatacenterOutput) ToStackBitbucketDatacenterOutput() StackBitbucketDatacenterOutput {
	return o
}

func (o StackBitbucketDatacenterOutput) ToStackBitbucketDatacenterOutputWithContext(ctx context.Context) StackBitbucketDatacenterOutput {
	return o
}

func (o StackBitbucketDatacenterOutput) ToStackBitbucketDatacenterPtrOutput() StackBitbucketDatacenterPtrOutput {
	return o.ToStackBitbucketDatacenterPtrOutputWithContext(context.Background())
}

func (o StackBitbucketDatacenterOutput) ToStackBitbucketDatacenterPtrOutputWithContext(ctx context.Context) StackBitbucketDatacenterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackBitbucketDatacenter) *StackBitbucketDatacenter {
		return &v
	}).(StackBitbucketDatacenterPtrOutput)
}

func (o StackBitbucketDatacenterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v StackBitbucketDatacenter) string { return v.Namespace }).(pulumi.StringOutput)
}

type StackBitbucketDatacenterPtrOutput struct{ *pulumi.OutputState }

func (StackBitbucketDatacenterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackBitbucketDatacenter)(nil)).Elem()
}

func (o StackBitbucketDatacenterPtrOutput) ToStackBitbucketDatacenterPtrOutput() StackBitbucketDatacenterPtrOutput {
	return o
}

func (o StackBitbucketDatacenterPtrOutput) ToStackBitbucketDatacenterPtrOutputWithContext(ctx context.Context) StackBitbucketDatacenterPtrOutput {
	return o
}

func (o StackBitbucketDatacenterPtrOutput) Elem() StackBitbucketDatacenterOutput {
	return o.ApplyT(func(v *StackBitbucketDatacenter) StackBitbucketDatacenter {
		if v != nil {
			return *v
		}
		var ret StackBitbucketDatacenter
		return ret
	}).(StackBitbucketDatacenterOutput)
}

func (o StackBitbucketDatacenterPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackBitbucketDatacenter) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type StackCloudformation struct {
	EntryTemplateFile string `pulumi:"entryTemplateFile"`
	Region            string `pulumi:"region"`
	StackName         string `pulumi:"stackName"`
	TemplateBucket    string `pulumi:"templateBucket"`
}

// StackCloudformationInput is an input type that accepts StackCloudformationArgs and StackCloudformationOutput values.
// You can construct a concrete instance of `StackCloudformationInput` via:
//
//          StackCloudformationArgs{...}
type StackCloudformationInput interface {
	pulumi.Input

	ToStackCloudformationOutput() StackCloudformationOutput
	ToStackCloudformationOutputWithContext(context.Context) StackCloudformationOutput
}

type StackCloudformationArgs struct {
	EntryTemplateFile pulumi.StringInput `pulumi:"entryTemplateFile"`
	Region            pulumi.StringInput `pulumi:"region"`
	StackName         pulumi.StringInput `pulumi:"stackName"`
	TemplateBucket    pulumi.StringInput `pulumi:"templateBucket"`
}

func (StackCloudformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCloudformation)(nil)).Elem()
}

func (i StackCloudformationArgs) ToStackCloudformationOutput() StackCloudformationOutput {
	return i.ToStackCloudformationOutputWithContext(context.Background())
}

func (i StackCloudformationArgs) ToStackCloudformationOutputWithContext(ctx context.Context) StackCloudformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCloudformationOutput)
}

func (i StackCloudformationArgs) ToStackCloudformationPtrOutput() StackCloudformationPtrOutput {
	return i.ToStackCloudformationPtrOutputWithContext(context.Background())
}

func (i StackCloudformationArgs) ToStackCloudformationPtrOutputWithContext(ctx context.Context) StackCloudformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCloudformationOutput).ToStackCloudformationPtrOutputWithContext(ctx)
}

// StackCloudformationPtrInput is an input type that accepts StackCloudformationArgs, StackCloudformationPtr and StackCloudformationPtrOutput values.
// You can construct a concrete instance of `StackCloudformationPtrInput` via:
//
//          StackCloudformationArgs{...}
//
//  or:
//
//          nil
type StackCloudformationPtrInput interface {
	pulumi.Input

	ToStackCloudformationPtrOutput() StackCloudformationPtrOutput
	ToStackCloudformationPtrOutputWithContext(context.Context) StackCloudformationPtrOutput
}

type stackCloudformationPtrType StackCloudformationArgs

func StackCloudformationPtr(v *StackCloudformationArgs) StackCloudformationPtrInput {
	return (*stackCloudformationPtrType)(v)
}

func (*stackCloudformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackCloudformation)(nil)).Elem()
}

func (i *stackCloudformationPtrType) ToStackCloudformationPtrOutput() StackCloudformationPtrOutput {
	return i.ToStackCloudformationPtrOutputWithContext(context.Background())
}

func (i *stackCloudformationPtrType) ToStackCloudformationPtrOutputWithContext(ctx context.Context) StackCloudformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCloudformationPtrOutput)
}

type StackCloudformationOutput struct{ *pulumi.OutputState }

func (StackCloudformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCloudformation)(nil)).Elem()
}

func (o StackCloudformationOutput) ToStackCloudformationOutput() StackCloudformationOutput {
	return o
}

func (o StackCloudformationOutput) ToStackCloudformationOutputWithContext(ctx context.Context) StackCloudformationOutput {
	return o
}

func (o StackCloudformationOutput) ToStackCloudformationPtrOutput() StackCloudformationPtrOutput {
	return o.ToStackCloudformationPtrOutputWithContext(context.Background())
}

func (o StackCloudformationOutput) ToStackCloudformationPtrOutputWithContext(ctx context.Context) StackCloudformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackCloudformation) *StackCloudformation {
		return &v
	}).(StackCloudformationPtrOutput)
}

func (o StackCloudformationOutput) EntryTemplateFile() pulumi.StringOutput {
	return o.ApplyT(func(v StackCloudformation) string { return v.EntryTemplateFile }).(pulumi.StringOutput)
}

func (o StackCloudformationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v StackCloudformation) string { return v.Region }).(pulumi.StringOutput)
}

func (o StackCloudformationOutput) StackName() pulumi.StringOutput {
	return o.ApplyT(func(v StackCloudformation) string { return v.StackName }).(pulumi.StringOutput)
}

func (o StackCloudformationOutput) TemplateBucket() pulumi.StringOutput {
	return o.ApplyT(func(v StackCloudformation) string { return v.TemplateBucket }).(pulumi.StringOutput)
}

type StackCloudformationPtrOutput struct{ *pulumi.OutputState }

func (StackCloudformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackCloudformation)(nil)).Elem()
}

func (o StackCloudformationPtrOutput) ToStackCloudformationPtrOutput() StackCloudformationPtrOutput {
	return o
}

func (o StackCloudformationPtrOutput) ToStackCloudformationPtrOutputWithContext(ctx context.Context) StackCloudformationPtrOutput {
	return o
}

func (o StackCloudformationPtrOutput) Elem() StackCloudformationOutput {
	return o.ApplyT(func(v *StackCloudformation) StackCloudformation {
		if v != nil {
			return *v
		}
		var ret StackCloudformation
		return ret
	}).(StackCloudformationOutput)
}

func (o StackCloudformationPtrOutput) EntryTemplateFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackCloudformation) *string {
		if v == nil {
			return nil
		}
		return &v.EntryTemplateFile
	}).(pulumi.StringPtrOutput)
}

func (o StackCloudformationPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackCloudformation) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

func (o StackCloudformationPtrOutput) StackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackCloudformation) *string {
		if v == nil {
			return nil
		}
		return &v.StackName
	}).(pulumi.StringPtrOutput)
}

func (o StackCloudformationPtrOutput) TemplateBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackCloudformation) *string {
		if v == nil {
			return nil
		}
		return &v.TemplateBucket
	}).(pulumi.StringPtrOutput)
}

type StackGithubEnterprise struct {
	Namespace string `pulumi:"namespace"`
}

// StackGithubEnterpriseInput is an input type that accepts StackGithubEnterpriseArgs and StackGithubEnterpriseOutput values.
// You can construct a concrete instance of `StackGithubEnterpriseInput` via:
//
//          StackGithubEnterpriseArgs{...}
type StackGithubEnterpriseInput interface {
	pulumi.Input

	ToStackGithubEnterpriseOutput() StackGithubEnterpriseOutput
	ToStackGithubEnterpriseOutputWithContext(context.Context) StackGithubEnterpriseOutput
}

type StackGithubEnterpriseArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (StackGithubEnterpriseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackGithubEnterprise)(nil)).Elem()
}

func (i StackGithubEnterpriseArgs) ToStackGithubEnterpriseOutput() StackGithubEnterpriseOutput {
	return i.ToStackGithubEnterpriseOutputWithContext(context.Background())
}

func (i StackGithubEnterpriseArgs) ToStackGithubEnterpriseOutputWithContext(ctx context.Context) StackGithubEnterpriseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackGithubEnterpriseOutput)
}

func (i StackGithubEnterpriseArgs) ToStackGithubEnterprisePtrOutput() StackGithubEnterprisePtrOutput {
	return i.ToStackGithubEnterprisePtrOutputWithContext(context.Background())
}

func (i StackGithubEnterpriseArgs) ToStackGithubEnterprisePtrOutputWithContext(ctx context.Context) StackGithubEnterprisePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackGithubEnterpriseOutput).ToStackGithubEnterprisePtrOutputWithContext(ctx)
}

// StackGithubEnterprisePtrInput is an input type that accepts StackGithubEnterpriseArgs, StackGithubEnterprisePtr and StackGithubEnterprisePtrOutput values.
// You can construct a concrete instance of `StackGithubEnterprisePtrInput` via:
//
//          StackGithubEnterpriseArgs{...}
//
//  or:
//
//          nil
type StackGithubEnterprisePtrInput interface {
	pulumi.Input

	ToStackGithubEnterprisePtrOutput() StackGithubEnterprisePtrOutput
	ToStackGithubEnterprisePtrOutputWithContext(context.Context) StackGithubEnterprisePtrOutput
}

type stackGithubEnterprisePtrType StackGithubEnterpriseArgs

func StackGithubEnterprisePtr(v *StackGithubEnterpriseArgs) StackGithubEnterprisePtrInput {
	return (*stackGithubEnterprisePtrType)(v)
}

func (*stackGithubEnterprisePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackGithubEnterprise)(nil)).Elem()
}

func (i *stackGithubEnterprisePtrType) ToStackGithubEnterprisePtrOutput() StackGithubEnterprisePtrOutput {
	return i.ToStackGithubEnterprisePtrOutputWithContext(context.Background())
}

func (i *stackGithubEnterprisePtrType) ToStackGithubEnterprisePtrOutputWithContext(ctx context.Context) StackGithubEnterprisePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackGithubEnterprisePtrOutput)
}

type StackGithubEnterpriseOutput struct{ *pulumi.OutputState }

func (StackGithubEnterpriseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackGithubEnterprise)(nil)).Elem()
}

func (o StackGithubEnterpriseOutput) ToStackGithubEnterpriseOutput() StackGithubEnterpriseOutput {
	return o
}

func (o StackGithubEnterpriseOutput) ToStackGithubEnterpriseOutputWithContext(ctx context.Context) StackGithubEnterpriseOutput {
	return o
}

func (o StackGithubEnterpriseOutput) ToStackGithubEnterprisePtrOutput() StackGithubEnterprisePtrOutput {
	return o.ToStackGithubEnterprisePtrOutputWithContext(context.Background())
}

func (o StackGithubEnterpriseOutput) ToStackGithubEnterprisePtrOutputWithContext(ctx context.Context) StackGithubEnterprisePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackGithubEnterprise) *StackGithubEnterprise {
		return &v
	}).(StackGithubEnterprisePtrOutput)
}

func (o StackGithubEnterpriseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v StackGithubEnterprise) string { return v.Namespace }).(pulumi.StringOutput)
}

type StackGithubEnterprisePtrOutput struct{ *pulumi.OutputState }

func (StackGithubEnterprisePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackGithubEnterprise)(nil)).Elem()
}

func (o StackGithubEnterprisePtrOutput) ToStackGithubEnterprisePtrOutput() StackGithubEnterprisePtrOutput {
	return o
}

func (o StackGithubEnterprisePtrOutput) ToStackGithubEnterprisePtrOutputWithContext(ctx context.Context) StackGithubEnterprisePtrOutput {
	return o
}

func (o StackGithubEnterprisePtrOutput) Elem() StackGithubEnterpriseOutput {
	return o.ApplyT(func(v *StackGithubEnterprise) StackGithubEnterprise {
		if v != nil {
			return *v
		}
		var ret StackGithubEnterprise
		return ret
	}).(StackGithubEnterpriseOutput)
}

func (o StackGithubEnterprisePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackGithubEnterprise) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type StackGitlab struct {
	Namespace string `pulumi:"namespace"`
}

// StackGitlabInput is an input type that accepts StackGitlabArgs and StackGitlabOutput values.
// You can construct a concrete instance of `StackGitlabInput` via:
//
//          StackGitlabArgs{...}
type StackGitlabInput interface {
	pulumi.Input

	ToStackGitlabOutput() StackGitlabOutput
	ToStackGitlabOutputWithContext(context.Context) StackGitlabOutput
}

type StackGitlabArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (StackGitlabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackGitlab)(nil)).Elem()
}

func (i StackGitlabArgs) ToStackGitlabOutput() StackGitlabOutput {
	return i.ToStackGitlabOutputWithContext(context.Background())
}

func (i StackGitlabArgs) ToStackGitlabOutputWithContext(ctx context.Context) StackGitlabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackGitlabOutput)
}

func (i StackGitlabArgs) ToStackGitlabPtrOutput() StackGitlabPtrOutput {
	return i.ToStackGitlabPtrOutputWithContext(context.Background())
}

func (i StackGitlabArgs) ToStackGitlabPtrOutputWithContext(ctx context.Context) StackGitlabPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackGitlabOutput).ToStackGitlabPtrOutputWithContext(ctx)
}

// StackGitlabPtrInput is an input type that accepts StackGitlabArgs, StackGitlabPtr and StackGitlabPtrOutput values.
// You can construct a concrete instance of `StackGitlabPtrInput` via:
//
//          StackGitlabArgs{...}
//
//  or:
//
//          nil
type StackGitlabPtrInput interface {
	pulumi.Input

	ToStackGitlabPtrOutput() StackGitlabPtrOutput
	ToStackGitlabPtrOutputWithContext(context.Context) StackGitlabPtrOutput
}

type stackGitlabPtrType StackGitlabArgs

func StackGitlabPtr(v *StackGitlabArgs) StackGitlabPtrInput {
	return (*stackGitlabPtrType)(v)
}

func (*stackGitlabPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackGitlab)(nil)).Elem()
}

func (i *stackGitlabPtrType) ToStackGitlabPtrOutput() StackGitlabPtrOutput {
	return i.ToStackGitlabPtrOutputWithContext(context.Background())
}

func (i *stackGitlabPtrType) ToStackGitlabPtrOutputWithContext(ctx context.Context) StackGitlabPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackGitlabPtrOutput)
}

type StackGitlabOutput struct{ *pulumi.OutputState }

func (StackGitlabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackGitlab)(nil)).Elem()
}

func (o StackGitlabOutput) ToStackGitlabOutput() StackGitlabOutput {
	return o
}

func (o StackGitlabOutput) ToStackGitlabOutputWithContext(ctx context.Context) StackGitlabOutput {
	return o
}

func (o StackGitlabOutput) ToStackGitlabPtrOutput() StackGitlabPtrOutput {
	return o.ToStackGitlabPtrOutputWithContext(context.Background())
}

func (o StackGitlabOutput) ToStackGitlabPtrOutputWithContext(ctx context.Context) StackGitlabPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackGitlab) *StackGitlab {
		return &v
	}).(StackGitlabPtrOutput)
}

func (o StackGitlabOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v StackGitlab) string { return v.Namespace }).(pulumi.StringOutput)
}

type StackGitlabPtrOutput struct{ *pulumi.OutputState }

func (StackGitlabPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackGitlab)(nil)).Elem()
}

func (o StackGitlabPtrOutput) ToStackGitlabPtrOutput() StackGitlabPtrOutput {
	return o
}

func (o StackGitlabPtrOutput) ToStackGitlabPtrOutputWithContext(ctx context.Context) StackGitlabPtrOutput {
	return o
}

func (o StackGitlabPtrOutput) Elem() StackGitlabOutput {
	return o.ApplyT(func(v *StackGitlab) StackGitlab {
		if v != nil {
			return *v
		}
		var ret StackGitlab
		return ret
	}).(StackGitlabOutput)
}

func (o StackGitlabPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackGitlab) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type StackKubernetes struct {
	Namespace *string `pulumi:"namespace"`
}

// StackKubernetesInput is an input type that accepts StackKubernetesArgs and StackKubernetesOutput values.
// You can construct a concrete instance of `StackKubernetesInput` via:
//
//          StackKubernetesArgs{...}
type StackKubernetesInput interface {
	pulumi.Input

	ToStackKubernetesOutput() StackKubernetesOutput
	ToStackKubernetesOutputWithContext(context.Context) StackKubernetesOutput
}

type StackKubernetesArgs struct {
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (StackKubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackKubernetes)(nil)).Elem()
}

func (i StackKubernetesArgs) ToStackKubernetesOutput() StackKubernetesOutput {
	return i.ToStackKubernetesOutputWithContext(context.Background())
}

func (i StackKubernetesArgs) ToStackKubernetesOutputWithContext(ctx context.Context) StackKubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackKubernetesOutput)
}

func (i StackKubernetesArgs) ToStackKubernetesPtrOutput() StackKubernetesPtrOutput {
	return i.ToStackKubernetesPtrOutputWithContext(context.Background())
}

func (i StackKubernetesArgs) ToStackKubernetesPtrOutputWithContext(ctx context.Context) StackKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackKubernetesOutput).ToStackKubernetesPtrOutputWithContext(ctx)
}

// StackKubernetesPtrInput is an input type that accepts StackKubernetesArgs, StackKubernetesPtr and StackKubernetesPtrOutput values.
// You can construct a concrete instance of `StackKubernetesPtrInput` via:
//
//          StackKubernetesArgs{...}
//
//  or:
//
//          nil
type StackKubernetesPtrInput interface {
	pulumi.Input

	ToStackKubernetesPtrOutput() StackKubernetesPtrOutput
	ToStackKubernetesPtrOutputWithContext(context.Context) StackKubernetesPtrOutput
}

type stackKubernetesPtrType StackKubernetesArgs

func StackKubernetesPtr(v *StackKubernetesArgs) StackKubernetesPtrInput {
	return (*stackKubernetesPtrType)(v)
}

func (*stackKubernetesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackKubernetes)(nil)).Elem()
}

func (i *stackKubernetesPtrType) ToStackKubernetesPtrOutput() StackKubernetesPtrOutput {
	return i.ToStackKubernetesPtrOutputWithContext(context.Background())
}

func (i *stackKubernetesPtrType) ToStackKubernetesPtrOutputWithContext(ctx context.Context) StackKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackKubernetesPtrOutput)
}

type StackKubernetesOutput struct{ *pulumi.OutputState }

func (StackKubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackKubernetes)(nil)).Elem()
}

func (o StackKubernetesOutput) ToStackKubernetesOutput() StackKubernetesOutput {
	return o
}

func (o StackKubernetesOutput) ToStackKubernetesOutputWithContext(ctx context.Context) StackKubernetesOutput {
	return o
}

func (o StackKubernetesOutput) ToStackKubernetesPtrOutput() StackKubernetesPtrOutput {
	return o.ToStackKubernetesPtrOutputWithContext(context.Background())
}

func (o StackKubernetesOutput) ToStackKubernetesPtrOutputWithContext(ctx context.Context) StackKubernetesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackKubernetes) *StackKubernetes {
		return &v
	}).(StackKubernetesPtrOutput)
}

func (o StackKubernetesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackKubernetes) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type StackKubernetesPtrOutput struct{ *pulumi.OutputState }

func (StackKubernetesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackKubernetes)(nil)).Elem()
}

func (o StackKubernetesPtrOutput) ToStackKubernetesPtrOutput() StackKubernetesPtrOutput {
	return o
}

func (o StackKubernetesPtrOutput) ToStackKubernetesPtrOutputWithContext(ctx context.Context) StackKubernetesPtrOutput {
	return o
}

func (o StackKubernetesPtrOutput) Elem() StackKubernetesOutput {
	return o.ApplyT(func(v *StackKubernetes) StackKubernetes {
		if v != nil {
			return *v
		}
		var ret StackKubernetes
		return ret
	}).(StackKubernetesOutput)
}

func (o StackKubernetesPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type StackPulumi struct {
	LoginUrl  string `pulumi:"loginUrl"`
	StackName string `pulumi:"stackName"`
}

// StackPulumiInput is an input type that accepts StackPulumiArgs and StackPulumiOutput values.
// You can construct a concrete instance of `StackPulumiInput` via:
//
//          StackPulumiArgs{...}
type StackPulumiInput interface {
	pulumi.Input

	ToStackPulumiOutput() StackPulumiOutput
	ToStackPulumiOutputWithContext(context.Context) StackPulumiOutput
}

type StackPulumiArgs struct {
	LoginUrl  pulumi.StringInput `pulumi:"loginUrl"`
	StackName pulumi.StringInput `pulumi:"stackName"`
}

func (StackPulumiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackPulumi)(nil)).Elem()
}

func (i StackPulumiArgs) ToStackPulumiOutput() StackPulumiOutput {
	return i.ToStackPulumiOutputWithContext(context.Background())
}

func (i StackPulumiArgs) ToStackPulumiOutputWithContext(ctx context.Context) StackPulumiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackPulumiOutput)
}

func (i StackPulumiArgs) ToStackPulumiPtrOutput() StackPulumiPtrOutput {
	return i.ToStackPulumiPtrOutputWithContext(context.Background())
}

func (i StackPulumiArgs) ToStackPulumiPtrOutputWithContext(ctx context.Context) StackPulumiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackPulumiOutput).ToStackPulumiPtrOutputWithContext(ctx)
}

// StackPulumiPtrInput is an input type that accepts StackPulumiArgs, StackPulumiPtr and StackPulumiPtrOutput values.
// You can construct a concrete instance of `StackPulumiPtrInput` via:
//
//          StackPulumiArgs{...}
//
//  or:
//
//          nil
type StackPulumiPtrInput interface {
	pulumi.Input

	ToStackPulumiPtrOutput() StackPulumiPtrOutput
	ToStackPulumiPtrOutputWithContext(context.Context) StackPulumiPtrOutput
}

type stackPulumiPtrType StackPulumiArgs

func StackPulumiPtr(v *StackPulumiArgs) StackPulumiPtrInput {
	return (*stackPulumiPtrType)(v)
}

func (*stackPulumiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackPulumi)(nil)).Elem()
}

func (i *stackPulumiPtrType) ToStackPulumiPtrOutput() StackPulumiPtrOutput {
	return i.ToStackPulumiPtrOutputWithContext(context.Background())
}

func (i *stackPulumiPtrType) ToStackPulumiPtrOutputWithContext(ctx context.Context) StackPulumiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackPulumiPtrOutput)
}

type StackPulumiOutput struct{ *pulumi.OutputState }

func (StackPulumiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackPulumi)(nil)).Elem()
}

func (o StackPulumiOutput) ToStackPulumiOutput() StackPulumiOutput {
	return o
}

func (o StackPulumiOutput) ToStackPulumiOutputWithContext(ctx context.Context) StackPulumiOutput {
	return o
}

func (o StackPulumiOutput) ToStackPulumiPtrOutput() StackPulumiPtrOutput {
	return o.ToStackPulumiPtrOutputWithContext(context.Background())
}

func (o StackPulumiOutput) ToStackPulumiPtrOutputWithContext(ctx context.Context) StackPulumiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackPulumi) *StackPulumi {
		return &v
	}).(StackPulumiPtrOutput)
}

func (o StackPulumiOutput) LoginUrl() pulumi.StringOutput {
	return o.ApplyT(func(v StackPulumi) string { return v.LoginUrl }).(pulumi.StringOutput)
}

func (o StackPulumiOutput) StackName() pulumi.StringOutput {
	return o.ApplyT(func(v StackPulumi) string { return v.StackName }).(pulumi.StringOutput)
}

type StackPulumiPtrOutput struct{ *pulumi.OutputState }

func (StackPulumiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackPulumi)(nil)).Elem()
}

func (o StackPulumiPtrOutput) ToStackPulumiPtrOutput() StackPulumiPtrOutput {
	return o
}

func (o StackPulumiPtrOutput) ToStackPulumiPtrOutputWithContext(ctx context.Context) StackPulumiPtrOutput {
	return o
}

func (o StackPulumiPtrOutput) Elem() StackPulumiOutput {
	return o.ApplyT(func(v *StackPulumi) StackPulumi {
		if v != nil {
			return *v
		}
		var ret StackPulumi
		return ret
	}).(StackPulumiOutput)
}

func (o StackPulumiPtrOutput) LoginUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackPulumi) *string {
		if v == nil {
			return nil
		}
		return &v.LoginUrl
	}).(pulumi.StringPtrOutput)
}

func (o StackPulumiPtrOutput) StackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackPulumi) *string {
		if v == nil {
			return nil
		}
		return &v.StackName
	}).(pulumi.StringPtrOutput)
}

type StackShowcase struct {
	Namespace string `pulumi:"namespace"`
}

// StackShowcaseInput is an input type that accepts StackShowcaseArgs and StackShowcaseOutput values.
// You can construct a concrete instance of `StackShowcaseInput` via:
//
//          StackShowcaseArgs{...}
type StackShowcaseInput interface {
	pulumi.Input

	ToStackShowcaseOutput() StackShowcaseOutput
	ToStackShowcaseOutputWithContext(context.Context) StackShowcaseOutput
}

type StackShowcaseArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (StackShowcaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackShowcase)(nil)).Elem()
}

func (i StackShowcaseArgs) ToStackShowcaseOutput() StackShowcaseOutput {
	return i.ToStackShowcaseOutputWithContext(context.Background())
}

func (i StackShowcaseArgs) ToStackShowcaseOutputWithContext(ctx context.Context) StackShowcaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackShowcaseOutput)
}

func (i StackShowcaseArgs) ToStackShowcasePtrOutput() StackShowcasePtrOutput {
	return i.ToStackShowcasePtrOutputWithContext(context.Background())
}

func (i StackShowcaseArgs) ToStackShowcasePtrOutputWithContext(ctx context.Context) StackShowcasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackShowcaseOutput).ToStackShowcasePtrOutputWithContext(ctx)
}

// StackShowcasePtrInput is an input type that accepts StackShowcaseArgs, StackShowcasePtr and StackShowcasePtrOutput values.
// You can construct a concrete instance of `StackShowcasePtrInput` via:
//
//          StackShowcaseArgs{...}
//
//  or:
//
//          nil
type StackShowcasePtrInput interface {
	pulumi.Input

	ToStackShowcasePtrOutput() StackShowcasePtrOutput
	ToStackShowcasePtrOutputWithContext(context.Context) StackShowcasePtrOutput
}

type stackShowcasePtrType StackShowcaseArgs

func StackShowcasePtr(v *StackShowcaseArgs) StackShowcasePtrInput {
	return (*stackShowcasePtrType)(v)
}

func (*stackShowcasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackShowcase)(nil)).Elem()
}

func (i *stackShowcasePtrType) ToStackShowcasePtrOutput() StackShowcasePtrOutput {
	return i.ToStackShowcasePtrOutputWithContext(context.Background())
}

func (i *stackShowcasePtrType) ToStackShowcasePtrOutputWithContext(ctx context.Context) StackShowcasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackShowcasePtrOutput)
}

type StackShowcaseOutput struct{ *pulumi.OutputState }

func (StackShowcaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackShowcase)(nil)).Elem()
}

func (o StackShowcaseOutput) ToStackShowcaseOutput() StackShowcaseOutput {
	return o
}

func (o StackShowcaseOutput) ToStackShowcaseOutputWithContext(ctx context.Context) StackShowcaseOutput {
	return o
}

func (o StackShowcaseOutput) ToStackShowcasePtrOutput() StackShowcasePtrOutput {
	return o.ToStackShowcasePtrOutputWithContext(context.Background())
}

func (o StackShowcaseOutput) ToStackShowcasePtrOutputWithContext(ctx context.Context) StackShowcasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackShowcase) *StackShowcase {
		return &v
	}).(StackShowcasePtrOutput)
}

func (o StackShowcaseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v StackShowcase) string { return v.Namespace }).(pulumi.StringOutput)
}

type StackShowcasePtrOutput struct{ *pulumi.OutputState }

func (StackShowcasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackShowcase)(nil)).Elem()
}

func (o StackShowcasePtrOutput) ToStackShowcasePtrOutput() StackShowcasePtrOutput {
	return o
}

func (o StackShowcasePtrOutput) ToStackShowcasePtrOutputWithContext(ctx context.Context) StackShowcasePtrOutput {
	return o
}

func (o StackShowcasePtrOutput) Elem() StackShowcaseOutput {
	return o.ApplyT(func(v *StackShowcase) StackShowcase {
		if v != nil {
			return *v
		}
		var ret StackShowcase
		return ret
	}).(StackShowcaseOutput)
}

func (o StackShowcasePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackShowcase) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GetModuleAzureDevop struct {
	Project string `pulumi:"project"`
}

// GetModuleAzureDevopInput is an input type that accepts GetModuleAzureDevopArgs and GetModuleAzureDevopOutput values.
// You can construct a concrete instance of `GetModuleAzureDevopInput` via:
//
//          GetModuleAzureDevopArgs{...}
type GetModuleAzureDevopInput interface {
	pulumi.Input

	ToGetModuleAzureDevopOutput() GetModuleAzureDevopOutput
	ToGetModuleAzureDevopOutputWithContext(context.Context) GetModuleAzureDevopOutput
}

type GetModuleAzureDevopArgs struct {
	Project pulumi.StringInput `pulumi:"project"`
}

func (GetModuleAzureDevopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleAzureDevop)(nil)).Elem()
}

func (i GetModuleAzureDevopArgs) ToGetModuleAzureDevopOutput() GetModuleAzureDevopOutput {
	return i.ToGetModuleAzureDevopOutputWithContext(context.Background())
}

func (i GetModuleAzureDevopArgs) ToGetModuleAzureDevopOutputWithContext(ctx context.Context) GetModuleAzureDevopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleAzureDevopOutput)
}

// GetModuleAzureDevopArrayInput is an input type that accepts GetModuleAzureDevopArray and GetModuleAzureDevopArrayOutput values.
// You can construct a concrete instance of `GetModuleAzureDevopArrayInput` via:
//
//          GetModuleAzureDevopArray{ GetModuleAzureDevopArgs{...} }
type GetModuleAzureDevopArrayInput interface {
	pulumi.Input

	ToGetModuleAzureDevopArrayOutput() GetModuleAzureDevopArrayOutput
	ToGetModuleAzureDevopArrayOutputWithContext(context.Context) GetModuleAzureDevopArrayOutput
}

type GetModuleAzureDevopArray []GetModuleAzureDevopInput

func (GetModuleAzureDevopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleAzureDevop)(nil)).Elem()
}

func (i GetModuleAzureDevopArray) ToGetModuleAzureDevopArrayOutput() GetModuleAzureDevopArrayOutput {
	return i.ToGetModuleAzureDevopArrayOutputWithContext(context.Background())
}

func (i GetModuleAzureDevopArray) ToGetModuleAzureDevopArrayOutputWithContext(ctx context.Context) GetModuleAzureDevopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleAzureDevopArrayOutput)
}

type GetModuleAzureDevopOutput struct{ *pulumi.OutputState }

func (GetModuleAzureDevopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleAzureDevop)(nil)).Elem()
}

func (o GetModuleAzureDevopOutput) ToGetModuleAzureDevopOutput() GetModuleAzureDevopOutput {
	return o
}

func (o GetModuleAzureDevopOutput) ToGetModuleAzureDevopOutputWithContext(ctx context.Context) GetModuleAzureDevopOutput {
	return o
}

func (o GetModuleAzureDevopOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetModuleAzureDevop) string { return v.Project }).(pulumi.StringOutput)
}

type GetModuleAzureDevopArrayOutput struct{ *pulumi.OutputState }

func (GetModuleAzureDevopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleAzureDevop)(nil)).Elem()
}

func (o GetModuleAzureDevopArrayOutput) ToGetModuleAzureDevopArrayOutput() GetModuleAzureDevopArrayOutput {
	return o
}

func (o GetModuleAzureDevopArrayOutput) ToGetModuleAzureDevopArrayOutputWithContext(ctx context.Context) GetModuleAzureDevopArrayOutput {
	return o
}

func (o GetModuleAzureDevopArrayOutput) Index(i pulumi.IntInput) GetModuleAzureDevopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetModuleAzureDevop {
		return vs[0].([]GetModuleAzureDevop)[vs[1].(int)]
	}).(GetModuleAzureDevopOutput)
}

type GetModuleBitbucketCloud struct {
	Namespace string `pulumi:"namespace"`
}

// GetModuleBitbucketCloudInput is an input type that accepts GetModuleBitbucketCloudArgs and GetModuleBitbucketCloudOutput values.
// You can construct a concrete instance of `GetModuleBitbucketCloudInput` via:
//
//          GetModuleBitbucketCloudArgs{...}
type GetModuleBitbucketCloudInput interface {
	pulumi.Input

	ToGetModuleBitbucketCloudOutput() GetModuleBitbucketCloudOutput
	ToGetModuleBitbucketCloudOutputWithContext(context.Context) GetModuleBitbucketCloudOutput
}

type GetModuleBitbucketCloudArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetModuleBitbucketCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleBitbucketCloud)(nil)).Elem()
}

func (i GetModuleBitbucketCloudArgs) ToGetModuleBitbucketCloudOutput() GetModuleBitbucketCloudOutput {
	return i.ToGetModuleBitbucketCloudOutputWithContext(context.Background())
}

func (i GetModuleBitbucketCloudArgs) ToGetModuleBitbucketCloudOutputWithContext(ctx context.Context) GetModuleBitbucketCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleBitbucketCloudOutput)
}

// GetModuleBitbucketCloudArrayInput is an input type that accepts GetModuleBitbucketCloudArray and GetModuleBitbucketCloudArrayOutput values.
// You can construct a concrete instance of `GetModuleBitbucketCloudArrayInput` via:
//
//          GetModuleBitbucketCloudArray{ GetModuleBitbucketCloudArgs{...} }
type GetModuleBitbucketCloudArrayInput interface {
	pulumi.Input

	ToGetModuleBitbucketCloudArrayOutput() GetModuleBitbucketCloudArrayOutput
	ToGetModuleBitbucketCloudArrayOutputWithContext(context.Context) GetModuleBitbucketCloudArrayOutput
}

type GetModuleBitbucketCloudArray []GetModuleBitbucketCloudInput

func (GetModuleBitbucketCloudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleBitbucketCloud)(nil)).Elem()
}

func (i GetModuleBitbucketCloudArray) ToGetModuleBitbucketCloudArrayOutput() GetModuleBitbucketCloudArrayOutput {
	return i.ToGetModuleBitbucketCloudArrayOutputWithContext(context.Background())
}

func (i GetModuleBitbucketCloudArray) ToGetModuleBitbucketCloudArrayOutputWithContext(ctx context.Context) GetModuleBitbucketCloudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleBitbucketCloudArrayOutput)
}

type GetModuleBitbucketCloudOutput struct{ *pulumi.OutputState }

func (GetModuleBitbucketCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleBitbucketCloud)(nil)).Elem()
}

func (o GetModuleBitbucketCloudOutput) ToGetModuleBitbucketCloudOutput() GetModuleBitbucketCloudOutput {
	return o
}

func (o GetModuleBitbucketCloudOutput) ToGetModuleBitbucketCloudOutputWithContext(ctx context.Context) GetModuleBitbucketCloudOutput {
	return o
}

func (o GetModuleBitbucketCloudOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetModuleBitbucketCloud) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetModuleBitbucketCloudArrayOutput struct{ *pulumi.OutputState }

func (GetModuleBitbucketCloudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleBitbucketCloud)(nil)).Elem()
}

func (o GetModuleBitbucketCloudArrayOutput) ToGetModuleBitbucketCloudArrayOutput() GetModuleBitbucketCloudArrayOutput {
	return o
}

func (o GetModuleBitbucketCloudArrayOutput) ToGetModuleBitbucketCloudArrayOutputWithContext(ctx context.Context) GetModuleBitbucketCloudArrayOutput {
	return o
}

func (o GetModuleBitbucketCloudArrayOutput) Index(i pulumi.IntInput) GetModuleBitbucketCloudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetModuleBitbucketCloud {
		return vs[0].([]GetModuleBitbucketCloud)[vs[1].(int)]
	}).(GetModuleBitbucketCloudOutput)
}

type GetModuleBitbucketDatacenter struct {
	Namespace string `pulumi:"namespace"`
}

// GetModuleBitbucketDatacenterInput is an input type that accepts GetModuleBitbucketDatacenterArgs and GetModuleBitbucketDatacenterOutput values.
// You can construct a concrete instance of `GetModuleBitbucketDatacenterInput` via:
//
//          GetModuleBitbucketDatacenterArgs{...}
type GetModuleBitbucketDatacenterInput interface {
	pulumi.Input

	ToGetModuleBitbucketDatacenterOutput() GetModuleBitbucketDatacenterOutput
	ToGetModuleBitbucketDatacenterOutputWithContext(context.Context) GetModuleBitbucketDatacenterOutput
}

type GetModuleBitbucketDatacenterArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetModuleBitbucketDatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleBitbucketDatacenter)(nil)).Elem()
}

func (i GetModuleBitbucketDatacenterArgs) ToGetModuleBitbucketDatacenterOutput() GetModuleBitbucketDatacenterOutput {
	return i.ToGetModuleBitbucketDatacenterOutputWithContext(context.Background())
}

func (i GetModuleBitbucketDatacenterArgs) ToGetModuleBitbucketDatacenterOutputWithContext(ctx context.Context) GetModuleBitbucketDatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleBitbucketDatacenterOutput)
}

// GetModuleBitbucketDatacenterArrayInput is an input type that accepts GetModuleBitbucketDatacenterArray and GetModuleBitbucketDatacenterArrayOutput values.
// You can construct a concrete instance of `GetModuleBitbucketDatacenterArrayInput` via:
//
//          GetModuleBitbucketDatacenterArray{ GetModuleBitbucketDatacenterArgs{...} }
type GetModuleBitbucketDatacenterArrayInput interface {
	pulumi.Input

	ToGetModuleBitbucketDatacenterArrayOutput() GetModuleBitbucketDatacenterArrayOutput
	ToGetModuleBitbucketDatacenterArrayOutputWithContext(context.Context) GetModuleBitbucketDatacenterArrayOutput
}

type GetModuleBitbucketDatacenterArray []GetModuleBitbucketDatacenterInput

func (GetModuleBitbucketDatacenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleBitbucketDatacenter)(nil)).Elem()
}

func (i GetModuleBitbucketDatacenterArray) ToGetModuleBitbucketDatacenterArrayOutput() GetModuleBitbucketDatacenterArrayOutput {
	return i.ToGetModuleBitbucketDatacenterArrayOutputWithContext(context.Background())
}

func (i GetModuleBitbucketDatacenterArray) ToGetModuleBitbucketDatacenterArrayOutputWithContext(ctx context.Context) GetModuleBitbucketDatacenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleBitbucketDatacenterArrayOutput)
}

type GetModuleBitbucketDatacenterOutput struct{ *pulumi.OutputState }

func (GetModuleBitbucketDatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleBitbucketDatacenter)(nil)).Elem()
}

func (o GetModuleBitbucketDatacenterOutput) ToGetModuleBitbucketDatacenterOutput() GetModuleBitbucketDatacenterOutput {
	return o
}

func (o GetModuleBitbucketDatacenterOutput) ToGetModuleBitbucketDatacenterOutputWithContext(ctx context.Context) GetModuleBitbucketDatacenterOutput {
	return o
}

func (o GetModuleBitbucketDatacenterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetModuleBitbucketDatacenter) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetModuleBitbucketDatacenterArrayOutput struct{ *pulumi.OutputState }

func (GetModuleBitbucketDatacenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleBitbucketDatacenter)(nil)).Elem()
}

func (o GetModuleBitbucketDatacenterArrayOutput) ToGetModuleBitbucketDatacenterArrayOutput() GetModuleBitbucketDatacenterArrayOutput {
	return o
}

func (o GetModuleBitbucketDatacenterArrayOutput) ToGetModuleBitbucketDatacenterArrayOutputWithContext(ctx context.Context) GetModuleBitbucketDatacenterArrayOutput {
	return o
}

func (o GetModuleBitbucketDatacenterArrayOutput) Index(i pulumi.IntInput) GetModuleBitbucketDatacenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetModuleBitbucketDatacenter {
		return vs[0].([]GetModuleBitbucketDatacenter)[vs[1].(int)]
	}).(GetModuleBitbucketDatacenterOutput)
}

type GetModuleGithubEnterprise struct {
	Namespace string `pulumi:"namespace"`
}

// GetModuleGithubEnterpriseInput is an input type that accepts GetModuleGithubEnterpriseArgs and GetModuleGithubEnterpriseOutput values.
// You can construct a concrete instance of `GetModuleGithubEnterpriseInput` via:
//
//          GetModuleGithubEnterpriseArgs{...}
type GetModuleGithubEnterpriseInput interface {
	pulumi.Input

	ToGetModuleGithubEnterpriseOutput() GetModuleGithubEnterpriseOutput
	ToGetModuleGithubEnterpriseOutputWithContext(context.Context) GetModuleGithubEnterpriseOutput
}

type GetModuleGithubEnterpriseArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetModuleGithubEnterpriseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleGithubEnterprise)(nil)).Elem()
}

func (i GetModuleGithubEnterpriseArgs) ToGetModuleGithubEnterpriseOutput() GetModuleGithubEnterpriseOutput {
	return i.ToGetModuleGithubEnterpriseOutputWithContext(context.Background())
}

func (i GetModuleGithubEnterpriseArgs) ToGetModuleGithubEnterpriseOutputWithContext(ctx context.Context) GetModuleGithubEnterpriseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleGithubEnterpriseOutput)
}

// GetModuleGithubEnterpriseArrayInput is an input type that accepts GetModuleGithubEnterpriseArray and GetModuleGithubEnterpriseArrayOutput values.
// You can construct a concrete instance of `GetModuleGithubEnterpriseArrayInput` via:
//
//          GetModuleGithubEnterpriseArray{ GetModuleGithubEnterpriseArgs{...} }
type GetModuleGithubEnterpriseArrayInput interface {
	pulumi.Input

	ToGetModuleGithubEnterpriseArrayOutput() GetModuleGithubEnterpriseArrayOutput
	ToGetModuleGithubEnterpriseArrayOutputWithContext(context.Context) GetModuleGithubEnterpriseArrayOutput
}

type GetModuleGithubEnterpriseArray []GetModuleGithubEnterpriseInput

func (GetModuleGithubEnterpriseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleGithubEnterprise)(nil)).Elem()
}

func (i GetModuleGithubEnterpriseArray) ToGetModuleGithubEnterpriseArrayOutput() GetModuleGithubEnterpriseArrayOutput {
	return i.ToGetModuleGithubEnterpriseArrayOutputWithContext(context.Background())
}

func (i GetModuleGithubEnterpriseArray) ToGetModuleGithubEnterpriseArrayOutputWithContext(ctx context.Context) GetModuleGithubEnterpriseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleGithubEnterpriseArrayOutput)
}

type GetModuleGithubEnterpriseOutput struct{ *pulumi.OutputState }

func (GetModuleGithubEnterpriseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleGithubEnterprise)(nil)).Elem()
}

func (o GetModuleGithubEnterpriseOutput) ToGetModuleGithubEnterpriseOutput() GetModuleGithubEnterpriseOutput {
	return o
}

func (o GetModuleGithubEnterpriseOutput) ToGetModuleGithubEnterpriseOutputWithContext(ctx context.Context) GetModuleGithubEnterpriseOutput {
	return o
}

func (o GetModuleGithubEnterpriseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetModuleGithubEnterprise) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetModuleGithubEnterpriseArrayOutput struct{ *pulumi.OutputState }

func (GetModuleGithubEnterpriseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleGithubEnterprise)(nil)).Elem()
}

func (o GetModuleGithubEnterpriseArrayOutput) ToGetModuleGithubEnterpriseArrayOutput() GetModuleGithubEnterpriseArrayOutput {
	return o
}

func (o GetModuleGithubEnterpriseArrayOutput) ToGetModuleGithubEnterpriseArrayOutputWithContext(ctx context.Context) GetModuleGithubEnterpriseArrayOutput {
	return o
}

func (o GetModuleGithubEnterpriseArrayOutput) Index(i pulumi.IntInput) GetModuleGithubEnterpriseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetModuleGithubEnterprise {
		return vs[0].([]GetModuleGithubEnterprise)[vs[1].(int)]
	}).(GetModuleGithubEnterpriseOutput)
}

type GetModuleGitlab struct {
	Namespace string `pulumi:"namespace"`
}

// GetModuleGitlabInput is an input type that accepts GetModuleGitlabArgs and GetModuleGitlabOutput values.
// You can construct a concrete instance of `GetModuleGitlabInput` via:
//
//          GetModuleGitlabArgs{...}
type GetModuleGitlabInput interface {
	pulumi.Input

	ToGetModuleGitlabOutput() GetModuleGitlabOutput
	ToGetModuleGitlabOutputWithContext(context.Context) GetModuleGitlabOutput
}

type GetModuleGitlabArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetModuleGitlabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleGitlab)(nil)).Elem()
}

func (i GetModuleGitlabArgs) ToGetModuleGitlabOutput() GetModuleGitlabOutput {
	return i.ToGetModuleGitlabOutputWithContext(context.Background())
}

func (i GetModuleGitlabArgs) ToGetModuleGitlabOutputWithContext(ctx context.Context) GetModuleGitlabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleGitlabOutput)
}

// GetModuleGitlabArrayInput is an input type that accepts GetModuleGitlabArray and GetModuleGitlabArrayOutput values.
// You can construct a concrete instance of `GetModuleGitlabArrayInput` via:
//
//          GetModuleGitlabArray{ GetModuleGitlabArgs{...} }
type GetModuleGitlabArrayInput interface {
	pulumi.Input

	ToGetModuleGitlabArrayOutput() GetModuleGitlabArrayOutput
	ToGetModuleGitlabArrayOutputWithContext(context.Context) GetModuleGitlabArrayOutput
}

type GetModuleGitlabArray []GetModuleGitlabInput

func (GetModuleGitlabArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleGitlab)(nil)).Elem()
}

func (i GetModuleGitlabArray) ToGetModuleGitlabArrayOutput() GetModuleGitlabArrayOutput {
	return i.ToGetModuleGitlabArrayOutputWithContext(context.Background())
}

func (i GetModuleGitlabArray) ToGetModuleGitlabArrayOutputWithContext(ctx context.Context) GetModuleGitlabArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetModuleGitlabArrayOutput)
}

type GetModuleGitlabOutput struct{ *pulumi.OutputState }

func (GetModuleGitlabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetModuleGitlab)(nil)).Elem()
}

func (o GetModuleGitlabOutput) ToGetModuleGitlabOutput() GetModuleGitlabOutput {
	return o
}

func (o GetModuleGitlabOutput) ToGetModuleGitlabOutputWithContext(ctx context.Context) GetModuleGitlabOutput {
	return o
}

func (o GetModuleGitlabOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetModuleGitlab) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetModuleGitlabArrayOutput struct{ *pulumi.OutputState }

func (GetModuleGitlabArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetModuleGitlab)(nil)).Elem()
}

func (o GetModuleGitlabArrayOutput) ToGetModuleGitlabArrayOutput() GetModuleGitlabArrayOutput {
	return o
}

func (o GetModuleGitlabArrayOutput) ToGetModuleGitlabArrayOutputWithContext(ctx context.Context) GetModuleGitlabArrayOutput {
	return o
}

func (o GetModuleGitlabArrayOutput) Index(i pulumi.IntInput) GetModuleGitlabOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetModuleGitlab {
		return vs[0].([]GetModuleGitlab)[vs[1].(int)]
	}).(GetModuleGitlabOutput)
}

type GetPoliciesPolicy struct {
	Id      string   `pulumi:"id"`
	Labels  []string `pulumi:"labels"`
	Name    string   `pulumi:"name"`
	SpaceId string   `pulumi:"spaceId"`
	Type    string   `pulumi:"type"`
}

// GetPoliciesPolicyInput is an input type that accepts GetPoliciesPolicyArgs and GetPoliciesPolicyOutput values.
// You can construct a concrete instance of `GetPoliciesPolicyInput` via:
//
//          GetPoliciesPolicyArgs{...}
type GetPoliciesPolicyInput interface {
	pulumi.Input

	ToGetPoliciesPolicyOutput() GetPoliciesPolicyOutput
	ToGetPoliciesPolicyOutputWithContext(context.Context) GetPoliciesPolicyOutput
}

type GetPoliciesPolicyArgs struct {
	Id      pulumi.StringInput      `pulumi:"id"`
	Labels  pulumi.StringArrayInput `pulumi:"labels"`
	Name    pulumi.StringInput      `pulumi:"name"`
	SpaceId pulumi.StringInput      `pulumi:"spaceId"`
	Type    pulumi.StringInput      `pulumi:"type"`
}

func (GetPoliciesPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPoliciesPolicy)(nil)).Elem()
}

func (i GetPoliciesPolicyArgs) ToGetPoliciesPolicyOutput() GetPoliciesPolicyOutput {
	return i.ToGetPoliciesPolicyOutputWithContext(context.Background())
}

func (i GetPoliciesPolicyArgs) ToGetPoliciesPolicyOutputWithContext(ctx context.Context) GetPoliciesPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPoliciesPolicyOutput)
}

// GetPoliciesPolicyArrayInput is an input type that accepts GetPoliciesPolicyArray and GetPoliciesPolicyArrayOutput values.
// You can construct a concrete instance of `GetPoliciesPolicyArrayInput` via:
//
//          GetPoliciesPolicyArray{ GetPoliciesPolicyArgs{...} }
type GetPoliciesPolicyArrayInput interface {
	pulumi.Input

	ToGetPoliciesPolicyArrayOutput() GetPoliciesPolicyArrayOutput
	ToGetPoliciesPolicyArrayOutputWithContext(context.Context) GetPoliciesPolicyArrayOutput
}

type GetPoliciesPolicyArray []GetPoliciesPolicyInput

func (GetPoliciesPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPoliciesPolicy)(nil)).Elem()
}

func (i GetPoliciesPolicyArray) ToGetPoliciesPolicyArrayOutput() GetPoliciesPolicyArrayOutput {
	return i.ToGetPoliciesPolicyArrayOutputWithContext(context.Background())
}

func (i GetPoliciesPolicyArray) ToGetPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetPoliciesPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPoliciesPolicyArrayOutput)
}

type GetPoliciesPolicyOutput struct{ *pulumi.OutputState }

func (GetPoliciesPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPoliciesPolicy)(nil)).Elem()
}

func (o GetPoliciesPolicyOutput) ToGetPoliciesPolicyOutput() GetPoliciesPolicyOutput {
	return o
}

func (o GetPoliciesPolicyOutput) ToGetPoliciesPolicyOutputWithContext(ctx context.Context) GetPoliciesPolicyOutput {
	return o
}

func (o GetPoliciesPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPoliciesPolicy) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPoliciesPolicyOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPoliciesPolicy) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o GetPoliciesPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPoliciesPolicy) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPoliciesPolicyOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPoliciesPolicy) string { return v.SpaceId }).(pulumi.StringOutput)
}

func (o GetPoliciesPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPoliciesPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type GetPoliciesPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetPoliciesPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPoliciesPolicy)(nil)).Elem()
}

func (o GetPoliciesPolicyArrayOutput) ToGetPoliciesPolicyArrayOutput() GetPoliciesPolicyArrayOutput {
	return o
}

func (o GetPoliciesPolicyArrayOutput) ToGetPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetPoliciesPolicyArrayOutput {
	return o
}

func (o GetPoliciesPolicyArrayOutput) Index(i pulumi.IntInput) GetPoliciesPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPoliciesPolicy {
		return vs[0].([]GetPoliciesPolicy)[vs[1].(int)]
	}).(GetPoliciesPolicyOutput)
}

type GetStackAnsible struct {
	Playbook string `pulumi:"playbook"`
}

// GetStackAnsibleInput is an input type that accepts GetStackAnsibleArgs and GetStackAnsibleOutput values.
// You can construct a concrete instance of `GetStackAnsibleInput` via:
//
//          GetStackAnsibleArgs{...}
type GetStackAnsibleInput interface {
	pulumi.Input

	ToGetStackAnsibleOutput() GetStackAnsibleOutput
	ToGetStackAnsibleOutputWithContext(context.Context) GetStackAnsibleOutput
}

type GetStackAnsibleArgs struct {
	Playbook pulumi.StringInput `pulumi:"playbook"`
}

func (GetStackAnsibleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackAnsible)(nil)).Elem()
}

func (i GetStackAnsibleArgs) ToGetStackAnsibleOutput() GetStackAnsibleOutput {
	return i.ToGetStackAnsibleOutputWithContext(context.Background())
}

func (i GetStackAnsibleArgs) ToGetStackAnsibleOutputWithContext(ctx context.Context) GetStackAnsibleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackAnsibleOutput)
}

// GetStackAnsibleArrayInput is an input type that accepts GetStackAnsibleArray and GetStackAnsibleArrayOutput values.
// You can construct a concrete instance of `GetStackAnsibleArrayInput` via:
//
//          GetStackAnsibleArray{ GetStackAnsibleArgs{...} }
type GetStackAnsibleArrayInput interface {
	pulumi.Input

	ToGetStackAnsibleArrayOutput() GetStackAnsibleArrayOutput
	ToGetStackAnsibleArrayOutputWithContext(context.Context) GetStackAnsibleArrayOutput
}

type GetStackAnsibleArray []GetStackAnsibleInput

func (GetStackAnsibleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackAnsible)(nil)).Elem()
}

func (i GetStackAnsibleArray) ToGetStackAnsibleArrayOutput() GetStackAnsibleArrayOutput {
	return i.ToGetStackAnsibleArrayOutputWithContext(context.Background())
}

func (i GetStackAnsibleArray) ToGetStackAnsibleArrayOutputWithContext(ctx context.Context) GetStackAnsibleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackAnsibleArrayOutput)
}

type GetStackAnsibleOutput struct{ *pulumi.OutputState }

func (GetStackAnsibleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackAnsible)(nil)).Elem()
}

func (o GetStackAnsibleOutput) ToGetStackAnsibleOutput() GetStackAnsibleOutput {
	return o
}

func (o GetStackAnsibleOutput) ToGetStackAnsibleOutputWithContext(ctx context.Context) GetStackAnsibleOutput {
	return o
}

func (o GetStackAnsibleOutput) Playbook() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackAnsible) string { return v.Playbook }).(pulumi.StringOutput)
}

type GetStackAnsibleArrayOutput struct{ *pulumi.OutputState }

func (GetStackAnsibleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackAnsible)(nil)).Elem()
}

func (o GetStackAnsibleArrayOutput) ToGetStackAnsibleArrayOutput() GetStackAnsibleArrayOutput {
	return o
}

func (o GetStackAnsibleArrayOutput) ToGetStackAnsibleArrayOutputWithContext(ctx context.Context) GetStackAnsibleArrayOutput {
	return o
}

func (o GetStackAnsibleArrayOutput) Index(i pulumi.IntInput) GetStackAnsibleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackAnsible {
		return vs[0].([]GetStackAnsible)[vs[1].(int)]
	}).(GetStackAnsibleOutput)
}

type GetStackAzureDevop struct {
	Project string `pulumi:"project"`
}

// GetStackAzureDevopInput is an input type that accepts GetStackAzureDevopArgs and GetStackAzureDevopOutput values.
// You can construct a concrete instance of `GetStackAzureDevopInput` via:
//
//          GetStackAzureDevopArgs{...}
type GetStackAzureDevopInput interface {
	pulumi.Input

	ToGetStackAzureDevopOutput() GetStackAzureDevopOutput
	ToGetStackAzureDevopOutputWithContext(context.Context) GetStackAzureDevopOutput
}

type GetStackAzureDevopArgs struct {
	Project pulumi.StringInput `pulumi:"project"`
}

func (GetStackAzureDevopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackAzureDevop)(nil)).Elem()
}

func (i GetStackAzureDevopArgs) ToGetStackAzureDevopOutput() GetStackAzureDevopOutput {
	return i.ToGetStackAzureDevopOutputWithContext(context.Background())
}

func (i GetStackAzureDevopArgs) ToGetStackAzureDevopOutputWithContext(ctx context.Context) GetStackAzureDevopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackAzureDevopOutput)
}

// GetStackAzureDevopArrayInput is an input type that accepts GetStackAzureDevopArray and GetStackAzureDevopArrayOutput values.
// You can construct a concrete instance of `GetStackAzureDevopArrayInput` via:
//
//          GetStackAzureDevopArray{ GetStackAzureDevopArgs{...} }
type GetStackAzureDevopArrayInput interface {
	pulumi.Input

	ToGetStackAzureDevopArrayOutput() GetStackAzureDevopArrayOutput
	ToGetStackAzureDevopArrayOutputWithContext(context.Context) GetStackAzureDevopArrayOutput
}

type GetStackAzureDevopArray []GetStackAzureDevopInput

func (GetStackAzureDevopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackAzureDevop)(nil)).Elem()
}

func (i GetStackAzureDevopArray) ToGetStackAzureDevopArrayOutput() GetStackAzureDevopArrayOutput {
	return i.ToGetStackAzureDevopArrayOutputWithContext(context.Background())
}

func (i GetStackAzureDevopArray) ToGetStackAzureDevopArrayOutputWithContext(ctx context.Context) GetStackAzureDevopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackAzureDevopArrayOutput)
}

type GetStackAzureDevopOutput struct{ *pulumi.OutputState }

func (GetStackAzureDevopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackAzureDevop)(nil)).Elem()
}

func (o GetStackAzureDevopOutput) ToGetStackAzureDevopOutput() GetStackAzureDevopOutput {
	return o
}

func (o GetStackAzureDevopOutput) ToGetStackAzureDevopOutputWithContext(ctx context.Context) GetStackAzureDevopOutput {
	return o
}

func (o GetStackAzureDevopOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackAzureDevop) string { return v.Project }).(pulumi.StringOutput)
}

type GetStackAzureDevopArrayOutput struct{ *pulumi.OutputState }

func (GetStackAzureDevopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackAzureDevop)(nil)).Elem()
}

func (o GetStackAzureDevopArrayOutput) ToGetStackAzureDevopArrayOutput() GetStackAzureDevopArrayOutput {
	return o
}

func (o GetStackAzureDevopArrayOutput) ToGetStackAzureDevopArrayOutputWithContext(ctx context.Context) GetStackAzureDevopArrayOutput {
	return o
}

func (o GetStackAzureDevopArrayOutput) Index(i pulumi.IntInput) GetStackAzureDevopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackAzureDevop {
		return vs[0].([]GetStackAzureDevop)[vs[1].(int)]
	}).(GetStackAzureDevopOutput)
}

type GetStackBitbucketCloud struct {
	Namespace string `pulumi:"namespace"`
}

// GetStackBitbucketCloudInput is an input type that accepts GetStackBitbucketCloudArgs and GetStackBitbucketCloudOutput values.
// You can construct a concrete instance of `GetStackBitbucketCloudInput` via:
//
//          GetStackBitbucketCloudArgs{...}
type GetStackBitbucketCloudInput interface {
	pulumi.Input

	ToGetStackBitbucketCloudOutput() GetStackBitbucketCloudOutput
	ToGetStackBitbucketCloudOutputWithContext(context.Context) GetStackBitbucketCloudOutput
}

type GetStackBitbucketCloudArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetStackBitbucketCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackBitbucketCloud)(nil)).Elem()
}

func (i GetStackBitbucketCloudArgs) ToGetStackBitbucketCloudOutput() GetStackBitbucketCloudOutput {
	return i.ToGetStackBitbucketCloudOutputWithContext(context.Background())
}

func (i GetStackBitbucketCloudArgs) ToGetStackBitbucketCloudOutputWithContext(ctx context.Context) GetStackBitbucketCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackBitbucketCloudOutput)
}

// GetStackBitbucketCloudArrayInput is an input type that accepts GetStackBitbucketCloudArray and GetStackBitbucketCloudArrayOutput values.
// You can construct a concrete instance of `GetStackBitbucketCloudArrayInput` via:
//
//          GetStackBitbucketCloudArray{ GetStackBitbucketCloudArgs{...} }
type GetStackBitbucketCloudArrayInput interface {
	pulumi.Input

	ToGetStackBitbucketCloudArrayOutput() GetStackBitbucketCloudArrayOutput
	ToGetStackBitbucketCloudArrayOutputWithContext(context.Context) GetStackBitbucketCloudArrayOutput
}

type GetStackBitbucketCloudArray []GetStackBitbucketCloudInput

func (GetStackBitbucketCloudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackBitbucketCloud)(nil)).Elem()
}

func (i GetStackBitbucketCloudArray) ToGetStackBitbucketCloudArrayOutput() GetStackBitbucketCloudArrayOutput {
	return i.ToGetStackBitbucketCloudArrayOutputWithContext(context.Background())
}

func (i GetStackBitbucketCloudArray) ToGetStackBitbucketCloudArrayOutputWithContext(ctx context.Context) GetStackBitbucketCloudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackBitbucketCloudArrayOutput)
}

type GetStackBitbucketCloudOutput struct{ *pulumi.OutputState }

func (GetStackBitbucketCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackBitbucketCloud)(nil)).Elem()
}

func (o GetStackBitbucketCloudOutput) ToGetStackBitbucketCloudOutput() GetStackBitbucketCloudOutput {
	return o
}

func (o GetStackBitbucketCloudOutput) ToGetStackBitbucketCloudOutputWithContext(ctx context.Context) GetStackBitbucketCloudOutput {
	return o
}

func (o GetStackBitbucketCloudOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackBitbucketCloud) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetStackBitbucketCloudArrayOutput struct{ *pulumi.OutputState }

func (GetStackBitbucketCloudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackBitbucketCloud)(nil)).Elem()
}

func (o GetStackBitbucketCloudArrayOutput) ToGetStackBitbucketCloudArrayOutput() GetStackBitbucketCloudArrayOutput {
	return o
}

func (o GetStackBitbucketCloudArrayOutput) ToGetStackBitbucketCloudArrayOutputWithContext(ctx context.Context) GetStackBitbucketCloudArrayOutput {
	return o
}

func (o GetStackBitbucketCloudArrayOutput) Index(i pulumi.IntInput) GetStackBitbucketCloudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackBitbucketCloud {
		return vs[0].([]GetStackBitbucketCloud)[vs[1].(int)]
	}).(GetStackBitbucketCloudOutput)
}

type GetStackBitbucketDatacenter struct {
	Namespace string `pulumi:"namespace"`
}

// GetStackBitbucketDatacenterInput is an input type that accepts GetStackBitbucketDatacenterArgs and GetStackBitbucketDatacenterOutput values.
// You can construct a concrete instance of `GetStackBitbucketDatacenterInput` via:
//
//          GetStackBitbucketDatacenterArgs{...}
type GetStackBitbucketDatacenterInput interface {
	pulumi.Input

	ToGetStackBitbucketDatacenterOutput() GetStackBitbucketDatacenterOutput
	ToGetStackBitbucketDatacenterOutputWithContext(context.Context) GetStackBitbucketDatacenterOutput
}

type GetStackBitbucketDatacenterArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetStackBitbucketDatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackBitbucketDatacenter)(nil)).Elem()
}

func (i GetStackBitbucketDatacenterArgs) ToGetStackBitbucketDatacenterOutput() GetStackBitbucketDatacenterOutput {
	return i.ToGetStackBitbucketDatacenterOutputWithContext(context.Background())
}

func (i GetStackBitbucketDatacenterArgs) ToGetStackBitbucketDatacenterOutputWithContext(ctx context.Context) GetStackBitbucketDatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackBitbucketDatacenterOutput)
}

// GetStackBitbucketDatacenterArrayInput is an input type that accepts GetStackBitbucketDatacenterArray and GetStackBitbucketDatacenterArrayOutput values.
// You can construct a concrete instance of `GetStackBitbucketDatacenterArrayInput` via:
//
//          GetStackBitbucketDatacenterArray{ GetStackBitbucketDatacenterArgs{...} }
type GetStackBitbucketDatacenterArrayInput interface {
	pulumi.Input

	ToGetStackBitbucketDatacenterArrayOutput() GetStackBitbucketDatacenterArrayOutput
	ToGetStackBitbucketDatacenterArrayOutputWithContext(context.Context) GetStackBitbucketDatacenterArrayOutput
}

type GetStackBitbucketDatacenterArray []GetStackBitbucketDatacenterInput

func (GetStackBitbucketDatacenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackBitbucketDatacenter)(nil)).Elem()
}

func (i GetStackBitbucketDatacenterArray) ToGetStackBitbucketDatacenterArrayOutput() GetStackBitbucketDatacenterArrayOutput {
	return i.ToGetStackBitbucketDatacenterArrayOutputWithContext(context.Background())
}

func (i GetStackBitbucketDatacenterArray) ToGetStackBitbucketDatacenterArrayOutputWithContext(ctx context.Context) GetStackBitbucketDatacenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackBitbucketDatacenterArrayOutput)
}

type GetStackBitbucketDatacenterOutput struct{ *pulumi.OutputState }

func (GetStackBitbucketDatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackBitbucketDatacenter)(nil)).Elem()
}

func (o GetStackBitbucketDatacenterOutput) ToGetStackBitbucketDatacenterOutput() GetStackBitbucketDatacenterOutput {
	return o
}

func (o GetStackBitbucketDatacenterOutput) ToGetStackBitbucketDatacenterOutputWithContext(ctx context.Context) GetStackBitbucketDatacenterOutput {
	return o
}

func (o GetStackBitbucketDatacenterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackBitbucketDatacenter) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetStackBitbucketDatacenterArrayOutput struct{ *pulumi.OutputState }

func (GetStackBitbucketDatacenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackBitbucketDatacenter)(nil)).Elem()
}

func (o GetStackBitbucketDatacenterArrayOutput) ToGetStackBitbucketDatacenterArrayOutput() GetStackBitbucketDatacenterArrayOutput {
	return o
}

func (o GetStackBitbucketDatacenterArrayOutput) ToGetStackBitbucketDatacenterArrayOutputWithContext(ctx context.Context) GetStackBitbucketDatacenterArrayOutput {
	return o
}

func (o GetStackBitbucketDatacenterArrayOutput) Index(i pulumi.IntInput) GetStackBitbucketDatacenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackBitbucketDatacenter {
		return vs[0].([]GetStackBitbucketDatacenter)[vs[1].(int)]
	}).(GetStackBitbucketDatacenterOutput)
}

type GetStackCloudformation struct {
	EntryTemplateFile string `pulumi:"entryTemplateFile"`
	Region            string `pulumi:"region"`
	StackName         string `pulumi:"stackName"`
	TemplateBucket    string `pulumi:"templateBucket"`
}

// GetStackCloudformationInput is an input type that accepts GetStackCloudformationArgs and GetStackCloudformationOutput values.
// You can construct a concrete instance of `GetStackCloudformationInput` via:
//
//          GetStackCloudformationArgs{...}
type GetStackCloudformationInput interface {
	pulumi.Input

	ToGetStackCloudformationOutput() GetStackCloudformationOutput
	ToGetStackCloudformationOutputWithContext(context.Context) GetStackCloudformationOutput
}

type GetStackCloudformationArgs struct {
	EntryTemplateFile pulumi.StringInput `pulumi:"entryTemplateFile"`
	Region            pulumi.StringInput `pulumi:"region"`
	StackName         pulumi.StringInput `pulumi:"stackName"`
	TemplateBucket    pulumi.StringInput `pulumi:"templateBucket"`
}

func (GetStackCloudformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackCloudformation)(nil)).Elem()
}

func (i GetStackCloudformationArgs) ToGetStackCloudformationOutput() GetStackCloudformationOutput {
	return i.ToGetStackCloudformationOutputWithContext(context.Background())
}

func (i GetStackCloudformationArgs) ToGetStackCloudformationOutputWithContext(ctx context.Context) GetStackCloudformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackCloudformationOutput)
}

// GetStackCloudformationArrayInput is an input type that accepts GetStackCloudformationArray and GetStackCloudformationArrayOutput values.
// You can construct a concrete instance of `GetStackCloudformationArrayInput` via:
//
//          GetStackCloudformationArray{ GetStackCloudformationArgs{...} }
type GetStackCloudformationArrayInput interface {
	pulumi.Input

	ToGetStackCloudformationArrayOutput() GetStackCloudformationArrayOutput
	ToGetStackCloudformationArrayOutputWithContext(context.Context) GetStackCloudformationArrayOutput
}

type GetStackCloudformationArray []GetStackCloudformationInput

func (GetStackCloudformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackCloudformation)(nil)).Elem()
}

func (i GetStackCloudformationArray) ToGetStackCloudformationArrayOutput() GetStackCloudformationArrayOutput {
	return i.ToGetStackCloudformationArrayOutputWithContext(context.Background())
}

func (i GetStackCloudformationArray) ToGetStackCloudformationArrayOutputWithContext(ctx context.Context) GetStackCloudformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackCloudformationArrayOutput)
}

type GetStackCloudformationOutput struct{ *pulumi.OutputState }

func (GetStackCloudformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackCloudformation)(nil)).Elem()
}

func (o GetStackCloudformationOutput) ToGetStackCloudformationOutput() GetStackCloudformationOutput {
	return o
}

func (o GetStackCloudformationOutput) ToGetStackCloudformationOutputWithContext(ctx context.Context) GetStackCloudformationOutput {
	return o
}

func (o GetStackCloudformationOutput) EntryTemplateFile() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackCloudformation) string { return v.EntryTemplateFile }).(pulumi.StringOutput)
}

func (o GetStackCloudformationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackCloudformation) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetStackCloudformationOutput) StackName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackCloudformation) string { return v.StackName }).(pulumi.StringOutput)
}

func (o GetStackCloudformationOutput) TemplateBucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackCloudformation) string { return v.TemplateBucket }).(pulumi.StringOutput)
}

type GetStackCloudformationArrayOutput struct{ *pulumi.OutputState }

func (GetStackCloudformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackCloudformation)(nil)).Elem()
}

func (o GetStackCloudformationArrayOutput) ToGetStackCloudformationArrayOutput() GetStackCloudformationArrayOutput {
	return o
}

func (o GetStackCloudformationArrayOutput) ToGetStackCloudformationArrayOutputWithContext(ctx context.Context) GetStackCloudformationArrayOutput {
	return o
}

func (o GetStackCloudformationArrayOutput) Index(i pulumi.IntInput) GetStackCloudformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackCloudformation {
		return vs[0].([]GetStackCloudformation)[vs[1].(int)]
	}).(GetStackCloudformationOutput)
}

type GetStackGithubEnterprise struct {
	Namespace string `pulumi:"namespace"`
}

// GetStackGithubEnterpriseInput is an input type that accepts GetStackGithubEnterpriseArgs and GetStackGithubEnterpriseOutput values.
// You can construct a concrete instance of `GetStackGithubEnterpriseInput` via:
//
//          GetStackGithubEnterpriseArgs{...}
type GetStackGithubEnterpriseInput interface {
	pulumi.Input

	ToGetStackGithubEnterpriseOutput() GetStackGithubEnterpriseOutput
	ToGetStackGithubEnterpriseOutputWithContext(context.Context) GetStackGithubEnterpriseOutput
}

type GetStackGithubEnterpriseArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetStackGithubEnterpriseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackGithubEnterprise)(nil)).Elem()
}

func (i GetStackGithubEnterpriseArgs) ToGetStackGithubEnterpriseOutput() GetStackGithubEnterpriseOutput {
	return i.ToGetStackGithubEnterpriseOutputWithContext(context.Background())
}

func (i GetStackGithubEnterpriseArgs) ToGetStackGithubEnterpriseOutputWithContext(ctx context.Context) GetStackGithubEnterpriseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackGithubEnterpriseOutput)
}

// GetStackGithubEnterpriseArrayInput is an input type that accepts GetStackGithubEnterpriseArray and GetStackGithubEnterpriseArrayOutput values.
// You can construct a concrete instance of `GetStackGithubEnterpriseArrayInput` via:
//
//          GetStackGithubEnterpriseArray{ GetStackGithubEnterpriseArgs{...} }
type GetStackGithubEnterpriseArrayInput interface {
	pulumi.Input

	ToGetStackGithubEnterpriseArrayOutput() GetStackGithubEnterpriseArrayOutput
	ToGetStackGithubEnterpriseArrayOutputWithContext(context.Context) GetStackGithubEnterpriseArrayOutput
}

type GetStackGithubEnterpriseArray []GetStackGithubEnterpriseInput

func (GetStackGithubEnterpriseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackGithubEnterprise)(nil)).Elem()
}

func (i GetStackGithubEnterpriseArray) ToGetStackGithubEnterpriseArrayOutput() GetStackGithubEnterpriseArrayOutput {
	return i.ToGetStackGithubEnterpriseArrayOutputWithContext(context.Background())
}

func (i GetStackGithubEnterpriseArray) ToGetStackGithubEnterpriseArrayOutputWithContext(ctx context.Context) GetStackGithubEnterpriseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackGithubEnterpriseArrayOutput)
}

type GetStackGithubEnterpriseOutput struct{ *pulumi.OutputState }

func (GetStackGithubEnterpriseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackGithubEnterprise)(nil)).Elem()
}

func (o GetStackGithubEnterpriseOutput) ToGetStackGithubEnterpriseOutput() GetStackGithubEnterpriseOutput {
	return o
}

func (o GetStackGithubEnterpriseOutput) ToGetStackGithubEnterpriseOutputWithContext(ctx context.Context) GetStackGithubEnterpriseOutput {
	return o
}

func (o GetStackGithubEnterpriseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackGithubEnterprise) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetStackGithubEnterpriseArrayOutput struct{ *pulumi.OutputState }

func (GetStackGithubEnterpriseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackGithubEnterprise)(nil)).Elem()
}

func (o GetStackGithubEnterpriseArrayOutput) ToGetStackGithubEnterpriseArrayOutput() GetStackGithubEnterpriseArrayOutput {
	return o
}

func (o GetStackGithubEnterpriseArrayOutput) ToGetStackGithubEnterpriseArrayOutputWithContext(ctx context.Context) GetStackGithubEnterpriseArrayOutput {
	return o
}

func (o GetStackGithubEnterpriseArrayOutput) Index(i pulumi.IntInput) GetStackGithubEnterpriseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackGithubEnterprise {
		return vs[0].([]GetStackGithubEnterprise)[vs[1].(int)]
	}).(GetStackGithubEnterpriseOutput)
}

type GetStackGitlab struct {
	Namespace string `pulumi:"namespace"`
}

// GetStackGitlabInput is an input type that accepts GetStackGitlabArgs and GetStackGitlabOutput values.
// You can construct a concrete instance of `GetStackGitlabInput` via:
//
//          GetStackGitlabArgs{...}
type GetStackGitlabInput interface {
	pulumi.Input

	ToGetStackGitlabOutput() GetStackGitlabOutput
	ToGetStackGitlabOutputWithContext(context.Context) GetStackGitlabOutput
}

type GetStackGitlabArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetStackGitlabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackGitlab)(nil)).Elem()
}

func (i GetStackGitlabArgs) ToGetStackGitlabOutput() GetStackGitlabOutput {
	return i.ToGetStackGitlabOutputWithContext(context.Background())
}

func (i GetStackGitlabArgs) ToGetStackGitlabOutputWithContext(ctx context.Context) GetStackGitlabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackGitlabOutput)
}

// GetStackGitlabArrayInput is an input type that accepts GetStackGitlabArray and GetStackGitlabArrayOutput values.
// You can construct a concrete instance of `GetStackGitlabArrayInput` via:
//
//          GetStackGitlabArray{ GetStackGitlabArgs{...} }
type GetStackGitlabArrayInput interface {
	pulumi.Input

	ToGetStackGitlabArrayOutput() GetStackGitlabArrayOutput
	ToGetStackGitlabArrayOutputWithContext(context.Context) GetStackGitlabArrayOutput
}

type GetStackGitlabArray []GetStackGitlabInput

func (GetStackGitlabArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackGitlab)(nil)).Elem()
}

func (i GetStackGitlabArray) ToGetStackGitlabArrayOutput() GetStackGitlabArrayOutput {
	return i.ToGetStackGitlabArrayOutputWithContext(context.Background())
}

func (i GetStackGitlabArray) ToGetStackGitlabArrayOutputWithContext(ctx context.Context) GetStackGitlabArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackGitlabArrayOutput)
}

type GetStackGitlabOutput struct{ *pulumi.OutputState }

func (GetStackGitlabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackGitlab)(nil)).Elem()
}

func (o GetStackGitlabOutput) ToGetStackGitlabOutput() GetStackGitlabOutput {
	return o
}

func (o GetStackGitlabOutput) ToGetStackGitlabOutputWithContext(ctx context.Context) GetStackGitlabOutput {
	return o
}

func (o GetStackGitlabOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackGitlab) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetStackGitlabArrayOutput struct{ *pulumi.OutputState }

func (GetStackGitlabArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackGitlab)(nil)).Elem()
}

func (o GetStackGitlabArrayOutput) ToGetStackGitlabArrayOutput() GetStackGitlabArrayOutput {
	return o
}

func (o GetStackGitlabArrayOutput) ToGetStackGitlabArrayOutputWithContext(ctx context.Context) GetStackGitlabArrayOutput {
	return o
}

func (o GetStackGitlabArrayOutput) Index(i pulumi.IntInput) GetStackGitlabOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackGitlab {
		return vs[0].([]GetStackGitlab)[vs[1].(int)]
	}).(GetStackGitlabOutput)
}

type GetStackKubernete struct {
	Namespace string `pulumi:"namespace"`
}

// GetStackKuberneteInput is an input type that accepts GetStackKuberneteArgs and GetStackKuberneteOutput values.
// You can construct a concrete instance of `GetStackKuberneteInput` via:
//
//          GetStackKuberneteArgs{...}
type GetStackKuberneteInput interface {
	pulumi.Input

	ToGetStackKuberneteOutput() GetStackKuberneteOutput
	ToGetStackKuberneteOutputWithContext(context.Context) GetStackKuberneteOutput
}

type GetStackKuberneteArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetStackKuberneteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackKubernete)(nil)).Elem()
}

func (i GetStackKuberneteArgs) ToGetStackKuberneteOutput() GetStackKuberneteOutput {
	return i.ToGetStackKuberneteOutputWithContext(context.Background())
}

func (i GetStackKuberneteArgs) ToGetStackKuberneteOutputWithContext(ctx context.Context) GetStackKuberneteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackKuberneteOutput)
}

// GetStackKuberneteArrayInput is an input type that accepts GetStackKuberneteArray and GetStackKuberneteArrayOutput values.
// You can construct a concrete instance of `GetStackKuberneteArrayInput` via:
//
//          GetStackKuberneteArray{ GetStackKuberneteArgs{...} }
type GetStackKuberneteArrayInput interface {
	pulumi.Input

	ToGetStackKuberneteArrayOutput() GetStackKuberneteArrayOutput
	ToGetStackKuberneteArrayOutputWithContext(context.Context) GetStackKuberneteArrayOutput
}

type GetStackKuberneteArray []GetStackKuberneteInput

func (GetStackKuberneteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackKubernete)(nil)).Elem()
}

func (i GetStackKuberneteArray) ToGetStackKuberneteArrayOutput() GetStackKuberneteArrayOutput {
	return i.ToGetStackKuberneteArrayOutputWithContext(context.Background())
}

func (i GetStackKuberneteArray) ToGetStackKuberneteArrayOutputWithContext(ctx context.Context) GetStackKuberneteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackKuberneteArrayOutput)
}

type GetStackKuberneteOutput struct{ *pulumi.OutputState }

func (GetStackKuberneteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackKubernete)(nil)).Elem()
}

func (o GetStackKuberneteOutput) ToGetStackKuberneteOutput() GetStackKuberneteOutput {
	return o
}

func (o GetStackKuberneteOutput) ToGetStackKuberneteOutputWithContext(ctx context.Context) GetStackKuberneteOutput {
	return o
}

func (o GetStackKuberneteOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackKubernete) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetStackKuberneteArrayOutput struct{ *pulumi.OutputState }

func (GetStackKuberneteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackKubernete)(nil)).Elem()
}

func (o GetStackKuberneteArrayOutput) ToGetStackKuberneteArrayOutput() GetStackKuberneteArrayOutput {
	return o
}

func (o GetStackKuberneteArrayOutput) ToGetStackKuberneteArrayOutputWithContext(ctx context.Context) GetStackKuberneteArrayOutput {
	return o
}

func (o GetStackKuberneteArrayOutput) Index(i pulumi.IntInput) GetStackKuberneteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackKubernete {
		return vs[0].([]GetStackKubernete)[vs[1].(int)]
	}).(GetStackKuberneteOutput)
}

type GetStackPulumi struct {
	LoginUrl  string `pulumi:"loginUrl"`
	StackName string `pulumi:"stackName"`
}

// GetStackPulumiInput is an input type that accepts GetStackPulumiArgs and GetStackPulumiOutput values.
// You can construct a concrete instance of `GetStackPulumiInput` via:
//
//          GetStackPulumiArgs{...}
type GetStackPulumiInput interface {
	pulumi.Input

	ToGetStackPulumiOutput() GetStackPulumiOutput
	ToGetStackPulumiOutputWithContext(context.Context) GetStackPulumiOutput
}

type GetStackPulumiArgs struct {
	LoginUrl  pulumi.StringInput `pulumi:"loginUrl"`
	StackName pulumi.StringInput `pulumi:"stackName"`
}

func (GetStackPulumiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackPulumi)(nil)).Elem()
}

func (i GetStackPulumiArgs) ToGetStackPulumiOutput() GetStackPulumiOutput {
	return i.ToGetStackPulumiOutputWithContext(context.Background())
}

func (i GetStackPulumiArgs) ToGetStackPulumiOutputWithContext(ctx context.Context) GetStackPulumiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackPulumiOutput)
}

// GetStackPulumiArrayInput is an input type that accepts GetStackPulumiArray and GetStackPulumiArrayOutput values.
// You can construct a concrete instance of `GetStackPulumiArrayInput` via:
//
//          GetStackPulumiArray{ GetStackPulumiArgs{...} }
type GetStackPulumiArrayInput interface {
	pulumi.Input

	ToGetStackPulumiArrayOutput() GetStackPulumiArrayOutput
	ToGetStackPulumiArrayOutputWithContext(context.Context) GetStackPulumiArrayOutput
}

type GetStackPulumiArray []GetStackPulumiInput

func (GetStackPulumiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackPulumi)(nil)).Elem()
}

func (i GetStackPulumiArray) ToGetStackPulumiArrayOutput() GetStackPulumiArrayOutput {
	return i.ToGetStackPulumiArrayOutputWithContext(context.Background())
}

func (i GetStackPulumiArray) ToGetStackPulumiArrayOutputWithContext(ctx context.Context) GetStackPulumiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackPulumiArrayOutput)
}

type GetStackPulumiOutput struct{ *pulumi.OutputState }

func (GetStackPulumiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackPulumi)(nil)).Elem()
}

func (o GetStackPulumiOutput) ToGetStackPulumiOutput() GetStackPulumiOutput {
	return o
}

func (o GetStackPulumiOutput) ToGetStackPulumiOutputWithContext(ctx context.Context) GetStackPulumiOutput {
	return o
}

func (o GetStackPulumiOutput) LoginUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackPulumi) string { return v.LoginUrl }).(pulumi.StringOutput)
}

func (o GetStackPulumiOutput) StackName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackPulumi) string { return v.StackName }).(pulumi.StringOutput)
}

type GetStackPulumiArrayOutput struct{ *pulumi.OutputState }

func (GetStackPulumiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackPulumi)(nil)).Elem()
}

func (o GetStackPulumiArrayOutput) ToGetStackPulumiArrayOutput() GetStackPulumiArrayOutput {
	return o
}

func (o GetStackPulumiArrayOutput) ToGetStackPulumiArrayOutputWithContext(ctx context.Context) GetStackPulumiArrayOutput {
	return o
}

func (o GetStackPulumiArrayOutput) Index(i pulumi.IntInput) GetStackPulumiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackPulumi {
		return vs[0].([]GetStackPulumi)[vs[1].(int)]
	}).(GetStackPulumiOutput)
}

type GetStackShowcase struct {
	Namespace string `pulumi:"namespace"`
}

// GetStackShowcaseInput is an input type that accepts GetStackShowcaseArgs and GetStackShowcaseOutput values.
// You can construct a concrete instance of `GetStackShowcaseInput` via:
//
//          GetStackShowcaseArgs{...}
type GetStackShowcaseInput interface {
	pulumi.Input

	ToGetStackShowcaseOutput() GetStackShowcaseOutput
	ToGetStackShowcaseOutputWithContext(context.Context) GetStackShowcaseOutput
}

type GetStackShowcaseArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetStackShowcaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackShowcase)(nil)).Elem()
}

func (i GetStackShowcaseArgs) ToGetStackShowcaseOutput() GetStackShowcaseOutput {
	return i.ToGetStackShowcaseOutputWithContext(context.Background())
}

func (i GetStackShowcaseArgs) ToGetStackShowcaseOutputWithContext(ctx context.Context) GetStackShowcaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackShowcaseOutput)
}

// GetStackShowcaseArrayInput is an input type that accepts GetStackShowcaseArray and GetStackShowcaseArrayOutput values.
// You can construct a concrete instance of `GetStackShowcaseArrayInput` via:
//
//          GetStackShowcaseArray{ GetStackShowcaseArgs{...} }
type GetStackShowcaseArrayInput interface {
	pulumi.Input

	ToGetStackShowcaseArrayOutput() GetStackShowcaseArrayOutput
	ToGetStackShowcaseArrayOutputWithContext(context.Context) GetStackShowcaseArrayOutput
}

type GetStackShowcaseArray []GetStackShowcaseInput

func (GetStackShowcaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackShowcase)(nil)).Elem()
}

func (i GetStackShowcaseArray) ToGetStackShowcaseArrayOutput() GetStackShowcaseArrayOutput {
	return i.ToGetStackShowcaseArrayOutputWithContext(context.Background())
}

func (i GetStackShowcaseArray) ToGetStackShowcaseArrayOutputWithContext(ctx context.Context) GetStackShowcaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackShowcaseArrayOutput)
}

type GetStackShowcaseOutput struct{ *pulumi.OutputState }

func (GetStackShowcaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackShowcase)(nil)).Elem()
}

func (o GetStackShowcaseOutput) ToGetStackShowcaseOutput() GetStackShowcaseOutput {
	return o
}

func (o GetStackShowcaseOutput) ToGetStackShowcaseOutputWithContext(ctx context.Context) GetStackShowcaseOutput {
	return o
}

func (o GetStackShowcaseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackShowcase) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetStackShowcaseArrayOutput struct{ *pulumi.OutputState }

func (GetStackShowcaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackShowcase)(nil)).Elem()
}

func (o GetStackShowcaseArrayOutput) ToGetStackShowcaseArrayOutput() GetStackShowcaseArrayOutput {
	return o
}

func (o GetStackShowcaseArrayOutput) ToGetStackShowcaseArrayOutputWithContext(ctx context.Context) GetStackShowcaseArrayOutput {
	return o
}

func (o GetStackShowcaseArrayOutput) Index(i pulumi.IntInput) GetStackShowcaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackShowcase {
		return vs[0].([]GetStackShowcase)[vs[1].(int)]
	}).(GetStackShowcaseOutput)
}

type GetVcsAgentPoolsVcsAgentPool struct {
	Description    string `pulumi:"description"`
	Name           string `pulumi:"name"`
	VcsAgentPoolId string `pulumi:"vcsAgentPoolId"`
}

// GetVcsAgentPoolsVcsAgentPoolInput is an input type that accepts GetVcsAgentPoolsVcsAgentPoolArgs and GetVcsAgentPoolsVcsAgentPoolOutput values.
// You can construct a concrete instance of `GetVcsAgentPoolsVcsAgentPoolInput` via:
//
//          GetVcsAgentPoolsVcsAgentPoolArgs{...}
type GetVcsAgentPoolsVcsAgentPoolInput interface {
	pulumi.Input

	ToGetVcsAgentPoolsVcsAgentPoolOutput() GetVcsAgentPoolsVcsAgentPoolOutput
	ToGetVcsAgentPoolsVcsAgentPoolOutputWithContext(context.Context) GetVcsAgentPoolsVcsAgentPoolOutput
}

type GetVcsAgentPoolsVcsAgentPoolArgs struct {
	Description    pulumi.StringInput `pulumi:"description"`
	Name           pulumi.StringInput `pulumi:"name"`
	VcsAgentPoolId pulumi.StringInput `pulumi:"vcsAgentPoolId"`
}

func (GetVcsAgentPoolsVcsAgentPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVcsAgentPoolsVcsAgentPool)(nil)).Elem()
}

func (i GetVcsAgentPoolsVcsAgentPoolArgs) ToGetVcsAgentPoolsVcsAgentPoolOutput() GetVcsAgentPoolsVcsAgentPoolOutput {
	return i.ToGetVcsAgentPoolsVcsAgentPoolOutputWithContext(context.Background())
}

func (i GetVcsAgentPoolsVcsAgentPoolArgs) ToGetVcsAgentPoolsVcsAgentPoolOutputWithContext(ctx context.Context) GetVcsAgentPoolsVcsAgentPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVcsAgentPoolsVcsAgentPoolOutput)
}

// GetVcsAgentPoolsVcsAgentPoolArrayInput is an input type that accepts GetVcsAgentPoolsVcsAgentPoolArray and GetVcsAgentPoolsVcsAgentPoolArrayOutput values.
// You can construct a concrete instance of `GetVcsAgentPoolsVcsAgentPoolArrayInput` via:
//
//          GetVcsAgentPoolsVcsAgentPoolArray{ GetVcsAgentPoolsVcsAgentPoolArgs{...} }
type GetVcsAgentPoolsVcsAgentPoolArrayInput interface {
	pulumi.Input

	ToGetVcsAgentPoolsVcsAgentPoolArrayOutput() GetVcsAgentPoolsVcsAgentPoolArrayOutput
	ToGetVcsAgentPoolsVcsAgentPoolArrayOutputWithContext(context.Context) GetVcsAgentPoolsVcsAgentPoolArrayOutput
}

type GetVcsAgentPoolsVcsAgentPoolArray []GetVcsAgentPoolsVcsAgentPoolInput

func (GetVcsAgentPoolsVcsAgentPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVcsAgentPoolsVcsAgentPool)(nil)).Elem()
}

func (i GetVcsAgentPoolsVcsAgentPoolArray) ToGetVcsAgentPoolsVcsAgentPoolArrayOutput() GetVcsAgentPoolsVcsAgentPoolArrayOutput {
	return i.ToGetVcsAgentPoolsVcsAgentPoolArrayOutputWithContext(context.Background())
}

func (i GetVcsAgentPoolsVcsAgentPoolArray) ToGetVcsAgentPoolsVcsAgentPoolArrayOutputWithContext(ctx context.Context) GetVcsAgentPoolsVcsAgentPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVcsAgentPoolsVcsAgentPoolArrayOutput)
}

type GetVcsAgentPoolsVcsAgentPoolOutput struct{ *pulumi.OutputState }

func (GetVcsAgentPoolsVcsAgentPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVcsAgentPoolsVcsAgentPool)(nil)).Elem()
}

func (o GetVcsAgentPoolsVcsAgentPoolOutput) ToGetVcsAgentPoolsVcsAgentPoolOutput() GetVcsAgentPoolsVcsAgentPoolOutput {
	return o
}

func (o GetVcsAgentPoolsVcsAgentPoolOutput) ToGetVcsAgentPoolsVcsAgentPoolOutputWithContext(ctx context.Context) GetVcsAgentPoolsVcsAgentPoolOutput {
	return o
}

func (o GetVcsAgentPoolsVcsAgentPoolOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcsAgentPoolsVcsAgentPool) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetVcsAgentPoolsVcsAgentPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcsAgentPoolsVcsAgentPool) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetVcsAgentPoolsVcsAgentPoolOutput) VcsAgentPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcsAgentPoolsVcsAgentPool) string { return v.VcsAgentPoolId }).(pulumi.StringOutput)
}

type GetVcsAgentPoolsVcsAgentPoolArrayOutput struct{ *pulumi.OutputState }

func (GetVcsAgentPoolsVcsAgentPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVcsAgentPoolsVcsAgentPool)(nil)).Elem()
}

func (o GetVcsAgentPoolsVcsAgentPoolArrayOutput) ToGetVcsAgentPoolsVcsAgentPoolArrayOutput() GetVcsAgentPoolsVcsAgentPoolArrayOutput {
	return o
}

func (o GetVcsAgentPoolsVcsAgentPoolArrayOutput) ToGetVcsAgentPoolsVcsAgentPoolArrayOutputWithContext(ctx context.Context) GetVcsAgentPoolsVcsAgentPoolArrayOutput {
	return o
}

func (o GetVcsAgentPoolsVcsAgentPoolArrayOutput) Index(i pulumi.IntInput) GetVcsAgentPoolsVcsAgentPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVcsAgentPoolsVcsAgentPool {
		return vs[0].([]GetVcsAgentPoolsVcsAgentPool)[vs[1].(int)]
	}).(GetVcsAgentPoolsVcsAgentPoolOutput)
}

type GetWorkerPoolsWorkerPool struct {
	Config       string `pulumi:"config"`
	Description  string `pulumi:"description"`
	Name         string `pulumi:"name"`
	SpaceId      string `pulumi:"spaceId"`
	WorkerPoolId string `pulumi:"workerPoolId"`
}

// GetWorkerPoolsWorkerPoolInput is an input type that accepts GetWorkerPoolsWorkerPoolArgs and GetWorkerPoolsWorkerPoolOutput values.
// You can construct a concrete instance of `GetWorkerPoolsWorkerPoolInput` via:
//
//          GetWorkerPoolsWorkerPoolArgs{...}
type GetWorkerPoolsWorkerPoolInput interface {
	pulumi.Input

	ToGetWorkerPoolsWorkerPoolOutput() GetWorkerPoolsWorkerPoolOutput
	ToGetWorkerPoolsWorkerPoolOutputWithContext(context.Context) GetWorkerPoolsWorkerPoolOutput
}

type GetWorkerPoolsWorkerPoolArgs struct {
	Config       pulumi.StringInput `pulumi:"config"`
	Description  pulumi.StringInput `pulumi:"description"`
	Name         pulumi.StringInput `pulumi:"name"`
	SpaceId      pulumi.StringInput `pulumi:"spaceId"`
	WorkerPoolId pulumi.StringInput `pulumi:"workerPoolId"`
}

func (GetWorkerPoolsWorkerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkerPoolsWorkerPool)(nil)).Elem()
}

func (i GetWorkerPoolsWorkerPoolArgs) ToGetWorkerPoolsWorkerPoolOutput() GetWorkerPoolsWorkerPoolOutput {
	return i.ToGetWorkerPoolsWorkerPoolOutputWithContext(context.Background())
}

func (i GetWorkerPoolsWorkerPoolArgs) ToGetWorkerPoolsWorkerPoolOutputWithContext(ctx context.Context) GetWorkerPoolsWorkerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkerPoolsWorkerPoolOutput)
}

// GetWorkerPoolsWorkerPoolArrayInput is an input type that accepts GetWorkerPoolsWorkerPoolArray and GetWorkerPoolsWorkerPoolArrayOutput values.
// You can construct a concrete instance of `GetWorkerPoolsWorkerPoolArrayInput` via:
//
//          GetWorkerPoolsWorkerPoolArray{ GetWorkerPoolsWorkerPoolArgs{...} }
type GetWorkerPoolsWorkerPoolArrayInput interface {
	pulumi.Input

	ToGetWorkerPoolsWorkerPoolArrayOutput() GetWorkerPoolsWorkerPoolArrayOutput
	ToGetWorkerPoolsWorkerPoolArrayOutputWithContext(context.Context) GetWorkerPoolsWorkerPoolArrayOutput
}

type GetWorkerPoolsWorkerPoolArray []GetWorkerPoolsWorkerPoolInput

func (GetWorkerPoolsWorkerPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkerPoolsWorkerPool)(nil)).Elem()
}

func (i GetWorkerPoolsWorkerPoolArray) ToGetWorkerPoolsWorkerPoolArrayOutput() GetWorkerPoolsWorkerPoolArrayOutput {
	return i.ToGetWorkerPoolsWorkerPoolArrayOutputWithContext(context.Background())
}

func (i GetWorkerPoolsWorkerPoolArray) ToGetWorkerPoolsWorkerPoolArrayOutputWithContext(ctx context.Context) GetWorkerPoolsWorkerPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkerPoolsWorkerPoolArrayOutput)
}

type GetWorkerPoolsWorkerPoolOutput struct{ *pulumi.OutputState }

func (GetWorkerPoolsWorkerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkerPoolsWorkerPool)(nil)).Elem()
}

func (o GetWorkerPoolsWorkerPoolOutput) ToGetWorkerPoolsWorkerPoolOutput() GetWorkerPoolsWorkerPoolOutput {
	return o
}

func (o GetWorkerPoolsWorkerPoolOutput) ToGetWorkerPoolsWorkerPoolOutputWithContext(ctx context.Context) GetWorkerPoolsWorkerPoolOutput {
	return o
}

func (o GetWorkerPoolsWorkerPoolOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkerPoolsWorkerPool) string { return v.Config }).(pulumi.StringOutput)
}

func (o GetWorkerPoolsWorkerPoolOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkerPoolsWorkerPool) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetWorkerPoolsWorkerPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkerPoolsWorkerPool) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetWorkerPoolsWorkerPoolOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkerPoolsWorkerPool) string { return v.SpaceId }).(pulumi.StringOutput)
}

func (o GetWorkerPoolsWorkerPoolOutput) WorkerPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkerPoolsWorkerPool) string { return v.WorkerPoolId }).(pulumi.StringOutput)
}

type GetWorkerPoolsWorkerPoolArrayOutput struct{ *pulumi.OutputState }

func (GetWorkerPoolsWorkerPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkerPoolsWorkerPool)(nil)).Elem()
}

func (o GetWorkerPoolsWorkerPoolArrayOutput) ToGetWorkerPoolsWorkerPoolArrayOutput() GetWorkerPoolsWorkerPoolArrayOutput {
	return o
}

func (o GetWorkerPoolsWorkerPoolArrayOutput) ToGetWorkerPoolsWorkerPoolArrayOutputWithContext(ctx context.Context) GetWorkerPoolsWorkerPoolArrayOutput {
	return o
}

func (o GetWorkerPoolsWorkerPoolArrayOutput) Index(i pulumi.IntInput) GetWorkerPoolsWorkerPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWorkerPoolsWorkerPool {
		return vs[0].([]GetWorkerPoolsWorkerPool)[vs[1].(int)]
	}).(GetWorkerPoolsWorkerPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleAzureDevopsInput)(nil)).Elem(), ModuleAzureDevopsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleAzureDevopsPtrInput)(nil)).Elem(), ModuleAzureDevopsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleBitbucketCloudInput)(nil)).Elem(), ModuleBitbucketCloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleBitbucketCloudPtrInput)(nil)).Elem(), ModuleBitbucketCloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleBitbucketDatacenterInput)(nil)).Elem(), ModuleBitbucketDatacenterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleBitbucketDatacenterPtrInput)(nil)).Elem(), ModuleBitbucketDatacenterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleGithubEnterpriseInput)(nil)).Elem(), ModuleGithubEnterpriseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleGithubEnterprisePtrInput)(nil)).Elem(), ModuleGithubEnterpriseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleGitlabInput)(nil)).Elem(), ModuleGitlabArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleGitlabPtrInput)(nil)).Elem(), ModuleGitlabArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackAnsibleInput)(nil)).Elem(), StackAnsibleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackAnsiblePtrInput)(nil)).Elem(), StackAnsibleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackAzureDevopsInput)(nil)).Elem(), StackAzureDevopsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackAzureDevopsPtrInput)(nil)).Elem(), StackAzureDevopsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackBitbucketCloudInput)(nil)).Elem(), StackBitbucketCloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackBitbucketCloudPtrInput)(nil)).Elem(), StackBitbucketCloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackBitbucketDatacenterInput)(nil)).Elem(), StackBitbucketDatacenterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackBitbucketDatacenterPtrInput)(nil)).Elem(), StackBitbucketDatacenterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackCloudformationInput)(nil)).Elem(), StackCloudformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackCloudformationPtrInput)(nil)).Elem(), StackCloudformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackGithubEnterpriseInput)(nil)).Elem(), StackGithubEnterpriseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackGithubEnterprisePtrInput)(nil)).Elem(), StackGithubEnterpriseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackGitlabInput)(nil)).Elem(), StackGitlabArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackGitlabPtrInput)(nil)).Elem(), StackGitlabArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackKubernetesInput)(nil)).Elem(), StackKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackKubernetesPtrInput)(nil)).Elem(), StackKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackPulumiInput)(nil)).Elem(), StackPulumiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackPulumiPtrInput)(nil)).Elem(), StackPulumiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackShowcaseInput)(nil)).Elem(), StackShowcaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackShowcasePtrInput)(nil)).Elem(), StackShowcaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleAzureDevopInput)(nil)).Elem(), GetModuleAzureDevopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleAzureDevopArrayInput)(nil)).Elem(), GetModuleAzureDevopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleBitbucketCloudInput)(nil)).Elem(), GetModuleBitbucketCloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleBitbucketCloudArrayInput)(nil)).Elem(), GetModuleBitbucketCloudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleBitbucketDatacenterInput)(nil)).Elem(), GetModuleBitbucketDatacenterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleBitbucketDatacenterArrayInput)(nil)).Elem(), GetModuleBitbucketDatacenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleGithubEnterpriseInput)(nil)).Elem(), GetModuleGithubEnterpriseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleGithubEnterpriseArrayInput)(nil)).Elem(), GetModuleGithubEnterpriseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleGitlabInput)(nil)).Elem(), GetModuleGitlabArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetModuleGitlabArrayInput)(nil)).Elem(), GetModuleGitlabArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPoliciesPolicyInput)(nil)).Elem(), GetPoliciesPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPoliciesPolicyArrayInput)(nil)).Elem(), GetPoliciesPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackAnsibleInput)(nil)).Elem(), GetStackAnsibleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackAnsibleArrayInput)(nil)).Elem(), GetStackAnsibleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackAzureDevopInput)(nil)).Elem(), GetStackAzureDevopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackAzureDevopArrayInput)(nil)).Elem(), GetStackAzureDevopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackBitbucketCloudInput)(nil)).Elem(), GetStackBitbucketCloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackBitbucketCloudArrayInput)(nil)).Elem(), GetStackBitbucketCloudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackBitbucketDatacenterInput)(nil)).Elem(), GetStackBitbucketDatacenterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackBitbucketDatacenterArrayInput)(nil)).Elem(), GetStackBitbucketDatacenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackCloudformationInput)(nil)).Elem(), GetStackCloudformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackCloudformationArrayInput)(nil)).Elem(), GetStackCloudformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackGithubEnterpriseInput)(nil)).Elem(), GetStackGithubEnterpriseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackGithubEnterpriseArrayInput)(nil)).Elem(), GetStackGithubEnterpriseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackGitlabInput)(nil)).Elem(), GetStackGitlabArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackGitlabArrayInput)(nil)).Elem(), GetStackGitlabArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackKuberneteInput)(nil)).Elem(), GetStackKuberneteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackKuberneteArrayInput)(nil)).Elem(), GetStackKuberneteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackPulumiInput)(nil)).Elem(), GetStackPulumiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackPulumiArrayInput)(nil)).Elem(), GetStackPulumiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackShowcaseInput)(nil)).Elem(), GetStackShowcaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStackShowcaseArrayInput)(nil)).Elem(), GetStackShowcaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVcsAgentPoolsVcsAgentPoolInput)(nil)).Elem(), GetVcsAgentPoolsVcsAgentPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVcsAgentPoolsVcsAgentPoolArrayInput)(nil)).Elem(), GetVcsAgentPoolsVcsAgentPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkerPoolsWorkerPoolInput)(nil)).Elem(), GetWorkerPoolsWorkerPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkerPoolsWorkerPoolArrayInput)(nil)).Elem(), GetWorkerPoolsWorkerPoolArray{})
	pulumi.RegisterOutputType(ModuleAzureDevopsOutput{})
	pulumi.RegisterOutputType(ModuleAzureDevopsPtrOutput{})
	pulumi.RegisterOutputType(ModuleBitbucketCloudOutput{})
	pulumi.RegisterOutputType(ModuleBitbucketCloudPtrOutput{})
	pulumi.RegisterOutputType(ModuleBitbucketDatacenterOutput{})
	pulumi.RegisterOutputType(ModuleBitbucketDatacenterPtrOutput{})
	pulumi.RegisterOutputType(ModuleGithubEnterpriseOutput{})
	pulumi.RegisterOutputType(ModuleGithubEnterprisePtrOutput{})
	pulumi.RegisterOutputType(ModuleGitlabOutput{})
	pulumi.RegisterOutputType(ModuleGitlabPtrOutput{})
	pulumi.RegisterOutputType(StackAnsibleOutput{})
	pulumi.RegisterOutputType(StackAnsiblePtrOutput{})
	pulumi.RegisterOutputType(StackAzureDevopsOutput{})
	pulumi.RegisterOutputType(StackAzureDevopsPtrOutput{})
	pulumi.RegisterOutputType(StackBitbucketCloudOutput{})
	pulumi.RegisterOutputType(StackBitbucketCloudPtrOutput{})
	pulumi.RegisterOutputType(StackBitbucketDatacenterOutput{})
	pulumi.RegisterOutputType(StackBitbucketDatacenterPtrOutput{})
	pulumi.RegisterOutputType(StackCloudformationOutput{})
	pulumi.RegisterOutputType(StackCloudformationPtrOutput{})
	pulumi.RegisterOutputType(StackGithubEnterpriseOutput{})
	pulumi.RegisterOutputType(StackGithubEnterprisePtrOutput{})
	pulumi.RegisterOutputType(StackGitlabOutput{})
	pulumi.RegisterOutputType(StackGitlabPtrOutput{})
	pulumi.RegisterOutputType(StackKubernetesOutput{})
	pulumi.RegisterOutputType(StackKubernetesPtrOutput{})
	pulumi.RegisterOutputType(StackPulumiOutput{})
	pulumi.RegisterOutputType(StackPulumiPtrOutput{})
	pulumi.RegisterOutputType(StackShowcaseOutput{})
	pulumi.RegisterOutputType(StackShowcasePtrOutput{})
	pulumi.RegisterOutputType(GetModuleAzureDevopOutput{})
	pulumi.RegisterOutputType(GetModuleAzureDevopArrayOutput{})
	pulumi.RegisterOutputType(GetModuleBitbucketCloudOutput{})
	pulumi.RegisterOutputType(GetModuleBitbucketCloudArrayOutput{})
	pulumi.RegisterOutputType(GetModuleBitbucketDatacenterOutput{})
	pulumi.RegisterOutputType(GetModuleBitbucketDatacenterArrayOutput{})
	pulumi.RegisterOutputType(GetModuleGithubEnterpriseOutput{})
	pulumi.RegisterOutputType(GetModuleGithubEnterpriseArrayOutput{})
	pulumi.RegisterOutputType(GetModuleGitlabOutput{})
	pulumi.RegisterOutputType(GetModuleGitlabArrayOutput{})
	pulumi.RegisterOutputType(GetPoliciesPolicyOutput{})
	pulumi.RegisterOutputType(GetPoliciesPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetStackAnsibleOutput{})
	pulumi.RegisterOutputType(GetStackAnsibleArrayOutput{})
	pulumi.RegisterOutputType(GetStackAzureDevopOutput{})
	pulumi.RegisterOutputType(GetStackAzureDevopArrayOutput{})
	pulumi.RegisterOutputType(GetStackBitbucketCloudOutput{})
	pulumi.RegisterOutputType(GetStackBitbucketCloudArrayOutput{})
	pulumi.RegisterOutputType(GetStackBitbucketDatacenterOutput{})
	pulumi.RegisterOutputType(GetStackBitbucketDatacenterArrayOutput{})
	pulumi.RegisterOutputType(GetStackCloudformationOutput{})
	pulumi.RegisterOutputType(GetStackCloudformationArrayOutput{})
	pulumi.RegisterOutputType(GetStackGithubEnterpriseOutput{})
	pulumi.RegisterOutputType(GetStackGithubEnterpriseArrayOutput{})
	pulumi.RegisterOutputType(GetStackGitlabOutput{})
	pulumi.RegisterOutputType(GetStackGitlabArrayOutput{})
	pulumi.RegisterOutputType(GetStackKuberneteOutput{})
	pulumi.RegisterOutputType(GetStackKuberneteArrayOutput{})
	pulumi.RegisterOutputType(GetStackPulumiOutput{})
	pulumi.RegisterOutputType(GetStackPulumiArrayOutput{})
	pulumi.RegisterOutputType(GetStackShowcaseOutput{})
	pulumi.RegisterOutputType(GetStackShowcaseArrayOutput{})
	pulumi.RegisterOutputType(GetVcsAgentPoolsVcsAgentPoolOutput{})
	pulumi.RegisterOutputType(GetVcsAgentPoolsVcsAgentPoolArrayOutput{})
	pulumi.RegisterOutputType(GetWorkerPoolsWorkerPoolOutput{})
	pulumi.RegisterOutputType(GetWorkerPoolsWorkerPoolArrayOutput{})
}
