// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EnvironmentVariable struct {
	pulumi.CustomResourceState

	// SHA-256 checksum of the value
	Checksum pulumi.StringOutput `pulumi:"checksum"`
	// ID of the context on which the environment variable is defined
	ContextId pulumi.StringPtrOutput `pulumi:"contextId"`
	// ID of the module on which the environment variable is defined
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// Name of the environment variable
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the stack on which the environment variable is defined
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
	// Value of the environment variable
	Value pulumi.StringOutput `pulumi:"value"`
	// Indicates whether the value can be read back outside a Run
	WriteOnly pulumi.BoolPtrOutput `pulumi:"writeOnly"`
}

// NewEnvironmentVariable registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentVariable(ctx *pulumi.Context,
	name string, args *EnvironmentVariableArgs, opts ...pulumi.ResourceOption) (*EnvironmentVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	var resource EnvironmentVariable
	err := ctx.RegisterResource("spacelift:index/environmentVariable:EnvironmentVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentVariable gets an existing EnvironmentVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentVariableState, opts ...pulumi.ResourceOption) (*EnvironmentVariable, error) {
	var resource EnvironmentVariable
	err := ctx.ReadResource("spacelift:index/environmentVariable:EnvironmentVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentVariable resources.
type environmentVariableState struct {
	// SHA-256 checksum of the value
	Checksum *string `pulumi:"checksum"`
	// ID of the context on which the environment variable is defined
	ContextId *string `pulumi:"contextId"`
	// ID of the module on which the environment variable is defined
	ModuleId *string `pulumi:"moduleId"`
	// Name of the environment variable
	Name *string `pulumi:"name"`
	// ID of the stack on which the environment variable is defined
	StackId *string `pulumi:"stackId"`
	// Value of the environment variable
	Value *string `pulumi:"value"`
	// Indicates whether the value can be read back outside a Run
	WriteOnly *bool `pulumi:"writeOnly"`
}

type EnvironmentVariableState struct {
	// SHA-256 checksum of the value
	Checksum pulumi.StringPtrInput
	// ID of the context on which the environment variable is defined
	ContextId pulumi.StringPtrInput
	// ID of the module on which the environment variable is defined
	ModuleId pulumi.StringPtrInput
	// Name of the environment variable
	Name pulumi.StringPtrInput
	// ID of the stack on which the environment variable is defined
	StackId pulumi.StringPtrInput
	// Value of the environment variable
	Value pulumi.StringPtrInput
	// Indicates whether the value can be read back outside a Run
	WriteOnly pulumi.BoolPtrInput
}

func (EnvironmentVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentVariableState)(nil)).Elem()
}

type environmentVariableArgs struct {
	// ID of the context on which the environment variable is defined
	ContextId *string `pulumi:"contextId"`
	// ID of the module on which the environment variable is defined
	ModuleId *string `pulumi:"moduleId"`
	// Name of the environment variable
	Name string `pulumi:"name"`
	// ID of the stack on which the environment variable is defined
	StackId *string `pulumi:"stackId"`
	// Value of the environment variable
	Value string `pulumi:"value"`
	// Indicates whether the value can be read back outside a Run
	WriteOnly *bool `pulumi:"writeOnly"`
}

// The set of arguments for constructing a EnvironmentVariable resource.
type EnvironmentVariableArgs struct {
	// ID of the context on which the environment variable is defined
	ContextId pulumi.StringPtrInput
	// ID of the module on which the environment variable is defined
	ModuleId pulumi.StringPtrInput
	// Name of the environment variable
	Name pulumi.StringInput
	// ID of the stack on which the environment variable is defined
	StackId pulumi.StringPtrInput
	// Value of the environment variable
	Value pulumi.StringInput
	// Indicates whether the value can be read back outside a Run
	WriteOnly pulumi.BoolPtrInput
}

func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentVariableArgs)(nil)).Elem()
}

type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput
}

func (*EnvironmentVariable) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil))
}

func (i *EnvironmentVariable) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i *EnvironmentVariable) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

type EnvironmentVariableOutput struct {
	*pulumi.OutputState
}

func (EnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil))
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
}
