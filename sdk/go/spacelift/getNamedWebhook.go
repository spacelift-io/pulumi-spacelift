// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `NamedWebhook` represents a named webhook endpoint used for creating webhookswhich are referred to in Notification policies to route messages.
func LookupNamedWebhook(ctx *pulumi.Context, args *LookupNamedWebhookArgs, opts ...pulumi.InvokeOption) (*LookupNamedWebhookResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNamedWebhookResult
	err := ctx.Invoke("spacelift:index/getNamedWebhook:getNamedWebhook", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNamedWebhook.
type LookupNamedWebhookArgs struct {
	// ID of the webhook
	WebhookId string `pulumi:"webhookId"`
}

// A collection of values returned by getNamedWebhook.
type LookupNamedWebhookResult struct {
	// enables or disables sending webhooks.
	Enabled bool `pulumi:"enabled"`
	// endpoint to send the requests to
	Endpoint string `pulumi:"endpoint"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// labels for the webhook to use when referring in policies or filtering them
	Labels []string `pulumi:"labels"`
	// the name for the webhook which will also be used to generate the id
	Name string `pulumi:"name"`
	// secret used to sign each request so you're able to verify that the request comes from us.
	Secret string `pulumi:"secret"`
	// secret header keys which are currently set for this webhook
	SecretHeaderKeys []string `pulumi:"secretHeaderKeys"`
	// ID of the space the webhook is in
	SpaceId string `pulumi:"spaceId"`
	// ID of the webhook
	WebhookId string `pulumi:"webhookId"`
}

func LookupNamedWebhookOutput(ctx *pulumi.Context, args LookupNamedWebhookOutputArgs, opts ...pulumi.InvokeOption) LookupNamedWebhookResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNamedWebhookResult, error) {
			args := v.(LookupNamedWebhookArgs)
			r, err := LookupNamedWebhook(ctx, &args, opts...)
			var s LookupNamedWebhookResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNamedWebhookResultOutput)
}

// A collection of arguments for invoking getNamedWebhook.
type LookupNamedWebhookOutputArgs struct {
	// ID of the webhook
	WebhookId pulumi.StringInput `pulumi:"webhookId"`
}

func (LookupNamedWebhookOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamedWebhookArgs)(nil)).Elem()
}

// A collection of values returned by getNamedWebhook.
type LookupNamedWebhookResultOutput struct{ *pulumi.OutputState }

func (LookupNamedWebhookResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamedWebhookResult)(nil)).Elem()
}

func (o LookupNamedWebhookResultOutput) ToLookupNamedWebhookResultOutput() LookupNamedWebhookResultOutput {
	return o
}

func (o LookupNamedWebhookResultOutput) ToLookupNamedWebhookResultOutputWithContext(ctx context.Context) LookupNamedWebhookResultOutput {
	return o
}

func (o LookupNamedWebhookResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNamedWebhookResult] {
	return pulumix.Output[LookupNamedWebhookResult]{
		OutputState: o.OutputState,
	}
}

// enables or disables sending webhooks.
func (o LookupNamedWebhookResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNamedWebhookResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// endpoint to send the requests to
func (o LookupNamedWebhookResultOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedWebhookResult) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNamedWebhookResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedWebhookResult) string { return v.Id }).(pulumi.StringOutput)
}

// labels for the webhook to use when referring in policies or filtering them
func (o LookupNamedWebhookResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNamedWebhookResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// the name for the webhook which will also be used to generate the id
func (o LookupNamedWebhookResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedWebhookResult) string { return v.Name }).(pulumi.StringOutput)
}

// secret used to sign each request so you're able to verify that the request comes from us.
func (o LookupNamedWebhookResultOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedWebhookResult) string { return v.Secret }).(pulumi.StringOutput)
}

// secret header keys which are currently set for this webhook
func (o LookupNamedWebhookResultOutput) SecretHeaderKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNamedWebhookResult) []string { return v.SecretHeaderKeys }).(pulumi.StringArrayOutput)
}

// ID of the space the webhook is in
func (o LookupNamedWebhookResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedWebhookResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

// ID of the webhook
func (o LookupNamedWebhookResultOutput) WebhookId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedWebhookResult) string { return v.WebhookId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNamedWebhookResultOutput{})
}
