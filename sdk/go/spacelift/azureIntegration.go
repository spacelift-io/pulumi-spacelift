// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewAzureIntegration(ctx, "example", &spacelift.AzureIntegrationArgs{
//				DefaultSubscriptionId: pulumi.String("default-subscription-id"),
//				Labels: pulumi.StringArray{
//					pulumi.String("one"),
//					pulumi.String("two"),
//				},
//				TenantId: pulumi.String("tenant-id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import spacelift:index/azureIntegration:AzureIntegration example $INTEGRATION_ID
//
// ```
type AzureIntegration struct {
	pulumi.CustomResourceState

	// Indicates whether admin consent has been performed for the AAD Application.
	AdminConsentProvided pulumi.BoolOutput `pulumi:"adminConsentProvided"`
	// The URL to use to provide admin consent to the application in the customer's tenant
	AdminConsentUrl pulumi.StringOutput `pulumi:"adminConsentUrl"`
	// The applicationId of the Azure AD application used by the integration.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The default subscription ID to use, if one isn't specified at the stack/module level
	DefaultSubscriptionId pulumi.StringPtrOutput `pulumi:"defaultSubscriptionId"`
	// The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Labels to set on the integration
	Labels pulumi.StringArrayOutput `pulumi:"labels"`
	// The friendly name of the integration
	Name pulumi.StringOutput `pulumi:"name"`
	// ID (slug) of the space the integration is in
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
	// The Azure AD tenant ID
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAzureIntegration registers a new resource with the given unique name, arguments, and options.
func NewAzureIntegration(ctx *pulumi.Context,
	name string, args *AzureIntegrationArgs, opts ...pulumi.ResourceOption) (*AzureIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureIntegration
	err := ctx.RegisterResource("spacelift:index/azureIntegration:AzureIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureIntegration gets an existing AzureIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureIntegrationState, opts ...pulumi.ResourceOption) (*AzureIntegration, error) {
	var resource AzureIntegration
	err := ctx.ReadResource("spacelift:index/azureIntegration:AzureIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureIntegration resources.
type azureIntegrationState struct {
	// Indicates whether admin consent has been performed for the AAD Application.
	AdminConsentProvided *bool `pulumi:"adminConsentProvided"`
	// The URL to use to provide admin consent to the application in the customer's tenant
	AdminConsentUrl *string `pulumi:"adminConsentUrl"`
	// The applicationId of the Azure AD application used by the integration.
	ApplicationId *string `pulumi:"applicationId"`
	// The default subscription ID to use, if one isn't specified at the stack/module level
	DefaultSubscriptionId *string `pulumi:"defaultSubscriptionId"`
	// The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
	DisplayName *string `pulumi:"displayName"`
	// Labels to set on the integration
	Labels []string `pulumi:"labels"`
	// The friendly name of the integration
	Name *string `pulumi:"name"`
	// ID (slug) of the space the integration is in
	SpaceId *string `pulumi:"spaceId"`
	// The Azure AD tenant ID
	TenantId *string `pulumi:"tenantId"`
}

type AzureIntegrationState struct {
	// Indicates whether admin consent has been performed for the AAD Application.
	AdminConsentProvided pulumi.BoolPtrInput
	// The URL to use to provide admin consent to the application in the customer's tenant
	AdminConsentUrl pulumi.StringPtrInput
	// The applicationId of the Azure AD application used by the integration.
	ApplicationId pulumi.StringPtrInput
	// The default subscription ID to use, if one isn't specified at the stack/module level
	DefaultSubscriptionId pulumi.StringPtrInput
	// The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
	DisplayName pulumi.StringPtrInput
	// Labels to set on the integration
	Labels pulumi.StringArrayInput
	// The friendly name of the integration
	Name pulumi.StringPtrInput
	// ID (slug) of the space the integration is in
	SpaceId pulumi.StringPtrInput
	// The Azure AD tenant ID
	TenantId pulumi.StringPtrInput
}

func (AzureIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureIntegrationState)(nil)).Elem()
}

type azureIntegrationArgs struct {
	// The default subscription ID to use, if one isn't specified at the stack/module level
	DefaultSubscriptionId *string `pulumi:"defaultSubscriptionId"`
	// Labels to set on the integration
	Labels []string `pulumi:"labels"`
	// The friendly name of the integration
	Name *string `pulumi:"name"`
	// ID (slug) of the space the integration is in
	SpaceId *string `pulumi:"spaceId"`
	// The Azure AD tenant ID
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AzureIntegration resource.
type AzureIntegrationArgs struct {
	// The default subscription ID to use, if one isn't specified at the stack/module level
	DefaultSubscriptionId pulumi.StringPtrInput
	// Labels to set on the integration
	Labels pulumi.StringArrayInput
	// The friendly name of the integration
	Name pulumi.StringPtrInput
	// ID (slug) of the space the integration is in
	SpaceId pulumi.StringPtrInput
	// The Azure AD tenant ID
	TenantId pulumi.StringInput
}

func (AzureIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureIntegrationArgs)(nil)).Elem()
}

type AzureIntegrationInput interface {
	pulumi.Input

	ToAzureIntegrationOutput() AzureIntegrationOutput
	ToAzureIntegrationOutputWithContext(ctx context.Context) AzureIntegrationOutput
}

func (*AzureIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureIntegration)(nil)).Elem()
}

func (i *AzureIntegration) ToAzureIntegrationOutput() AzureIntegrationOutput {
	return i.ToAzureIntegrationOutputWithContext(context.Background())
}

func (i *AzureIntegration) ToAzureIntegrationOutputWithContext(ctx context.Context) AzureIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureIntegrationOutput)
}

func (i *AzureIntegration) ToOutput(ctx context.Context) pulumix.Output[*AzureIntegration] {
	return pulumix.Output[*AzureIntegration]{
		OutputState: i.ToAzureIntegrationOutputWithContext(ctx).OutputState,
	}
}

// AzureIntegrationArrayInput is an input type that accepts AzureIntegrationArray and AzureIntegrationArrayOutput values.
// You can construct a concrete instance of `AzureIntegrationArrayInput` via:
//
//	AzureIntegrationArray{ AzureIntegrationArgs{...} }
type AzureIntegrationArrayInput interface {
	pulumi.Input

	ToAzureIntegrationArrayOutput() AzureIntegrationArrayOutput
	ToAzureIntegrationArrayOutputWithContext(context.Context) AzureIntegrationArrayOutput
}

type AzureIntegrationArray []AzureIntegrationInput

func (AzureIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureIntegration)(nil)).Elem()
}

func (i AzureIntegrationArray) ToAzureIntegrationArrayOutput() AzureIntegrationArrayOutput {
	return i.ToAzureIntegrationArrayOutputWithContext(context.Background())
}

func (i AzureIntegrationArray) ToAzureIntegrationArrayOutputWithContext(ctx context.Context) AzureIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureIntegrationArrayOutput)
}

func (i AzureIntegrationArray) ToOutput(ctx context.Context) pulumix.Output[[]*AzureIntegration] {
	return pulumix.Output[[]*AzureIntegration]{
		OutputState: i.ToAzureIntegrationArrayOutputWithContext(ctx).OutputState,
	}
}

// AzureIntegrationMapInput is an input type that accepts AzureIntegrationMap and AzureIntegrationMapOutput values.
// You can construct a concrete instance of `AzureIntegrationMapInput` via:
//
//	AzureIntegrationMap{ "key": AzureIntegrationArgs{...} }
type AzureIntegrationMapInput interface {
	pulumi.Input

	ToAzureIntegrationMapOutput() AzureIntegrationMapOutput
	ToAzureIntegrationMapOutputWithContext(context.Context) AzureIntegrationMapOutput
}

type AzureIntegrationMap map[string]AzureIntegrationInput

func (AzureIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureIntegration)(nil)).Elem()
}

func (i AzureIntegrationMap) ToAzureIntegrationMapOutput() AzureIntegrationMapOutput {
	return i.ToAzureIntegrationMapOutputWithContext(context.Background())
}

func (i AzureIntegrationMap) ToAzureIntegrationMapOutputWithContext(ctx context.Context) AzureIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureIntegrationMapOutput)
}

func (i AzureIntegrationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AzureIntegration] {
	return pulumix.Output[map[string]*AzureIntegration]{
		OutputState: i.ToAzureIntegrationMapOutputWithContext(ctx).OutputState,
	}
}

type AzureIntegrationOutput struct{ *pulumi.OutputState }

func (AzureIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureIntegration)(nil)).Elem()
}

func (o AzureIntegrationOutput) ToAzureIntegrationOutput() AzureIntegrationOutput {
	return o
}

func (o AzureIntegrationOutput) ToAzureIntegrationOutputWithContext(ctx context.Context) AzureIntegrationOutput {
	return o
}

func (o AzureIntegrationOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureIntegration] {
	return pulumix.Output[*AzureIntegration]{
		OutputState: o.OutputState,
	}
}

// Indicates whether admin consent has been performed for the AAD Application.
func (o AzureIntegrationOutput) AdminConsentProvided() pulumi.BoolOutput {
	return o.ApplyT(func(v *AzureIntegration) pulumi.BoolOutput { return v.AdminConsentProvided }).(pulumi.BoolOutput)
}

// The URL to use to provide admin consent to the application in the customer's tenant
func (o AzureIntegrationOutput) AdminConsentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureIntegration) pulumi.StringOutput { return v.AdminConsentUrl }).(pulumi.StringOutput)
}

// The applicationId of the Azure AD application used by the integration.
func (o AzureIntegrationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureIntegration) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// The default subscription ID to use, if one isn't specified at the stack/module level
func (o AzureIntegrationOutput) DefaultSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureIntegration) pulumi.StringPtrOutput { return v.DefaultSubscriptionId }).(pulumi.StringPtrOutput)
}

// The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
func (o AzureIntegrationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureIntegration) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Labels to set on the integration
func (o AzureIntegrationOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureIntegration) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// The friendly name of the integration
func (o AzureIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID (slug) of the space the integration is in
func (o AzureIntegrationOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureIntegration) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

// The Azure AD tenant ID
func (o AzureIntegrationOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureIntegration) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AzureIntegrationArrayOutput struct{ *pulumi.OutputState }

func (AzureIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureIntegration)(nil)).Elem()
}

func (o AzureIntegrationArrayOutput) ToAzureIntegrationArrayOutput() AzureIntegrationArrayOutput {
	return o
}

func (o AzureIntegrationArrayOutput) ToAzureIntegrationArrayOutputWithContext(ctx context.Context) AzureIntegrationArrayOutput {
	return o
}

func (o AzureIntegrationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AzureIntegration] {
	return pulumix.Output[[]*AzureIntegration]{
		OutputState: o.OutputState,
	}
}

func (o AzureIntegrationArrayOutput) Index(i pulumi.IntInput) AzureIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureIntegration {
		return vs[0].([]*AzureIntegration)[vs[1].(int)]
	}).(AzureIntegrationOutput)
}

type AzureIntegrationMapOutput struct{ *pulumi.OutputState }

func (AzureIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureIntegration)(nil)).Elem()
}

func (o AzureIntegrationMapOutput) ToAzureIntegrationMapOutput() AzureIntegrationMapOutput {
	return o
}

func (o AzureIntegrationMapOutput) ToAzureIntegrationMapOutputWithContext(ctx context.Context) AzureIntegrationMapOutput {
	return o
}

func (o AzureIntegrationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AzureIntegration] {
	return pulumix.Output[map[string]*AzureIntegration]{
		OutputState: o.OutputState,
	}
}

func (o AzureIntegrationMapOutput) MapIndex(k pulumi.StringInput) AzureIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureIntegration {
		return vs[0].(map[string]*AzureIntegration)[vs[1].(string)]
	}).(AzureIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureIntegrationInput)(nil)).Elem(), &AzureIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureIntegrationArrayInput)(nil)).Elem(), AzureIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureIntegrationMapInput)(nil)).Elem(), AzureIntegrationMap{})
	pulumi.RegisterOutputType(AzureIntegrationOutput{})
	pulumi.RegisterOutputType(AzureIntegrationArrayOutput{})
	pulumi.RegisterOutputType(AzureIntegrationMapOutput{})
}
