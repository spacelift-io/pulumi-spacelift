// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.NewModule(ctx, "k8s-module", &spacelift.ModuleArgs{
//				Administrative:    pulumi.Bool(true),
//				Branch:            pulumi.String("master"),
//				Description:       pulumi.String("Infra terraform module"),
//				Repository:        pulumi.String("terraform-super-module"),
//				TerraformProvider: pulumi.String("aws"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = spacelift.NewModule(ctx, "example-module", &spacelift.ModuleArgs{
//				Administrative: pulumi.Bool(true),
//				Branch:         pulumi.String("master"),
//				Description:    pulumi.String("Example terraform module"),
//				ProjectRoot:    pulumi.String("example"),
//				Repository:     pulumi.String("terraform-aws-example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import spacelift:index/module:Module k8s-module $MODULE_ID
//
// ```
type Module struct {
	pulumi.CustomResourceState

	// Indicates whether this module can manage others. Defaults to `false`.
	Administrative pulumi.BoolPtrOutput `pulumi:"administrative"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement pulumi.StringOutput `pulumi:"awsAssumeRolePolicyStatement"`
	// Azure DevOps VCS settings
	AzureDevops ModuleAzureDevopsPtrOutput `pulumi:"azureDevops"`
	// Bitbucket Cloud VCS settings
	BitbucketCloud ModuleBitbucketCloudPtrOutput `pulumi:"bitbucketCloud"`
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter ModuleBitbucketDatacenterPtrOutput `pulumi:"bitbucketDatacenter"`
	// GitHub branch to apply changes to
	Branch pulumi.StringOutput `pulumi:"branch"`
	// Free-form module description for users
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates whether local preview versions can be triggered on this Module. Defaults to `false`.
	EnableLocalPreview pulumi.BoolPtrOutput `pulumi:"enableLocalPreview"`
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise ModuleGithubEnterprisePtrOutput `pulumi:"githubEnterprise"`
	// GitLab VCS settings
	Gitlab ModuleGitlabPtrOutput    `pulumi:"gitlab"`
	Labels pulumi.StringArrayOutput `pulumi:"labels"`
	// The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
	// convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
	// provide it here.
	Name pulumi.StringOutput `pulumi:"name"`
	// Project root is the optional directory relative to the repository root containing the module source code.
	ProjectRoot pulumi.StringPtrOutput `pulumi:"projectRoot"`
	// Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
	ProtectFromDeletion pulumi.BoolPtrOutput `pulumi:"protectFromDeletion"`
	// Name of the repository, without the owner part
	Repository pulumi.StringOutput `pulumi:"repository"`
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts pulumi.StringArrayOutput `pulumi:"sharedAccounts"`
	// ID (slug) of the space the module is in
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
	// The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
	// naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
	// can provide the provider name here.
	TerraformProvider pulumi.StringOutput `pulumi:"terraformProvider"`
	// ID of the worker pool to use. NOTE: worker*pool*id is required when using a self-hosted instance of Spacelift.
	WorkerPoolId pulumi.StringPtrOutput `pulumi:"workerPoolId"`
	// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
	WorkflowTool pulumi.StringOutput `pulumi:"workflowTool"`
}

// NewModule registers a new resource with the given unique name, arguments, and options.
func NewModule(ctx *pulumi.Context,
	name string, args *ModuleArgs, opts ...pulumi.ResourceOption) (*Module, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Branch == nil {
		return nil, errors.New("invalid value for required argument 'Branch'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Module
	err := ctx.RegisterResource("spacelift:index/module:Module", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModule gets an existing Module resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModuleState, opts ...pulumi.ResourceOption) (*Module, error) {
	var resource Module
	err := ctx.ReadResource("spacelift:index/module:Module", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Module resources.
type moduleState struct {
	// Indicates whether this module can manage others. Defaults to `false`.
	Administrative *bool `pulumi:"administrative"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement *string `pulumi:"awsAssumeRolePolicyStatement"`
	// Azure DevOps VCS settings
	AzureDevops *ModuleAzureDevops `pulumi:"azureDevops"`
	// Bitbucket Cloud VCS settings
	BitbucketCloud *ModuleBitbucketCloud `pulumi:"bitbucketCloud"`
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter *ModuleBitbucketDatacenter `pulumi:"bitbucketDatacenter"`
	// GitHub branch to apply changes to
	Branch *string `pulumi:"branch"`
	// Free-form module description for users
	Description *string `pulumi:"description"`
	// Indicates whether local preview versions can be triggered on this Module. Defaults to `false`.
	EnableLocalPreview *bool `pulumi:"enableLocalPreview"`
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise *ModuleGithubEnterprise `pulumi:"githubEnterprise"`
	// GitLab VCS settings
	Gitlab *ModuleGitlab `pulumi:"gitlab"`
	Labels []string      `pulumi:"labels"`
	// The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
	// convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
	// provide it here.
	Name *string `pulumi:"name"`
	// Project root is the optional directory relative to the repository root containing the module source code.
	ProjectRoot *string `pulumi:"projectRoot"`
	// Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
	ProtectFromDeletion *bool `pulumi:"protectFromDeletion"`
	// Name of the repository, without the owner part
	Repository *string `pulumi:"repository"`
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts []string `pulumi:"sharedAccounts"`
	// ID (slug) of the space the module is in
	SpaceId *string `pulumi:"spaceId"`
	// The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
	// naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
	// can provide the provider name here.
	TerraformProvider *string `pulumi:"terraformProvider"`
	// ID of the worker pool to use. NOTE: worker*pool*id is required when using a self-hosted instance of Spacelift.
	WorkerPoolId *string `pulumi:"workerPoolId"`
	// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
	WorkflowTool *string `pulumi:"workflowTool"`
}

type ModuleState struct {
	// Indicates whether this module can manage others. Defaults to `false`.
	Administrative pulumi.BoolPtrInput
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement pulumi.StringPtrInput
	// Azure DevOps VCS settings
	AzureDevops ModuleAzureDevopsPtrInput
	// Bitbucket Cloud VCS settings
	BitbucketCloud ModuleBitbucketCloudPtrInput
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter ModuleBitbucketDatacenterPtrInput
	// GitHub branch to apply changes to
	Branch pulumi.StringPtrInput
	// Free-form module description for users
	Description pulumi.StringPtrInput
	// Indicates whether local preview versions can be triggered on this Module. Defaults to `false`.
	EnableLocalPreview pulumi.BoolPtrInput
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise ModuleGithubEnterprisePtrInput
	// GitLab VCS settings
	Gitlab ModuleGitlabPtrInput
	Labels pulumi.StringArrayInput
	// The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
	// convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
	// provide it here.
	Name pulumi.StringPtrInput
	// Project root is the optional directory relative to the repository root containing the module source code.
	ProjectRoot pulumi.StringPtrInput
	// Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
	ProtectFromDeletion pulumi.BoolPtrInput
	// Name of the repository, without the owner part
	Repository pulumi.StringPtrInput
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts pulumi.StringArrayInput
	// ID (slug) of the space the module is in
	SpaceId pulumi.StringPtrInput
	// The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
	// naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
	// can provide the provider name here.
	TerraformProvider pulumi.StringPtrInput
	// ID of the worker pool to use. NOTE: worker*pool*id is required when using a self-hosted instance of Spacelift.
	WorkerPoolId pulumi.StringPtrInput
	// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
	WorkflowTool pulumi.StringPtrInput
}

func (ModuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleState)(nil)).Elem()
}

type moduleArgs struct {
	// Indicates whether this module can manage others. Defaults to `false`.
	Administrative *bool `pulumi:"administrative"`
	// Azure DevOps VCS settings
	AzureDevops *ModuleAzureDevops `pulumi:"azureDevops"`
	// Bitbucket Cloud VCS settings
	BitbucketCloud *ModuleBitbucketCloud `pulumi:"bitbucketCloud"`
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter *ModuleBitbucketDatacenter `pulumi:"bitbucketDatacenter"`
	// GitHub branch to apply changes to
	Branch string `pulumi:"branch"`
	// Free-form module description for users
	Description *string `pulumi:"description"`
	// Indicates whether local preview versions can be triggered on this Module. Defaults to `false`.
	EnableLocalPreview *bool `pulumi:"enableLocalPreview"`
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise *ModuleGithubEnterprise `pulumi:"githubEnterprise"`
	// GitLab VCS settings
	Gitlab *ModuleGitlab `pulumi:"gitlab"`
	Labels []string      `pulumi:"labels"`
	// The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
	// convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
	// provide it here.
	Name *string `pulumi:"name"`
	// Project root is the optional directory relative to the repository root containing the module source code.
	ProjectRoot *string `pulumi:"projectRoot"`
	// Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
	ProtectFromDeletion *bool `pulumi:"protectFromDeletion"`
	// Name of the repository, without the owner part
	Repository string `pulumi:"repository"`
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts []string `pulumi:"sharedAccounts"`
	// ID (slug) of the space the module is in
	SpaceId *string `pulumi:"spaceId"`
	// The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
	// naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
	// can provide the provider name here.
	TerraformProvider *string `pulumi:"terraformProvider"`
	// ID of the worker pool to use. NOTE: worker*pool*id is required when using a self-hosted instance of Spacelift.
	WorkerPoolId *string `pulumi:"workerPoolId"`
	// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
	WorkflowTool *string `pulumi:"workflowTool"`
}

// The set of arguments for constructing a Module resource.
type ModuleArgs struct {
	// Indicates whether this module can manage others. Defaults to `false`.
	Administrative pulumi.BoolPtrInput
	// Azure DevOps VCS settings
	AzureDevops ModuleAzureDevopsPtrInput
	// Bitbucket Cloud VCS settings
	BitbucketCloud ModuleBitbucketCloudPtrInput
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter ModuleBitbucketDatacenterPtrInput
	// GitHub branch to apply changes to
	Branch pulumi.StringInput
	// Free-form module description for users
	Description pulumi.StringPtrInput
	// Indicates whether local preview versions can be triggered on this Module. Defaults to `false`.
	EnableLocalPreview pulumi.BoolPtrInput
	// GitHub Enterprise (self-hosted) VCS settings
	GithubEnterprise ModuleGithubEnterprisePtrInput
	// GitLab VCS settings
	Gitlab ModuleGitlabPtrInput
	Labels pulumi.StringArrayInput
	// The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
	// convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
	// provide it here.
	Name pulumi.StringPtrInput
	// Project root is the optional directory relative to the repository root containing the module source code.
	ProjectRoot pulumi.StringPtrInput
	// Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
	ProtectFromDeletion pulumi.BoolPtrInput
	// Name of the repository, without the owner part
	Repository pulumi.StringInput
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts pulumi.StringArrayInput
	// ID (slug) of the space the module is in
	SpaceId pulumi.StringPtrInput
	// The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
	// naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
	// can provide the provider name here.
	TerraformProvider pulumi.StringPtrInput
	// ID of the worker pool to use. NOTE: worker*pool*id is required when using a self-hosted instance of Spacelift.
	WorkerPoolId pulumi.StringPtrInput
	// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
	WorkflowTool pulumi.StringPtrInput
}

func (ModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleArgs)(nil)).Elem()
}

type ModuleInput interface {
	pulumi.Input

	ToModuleOutput() ModuleOutput
	ToModuleOutputWithContext(ctx context.Context) ModuleOutput
}

func (*Module) ElementType() reflect.Type {
	return reflect.TypeOf((**Module)(nil)).Elem()
}

func (i *Module) ToModuleOutput() ModuleOutput {
	return i.ToModuleOutputWithContext(context.Background())
}

func (i *Module) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleOutput)
}

func (i *Module) ToOutput(ctx context.Context) pulumix.Output[*Module] {
	return pulumix.Output[*Module]{
		OutputState: i.ToModuleOutputWithContext(ctx).OutputState,
	}
}

// ModuleArrayInput is an input type that accepts ModuleArray and ModuleArrayOutput values.
// You can construct a concrete instance of `ModuleArrayInput` via:
//
//	ModuleArray{ ModuleArgs{...} }
type ModuleArrayInput interface {
	pulumi.Input

	ToModuleArrayOutput() ModuleArrayOutput
	ToModuleArrayOutputWithContext(context.Context) ModuleArrayOutput
}

type ModuleArray []ModuleInput

func (ModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Module)(nil)).Elem()
}

func (i ModuleArray) ToModuleArrayOutput() ModuleArrayOutput {
	return i.ToModuleArrayOutputWithContext(context.Background())
}

func (i ModuleArray) ToModuleArrayOutputWithContext(ctx context.Context) ModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleArrayOutput)
}

func (i ModuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*Module] {
	return pulumix.Output[[]*Module]{
		OutputState: i.ToModuleArrayOutputWithContext(ctx).OutputState,
	}
}

// ModuleMapInput is an input type that accepts ModuleMap and ModuleMapOutput values.
// You can construct a concrete instance of `ModuleMapInput` via:
//
//	ModuleMap{ "key": ModuleArgs{...} }
type ModuleMapInput interface {
	pulumi.Input

	ToModuleMapOutput() ModuleMapOutput
	ToModuleMapOutputWithContext(context.Context) ModuleMapOutput
}

type ModuleMap map[string]ModuleInput

func (ModuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Module)(nil)).Elem()
}

func (i ModuleMap) ToModuleMapOutput() ModuleMapOutput {
	return i.ToModuleMapOutputWithContext(context.Background())
}

func (i ModuleMap) ToModuleMapOutputWithContext(ctx context.Context) ModuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleMapOutput)
}

func (i ModuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Module] {
	return pulumix.Output[map[string]*Module]{
		OutputState: i.ToModuleMapOutputWithContext(ctx).OutputState,
	}
}

type ModuleOutput struct{ *pulumi.OutputState }

func (ModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Module)(nil)).Elem()
}

func (o ModuleOutput) ToModuleOutput() ModuleOutput {
	return o
}

func (o ModuleOutput) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return o
}

func (o ModuleOutput) ToOutput(ctx context.Context) pulumix.Output[*Module] {
	return pulumix.Output[*Module]{
		OutputState: o.OutputState,
	}
}

// Indicates whether this module can manage others. Defaults to `false`.
func (o ModuleOutput) Administrative() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.BoolPtrOutput { return v.Administrative }).(pulumi.BoolPtrOutput)
}

// AWS IAM assume role policy statement setting up trust relationship
func (o ModuleOutput) AwsAssumeRolePolicyStatement() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.AwsAssumeRolePolicyStatement }).(pulumi.StringOutput)
}

// Azure DevOps VCS settings
func (o ModuleOutput) AzureDevops() ModuleAzureDevopsPtrOutput {
	return o.ApplyT(func(v *Module) ModuleAzureDevopsPtrOutput { return v.AzureDevops }).(ModuleAzureDevopsPtrOutput)
}

// Bitbucket Cloud VCS settings
func (o ModuleOutput) BitbucketCloud() ModuleBitbucketCloudPtrOutput {
	return o.ApplyT(func(v *Module) ModuleBitbucketCloudPtrOutput { return v.BitbucketCloud }).(ModuleBitbucketCloudPtrOutput)
}

// Bitbucket Datacenter VCS settings
func (o ModuleOutput) BitbucketDatacenter() ModuleBitbucketDatacenterPtrOutput {
	return o.ApplyT(func(v *Module) ModuleBitbucketDatacenterPtrOutput { return v.BitbucketDatacenter }).(ModuleBitbucketDatacenterPtrOutput)
}

// GitHub branch to apply changes to
func (o ModuleOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.Branch }).(pulumi.StringOutput)
}

// Free-form module description for users
func (o ModuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether local preview versions can be triggered on this Module. Defaults to `false`.
func (o ModuleOutput) EnableLocalPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.BoolPtrOutput { return v.EnableLocalPreview }).(pulumi.BoolPtrOutput)
}

// GitHub Enterprise (self-hosted) VCS settings
func (o ModuleOutput) GithubEnterprise() ModuleGithubEnterprisePtrOutput {
	return o.ApplyT(func(v *Module) ModuleGithubEnterprisePtrOutput { return v.GithubEnterprise }).(ModuleGithubEnterprisePtrOutput)
}

// GitLab VCS settings
func (o ModuleOutput) Gitlab() ModuleGitlabPtrOutput {
	return o.ApplyT(func(v *Module) ModuleGitlabPtrOutput { return v.Gitlab }).(ModuleGitlabPtrOutput)
}

func (o ModuleOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Module) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
// convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
// provide it here.
func (o ModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project root is the optional directory relative to the repository root containing the module source code.
func (o ModuleOutput) ProjectRoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.StringPtrOutput { return v.ProjectRoot }).(pulumi.StringPtrOutput)
}

// Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
func (o ModuleOutput) ProtectFromDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.BoolPtrOutput { return v.ProtectFromDeletion }).(pulumi.BoolPtrOutput)
}

// Name of the repository, without the owner part
func (o ModuleOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// List of the accounts (subdomains) which should have access to the Module
func (o ModuleOutput) SharedAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Module) pulumi.StringArrayOutput { return v.SharedAccounts }).(pulumi.StringArrayOutput)
}

// ID (slug) of the space the module is in
func (o ModuleOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

// The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
// naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
// can provide the provider name here.
func (o ModuleOutput) TerraformProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.TerraformProvider }).(pulumi.StringOutput)
}

// ID of the worker pool to use. NOTE: worker*pool*id is required when using a self-hosted instance of Spacelift.
func (o ModuleOutput) WorkerPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.StringPtrOutput { return v.WorkerPoolId }).(pulumi.StringPtrOutput)
}

// Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
func (o ModuleOutput) WorkflowTool() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.WorkflowTool }).(pulumi.StringOutput)
}

type ModuleArrayOutput struct{ *pulumi.OutputState }

func (ModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Module)(nil)).Elem()
}

func (o ModuleArrayOutput) ToModuleArrayOutput() ModuleArrayOutput {
	return o
}

func (o ModuleArrayOutput) ToModuleArrayOutputWithContext(ctx context.Context) ModuleArrayOutput {
	return o
}

func (o ModuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Module] {
	return pulumix.Output[[]*Module]{
		OutputState: o.OutputState,
	}
}

func (o ModuleArrayOutput) Index(i pulumi.IntInput) ModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Module {
		return vs[0].([]*Module)[vs[1].(int)]
	}).(ModuleOutput)
}

type ModuleMapOutput struct{ *pulumi.OutputState }

func (ModuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Module)(nil)).Elem()
}

func (o ModuleMapOutput) ToModuleMapOutput() ModuleMapOutput {
	return o
}

func (o ModuleMapOutput) ToModuleMapOutputWithContext(ctx context.Context) ModuleMapOutput {
	return o
}

func (o ModuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Module] {
	return pulumix.Output[map[string]*Module]{
		OutputState: o.OutputState,
	}
}

func (o ModuleMapOutput) MapIndex(k pulumi.StringInput) ModuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Module {
		return vs[0].(map[string]*Module)[vs[1].(string)]
	}).(ModuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleInput)(nil)).Elem(), &Module{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleArrayInput)(nil)).Elem(), ModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleMapInput)(nil)).Elem(), ModuleMap{})
	pulumi.RegisterOutputType(ModuleOutput{})
	pulumi.RegisterOutputType(ModuleArrayOutput{})
	pulumi.RegisterOutputType(ModuleMapOutput{})
}
