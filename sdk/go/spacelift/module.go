// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Module struct {
	pulumi.CustomResourceState

	// Indicates whether this module can manage others
	Administrative pulumi.BoolPtrOutput `pulumi:"administrative"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement pulumi.StringOutput `pulumi:"awsAssumeRolePolicyStatement"`
	// GitHub branch to apply changes to
	Branch pulumi.StringOutput `pulumi:"branch"`
	// Free-form module description for users
	Description pulumi.StringPtrOutput   `pulumi:"description"`
	Gitlab      ModuleGitlabPtrOutput    `pulumi:"gitlab"`
	Labels      pulumi.StringArrayOutput `pulumi:"labels"`
	// Name of the repository, without the owner part
	Repository pulumi.StringOutput `pulumi:"repository"`
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts pulumi.StringArrayOutput `pulumi:"sharedAccounts"`
	// ID of the worker pool to use
	WorkerPoolId pulumi.StringPtrOutput `pulumi:"workerPoolId"`
}

// NewModule registers a new resource with the given unique name, arguments, and options.
func NewModule(ctx *pulumi.Context,
	name string, args *ModuleArgs, opts ...pulumi.ResourceOption) (*Module, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Branch == nil {
		return nil, errors.New("invalid value for required argument 'Branch'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	var resource Module
	err := ctx.RegisterResource("spacelift:index/module:Module", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModule gets an existing Module resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModuleState, opts ...pulumi.ResourceOption) (*Module, error) {
	var resource Module
	err := ctx.ReadResource("spacelift:index/module:Module", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Module resources.
type moduleState struct {
	// Indicates whether this module can manage others
	Administrative *bool `pulumi:"administrative"`
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement *string `pulumi:"awsAssumeRolePolicyStatement"`
	// GitHub branch to apply changes to
	Branch *string `pulumi:"branch"`
	// Free-form module description for users
	Description *string       `pulumi:"description"`
	Gitlab      *ModuleGitlab `pulumi:"gitlab"`
	Labels      []string      `pulumi:"labels"`
	// Name of the repository, without the owner part
	Repository *string `pulumi:"repository"`
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts []string `pulumi:"sharedAccounts"`
	// ID of the worker pool to use
	WorkerPoolId *string `pulumi:"workerPoolId"`
}

type ModuleState struct {
	// Indicates whether this module can manage others
	Administrative pulumi.BoolPtrInput
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement pulumi.StringPtrInput
	// GitHub branch to apply changes to
	Branch pulumi.StringPtrInput
	// Free-form module description for users
	Description pulumi.StringPtrInput
	Gitlab      ModuleGitlabPtrInput
	Labels      pulumi.StringArrayInput
	// Name of the repository, without the owner part
	Repository pulumi.StringPtrInput
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts pulumi.StringArrayInput
	// ID of the worker pool to use
	WorkerPoolId pulumi.StringPtrInput
}

func (ModuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleState)(nil)).Elem()
}

type moduleArgs struct {
	// Indicates whether this module can manage others
	Administrative *bool `pulumi:"administrative"`
	// GitHub branch to apply changes to
	Branch string `pulumi:"branch"`
	// Free-form module description for users
	Description *string       `pulumi:"description"`
	Gitlab      *ModuleGitlab `pulumi:"gitlab"`
	Labels      []string      `pulumi:"labels"`
	// Name of the repository, without the owner part
	Repository string `pulumi:"repository"`
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts []string `pulumi:"sharedAccounts"`
	// ID of the worker pool to use
	WorkerPoolId *string `pulumi:"workerPoolId"`
}

// The set of arguments for constructing a Module resource.
type ModuleArgs struct {
	// Indicates whether this module can manage others
	Administrative pulumi.BoolPtrInput
	// GitHub branch to apply changes to
	Branch pulumi.StringInput
	// Free-form module description for users
	Description pulumi.StringPtrInput
	Gitlab      ModuleGitlabPtrInput
	Labels      pulumi.StringArrayInput
	// Name of the repository, without the owner part
	Repository pulumi.StringInput
	// List of the accounts (subdomains) which should have access to the Module
	SharedAccounts pulumi.StringArrayInput
	// ID of the worker pool to use
	WorkerPoolId pulumi.StringPtrInput
}

func (ModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleArgs)(nil)).Elem()
}

type ModuleInput interface {
	pulumi.Input

	ToModuleOutput() ModuleOutput
	ToModuleOutputWithContext(ctx context.Context) ModuleOutput
}

func (*Module) ElementType() reflect.Type {
	return reflect.TypeOf((*Module)(nil))
}

func (i *Module) ToModuleOutput() ModuleOutput {
	return i.ToModuleOutputWithContext(context.Background())
}

func (i *Module) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleOutput)
}

type ModuleOutput struct {
	*pulumi.OutputState
}

func (ModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Module)(nil))
}

func (o ModuleOutput) ToModuleOutput() ModuleOutput {
	return o
}

func (o ModuleOutput) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ModuleOutput{})
}
