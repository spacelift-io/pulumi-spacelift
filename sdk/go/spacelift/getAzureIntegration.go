// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.LookupAzureIntegration(ctx, &spacelift.LookupAzureIntegrationArgs{
//				Name: pulumi.StringRef("Production"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAzureIntegration(ctx *pulumi.Context, args *LookupAzureIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupAzureIntegrationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAzureIntegrationResult
	err := ctx.Invoke("spacelift:index/getAzureIntegration:getAzureIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAzureIntegration.
type LookupAzureIntegrationArgs struct {
	// Immutable ID of the integration. Either `integrationId` or `name` must be specified.
	IntegrationId *string `pulumi:"integrationId"`
	// The friendly name of the integration. Either `integrationId` or `name` must be specified.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAzureIntegration.
type LookupAzureIntegrationResult struct {
	// Indicates whether admin consent has been performed for the AAD Application.
	AdminConsentProvided bool `pulumi:"adminConsentProvided"`
	// The URL to use to provide admin consent to the application in the customer's tenant
	AdminConsentUrl string `pulumi:"adminConsentUrl"`
	// The applicationId of the Azure AD application used by the integration.
	ApplicationId string `pulumi:"applicationId"`
	// The default subscription ID to use, if one isn't specified at the stack/module level
	DefaultSubscriptionId string `pulumi:"defaultSubscriptionId"`
	// The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
	DisplayName string `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Immutable ID of the integration. Either `integrationId` or `name` must be specified.
	IntegrationId string `pulumi:"integrationId"`
	// Labels to set on the integration
	Labels []string `pulumi:"labels"`
	// The friendly name of the integration. Either `integrationId` or `name` must be specified.
	Name string `pulumi:"name"`
	// ID (slug) of the space the integration is in
	SpaceId string `pulumi:"spaceId"`
	// The Azure AD tenant ID
	TenantId string `pulumi:"tenantId"`
}

func LookupAzureIntegrationOutput(ctx *pulumi.Context, args LookupAzureIntegrationOutputArgs, opts ...pulumi.InvokeOption) LookupAzureIntegrationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAzureIntegrationResult, error) {
			args := v.(LookupAzureIntegrationArgs)
			r, err := LookupAzureIntegration(ctx, &args, opts...)
			var s LookupAzureIntegrationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAzureIntegrationResultOutput)
}

// A collection of arguments for invoking getAzureIntegration.
type LookupAzureIntegrationOutputArgs struct {
	// Immutable ID of the integration. Either `integrationId` or `name` must be specified.
	IntegrationId pulumi.StringPtrInput `pulumi:"integrationId"`
	// The friendly name of the integration. Either `integrationId` or `name` must be specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAzureIntegrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureIntegrationArgs)(nil)).Elem()
}

// A collection of values returned by getAzureIntegration.
type LookupAzureIntegrationResultOutput struct{ *pulumi.OutputState }

func (LookupAzureIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureIntegrationResult)(nil)).Elem()
}

func (o LookupAzureIntegrationResultOutput) ToLookupAzureIntegrationResultOutput() LookupAzureIntegrationResultOutput {
	return o
}

func (o LookupAzureIntegrationResultOutput) ToLookupAzureIntegrationResultOutputWithContext(ctx context.Context) LookupAzureIntegrationResultOutput {
	return o
}

// Indicates whether admin consent has been performed for the AAD Application.
func (o LookupAzureIntegrationResultOutput) AdminConsentProvided() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) bool { return v.AdminConsentProvided }).(pulumi.BoolOutput)
}

// The URL to use to provide admin consent to the application in the customer's tenant
func (o LookupAzureIntegrationResultOutput) AdminConsentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) string { return v.AdminConsentUrl }).(pulumi.StringOutput)
}

// The applicationId of the Azure AD application used by the integration.
func (o LookupAzureIntegrationResultOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// The default subscription ID to use, if one isn't specified at the stack/module level
func (o LookupAzureIntegrationResultOutput) DefaultSubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) string { return v.DefaultSubscriptionId }).(pulumi.StringOutput)
}

// The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
func (o LookupAzureIntegrationResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAzureIntegrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Immutable ID of the integration. Either `integrationId` or `name` must be specified.
func (o LookupAzureIntegrationResultOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) string { return v.IntegrationId }).(pulumi.StringOutput)
}

// Labels to set on the integration
func (o LookupAzureIntegrationResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// The friendly name of the integration. Either `integrationId` or `name` must be specified.
func (o LookupAzureIntegrationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID (slug) of the space the integration is in
func (o LookupAzureIntegrationResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

// The Azure AD tenant ID
func (o LookupAzureIntegrationResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureIntegrationResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAzureIntegrationResultOutput{})
}
