// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `Mountedfile` represents a file mounted in each Run's workspace that is part of a configuration of a context (`Context`), stack (`Stack`) or a module (`Module`). In principle, it's very similar to an environment variable (`EnvironmentVariable`) except that the value is written to the filesystem rather than passed to the environment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"fmt"
//	"os"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func filebase64OrPanic(path string) string {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return base64.StdEncoding.EncodeToString(fileData[:])
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// For a context
//			_, err := spacelift.NewMountedfile(ctx, "ireland-kubeconfig", &spacelift.MountedfileArgs{
//				ContextId:    pulumi.String("prod-k8s-ie"),
//				RelativePath: pulumi.String("kubeconfig"),
//				Content:      filebase64OrPanic(fmt.Sprintf("%v/kubeconfig.json", path.Module)),
//			})
//			if err != nil {
//				return err
//			}
//			// For a module
//			_, err = spacelift.NewMountedfile(ctx, "module-kubeconfig", &spacelift.MountedfileArgs{
//				ModuleId:     pulumi.String("k8s-module"),
//				RelativePath: pulumi.String("kubeconfig"),
//				Content:      filebase64OrPanic(fmt.Sprintf("%v/kubeconfig.json", path.Module)),
//			})
//			if err != nil {
//				return err
//			}
//			// For a stack
//			_, err = spacelift.NewMountedfile(ctx, "core-kubeconfig", &spacelift.MountedfileArgs{
//				StackId:      pulumi.String("k8s-core"),
//				RelativePath: pulumi.String("kubeconfig"),
//				Content:      filebase64OrPanic(fmt.Sprintf("%v/kubeconfig.json", path.Module)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import spacelift:index/mountedfile:Mountedfile ireland-kubeconfig context/$CONTEXT_ID/$MOUNTED_FILE_ID
//
// ```
//
// ```sh
//
//	$ pulumi import spacelift:index/mountedfile:Mountedfile module-kubeconfig module/$MODULE_ID/$MOUNTED_FILE_ID
//
// ```
//
// ```sh
//
//	$ pulumi import spacelift:index/mountedfile:Mountedfile core-kubeconfig stack/$STACK_ID/$MOUNTED_FILE_ID
//
// ```
type Mountedfile struct {
	pulumi.CustomResourceState

	// SHA-256 checksum of the value
	Checksum pulumi.StringOutput `pulumi:"checksum"`
	// Content of the mounted file encoded using Base-64
	Content pulumi.StringOutput `pulumi:"content"`
	// ID of the context on which the mounted file is defined
	ContextId pulumi.StringPtrOutput `pulumi:"contextId"`
	// ID of the module on which the mounted file is defined
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath pulumi.StringOutput `pulumi:"relativePath"`
	// ID of the stack on which the mounted file is defined
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
	// Indicates whether the content can be read back outside a Run. Defaults to `true`.
	WriteOnly pulumi.BoolPtrOutput `pulumi:"writeOnly"`
}

// NewMountedfile registers a new resource with the given unique name, arguments, and options.
func NewMountedfile(ctx *pulumi.Context,
	name string, args *MountedfileArgs, opts ...pulumi.ResourceOption) (*Mountedfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.RelativePath == nil {
		return nil, errors.New("invalid value for required argument 'RelativePath'")
	}
	if args.Content != nil {
		args.Content = pulumi.ToSecret(args.Content).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"content",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mountedfile
	err := ctx.RegisterResource("spacelift:index/mountedfile:Mountedfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMountedfile gets an existing Mountedfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountedfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountedfileState, opts ...pulumi.ResourceOption) (*Mountedfile, error) {
	var resource Mountedfile
	err := ctx.ReadResource("spacelift:index/mountedfile:Mountedfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mountedfile resources.
type mountedfileState struct {
	// SHA-256 checksum of the value
	Checksum *string `pulumi:"checksum"`
	// Content of the mounted file encoded using Base-64
	Content *string `pulumi:"content"`
	// ID of the context on which the mounted file is defined
	ContextId *string `pulumi:"contextId"`
	// ID of the module on which the mounted file is defined
	ModuleId *string `pulumi:"moduleId"`
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath *string `pulumi:"relativePath"`
	// ID of the stack on which the mounted file is defined
	StackId *string `pulumi:"stackId"`
	// Indicates whether the content can be read back outside a Run. Defaults to `true`.
	WriteOnly *bool `pulumi:"writeOnly"`
}

type MountedfileState struct {
	// SHA-256 checksum of the value
	Checksum pulumi.StringPtrInput
	// Content of the mounted file encoded using Base-64
	Content pulumi.StringPtrInput
	// ID of the context on which the mounted file is defined
	ContextId pulumi.StringPtrInput
	// ID of the module on which the mounted file is defined
	ModuleId pulumi.StringPtrInput
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath pulumi.StringPtrInput
	// ID of the stack on which the mounted file is defined
	StackId pulumi.StringPtrInput
	// Indicates whether the content can be read back outside a Run. Defaults to `true`.
	WriteOnly pulumi.BoolPtrInput
}

func (MountedfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*mountedfileState)(nil)).Elem()
}

type mountedfileArgs struct {
	// Content of the mounted file encoded using Base-64
	Content string `pulumi:"content"`
	// ID of the context on which the mounted file is defined
	ContextId *string `pulumi:"contextId"`
	// ID of the module on which the mounted file is defined
	ModuleId *string `pulumi:"moduleId"`
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath string `pulumi:"relativePath"`
	// ID of the stack on which the mounted file is defined
	StackId *string `pulumi:"stackId"`
	// Indicates whether the content can be read back outside a Run. Defaults to `true`.
	WriteOnly *bool `pulumi:"writeOnly"`
}

// The set of arguments for constructing a Mountedfile resource.
type MountedfileArgs struct {
	// Content of the mounted file encoded using Base-64
	Content pulumi.StringInput
	// ID of the context on which the mounted file is defined
	ContextId pulumi.StringPtrInput
	// ID of the module on which the mounted file is defined
	ModuleId pulumi.StringPtrInput
	// Relative path to the mounted file, without the /mnt/workspace/ prefix
	RelativePath pulumi.StringInput
	// ID of the stack on which the mounted file is defined
	StackId pulumi.StringPtrInput
	// Indicates whether the content can be read back outside a Run. Defaults to `true`.
	WriteOnly pulumi.BoolPtrInput
}

func (MountedfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mountedfileArgs)(nil)).Elem()
}

type MountedfileInput interface {
	pulumi.Input

	ToMountedfileOutput() MountedfileOutput
	ToMountedfileOutputWithContext(ctx context.Context) MountedfileOutput
}

func (*Mountedfile) ElementType() reflect.Type {
	return reflect.TypeOf((**Mountedfile)(nil)).Elem()
}

func (i *Mountedfile) ToMountedfileOutput() MountedfileOutput {
	return i.ToMountedfileOutputWithContext(context.Background())
}

func (i *Mountedfile) ToMountedfileOutputWithContext(ctx context.Context) MountedfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountedfileOutput)
}

// MountedfileArrayInput is an input type that accepts MountedfileArray and MountedfileArrayOutput values.
// You can construct a concrete instance of `MountedfileArrayInput` via:
//
//	MountedfileArray{ MountedfileArgs{...} }
type MountedfileArrayInput interface {
	pulumi.Input

	ToMountedfileArrayOutput() MountedfileArrayOutput
	ToMountedfileArrayOutputWithContext(context.Context) MountedfileArrayOutput
}

type MountedfileArray []MountedfileInput

func (MountedfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mountedfile)(nil)).Elem()
}

func (i MountedfileArray) ToMountedfileArrayOutput() MountedfileArrayOutput {
	return i.ToMountedfileArrayOutputWithContext(context.Background())
}

func (i MountedfileArray) ToMountedfileArrayOutputWithContext(ctx context.Context) MountedfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountedfileArrayOutput)
}

// MountedfileMapInput is an input type that accepts MountedfileMap and MountedfileMapOutput values.
// You can construct a concrete instance of `MountedfileMapInput` via:
//
//	MountedfileMap{ "key": MountedfileArgs{...} }
type MountedfileMapInput interface {
	pulumi.Input

	ToMountedfileMapOutput() MountedfileMapOutput
	ToMountedfileMapOutputWithContext(context.Context) MountedfileMapOutput
}

type MountedfileMap map[string]MountedfileInput

func (MountedfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mountedfile)(nil)).Elem()
}

func (i MountedfileMap) ToMountedfileMapOutput() MountedfileMapOutput {
	return i.ToMountedfileMapOutputWithContext(context.Background())
}

func (i MountedfileMap) ToMountedfileMapOutputWithContext(ctx context.Context) MountedfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountedfileMapOutput)
}

type MountedfileOutput struct{ *pulumi.OutputState }

func (MountedfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mountedfile)(nil)).Elem()
}

func (o MountedfileOutput) ToMountedfileOutput() MountedfileOutput {
	return o
}

func (o MountedfileOutput) ToMountedfileOutputWithContext(ctx context.Context) MountedfileOutput {
	return o
}

// SHA-256 checksum of the value
func (o MountedfileOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v *Mountedfile) pulumi.StringOutput { return v.Checksum }).(pulumi.StringOutput)
}

// Content of the mounted file encoded using Base-64
func (o MountedfileOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *Mountedfile) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// ID of the context on which the mounted file is defined
func (o MountedfileOutput) ContextId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mountedfile) pulumi.StringPtrOutput { return v.ContextId }).(pulumi.StringPtrOutput)
}

// ID of the module on which the mounted file is defined
func (o MountedfileOutput) ModuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mountedfile) pulumi.StringPtrOutput { return v.ModuleId }).(pulumi.StringPtrOutput)
}

// Relative path to the mounted file, without the /mnt/workspace/ prefix
func (o MountedfileOutput) RelativePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Mountedfile) pulumi.StringOutput { return v.RelativePath }).(pulumi.StringOutput)
}

// ID of the stack on which the mounted file is defined
func (o MountedfileOutput) StackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mountedfile) pulumi.StringPtrOutput { return v.StackId }).(pulumi.StringPtrOutput)
}

// Indicates whether the content can be read back outside a Run. Defaults to `true`.
func (o MountedfileOutput) WriteOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Mountedfile) pulumi.BoolPtrOutput { return v.WriteOnly }).(pulumi.BoolPtrOutput)
}

type MountedfileArrayOutput struct{ *pulumi.OutputState }

func (MountedfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mountedfile)(nil)).Elem()
}

func (o MountedfileArrayOutput) ToMountedfileArrayOutput() MountedfileArrayOutput {
	return o
}

func (o MountedfileArrayOutput) ToMountedfileArrayOutputWithContext(ctx context.Context) MountedfileArrayOutput {
	return o
}

func (o MountedfileArrayOutput) Index(i pulumi.IntInput) MountedfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mountedfile {
		return vs[0].([]*Mountedfile)[vs[1].(int)]
	}).(MountedfileOutput)
}

type MountedfileMapOutput struct{ *pulumi.OutputState }

func (MountedfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mountedfile)(nil)).Elem()
}

func (o MountedfileMapOutput) ToMountedfileMapOutput() MountedfileMapOutput {
	return o
}

func (o MountedfileMapOutput) ToMountedfileMapOutputWithContext(ctx context.Context) MountedfileMapOutput {
	return o
}

func (o MountedfileMapOutput) MapIndex(k pulumi.StringInput) MountedfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mountedfile {
		return vs[0].(map[string]*Mountedfile)[vs[1].(string)]
	}).(MountedfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MountedfileInput)(nil)).Elem(), &Mountedfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountedfileArrayInput)(nil)).Elem(), MountedfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountedfileMapInput)(nil)).Elem(), MountedfileMap{})
	pulumi.RegisterOutputType(MountedfileOutput{})
	pulumi.RegisterOutputType(MountedfileArrayOutput{})
	pulumi.RegisterOutputType(MountedfileMapOutput{})
}
