// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Webhook struct {
	pulumi.CustomResourceState

	// enables or disables sending webhooks
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// endpoint to send the POST request to
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// ID of the module which triggers the webhooks
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// secret used to sign each POST request so you're able to verify that the request comes from us
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
	// ID of the stack which triggers the webhooks
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	var resource Webhook
	err := ctx.RegisterResource("spacelift:index/webhook:Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	var resource Webhook
	err := ctx.ReadResource("spacelift:index/webhook:Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type webhookState struct {
	// enables or disables sending webhooks
	Enabled *bool `pulumi:"enabled"`
	// endpoint to send the POST request to
	Endpoint *string `pulumi:"endpoint"`
	// ID of the module which triggers the webhooks
	ModuleId *string `pulumi:"moduleId"`
	// secret used to sign each POST request so you're able to verify that the request comes from us
	Secret *string `pulumi:"secret"`
	// ID of the stack which triggers the webhooks
	StackId *string `pulumi:"stackId"`
}

type WebhookState struct {
	// enables or disables sending webhooks
	Enabled pulumi.BoolPtrInput
	// endpoint to send the POST request to
	Endpoint pulumi.StringPtrInput
	// ID of the module which triggers the webhooks
	ModuleId pulumi.StringPtrInput
	// secret used to sign each POST request so you're able to verify that the request comes from us
	Secret pulumi.StringPtrInput
	// ID of the stack which triggers the webhooks
	StackId pulumi.StringPtrInput
}

func (WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookState)(nil)).Elem()
}

type webhookArgs struct {
	// enables or disables sending webhooks
	Enabled *bool `pulumi:"enabled"`
	// endpoint to send the POST request to
	Endpoint string `pulumi:"endpoint"`
	// ID of the module which triggers the webhooks
	ModuleId *string `pulumi:"moduleId"`
	// secret used to sign each POST request so you're able to verify that the request comes from us
	Secret *string `pulumi:"secret"`
	// ID of the stack which triggers the webhooks
	StackId *string `pulumi:"stackId"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	// enables or disables sending webhooks
	Enabled pulumi.BoolPtrInput
	// endpoint to send the POST request to
	Endpoint pulumi.StringInput
	// ID of the module which triggers the webhooks
	ModuleId pulumi.StringPtrInput
	// secret used to sign each POST request so you're able to verify that the request comes from us
	Secret pulumi.StringPtrInput
	// ID of the stack which triggers the webhooks
	StackId pulumi.StringPtrInput
}

func (WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookArgs)(nil)).Elem()
}

type WebhookInput interface {
	pulumi.Input

	ToWebhookOutput() WebhookOutput
	ToWebhookOutputWithContext(ctx context.Context) WebhookOutput
}

func (*Webhook) ElementType() reflect.Type {
	return reflect.TypeOf((*Webhook)(nil))
}

func (i *Webhook) ToWebhookOutput() WebhookOutput {
	return i.ToWebhookOutputWithContext(context.Background())
}

func (i *Webhook) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookOutput)
}

type WebhookOutput struct {
	*pulumi.OutputState
}

func (WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Webhook)(nil))
}

func (o WebhookOutput) ToWebhookOutput() WebhookOutput {
	return o
}

func (o WebhookOutput) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WebhookOutput{})
}
