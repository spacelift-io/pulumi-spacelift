// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// > **Note:** `StackAwsRole` is deprecated. Please use `AwsRole` instead. The functionality is identical.
//
// **NOTE:** while this resource continues to work, we have replaced it with the `AwsIntegration` resource. The new resource allows integrations to be shared by multiple stacks/modules and also supports separate read vs write roles. Please use the `AwsIntegration` resource instead.
//
// `StackAwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.
//
// If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).
//
// Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).
type StackAwsRole struct {
	pulumi.CustomResourceState

	// AWS IAM role session duration in seconds
	DurationSeconds pulumi.IntOutput `pulumi:"durationSeconds"`
	// Custom external ID (works only for private workers).
	ExternalId pulumi.StringPtrOutput `pulumi:"externalId"`
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker pulumi.BoolPtrOutput `pulumi:"generateCredentialsInWorker"`
	// ID of the module which assumes the AWS IAM role
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// ID of the stack which assumes the AWS IAM role
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
}

// NewStackAwsRole registers a new resource with the given unique name, arguments, and options.
func NewStackAwsRole(ctx *pulumi.Context,
	name string, args *StackAwsRoleArgs, opts ...pulumi.ResourceOption) (*StackAwsRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StackAwsRole
	err := ctx.RegisterResource("spacelift:index/stackAwsRole:StackAwsRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackAwsRole gets an existing StackAwsRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackAwsRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackAwsRoleState, opts ...pulumi.ResourceOption) (*StackAwsRole, error) {
	var resource StackAwsRole
	err := ctx.ReadResource("spacelift:index/stackAwsRole:StackAwsRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackAwsRole resources.
type stackAwsRoleState struct {
	// AWS IAM role session duration in seconds
	DurationSeconds *int `pulumi:"durationSeconds"`
	// Custom external ID (works only for private workers).
	ExternalId *string `pulumi:"externalId"`
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker *bool `pulumi:"generateCredentialsInWorker"`
	// ID of the module which assumes the AWS IAM role
	ModuleId *string `pulumi:"moduleId"`
	// ARN of the AWS IAM role to attach
	RoleArn *string `pulumi:"roleArn"`
	// ID of the stack which assumes the AWS IAM role
	StackId *string `pulumi:"stackId"`
}

type StackAwsRoleState struct {
	// AWS IAM role session duration in seconds
	DurationSeconds pulumi.IntPtrInput
	// Custom external ID (works only for private workers).
	ExternalId pulumi.StringPtrInput
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker pulumi.BoolPtrInput
	// ID of the module which assumes the AWS IAM role
	ModuleId pulumi.StringPtrInput
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringPtrInput
	// ID of the stack which assumes the AWS IAM role
	StackId pulumi.StringPtrInput
}

func (StackAwsRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackAwsRoleState)(nil)).Elem()
}

type stackAwsRoleArgs struct {
	// AWS IAM role session duration in seconds
	DurationSeconds *int `pulumi:"durationSeconds"`
	// Custom external ID (works only for private workers).
	ExternalId *string `pulumi:"externalId"`
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker *bool `pulumi:"generateCredentialsInWorker"`
	// ID of the module which assumes the AWS IAM role
	ModuleId *string `pulumi:"moduleId"`
	// ARN of the AWS IAM role to attach
	RoleArn string `pulumi:"roleArn"`
	// ID of the stack which assumes the AWS IAM role
	StackId *string `pulumi:"stackId"`
}

// The set of arguments for constructing a StackAwsRole resource.
type StackAwsRoleArgs struct {
	// AWS IAM role session duration in seconds
	DurationSeconds pulumi.IntPtrInput
	// Custom external ID (works only for private workers).
	ExternalId pulumi.StringPtrInput
	// Generate AWS credentials in the private worker. Defaults to `false`.
	GenerateCredentialsInWorker pulumi.BoolPtrInput
	// ID of the module which assumes the AWS IAM role
	ModuleId pulumi.StringPtrInput
	// ARN of the AWS IAM role to attach
	RoleArn pulumi.StringInput
	// ID of the stack which assumes the AWS IAM role
	StackId pulumi.StringPtrInput
}

func (StackAwsRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackAwsRoleArgs)(nil)).Elem()
}

type StackAwsRoleInput interface {
	pulumi.Input

	ToStackAwsRoleOutput() StackAwsRoleOutput
	ToStackAwsRoleOutputWithContext(ctx context.Context) StackAwsRoleOutput
}

func (*StackAwsRole) ElementType() reflect.Type {
	return reflect.TypeOf((**StackAwsRole)(nil)).Elem()
}

func (i *StackAwsRole) ToStackAwsRoleOutput() StackAwsRoleOutput {
	return i.ToStackAwsRoleOutputWithContext(context.Background())
}

func (i *StackAwsRole) ToStackAwsRoleOutputWithContext(ctx context.Context) StackAwsRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAwsRoleOutput)
}

func (i *StackAwsRole) ToOutput(ctx context.Context) pulumix.Output[*StackAwsRole] {
	return pulumix.Output[*StackAwsRole]{
		OutputState: i.ToStackAwsRoleOutputWithContext(ctx).OutputState,
	}
}

// StackAwsRoleArrayInput is an input type that accepts StackAwsRoleArray and StackAwsRoleArrayOutput values.
// You can construct a concrete instance of `StackAwsRoleArrayInput` via:
//
//	StackAwsRoleArray{ StackAwsRoleArgs{...} }
type StackAwsRoleArrayInput interface {
	pulumi.Input

	ToStackAwsRoleArrayOutput() StackAwsRoleArrayOutput
	ToStackAwsRoleArrayOutputWithContext(context.Context) StackAwsRoleArrayOutput
}

type StackAwsRoleArray []StackAwsRoleInput

func (StackAwsRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackAwsRole)(nil)).Elem()
}

func (i StackAwsRoleArray) ToStackAwsRoleArrayOutput() StackAwsRoleArrayOutput {
	return i.ToStackAwsRoleArrayOutputWithContext(context.Background())
}

func (i StackAwsRoleArray) ToStackAwsRoleArrayOutputWithContext(ctx context.Context) StackAwsRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAwsRoleArrayOutput)
}

func (i StackAwsRoleArray) ToOutput(ctx context.Context) pulumix.Output[[]*StackAwsRole] {
	return pulumix.Output[[]*StackAwsRole]{
		OutputState: i.ToStackAwsRoleArrayOutputWithContext(ctx).OutputState,
	}
}

// StackAwsRoleMapInput is an input type that accepts StackAwsRoleMap and StackAwsRoleMapOutput values.
// You can construct a concrete instance of `StackAwsRoleMapInput` via:
//
//	StackAwsRoleMap{ "key": StackAwsRoleArgs{...} }
type StackAwsRoleMapInput interface {
	pulumi.Input

	ToStackAwsRoleMapOutput() StackAwsRoleMapOutput
	ToStackAwsRoleMapOutputWithContext(context.Context) StackAwsRoleMapOutput
}

type StackAwsRoleMap map[string]StackAwsRoleInput

func (StackAwsRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackAwsRole)(nil)).Elem()
}

func (i StackAwsRoleMap) ToStackAwsRoleMapOutput() StackAwsRoleMapOutput {
	return i.ToStackAwsRoleMapOutputWithContext(context.Background())
}

func (i StackAwsRoleMap) ToStackAwsRoleMapOutputWithContext(ctx context.Context) StackAwsRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAwsRoleMapOutput)
}

func (i StackAwsRoleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*StackAwsRole] {
	return pulumix.Output[map[string]*StackAwsRole]{
		OutputState: i.ToStackAwsRoleMapOutputWithContext(ctx).OutputState,
	}
}

type StackAwsRoleOutput struct{ *pulumi.OutputState }

func (StackAwsRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackAwsRole)(nil)).Elem()
}

func (o StackAwsRoleOutput) ToStackAwsRoleOutput() StackAwsRoleOutput {
	return o
}

func (o StackAwsRoleOutput) ToStackAwsRoleOutputWithContext(ctx context.Context) StackAwsRoleOutput {
	return o
}

func (o StackAwsRoleOutput) ToOutput(ctx context.Context) pulumix.Output[*StackAwsRole] {
	return pulumix.Output[*StackAwsRole]{
		OutputState: o.OutputState,
	}
}

// AWS IAM role session duration in seconds
func (o StackAwsRoleOutput) DurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *StackAwsRole) pulumi.IntOutput { return v.DurationSeconds }).(pulumi.IntOutput)
}

// Custom external ID (works only for private workers).
func (o StackAwsRoleOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackAwsRole) pulumi.StringPtrOutput { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// Generate AWS credentials in the private worker. Defaults to `false`.
func (o StackAwsRoleOutput) GenerateCredentialsInWorker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackAwsRole) pulumi.BoolPtrOutput { return v.GenerateCredentialsInWorker }).(pulumi.BoolPtrOutput)
}

// ID of the module which assumes the AWS IAM role
func (o StackAwsRoleOutput) ModuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackAwsRole) pulumi.StringPtrOutput { return v.ModuleId }).(pulumi.StringPtrOutput)
}

// ARN of the AWS IAM role to attach
func (o StackAwsRoleOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StackAwsRole) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// ID of the stack which assumes the AWS IAM role
func (o StackAwsRoleOutput) StackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackAwsRole) pulumi.StringPtrOutput { return v.StackId }).(pulumi.StringPtrOutput)
}

type StackAwsRoleArrayOutput struct{ *pulumi.OutputState }

func (StackAwsRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackAwsRole)(nil)).Elem()
}

func (o StackAwsRoleArrayOutput) ToStackAwsRoleArrayOutput() StackAwsRoleArrayOutput {
	return o
}

func (o StackAwsRoleArrayOutput) ToStackAwsRoleArrayOutputWithContext(ctx context.Context) StackAwsRoleArrayOutput {
	return o
}

func (o StackAwsRoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*StackAwsRole] {
	return pulumix.Output[[]*StackAwsRole]{
		OutputState: o.OutputState,
	}
}

func (o StackAwsRoleArrayOutput) Index(i pulumi.IntInput) StackAwsRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackAwsRole {
		return vs[0].([]*StackAwsRole)[vs[1].(int)]
	}).(StackAwsRoleOutput)
}

type StackAwsRoleMapOutput struct{ *pulumi.OutputState }

func (StackAwsRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackAwsRole)(nil)).Elem()
}

func (o StackAwsRoleMapOutput) ToStackAwsRoleMapOutput() StackAwsRoleMapOutput {
	return o
}

func (o StackAwsRoleMapOutput) ToStackAwsRoleMapOutputWithContext(ctx context.Context) StackAwsRoleMapOutput {
	return o
}

func (o StackAwsRoleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*StackAwsRole] {
	return pulumix.Output[map[string]*StackAwsRole]{
		OutputState: o.OutputState,
	}
}

func (o StackAwsRoleMapOutput) MapIndex(k pulumi.StringInput) StackAwsRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackAwsRole {
		return vs[0].(map[string]*StackAwsRole)[vs[1].(string)]
	}).(StackAwsRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackAwsRoleInput)(nil)).Elem(), &StackAwsRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackAwsRoleArrayInput)(nil)).Elem(), StackAwsRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackAwsRoleMapInput)(nil)).Elem(), StackAwsRoleMap{})
	pulumi.RegisterOutputType(StackAwsRoleOutput{})
	pulumi.RegisterOutputType(StackAwsRoleArrayOutput{})
	pulumi.RegisterOutputType(StackAwsRoleMapOutput{})
}
