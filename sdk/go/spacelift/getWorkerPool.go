// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `WorkerPool` represents a worker pool assigned to the Spacelift account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spacelift.LookupWorkerPool(ctx, &spacelift.LookupWorkerPoolArgs{
//				WorkerPoolId: "01G1KTZ4BA86RBN3XNN3YK9EWT",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWorkerPool(ctx *pulumi.Context, args *LookupWorkerPoolArgs, opts ...pulumi.InvokeOption) (*LookupWorkerPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkerPoolResult
	err := ctx.Invoke("spacelift:index/getWorkerPool:getWorkerPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkerPool.
type LookupWorkerPoolArgs struct {
	// ID of the worker pool
	WorkerPoolId string `pulumi:"workerPoolId"`
}

// A collection of values returned by getWorkerPool.
type LookupWorkerPoolResult struct {
	// credentials necessary to connect WorkerPool's workers to the control plane
	Config string `pulumi:"config"`
	// description of the worker pool
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id     string   `pulumi:"id"`
	Labels []string `pulumi:"labels"`
	// name of the worker pool
	Name string `pulumi:"name"`
	// ID (slug) of the space the worker pool is in
	SpaceId string `pulumi:"spaceId"`
	// ID of the worker pool
	WorkerPoolId string `pulumi:"workerPoolId"`
}

func LookupWorkerPoolOutput(ctx *pulumi.Context, args LookupWorkerPoolOutputArgs, opts ...pulumi.InvokeOption) LookupWorkerPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkerPoolResult, error) {
			args := v.(LookupWorkerPoolArgs)
			r, err := LookupWorkerPool(ctx, &args, opts...)
			var s LookupWorkerPoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkerPoolResultOutput)
}

// A collection of arguments for invoking getWorkerPool.
type LookupWorkerPoolOutputArgs struct {
	// ID of the worker pool
	WorkerPoolId pulumi.StringInput `pulumi:"workerPoolId"`
}

func (LookupWorkerPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkerPoolArgs)(nil)).Elem()
}

// A collection of values returned by getWorkerPool.
type LookupWorkerPoolResultOutput struct{ *pulumi.OutputState }

func (LookupWorkerPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkerPoolResult)(nil)).Elem()
}

func (o LookupWorkerPoolResultOutput) ToLookupWorkerPoolResultOutput() LookupWorkerPoolResultOutput {
	return o
}

func (o LookupWorkerPoolResultOutput) ToLookupWorkerPoolResultOutputWithContext(ctx context.Context) LookupWorkerPoolResultOutput {
	return o
}

// credentials necessary to connect WorkerPool's workers to the control plane
func (o LookupWorkerPoolResultOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerPoolResult) string { return v.Config }).(pulumi.StringOutput)
}

// description of the worker pool
func (o LookupWorkerPoolResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerPoolResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupWorkerPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupWorkerPoolResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWorkerPoolResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// name of the worker pool
func (o LookupWorkerPoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerPoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID (slug) of the space the worker pool is in
func (o LookupWorkerPoolResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerPoolResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

// ID of the worker pool
func (o LookupWorkerPoolResultOutput) WorkerPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerPoolResult) string { return v.WorkerPoolId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkerPoolResultOutput{})
}
