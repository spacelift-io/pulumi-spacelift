// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spacelift-io/pulumi-spacelift/sdk/v2/go/spacelift/internal"
)

// `AwsIntegrationAttachment` represents the attachment between a reusable AWS integration and a single stack or module.
func LookupAwsIntegrationAttachment(ctx *pulumi.Context, args *LookupAwsIntegrationAttachmentArgs, opts ...pulumi.InvokeOption) (*LookupAwsIntegrationAttachmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAwsIntegrationAttachmentResult
	err := ctx.Invoke("spacelift:index/getAwsIntegrationAttachment:getAwsIntegrationAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAwsIntegrationAttachment.
type LookupAwsIntegrationAttachmentArgs struct {
	// ID of the integration to attach
	IntegrationId string `pulumi:"integrationId"`
	// ID of the module to attach the integration to
	ModuleId *string `pulumi:"moduleId"`
	// ID of the stack to attach the integration to
	StackId *string `pulumi:"stackId"`
}

// A collection of values returned by getAwsIntegrationAttachment.
type LookupAwsIntegrationAttachmentResult struct {
	// Internal ID of the attachment entity
	AttachmentId string `pulumi:"attachmentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the integration to attach
	IntegrationId string `pulumi:"integrationId"`
	// ID of the module to attach the integration to
	ModuleId *string `pulumi:"moduleId"`
	// Indicates whether this attachment is used for read operations
	Read bool `pulumi:"read"`
	// ID of the stack to attach the integration to
	StackId *string `pulumi:"stackId"`
	// Indicates whether this attachment is used for write operations
	Write bool `pulumi:"write"`
}

func LookupAwsIntegrationAttachmentOutput(ctx *pulumi.Context, args LookupAwsIntegrationAttachmentOutputArgs, opts ...pulumi.InvokeOption) LookupAwsIntegrationAttachmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAwsIntegrationAttachmentResult, error) {
			args := v.(LookupAwsIntegrationAttachmentArgs)
			r, err := LookupAwsIntegrationAttachment(ctx, &args, opts...)
			var s LookupAwsIntegrationAttachmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAwsIntegrationAttachmentResultOutput)
}

// A collection of arguments for invoking getAwsIntegrationAttachment.
type LookupAwsIntegrationAttachmentOutputArgs struct {
	// ID of the integration to attach
	IntegrationId pulumi.StringInput `pulumi:"integrationId"`
	// ID of the module to attach the integration to
	ModuleId pulumi.StringPtrInput `pulumi:"moduleId"`
	// ID of the stack to attach the integration to
	StackId pulumi.StringPtrInput `pulumi:"stackId"`
}

func (LookupAwsIntegrationAttachmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAwsIntegrationAttachmentArgs)(nil)).Elem()
}

// A collection of values returned by getAwsIntegrationAttachment.
type LookupAwsIntegrationAttachmentResultOutput struct{ *pulumi.OutputState }

func (LookupAwsIntegrationAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAwsIntegrationAttachmentResult)(nil)).Elem()
}

func (o LookupAwsIntegrationAttachmentResultOutput) ToLookupAwsIntegrationAttachmentResultOutput() LookupAwsIntegrationAttachmentResultOutput {
	return o
}

func (o LookupAwsIntegrationAttachmentResultOutput) ToLookupAwsIntegrationAttachmentResultOutputWithContext(ctx context.Context) LookupAwsIntegrationAttachmentResultOutput {
	return o
}

func (o LookupAwsIntegrationAttachmentResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupAwsIntegrationAttachmentResult] {
	return pulumix.Output[LookupAwsIntegrationAttachmentResult]{
		OutputState: o.OutputState,
	}
}

// Internal ID of the attachment entity
func (o LookupAwsIntegrationAttachmentResultOutput) AttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAwsIntegrationAttachmentResult) string { return v.AttachmentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAwsIntegrationAttachmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAwsIntegrationAttachmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the integration to attach
func (o LookupAwsIntegrationAttachmentResultOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAwsIntegrationAttachmentResult) string { return v.IntegrationId }).(pulumi.StringOutput)
}

// ID of the module to attach the integration to
func (o LookupAwsIntegrationAttachmentResultOutput) ModuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAwsIntegrationAttachmentResult) *string { return v.ModuleId }).(pulumi.StringPtrOutput)
}

// Indicates whether this attachment is used for read operations
func (o LookupAwsIntegrationAttachmentResultOutput) Read() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAwsIntegrationAttachmentResult) bool { return v.Read }).(pulumi.BoolOutput)
}

// ID of the stack to attach the integration to
func (o LookupAwsIntegrationAttachmentResultOutput) StackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAwsIntegrationAttachmentResult) *string { return v.StackId }).(pulumi.StringPtrOutput)
}

// Indicates whether this attachment is used for write operations
func (o LookupAwsIntegrationAttachmentResultOutput) Write() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAwsIntegrationAttachmentResult) bool { return v.Write }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAwsIntegrationAttachmentResultOutput{})
}
