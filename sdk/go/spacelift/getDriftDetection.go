// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spacelift/sdk/go/spacelift"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// 	"github.com/spacelift-io/spacelift-spacelift/sdk/go/spacelift/"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := spacelift.LookupDriftDetection(ctx, &spacelift.LookupDriftDetectionArgs{
// 			StackId: "core-infra-production",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// <!-- schema generated by tfplugindocs -->
// ## Schema
//
// ### Required
//
// - **stack_id** (String) ID of the stack for which to set up drift detection
//
// ### Optional
//
// - **id** (String) The ID of this resource.
//
// ### Read-Only
//
// - **reconcile** (Boolean) Whether a tracked run should be triggered when drift is detected.
// - **schedule** (List of String) List of cron schedule expressions based on which drift detection should be triggered.
func LookupDriftDetection(ctx *pulumi.Context, args *LookupDriftDetectionArgs, opts ...pulumi.InvokeOption) (*LookupDriftDetectionResult, error) {
	var rv LookupDriftDetectionResult
	err := ctx.Invoke("spacelift:index/getDriftDetection:getDriftDetection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDriftDetection.
type LookupDriftDetectionArgs struct {
	StackId string `pulumi:"stackId"`
}

// A collection of values returned by getDriftDetection.
type LookupDriftDetectionResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string   `pulumi:"id"`
	Reconcile bool     `pulumi:"reconcile"`
	Schedules []string `pulumi:"schedules"`
	StackId   string   `pulumi:"stackId"`
}
