// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spacelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `PolicyAttachment` represents a relationship between a policy (`Policy`) and a stack (`Stack`) or module (`Module`). Each policy can only be attached to a stack/module once. `LOGIN` policies are the exception because they apply globally and not to individual stacks/modules. An attempt to attach one will fail.
//
// ## Schema
//
// ### Required
//
// - **policy_id** (String) ID of the policy to attach
//
// ### Optional
//
// - **id** (String) The ID of this resource.
// - **module_id** (String) ID of the module to attach the policy to
// - **stack_id** (String) ID of the stack to attach the policy to
//
// ## Import
//
// Import is supported using the following syntax
//
// ```sh
//  $ pulumi import spacelift:index/policyAttachment:PolicyAttachment no-weekend-deploys $POLICY_ID/$STACK_ID
// ```
type PolicyAttachment struct {
	pulumi.CustomResourceState

	// ID of the module to attach the policy to
	ModuleId pulumi.StringPtrOutput `pulumi:"moduleId"`
	// ID of the policy to attach
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// ID of the stack to attach the policy to
	StackId pulumi.StringPtrOutput `pulumi:"stackId"`
}

// NewPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewPolicyAttachment(ctx *pulumi.Context,
	name string, args *PolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*PolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	var resource PolicyAttachment
	err := ctx.RegisterResource("spacelift:index/policyAttachment:PolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAttachment gets an existing PolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAttachmentState, opts ...pulumi.ResourceOption) (*PolicyAttachment, error) {
	var resource PolicyAttachment
	err := ctx.ReadResource("spacelift:index/policyAttachment:PolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAttachment resources.
type policyAttachmentState struct {
	// ID of the module to attach the policy to
	ModuleId *string `pulumi:"moduleId"`
	// ID of the policy to attach
	PolicyId *string `pulumi:"policyId"`
	// ID of the stack to attach the policy to
	StackId *string `pulumi:"stackId"`
}

type PolicyAttachmentState struct {
	// ID of the module to attach the policy to
	ModuleId pulumi.StringPtrInput
	// ID of the policy to attach
	PolicyId pulumi.StringPtrInput
	// ID of the stack to attach the policy to
	StackId pulumi.StringPtrInput
}

func (PolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAttachmentState)(nil)).Elem()
}

type policyAttachmentArgs struct {
	// ID of the module to attach the policy to
	ModuleId *string `pulumi:"moduleId"`
	// ID of the policy to attach
	PolicyId string `pulumi:"policyId"`
	// ID of the stack to attach the policy to
	StackId *string `pulumi:"stackId"`
}

// The set of arguments for constructing a PolicyAttachment resource.
type PolicyAttachmentArgs struct {
	// ID of the module to attach the policy to
	ModuleId pulumi.StringPtrInput
	// ID of the policy to attach
	PolicyId pulumi.StringInput
	// ID of the stack to attach the policy to
	StackId pulumi.StringPtrInput
}

func (PolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAttachmentArgs)(nil)).Elem()
}

type PolicyAttachmentInput interface {
	pulumi.Input

	ToPolicyAttachmentOutput() PolicyAttachmentOutput
	ToPolicyAttachmentOutputWithContext(ctx context.Context) PolicyAttachmentOutput
}

func (*PolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAttachment)(nil))
}

func (i *PolicyAttachment) ToPolicyAttachmentOutput() PolicyAttachmentOutput {
	return i.ToPolicyAttachmentOutputWithContext(context.Background())
}

func (i *PolicyAttachment) ToPolicyAttachmentOutputWithContext(ctx context.Context) PolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAttachmentOutput)
}

type PolicyAttachmentOutput struct {
	*pulumi.OutputState
}

func (PolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAttachment)(nil))
}

func (o PolicyAttachmentOutput) ToPolicyAttachmentOutput() PolicyAttachmentOutput {
	return o
}

func (o PolicyAttachmentOutput) ToPolicyAttachmentOutputWithContext(ctx context.Context) PolicyAttachmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PolicyAttachmentOutput{})
}
