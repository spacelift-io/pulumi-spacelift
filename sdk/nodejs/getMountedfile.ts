// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `spacelift.Mountedfile` represents a file mounted in each Run's workspace that is part of a configuration of a context (`spacelift.Context`), stack (`spacelift.Stack`) or a module (`spacelift.Module`). In principle, it's very similar to an environment variable (`spacelift.EnvironmentVariable`) except that the value is written to the filesystem rather than passed to the environment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * // For a context
 * const ireland_kubeconfig = pulumi.output(spacelift.getMountedfile({
 *     contextId: "prod-k8s-ie",
 *     relativePath: "kubeconfig",
 * }));
 * // For a module
 * const module_kubeconfig = pulumi.output(spacelift.getMountedfile({
 *     moduleId: "k8s-module",
 *     relativePath: "kubeconfig",
 * }));
 * // For a stack
 * const core_kubeconfig = pulumi.output(spacelift.getMountedfile({
 *     relativePath: "kubeconfig",
 *     stackId: "k8s-core",
 * }));
 * ```
 */
export function getMountedfile(args: GetMountedfileArgs, opts?: pulumi.InvokeOptions): Promise<GetMountedfileResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("spacelift:index/getMountedfile:getMountedfile", {
        "contextId": args.contextId,
        "moduleId": args.moduleId,
        "relativePath": args.relativePath,
        "stackId": args.stackId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMountedfile.
 */
export interface GetMountedfileArgs {
    /**
     * ID of the context where the mounted file is stored
     */
    contextId?: string;
    /**
     * ID of the module where the mounted file is stored
     */
    moduleId?: string;
    /**
     * relative path to the mounted file
     */
    relativePath: string;
    /**
     * ID of the stack where the mounted file is stored
     */
    stackId?: string;
}

/**
 * A collection of values returned by getMountedfile.
 */
export interface GetMountedfileResult {
    /**
     * SHA-256 checksum of the value
     */
    readonly checksum: string;
    /**
     * content of the mounted file encoded using Base-64
     */
    readonly content: string;
    /**
     * ID of the context where the mounted file is stored
     */
    readonly contextId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ID of the module where the mounted file is stored
     */
    readonly moduleId?: string;
    /**
     * relative path to the mounted file
     */
    readonly relativePath: string;
    /**
     * ID of the stack where the mounted file is stored
     */
    readonly stackId?: string;
    /**
     * indicates whether the value can be read back outside a Run
     */
    readonly writeOnly: boolean;
}

export function getMountedfileOutput(args: GetMountedfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMountedfileResult> {
    return pulumi.output(args).apply(a => getMountedfile(a, opts))
}

/**
 * A collection of arguments for invoking getMountedfile.
 */
export interface GetMountedfileOutputArgs {
    /**
     * ID of the context where the mounted file is stored
     */
    contextId?: pulumi.Input<string>;
    /**
     * ID of the module where the mounted file is stored
     */
    moduleId?: pulumi.Input<string>;
    /**
     * relative path to the mounted file
     */
    relativePath: pulumi.Input<string>;
    /**
     * ID of the stack where the mounted file is stored
     */
    stackId?: pulumi.Input<string>;
}
