// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `spacelift.Space` represents a Spacelift **space** - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space.
 *
 * **Please note:** the `spacelift.Space` resource requires root Admin permissions, and can only be used by administrative stacks in the root space, or using an API key or user session that has root space access.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@spacelift-io/pulumi-spacelift";
 *
 * const development = new spacelift.Space("development", {
 *     parentSpaceId: "root",
 *     description: "This a child of the root space. It contains all the resources common to the development infrastructure.",
 * });
 * const development_frontend = new spacelift.Space("development-frontend", {
 *     parentSpaceId: development.id,
 *     inheritEntities: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import spacelift:index/space:Space development $SPACE_ID
 * ```
 */
export class Space extends pulumi.CustomResource {
    /**
     * Get an existing Space resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpaceState, opts?: pulumi.CustomResourceOptions): Space {
        return new Space(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/space:Space';

    /**
     * Returns true if the given object is an instance of Space.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Space {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Space.__pulumiType;
    }

    /**
     * free-form space description for users
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
     */
    public readonly inheritEntities!: pulumi.Output<boolean | undefined>;
    /**
     * list of labels describing a space
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * name of the space
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * immutable ID (slug) of parent space. Defaults to `root`.
     */
    public readonly parentSpaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a Space resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SpaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpaceArgs | SpaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpaceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["inheritEntities"] = state ? state.inheritEntities : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentSpaceId"] = state ? state.parentSpaceId : undefined;
        } else {
            const args = argsOrState as SpaceArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inheritEntities"] = args ? args.inheritEntities : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentSpaceId"] = args ? args.parentSpaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Space.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Space resources.
 */
export interface SpaceState {
    /**
     * free-form space description for users
     */
    description?: pulumi.Input<string>;
    /**
     * indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
     */
    inheritEntities?: pulumi.Input<boolean>;
    /**
     * list of labels describing a space
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * name of the space
     */
    name?: pulumi.Input<string>;
    /**
     * immutable ID (slug) of parent space. Defaults to `root`.
     */
    parentSpaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Space resource.
 */
export interface SpaceArgs {
    /**
     * free-form space description for users
     */
    description?: pulumi.Input<string>;
    /**
     * indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
     */
    inheritEntities?: pulumi.Input<boolean>;
    /**
     * list of labels describing a space
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * name of the space
     */
    name?: pulumi.Input<string>;
    /**
     * immutable ID (slug) of parent space. Defaults to `root`.
     */
    parentSpaceId?: pulumi.Input<string>;
}
