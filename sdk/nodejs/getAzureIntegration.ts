// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `spacelift.AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const example = spacelift.getAzureIntegration({
 *     name: "Production",
 * });
 * ```
 */
export function getAzureIntegration(args?: GetAzureIntegrationArgs, opts?: pulumi.InvokeOptions): Promise<GetAzureIntegrationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("spacelift:index/getAzureIntegration:getAzureIntegration", {
        "integrationId": args.integrationId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getAzureIntegration.
 */
export interface GetAzureIntegrationArgs {
    /**
     * Immutable ID of the integration. Either `integrationId` or `name` must be specified.
     */
    integrationId?: string;
    /**
     * The friendly name of the integration. Either `integrationId` or `name` must be specified.
     */
    name?: string;
}

/**
 * A collection of values returned by getAzureIntegration.
 */
export interface GetAzureIntegrationResult {
    /**
     * Indicates whether admin consent has been performed for the AAD Application.
     */
    readonly adminConsentProvided: boolean;
    /**
     * The URL to use to provide admin consent to the application in the customer's tenant
     */
    readonly adminConsentUrl: string;
    /**
     * The applicationId of the Azure AD application used by the integration.
     */
    readonly applicationId: string;
    /**
     * The default subscription ID to use, if one isn't specified at the stack/module level
     */
    readonly defaultSubscriptionId: string;
    /**
     * The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
     */
    readonly displayName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Immutable ID of the integration. Either `integrationId` or `name` must be specified.
     */
    readonly integrationId: string;
    /**
     * Labels to set on the integration
     */
    readonly labels: string[];
    /**
     * The friendly name of the integration. Either `integrationId` or `name` must be specified.
     */
    readonly name: string;
    /**
     * ID (slug) of the space the integration is in
     */
    readonly spaceId: string;
    /**
     * The Azure AD tenant ID
     */
    readonly tenantId: string;
}
/**
 * `spacelift.AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const example = spacelift.getAzureIntegration({
 *     name: "Production",
 * });
 * ```
 */
export function getAzureIntegrationOutput(args?: GetAzureIntegrationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAzureIntegrationResult> {
    return pulumi.output(args).apply((a: any) => getAzureIntegration(a, opts))
}

/**
 * A collection of arguments for invoking getAzureIntegration.
 */
export interface GetAzureIntegrationOutputArgs {
    /**
     * Immutable ID of the integration. Either `integrationId` or `name` must be specified.
     */
    integrationId?: pulumi.Input<string>;
    /**
     * The friendly name of the integration. Either `integrationId` or `name` must be specified.
     */
    name?: pulumi.Input<string>;
}
