// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Blueprint extends pulumi.CustomResource {
    /**
     * Get an existing Blueprint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlueprintState, opts?: pulumi.CustomResourceOptions): Blueprint {
        return new Blueprint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/blueprint:Blueprint';

    /**
     * Returns true if the given object is an instance of Blueprint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Blueprint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Blueprint.__pulumiType;
    }

    /**
     * Description of the blueprint
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Labels of the blueprint
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the blueprint
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the space the blueprint is in
     */
    public readonly space!: pulumi.Output<string>;
    /**
     * State of the blueprint. Value can be `DRAFT` or `PUBLISHED`.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Body of the blueprint. If `state` is set to `PUBLISHED`, this field is required.
     */
    public readonly template!: pulumi.Output<string | undefined>;

    /**
     * Create a Blueprint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlueprintArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlueprintArgs | BlueprintState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlueprintState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["space"] = state ? state.space : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as BlueprintArgs | undefined;
            if ((!args || args.space === undefined) && !opts.urn) {
                throw new Error("Missing required property 'space'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["space"] = args ? args.space : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Blueprint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Blueprint resources.
 */
export interface BlueprintState {
    /**
     * Description of the blueprint
     */
    description?: pulumi.Input<string>;
    /**
     * Labels of the blueprint
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the blueprint
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the space the blueprint is in
     */
    space?: pulumi.Input<string>;
    /**
     * State of the blueprint. Value can be `DRAFT` or `PUBLISHED`.
     */
    state?: pulumi.Input<string>;
    /**
     * Body of the blueprint. If `state` is set to `PUBLISHED`, this field is required.
     */
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Blueprint resource.
 */
export interface BlueprintArgs {
    /**
     * Description of the blueprint
     */
    description?: pulumi.Input<string>;
    /**
     * Labels of the blueprint
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the blueprint
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the space the blueprint is in
     */
    space: pulumi.Input<string>;
    /**
     * State of the blueprint. Value can be `DRAFT` or `PUBLISHED`.
     */
    state: pulumi.Input<string>;
    /**
     * Body of the blueprint. If `state` is set to `PUBLISHED`, this field is required.
     */
    template?: pulumi.Input<string>;
}
