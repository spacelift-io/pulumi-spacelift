// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `spacelift.Version` allows to programmatically trigger a version creation in response to arbitrary changes in the keepers section.
 */
export class Version extends pulumi.CustomResource {
    /**
     * Get an existing Version resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VersionState, opts?: pulumi.CustomResourceOptions): Version {
        return new Version(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/version:Version';

    /**
     * Returns true if the given object is an instance of Version.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Version {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Version.__pulumiType;
    }

    /**
     * The commit SHA for which to trigger a version.
     */
    public readonly commitSha!: pulumi.Output<string | undefined>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of the resource.
     */
    public readonly keepers!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * ID of the module on which the version creation is to be triggered.
     */
    public readonly moduleId!: pulumi.Output<string>;
    /**
     * A semantic version number to set for the triggered version, example: 0.11.2
     */
    public readonly versionNumber!: pulumi.Output<string | undefined>;

    /**
     * Create a Version resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VersionArgs | VersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VersionState | undefined;
            resourceInputs["commitSha"] = state ? state.commitSha : undefined;
            resourceInputs["keepers"] = state ? state.keepers : undefined;
            resourceInputs["moduleId"] = state ? state.moduleId : undefined;
            resourceInputs["versionNumber"] = state ? state.versionNumber : undefined;
        } else {
            const args = argsOrState as VersionArgs | undefined;
            if ((!args || args.moduleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'moduleId'");
            }
            resourceInputs["commitSha"] = args ? args.commitSha : undefined;
            resourceInputs["keepers"] = args ? args.keepers : undefined;
            resourceInputs["moduleId"] = args ? args.moduleId : undefined;
            resourceInputs["versionNumber"] = args ? args.versionNumber : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Version.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Version resources.
 */
export interface VersionState {
    /**
     * The commit SHA for which to trigger a version.
     */
    commitSha?: pulumi.Input<string>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of the resource.
     */
    keepers?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of the module on which the version creation is to be triggered.
     */
    moduleId?: pulumi.Input<string>;
    /**
     * A semantic version number to set for the triggered version, example: 0.11.2
     */
    versionNumber?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Version resource.
 */
export interface VersionArgs {
    /**
     * The commit SHA for which to trigger a version.
     */
    commitSha?: pulumi.Input<string>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of the resource.
     */
    keepers?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of the module on which the version creation is to be triggered.
     */
    moduleId: pulumi.Input<string>;
    /**
     * A semantic version number to set for the triggered version, example: 0.11.2
     */
    versionNumber?: pulumi.Input<string>;
}
