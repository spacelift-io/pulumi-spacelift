// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetContextsLabel {
    anyOfs: string[];
}

export interface GetContextsLabelArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStacksAdministrative {
    equals?: boolean;
}

export interface GetStacksAdministrativeArgs {
    equals?: pulumi.Input<boolean>;
}

export interface GetStacksBranch {
    anyOfs: string[];
}

export interface GetStacksBranchArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStacksCommit {
    anyOfs: string[];
}

export interface GetStacksCommitArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStacksLabel {
    anyOfs: string[];
}

export interface GetStacksLabelArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStacksLocked {
    equals?: boolean;
}

export interface GetStacksLockedArgs {
    equals?: pulumi.Input<boolean>;
}

export interface GetStacksName {
    anyOfs: string[];
}

export interface GetStacksNameArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStacksProjectRoot {
    anyOfs: string[];
}

export interface GetStacksProjectRootArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStacksRepository {
    anyOfs: string[];
}

export interface GetStacksRepositoryArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStacksState {
    anyOfs: string[];
}

export interface GetStacksStateArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStacksVendor {
    anyOfs: string[];
}

export interface GetStacksVendorArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStacksWorkerPool {
    anyOfs: string[];
}

export interface GetStacksWorkerPoolArgs {
    anyOfs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IdpGroupMappingPolicy {
    /**
     * Type of access to the space. Possible values are: READ, WRITE, ADMIN
     */
    role: pulumi.Input<string>;
    /**
     * ID (slug) of the space the user group has access to
     */
    spaceId: pulumi.Input<string>;
}

export interface ModuleAzureDevops {
    /**
     * ID of the Azure Devops integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default Azure DevOps integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The name of the Azure DevOps project
     */
    project: pulumi.Input<string>;
}

export interface ModuleBitbucketCloud {
    /**
     * The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default Bitbucket Cloud integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The Bitbucket project containing the repository
     */
    namespace: pulumi.Input<string>;
}

export interface ModuleBitbucketDatacenter {
    /**
     * The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default Bitbucket Datacenter integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The Bitbucket project containing the repository
     */
    namespace: pulumi.Input<string>;
}

export interface ModuleGithubEnterprise {
    /**
     * The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default GitHub Enterprise integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The GitHub organization / user the repository belongs to
     */
    namespace: pulumi.Input<string>;
}

export interface ModuleGitlab {
    /**
     * ID of the Gitlab integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default GitLab integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The GitLab namespace containing the repository
     */
    namespace: pulumi.Input<string>;
}

export interface StackAnsible {
    /**
     * The playbook Ansible should run.
     */
    playbook: pulumi.Input<string>;
}

export interface StackAzureDevops {
    /**
     * The ID of the Azure Devops integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default Azure DevOps integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The name of the Azure DevOps project
     */
    project: pulumi.Input<string>;
}

export interface StackBitbucketCloud {
    /**
     * The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default Bitbucket Cloud integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The Bitbucket project containing the repository
     */
    namespace: pulumi.Input<string>;
}

export interface StackBitbucketDatacenter {
    /**
     * The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default Bitbucket Datacenter integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The Bitbucket project containing the repository
     */
    namespace: pulumi.Input<string>;
}

export interface StackCloudformation {
    /**
     * Template file `cloudformation package` will be called on
     */
    entryTemplateFile: pulumi.Input<string>;
    /**
     * AWS region to use
     */
    region: pulumi.Input<string>;
    /**
     * CloudFormation stack name
     */
    stackName: pulumi.Input<string>;
    /**
     * S3 bucket to save CloudFormation templates to
     */
    templateBucket: pulumi.Input<string>;
}

export interface StackGithubEnterprise {
    /**
     * The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default GitHub Enterprise integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The GitHub organization / user the repository belongs to
     */
    namespace: pulumi.Input<string>;
}

export interface StackGitlab {
    /**
     * The ID of the Gitlab integration. If not specified, the default integration will be used.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this is the default GitLab integration
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The GitLab namespace containing the repository
     */
    namespace: pulumi.Input<string>;
}

export interface StackKubernetes {
    /**
     * Kubectl version.
     */
    kubectlVersion?: pulumi.Input<string>;
    /**
     * Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
     */
    namespace?: pulumi.Input<string>;
}

export interface StackPulumi {
    /**
     * State backend to log into on Run initialize.
     */
    loginUrl: pulumi.Input<string>;
    /**
     * Pulumi stack name to use with the state backend.
     */
    stackName: pulumi.Input<string>;
}

export interface StackRawGit {
    /**
     * User-friendly namespace for the repository, this is for cosmetic purposes only
     */
    namespace: pulumi.Input<string>;
    /**
     * HTTPS URL of the Git repository
     */
    url: pulumi.Input<string>;
}

export interface StackShowcase {
    namespace: pulumi.Input<string>;
}

export interface StackTerragrunt {
    terraformVersion?: pulumi.Input<string>;
    /**
     * Terragrunt version.
     */
    terragruntVersion?: pulumi.Input<string>;
    /**
     * Whether to use `terragrunt run-all` instead of `terragrunt`.
     */
    useRunAll?: pulumi.Input<boolean>;
    useSmartSanitization?: pulumi.Input<boolean>;
}

export interface UserPolicy {
    /**
     * Type of access to the space. Possible values are: READ, WRITE, ADMIN
     */
    role: pulumi.Input<string>;
    /**
     * ID (slug) of the space the user has access to
     */
    spaceId: pulumi.Input<string>;
}
