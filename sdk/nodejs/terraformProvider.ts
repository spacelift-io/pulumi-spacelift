// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@spacelift-io/pulumi-spacelift";
 *
 * const datadog = new spacelift.TerraformProvider("datadog", {
 *     description: "Our fork of the Datadog provider",
 *     labels: ["fork"],
 *     "public": false,
 *     spaceId: "root",
 *     type: "datadog",
 * });
 * ```
 */
export class TerraformProvider extends pulumi.CustomResource {
    /**
     * Get an existing TerraformProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TerraformProviderState, opts?: pulumi.CustomResourceOptions): TerraformProvider {
        return new TerraformProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/terraformProvider:TerraformProvider';

    /**
     * Returns true if the given object is an instance of TerraformProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TerraformProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TerraformProvider.__pulumiType;
    }

    /**
     * Free-form description for human users, supports Markdown
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * Whether the provider is public or not, defaults to false (private)
     */
    public readonly public!: pulumi.Output<boolean | undefined>;
    /**
     * ID (slug) of the space the provider is in
     */
    public readonly spaceId!: pulumi.Output<string>;
    /**
     * Type of the provider - should be unique in one account
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a TerraformProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TerraformProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TerraformProviderArgs | TerraformProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TerraformProviderState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as TerraformProviderArgs | undefined;
            if ((!args || args.spaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spaceId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["public"] = args ? args.public : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TerraformProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TerraformProvider resources.
 */
export interface TerraformProviderState {
    /**
     * Free-form description for human users, supports Markdown
     */
    description?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the provider is public or not, defaults to false (private)
     */
    public?: pulumi.Input<boolean>;
    /**
     * ID (slug) of the space the provider is in
     */
    spaceId?: pulumi.Input<string>;
    /**
     * Type of the provider - should be unique in one account
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TerraformProvider resource.
 */
export interface TerraformProviderArgs {
    /**
     * Free-form description for human users, supports Markdown
     */
    description?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the provider is public or not, defaults to false (private)
     */
    public?: pulumi.Input<boolean>;
    /**
     * ID (slug) of the space the provider is in
     */
    spaceId: pulumi.Input<string>;
    /**
     * Type of the provider - should be unique in one account
     */
    type: pulumi.Input<string>;
}
