// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `spacelift.Run` allows programmatically triggering runs in response to arbitrary changes in the keepers section.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi_spacelift from "@spacelift-io/pulumi-spacelift";
 *
 * const thisStack = new spacelift.Stack("thisStack", {
 *     repository: "test",
 *     branch: "main",
 * });
 * const thisRun = new spacelift.Run("thisRun", {
 *     stackId: thisStack.id,
 *     keepers: {
 *         branch: thisStack.branch,
 *     },
 * });
 * ```
 */
export class Run extends pulumi.CustomResource {
    /**
     * Get an existing Run resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RunState, opts?: pulumi.CustomResourceOptions): Run {
        return new Run(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/run:Run';

    /**
     * Returns true if the given object is an instance of Run.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Run {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Run.__pulumiType;
    }

    /**
     * The commit SHA for which to trigger a run.
     */
    public readonly commitSha!: pulumi.Output<string | undefined>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of the resource.
     */
    public readonly keepers!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Whether the run is a proposed run. Defaults to `false`.
     */
    public readonly proposed!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the stack on which the run is to be triggered.
     */
    public readonly stackId!: pulumi.Output<string>;

    /**
     * Create a Run resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RunArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RunArgs | RunState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RunState | undefined;
            resourceInputs["commitSha"] = state ? state.commitSha : undefined;
            resourceInputs["keepers"] = state ? state.keepers : undefined;
            resourceInputs["proposed"] = state ? state.proposed : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
        } else {
            const args = argsOrState as RunArgs | undefined;
            if ((!args || args.stackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["commitSha"] = args ? args.commitSha : undefined;
            resourceInputs["keepers"] = args ? args.keepers : undefined;
            resourceInputs["proposed"] = args ? args.proposed : undefined;
            resourceInputs["stackId"] = args ? args.stackId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Run.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Run resources.
 */
export interface RunState {
    /**
     * The commit SHA for which to trigger a run.
     */
    commitSha?: pulumi.Input<string>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of the resource.
     */
    keepers?: pulumi.Input<{[key: string]: any}>;
    /**
     * Whether the run is a proposed run. Defaults to `false`.
     */
    proposed?: pulumi.Input<boolean>;
    /**
     * ID of the stack on which the run is to be triggered.
     */
    stackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Run resource.
 */
export interface RunArgs {
    /**
     * The commit SHA for which to trigger a run.
     */
    commitSha?: pulumi.Input<string>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of the resource.
     */
    keepers?: pulumi.Input<{[key: string]: any}>;
    /**
     * Whether the run is a proposed run. Defaults to `false`.
     */
    proposed?: pulumi.Input<boolean>;
    /**
     * ID of the stack on which the run is to be triggered.
     */
    stackId: pulumi.Input<string>;
}
