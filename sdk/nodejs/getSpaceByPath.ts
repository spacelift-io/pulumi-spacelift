// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `spacelift.getSpaceByPath` represents a Spacelift **space** - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space. In contrary to `spacelift.Space`, this resource is identified by a path, not by an ID. For this data source to work, path must be unique. If there are multiple spaces with the same path, this datasource will fail.
 * **Disclaimer:**
 * This datasource can only be used in a stack that resides in a space with inheritance enabled. In addition, the parent spaces (excluding root) must also have inheritance enabled.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const space = spacelift.getSpaceByPath({
 *     spacePath: "root/second space/my space",
 * });
 * export const spaceDescription = space.then(space => space.description);
 * ```
 */
export function getSpaceByPath(args: GetSpaceByPathArgs, opts?: pulumi.InvokeOptions): Promise<GetSpaceByPathResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("spacelift:index/getSpaceByPath:getSpaceByPath", {
        "spacePath": args.spacePath,
    }, opts);
}

/**
 * A collection of arguments for invoking getSpaceByPath.
 */
export interface GetSpaceByPathArgs {
    /**
     * path to the space - a series of space names separated by `/`
     */
    spacePath: string;
}

/**
 * A collection of values returned by getSpaceByPath.
 */
export interface GetSpaceByPathResult {
    /**
     * free-form space description for users
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * indication whether access to this space inherits read access to entities from the parent space
     */
    readonly inheritEntities: boolean;
    /**
     * list of labels describing a space
     */
    readonly labels: string[];
    /**
     * name of the space
     */
    readonly name: string;
    /**
     * immutable ID (slug) of parent space
     */
    readonly parentSpaceId: string;
    /**
     * path to the space - a series of space names separated by `/`
     */
    readonly spacePath: string;
}
/**
 * `spacelift.getSpaceByPath` represents a Spacelift **space** - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space. In contrary to `spacelift.Space`, this resource is identified by a path, not by an ID. For this data source to work, path must be unique. If there are multiple spaces with the same path, this datasource will fail.
 * **Disclaimer:**
 * This datasource can only be used in a stack that resides in a space with inheritance enabled. In addition, the parent spaces (excluding root) must also have inheritance enabled.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const space = spacelift.getSpaceByPath({
 *     spacePath: "root/second space/my space",
 * });
 * export const spaceDescription = space.then(space => space.description);
 * ```
 */
export function getSpaceByPathOutput(args: GetSpaceByPathOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSpaceByPathResult> {
    return pulumi.output(args).apply((a: any) => getSpaceByPath(a, opts))
}

/**
 * A collection of arguments for invoking getSpaceByPath.
 */
export interface GetSpaceByPathOutputArgs {
    /**
     * path to the space - a series of space names separated by `/`
     */
    spacePath: pulumi.Input<string>;
}
