// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `spacelift.AwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.
 *
 * If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).
 *
 * Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import spacelift:index/awsRole:AwsRole k8s-core stack/$STACK_ID
 * ```
 *
 * ```sh
 *  $ pulumi import spacelift:index/awsRole:AwsRole k8s-core module/$MODULE_ID
 * ```
 */
export class AwsRole extends pulumi.CustomResource {
    /**
     * Get an existing AwsRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsRoleState, opts?: pulumi.CustomResourceOptions): AwsRole {
        return new AwsRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/awsRole:AwsRole';

    /**
     * Returns true if the given object is an instance of AwsRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsRole.__pulumiType;
    }

    /**
     * AWS IAM role session duration in seconds
     */
    public readonly durationSeconds!: pulumi.Output<number>;
    /**
     * Custom external ID (works only for private workers).
     */
    public readonly externalId!: pulumi.Output<string | undefined>;
    /**
     * Generate AWS credentials in the private worker. Defaults to `false`.
     */
    public readonly generateCredentialsInWorker!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the module which assumes the AWS IAM role
     */
    public readonly moduleId!: pulumi.Output<string | undefined>;
    /**
     * ARN of the AWS IAM role to attach
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * ID of the stack which assumes the AWS IAM role
     */
    public readonly stackId!: pulumi.Output<string | undefined>;

    /**
     * Create a AwsRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsRoleArgs | AwsRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsRoleState | undefined;
            resourceInputs["durationSeconds"] = state ? state.durationSeconds : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["generateCredentialsInWorker"] = state ? state.generateCredentialsInWorker : undefined;
            resourceInputs["moduleId"] = state ? state.moduleId : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
        } else {
            const args = argsOrState as AwsRoleArgs | undefined;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["durationSeconds"] = args ? args.durationSeconds : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["generateCredentialsInWorker"] = args ? args.generateCredentialsInWorker : undefined;
            resourceInputs["moduleId"] = args ? args.moduleId : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["stackId"] = args ? args.stackId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsRole resources.
 */
export interface AwsRoleState {
    /**
     * AWS IAM role session duration in seconds
     */
    durationSeconds?: pulumi.Input<number>;
    /**
     * Custom external ID (works only for private workers).
     */
    externalId?: pulumi.Input<string>;
    /**
     * Generate AWS credentials in the private worker. Defaults to `false`.
     */
    generateCredentialsInWorker?: pulumi.Input<boolean>;
    /**
     * ID of the module which assumes the AWS IAM role
     */
    moduleId?: pulumi.Input<string>;
    /**
     * ARN of the AWS IAM role to attach
     */
    roleArn?: pulumi.Input<string>;
    /**
     * ID of the stack which assumes the AWS IAM role
     */
    stackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsRole resource.
 */
export interface AwsRoleArgs {
    /**
     * AWS IAM role session duration in seconds
     */
    durationSeconds?: pulumi.Input<number>;
    /**
     * Custom external ID (works only for private workers).
     */
    externalId?: pulumi.Input<string>;
    /**
     * Generate AWS credentials in the private worker. Defaults to `false`.
     */
    generateCredentialsInWorker?: pulumi.Input<boolean>;
    /**
     * ID of the module which assumes the AWS IAM role
     */
    moduleId?: pulumi.Input<string>;
    /**
     * ARN of the AWS IAM role to attach
     */
    roleArn: pulumi.Input<string>;
    /**
     * ID of the stack which assumes the AWS IAM role
     */
    stackId?: pulumi.Input<string>;
}
