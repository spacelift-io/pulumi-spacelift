// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const k8s-module = spacelift.getModule({
 *     moduleId: "k8s-module",
 * });
 * ```
 */
export function getModule(args: GetModuleArgs, opts?: pulumi.InvokeOptions): Promise<GetModuleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("spacelift:index/getModule:getModule", {
        "moduleId": args.moduleId,
    }, opts);
}

/**
 * A collection of arguments for invoking getModule.
 */
export interface GetModuleArgs {
    /**
     * ID (slug) of the module
     */
    moduleId: string;
}

/**
 * A collection of values returned by getModule.
 */
export interface GetModuleResult {
    /**
     * indicates whether this module can administer others
     */
    readonly administrative: boolean;
    /**
     * AWS IAM assume role policy statement setting up trust relationship
     */
    readonly awsAssumeRolePolicyStatement: string;
    /**
     * Azure DevOps VCS settings
     */
    readonly azureDevops: outputs.GetModuleAzureDevop[];
    /**
     * Bitbucket Cloud VCS settings
     */
    readonly bitbucketClouds: outputs.GetModuleBitbucketCloud[];
    /**
     * Bitbucket Datacenter VCS settings
     */
    readonly bitbucketDatacenters: outputs.GetModuleBitbucketDatacenter[];
    /**
     * GitHub branch to apply changes to
     */
    readonly branch: string;
    /**
     * free-form module description for human users (supports Markdown)
     */
    readonly description: string;
    /**
     * Indicates whether local preview versions can be triggered on this Module.
     */
    readonly enableLocalPreview: boolean;
    /**
     * GitHub Enterprise (self-hosted) VCS settings
     */
    readonly githubEnterprises: outputs.GetModuleGithubEnterprise[];
    /**
     * GitLab VCS settings
     */
    readonly gitlabs: outputs.GetModuleGitlab[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly labels: string[];
    /**
     * ID (slug) of the module
     */
    readonly moduleId: string;
    readonly name: string;
    /**
     * Project root is the optional directory relative to the repository root containing the module source code.
     */
    readonly projectRoot: string;
    /**
     * Protect this module from accidental deletion. If set, attempts to delete this module will fail.
     */
    readonly protectFromDeletion: boolean;
    /**
     * Name of the repository, without the owner part
     */
    readonly repository: string;
    /**
     * List of the accounts (subdomains) which should have access to the Module
     */
    readonly sharedAccounts: string[];
    /**
     * ID (slug) of the space the module is in
     */
    readonly spaceId: string;
    readonly terraformProvider: string;
    /**
     * ID of the worker pool to use
     */
    readonly workerPoolId: string;
    /**
     * Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
     */
    readonly workflowTool: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const k8s-module = spacelift.getModule({
 *     moduleId: "k8s-module",
 * });
 * ```
 */
export function getModuleOutput(args: GetModuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetModuleResult> {
    return pulumi.output(args).apply((a: any) => getModule(a, opts))
}

/**
 * A collection of arguments for invoking getModule.
 */
export interface GetModuleOutputArgs {
    /**
     * ID (slug) of the module
     */
    moduleId: pulumi.Input<string>;
}
