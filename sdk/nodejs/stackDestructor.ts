// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `spacelift.StackDestructor` is used to destroy the resources of a Stack before deleting it. `dependsOn` should be used to make sure that all necessery resources (environment variables, roles, integrations, etc.) are still in place when the destruction run is executed. **Note:** Destroying this resource will delete the resources in the stack. If this resource needs to be deleted and the resources in the stacks are to be preserved, ensure that the `deactivated` attribute is set to `true`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const k8s_coreStack = new spacelift.Stack("k8s-coreStack", {});
 * // ...
 * const credentials = new spacelift.EnvironmentVariable("credentials", {});
 * // ...
 * const k8s_coreStackDestructor = new spacelift.StackDestructor("k8s-coreStackDestructor", {stackId: k8s_coreStack.id}, {
 *     dependsOn: [credentials],
 * });
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **stack_id** (String) ID of the stack to delete and destroy on destruction
 *
 * ### Optional
 *
 * - **deactivated** (Boolean) If set to true, destruction won't delete the stack
 * - **id** (String) The ID of this resource.
 * - **timeouts** (Block, Optional) (see below for nested schema)
 *
 * <a id="nestedblock--timeouts"></a>
 * ### Nested Schema for `timeouts`
 *
 * Optional:
 *
 * - **delete** (String)
 */
export class StackDestructor extends pulumi.CustomResource {
    /**
     * Get an existing StackDestructor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackDestructorState, opts?: pulumi.CustomResourceOptions): StackDestructor {
        return new StackDestructor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/stackDestructor:StackDestructor';

    /**
     * Returns true if the given object is an instance of StackDestructor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackDestructor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackDestructor.__pulumiType;
    }

    /**
     * If set to true, destruction won't delete the stack
     */
    public readonly deactivated!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the stack to delete and destroy on destruction
     */
    public readonly stackId!: pulumi.Output<string>;

    /**
     * Create a StackDestructor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackDestructorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackDestructorArgs | StackDestructorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as StackDestructorState | undefined;
            inputs["deactivated"] = state ? state.deactivated : undefined;
            inputs["stackId"] = state ? state.stackId : undefined;
        } else {
            const args = argsOrState as StackDestructorArgs | undefined;
            if ((!args || args.stackId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'stackId'");
            }
            inputs["deactivated"] = args ? args.deactivated : undefined;
            inputs["stackId"] = args ? args.stackId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(StackDestructor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StackDestructor resources.
 */
export interface StackDestructorState {
    /**
     * If set to true, destruction won't delete the stack
     */
    readonly deactivated?: pulumi.Input<boolean>;
    /**
     * ID of the stack to delete and destroy on destruction
     */
    readonly stackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StackDestructor resource.
 */
export interface StackDestructorArgs {
    /**
     * If set to true, destruction won't delete the stack
     */
    readonly deactivated?: pulumi.Input<boolean>;
    /**
     * ID of the stack to delete and destroy on destruction
     */
    readonly stackId: pulumi.Input<string>;
}
