"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `spacelift.ContextAttachment` represents a Spacelift attachment of a single context to a single stack or module, with a predefined priority.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * // With a stack.
 * const apps_k8s_ie = pulumi.output(spacelift.getContextAttachment({
 *     contextId: "prod-k8s-ie",
 *     stackId: "apps-cluster",
 * }, { async: true }));
 * // With a module.
 * const kafka_k8s_ie = pulumi.output(spacelift.getContextAttachment({
 *     contextId: "prod-k8s-ie",
 *     moduleId: "terraform-aws-kafka",
 * }, { async: true }));
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **context_id** (String) ID of the attached context
 *
 * ### Optional
 *
 * - **id** (String) The ID of this resource.
 * - **module_id** (String) ID of the attached module
 * - **stack_id** (String) ID of the attached stack
 *
 * ### Read-Only
 *
 * - **priority** (Number) priority of the context attachment, used in case of conflicts
 */
function getContextAttachment(args, opts) {
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("spacelift:index/getContextAttachment:getContextAttachment", {
        "contextId": args.contextId,
        "moduleId": args.moduleId,
        "stackId": args.stackId,
    }, opts);
}
exports.getContextAttachment = getContextAttachment;
//# sourceMappingURL=getContextAttachment.js.map