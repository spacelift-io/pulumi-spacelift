"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `spacelift.AwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.
 *
 * If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).
 *
 * Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and Run ID as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * // With a module
 * const k8s_module = pulumi.output(spacelift.getAwsRole({
 *     moduleId: "k8s-module",
 * }, { async: true }));
 * // With a stack
 * const k8s_core = pulumi.output(spacelift.getAwsRole({
 *     stackId: "k8s-core",
 * }, { async: true }));
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Optional
 *
 * - **id** (String) The ID of this resource.
 * - **module_id** (String) ID of the module which assumes the AWS IAM role
 * - **stack_id** (String) ID of the stack which assumes the AWS IAM role
 *
 * ### Read-Only
 *
 * - **external_id** (String) Custom external ID (works only for private workers).
 * - **generate_credentials_in_worker** (Boolean) Generate AWS credentials in the private worker
 * - **role_arn** (String) ARN of the AWS IAM role to attach
 */
function getAwsRole(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("spacelift:index/getAwsRole:getAwsRole", {
        "moduleId": args.moduleId,
        "stackId": args.stackId,
    }, opts);
}
exports.getAwsRole = getAwsRole;
//# sourceMappingURL=getAwsRole.js.map