"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class MountedFile extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["checksum"] = state ? state.checksum : undefined;
            inputs["content"] = state ? state.content : undefined;
            inputs["contextId"] = state ? state.contextId : undefined;
            inputs["moduleId"] = state ? state.moduleId : undefined;
            inputs["relativePath"] = state ? state.relativePath : undefined;
            inputs["stackId"] = state ? state.stackId : undefined;
            inputs["writeOnly"] = state ? state.writeOnly : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.content === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.relativePath === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'relativePath'");
            }
            inputs["content"] = args ? args.content : undefined;
            inputs["contextId"] = args ? args.contextId : undefined;
            inputs["moduleId"] = args ? args.moduleId : undefined;
            inputs["relativePath"] = args ? args.relativePath : undefined;
            inputs["stackId"] = args ? args.stackId : undefined;
            inputs["writeOnly"] = args ? args.writeOnly : undefined;
            inputs["checksum"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(MountedFile.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing MountedFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MountedFile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MountedFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MountedFile.__pulumiType;
    }
}
exports.MountedFile = MountedFile;
/** @internal */
MountedFile.__pulumiType = 'spacelift:index/mountedFile:MountedFile';
//# sourceMappingURL=mountedFile.js.map