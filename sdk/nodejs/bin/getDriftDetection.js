"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `spacelift.DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const core_infra_production_drift_detection = pulumi.output(spacelift.getDriftDetection({
 *     stackId: "core-infra-production",
 * }, { async: true }));
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **stack_id** (String) ID of the stack for which to set up drift detection
 *
 * ### Optional
 *
 * - **id** (String) The ID of this resource.
 *
 * ### Read-Only
 *
 * - **reconcile** (Boolean) Whether a tracked run should be triggered when drift is detected.
 * - **schedule** (List of String) List of cron schedule expressions based on which drift detection should be triggered.
 */
function getDriftDetection(args, opts) {
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("spacelift:index/getDriftDetection:getDriftDetection", {
        "stackId": args.stackId,
    }, opts);
}
exports.getDriftDetection = getDriftDetection;
//# sourceMappingURL=getDriftDetection.js.map