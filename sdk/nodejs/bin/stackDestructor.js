"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `spacelift.StackDestructor` is used to destroy the resources of a Stack before deleting it. `dependsOn` should be used to make sure that all necessery resources (environment variables, roles, integrations, etc.) are still in place when the destruction run is executed. **Note:** Destroying this resource will delete the resources in the stack. If this resource needs to be deleted and the resources in the stacks are to be preserved, ensure that the `deactivated` attribute is set to `true`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const k8s_coreStack = new spacelift.Stack("k8s-coreStack", {});
 * // ...
 * const credentials = new spacelift.EnvironmentVariable("credentials", {});
 * // ...
 * const k8s_coreStackDestructor = new spacelift.StackDestructor("k8s-coreStackDestructor", {stackId: k8s_coreStack.id}, {
 *     dependsOn: [credentials],
 * });
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **stack_id** (String) ID of the stack to delete and destroy on destruction
 *
 * ### Optional
 *
 * - **deactivated** (Boolean) If set to true, destruction won't delete the stack
 * - **id** (String) The ID of this resource.
 * - **timeouts** (Block, Optional) (see below for nested schema)
 *
 * <a id="nestedblock--timeouts"></a>
 * ### Nested Schema for `timeouts`
 *
 * Optional:
 *
 * - **delete** (String)
 */
class StackDestructor extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["deactivated"] = state ? state.deactivated : undefined;
            inputs["stackId"] = state ? state.stackId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.stackId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'stackId'");
            }
            inputs["deactivated"] = args ? args.deactivated : undefined;
            inputs["stackId"] = args ? args.stackId : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(StackDestructor.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing StackDestructor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StackDestructor(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StackDestructor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackDestructor.__pulumiType;
    }
}
exports.StackDestructor = StackDestructor;
/** @internal */
StackDestructor.__pulumiType = 'spacelift:index/stackDestructor:StackDestructor';
//# sourceMappingURL=stackDestructor.js.map