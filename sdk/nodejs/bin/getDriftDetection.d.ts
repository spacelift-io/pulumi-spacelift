import * as pulumi from "@pulumi/pulumi";
/**
 * `spacelift.DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const core_infra_production_drift_detection = pulumi.output(spacelift.getDriftDetection({
 *     stackId: "core-infra-production",
 * }, { async: true }));
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **stack_id** (String) ID of the stack for which to set up drift detection
 *
 * ### Optional
 *
 * - **id** (String) The ID of this resource.
 *
 * ### Read-Only
 *
 * - **reconcile** (Boolean) Whether a tracked run should be triggered when drift is detected.
 * - **schedule** (List of String) List of cron schedule expressions based on which drift detection should be triggered.
 */
export declare function getDriftDetection(args: GetDriftDetectionArgs, opts?: pulumi.InvokeOptions): Promise<GetDriftDetectionResult>;
/**
 * A collection of arguments for invoking getDriftDetection.
 */
export interface GetDriftDetectionArgs {
    readonly stackId: string;
}
/**
 * A collection of values returned by getDriftDetection.
 */
export interface GetDriftDetectionResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly reconcile: boolean;
    readonly schedules: string[];
    readonly stackId: string;
}
