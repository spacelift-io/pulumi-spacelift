"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Stack extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["administrative"] = state ? state.administrative : undefined;
            inputs["autodeploy"] = state ? state.autodeploy : undefined;
            inputs["autoretry"] = state ? state.autoretry : undefined;
            inputs["awsAssumeRolePolicyStatement"] = state ? state.awsAssumeRolePolicyStatement : undefined;
            inputs["beforeInits"] = state ? state.beforeInits : undefined;
            inputs["branch"] = state ? state.branch : undefined;
            inputs["cloudformation"] = state ? state.cloudformation : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["gitlab"] = state ? state.gitlab : undefined;
            inputs["importState"] = state ? state.importState : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["manageState"] = state ? state.manageState : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["projectRoot"] = state ? state.projectRoot : undefined;
            inputs["pulumi"] = state ? state.pulumi : undefined;
            inputs["repository"] = state ? state.repository : undefined;
            inputs["runnerImage"] = state ? state.runnerImage : undefined;
            inputs["terraformVersion"] = state ? state.terraformVersion : undefined;
            inputs["terraformWorkspace"] = state ? state.terraformWorkspace : undefined;
            inputs["workerPoolId"] = state ? state.workerPoolId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.branch === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'branch'");
            }
            if ((!args || args.name === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.repository === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'repository'");
            }
            inputs["administrative"] = args ? args.administrative : undefined;
            inputs["autodeploy"] = args ? args.autodeploy : undefined;
            inputs["autoretry"] = args ? args.autoretry : undefined;
            inputs["beforeInits"] = args ? args.beforeInits : undefined;
            inputs["branch"] = args ? args.branch : undefined;
            inputs["cloudformation"] = args ? args.cloudformation : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["gitlab"] = args ? args.gitlab : undefined;
            inputs["importState"] = args ? args.importState : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["manageState"] = args ? args.manageState : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["projectRoot"] = args ? args.projectRoot : undefined;
            inputs["pulumi"] = args ? args.pulumi : undefined;
            inputs["repository"] = args ? args.repository : undefined;
            inputs["runnerImage"] = args ? args.runnerImage : undefined;
            inputs["terraformVersion"] = args ? args.terraformVersion : undefined;
            inputs["terraformWorkspace"] = args ? args.terraformWorkspace : undefined;
            inputs["workerPoolId"] = args ? args.workerPoolId : undefined;
            inputs["awsAssumeRolePolicyStatement"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Stack.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Stack(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }
}
exports.Stack = Stack;
/** @internal */
Stack.__pulumiType = 'spacelift:index/stack:Stack';
//# sourceMappingURL=stack.js.map