"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `spacelift.DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * const core_infra_production = new spacelift.Stack("core-infra-production", {
 *     name: "Core Infrastructure (production)",
 *     branch: "master",
 *     repository: "core-infra",
 * });
 * const core_infra_production_drift_detection = new spacelift.DriftDetection("core-infra-production-drift-detection", {
 *     reconcile: true,
 *     stackId: core_infra_production.id,
 *     schedules: ["*&#47;15 * * * *"],
 * });
 * // Every 15 minutes
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **schedule** (List of String) List of cron schedule expressions based on which drift detection should be triggered.
 * - **stack_id** (String) ID of the stack for which to set up drift detection
 *
 * ### Optional
 *
 * - **id** (String) The ID of this resource.
 * - **reconcile** (Boolean) Whether a tracked run should be triggered when drift is detected.
 *
 * ## Import
 *
 * Import is supported using the following syntax
 *
 * ```sh
 *  $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection stack/$STACK_ID
 * ```
 *
 * ```sh
 *  $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection module/$MODULE_ID
 * ```
 */
class DriftDetection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["reconcile"] = state ? state.reconcile : undefined;
            inputs["schedules"] = state ? state.schedules : undefined;
            inputs["stackId"] = state ? state.stackId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.schedules === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'schedules'");
            }
            if ((!args || args.stackId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'stackId'");
            }
            inputs["reconcile"] = args ? args.reconcile : undefined;
            inputs["schedules"] = args ? args.schedules : undefined;
            inputs["stackId"] = args ? args.stackId : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DriftDetection.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing DriftDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DriftDetection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DriftDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DriftDetection.__pulumiType;
    }
}
exports.DriftDetection = DriftDetection;
/** @internal */
DriftDetection.__pulumiType = 'spacelift:index/driftDetection:DriftDetection';
//# sourceMappingURL=driftDetection.js.map