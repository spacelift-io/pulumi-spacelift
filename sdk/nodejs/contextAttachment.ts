// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `spacelift.ContextAttachment` represents a Spacelift attachment of a single context to a single stack or module, with a predefined priority.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spacelift from "@pulumi/spacelift";
 *
 * // For a module
 * const attachment = new spacelift.ContextAttachment("attachment", {
 *     contextId: "prod-k8s-ie",
 *     moduleId: "k8s-module",
 *     priority: 0,
 * });
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **context_id** (String) ID of the context to attach
 *
 * ### Optional
 *
 * - **id** (String) The ID of this resource.
 * - **module_id** (String) ID of the module to attach the context to
 * - **priority** (Number) Priority of the context attachment, used in case of conflicts
 * - **stack_id** (String) ID of the stack to attach the context to
 *
 * ## Import
 *
 * Import is supported using the following syntax
 *
 * ```sh
 *  $ pulumi import spacelift:index/contextAttachment:ContextAttachment test_stack $CONTEXT_ID/$STACK_ID
 * ```
 */
export class ContextAttachment extends pulumi.CustomResource {
    /**
     * Get an existing ContextAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContextAttachmentState, opts?: pulumi.CustomResourceOptions): ContextAttachment {
        return new ContextAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/contextAttachment:ContextAttachment';

    /**
     * Returns true if the given object is an instance of ContextAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContextAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContextAttachment.__pulumiType;
    }

    /**
     * ID of the context to attach
     */
    public readonly contextId!: pulumi.Output<string>;
    /**
     * ID of the module to attach the context to
     */
    public readonly moduleId!: pulumi.Output<string | undefined>;
    /**
     * Priority of the context attachment, used in case of conflicts
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * ID of the stack to attach the context to
     */
    public readonly stackId!: pulumi.Output<string | undefined>;

    /**
     * Create a ContextAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContextAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContextAttachmentArgs | ContextAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ContextAttachmentState | undefined;
            inputs["contextId"] = state ? state.contextId : undefined;
            inputs["moduleId"] = state ? state.moduleId : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["stackId"] = state ? state.stackId : undefined;
        } else {
            const args = argsOrState as ContextAttachmentArgs | undefined;
            if ((!args || args.contextId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'contextId'");
            }
            inputs["contextId"] = args ? args.contextId : undefined;
            inputs["moduleId"] = args ? args.moduleId : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["stackId"] = args ? args.stackId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ContextAttachment.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContextAttachment resources.
 */
export interface ContextAttachmentState {
    /**
     * ID of the context to attach
     */
    readonly contextId?: pulumi.Input<string>;
    /**
     * ID of the module to attach the context to
     */
    readonly moduleId?: pulumi.Input<string>;
    /**
     * Priority of the context attachment, used in case of conflicts
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * ID of the stack to attach the context to
     */
    readonly stackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContextAttachment resource.
 */
export interface ContextAttachmentArgs {
    /**
     * ID of the context to attach
     */
    readonly contextId: pulumi.Input<string>;
    /**
     * ID of the module to attach the context to
     */
    readonly moduleId?: pulumi.Input<string>;
    /**
     * Priority of the context attachment, used in case of conflicts
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * ID of the stack to attach the context to
     */
    readonly stackId?: pulumi.Input<string>;
}
