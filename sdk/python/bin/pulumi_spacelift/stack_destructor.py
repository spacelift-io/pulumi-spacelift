# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['StackDestructor']


class StackDestructor(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deactivated: Optional[pulumi.Input[bool]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        `StackDestructor` is used to destroy the resources of a Stack before deleting it. `depends_on` should be used to make sure that all necessery resources (environment variables, roles, integrations, etc.) are still in place when the destruction run is executed. **Note:** Destroying this resource will delete the resources in the stack. If this resource needs to be deleted and the resources in the stacks are to be preserved, ensure that the `deactivated` attribute is set to `true`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        k8s_core_stack = spacelift.Stack("k8s-coreStack")
        # ...
        credentials = spacelift.EnvironmentVariable("credentials")
        # ...
        k8s_core_stack_destructor = spacelift.StackDestructor("k8s-coreStackDestructor", stack_id=k8s_core_stack.id,
        opts=pulumi.ResourceOptions(depends_on=[credentials]))
        ```

        <!-- schema generated by tfplugindocs -->
        ## Schema

        ### Required

        - **stack_id** (String) ID of the stack to delete and destroy on destruction

        ### Optional

        - **deactivated** (Boolean) If set to true, destruction won't delete the stack
        - **id** (String) The ID of this resource.
        - **timeouts** (Block, Optional) (see below for nested schema)

        <a id="nestedblock--timeouts"></a>
        ### Nested Schema for `timeouts`

        Optional:

        - **delete** (String)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] deactivated: If set to true, destruction won't delete the stack
        :param pulumi.Input[str] stack_id: ID of the stack to delete and destroy on destruction
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['deactivated'] = deactivated
            if stack_id is None and not opts.urn:
                raise TypeError("Missing required property 'stack_id'")
            __props__['stack_id'] = stack_id
        super(StackDestructor, __self__).__init__(
            'spacelift:index/stackDestructor:StackDestructor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            deactivated: Optional[pulumi.Input[bool]] = None,
            stack_id: Optional[pulumi.Input[str]] = None) -> 'StackDestructor':
        """
        Get an existing StackDestructor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] deactivated: If set to true, destruction won't delete the stack
        :param pulumi.Input[str] stack_id: ID of the stack to delete and destroy on destruction
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["deactivated"] = deactivated
        __props__["stack_id"] = stack_id
        return StackDestructor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def deactivated(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to true, destruction won't delete the stack
        """
        return pulumi.get(self, "deactivated")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[str]:
        """
        ID of the stack to delete and destroy on destruction
        """
        return pulumi.get(self, "stack_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

