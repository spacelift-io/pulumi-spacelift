# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'GetAwsRoleResult',
    'AwaitableGetAwsRoleResult',
    'get_aws_role',
]

@pulumi.output_type
class GetAwsRoleResult:
    """
    A collection of values returned by getAwsRole.
    """
    def __init__(__self__, external_id=None, generate_credentials_in_worker=None, id=None, module_id=None, role_arn=None, stack_id=None):
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if generate_credentials_in_worker and not isinstance(generate_credentials_in_worker, bool):
            raise TypeError("Expected argument 'generate_credentials_in_worker' to be a bool")
        pulumi.set(__self__, "generate_credentials_in_worker", generate_credentials_in_worker)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if module_id and not isinstance(module_id, str):
            raise TypeError("Expected argument 'module_id' to be a str")
        pulumi.set(__self__, "module_id", module_id)
        if role_arn and not isinstance(role_arn, str):
            raise TypeError("Expected argument 'role_arn' to be a str")
        pulumi.set(__self__, "role_arn", role_arn)
        if stack_id and not isinstance(stack_id, str):
            raise TypeError("Expected argument 'stack_id' to be a str")
        pulumi.set(__self__, "stack_id", stack_id)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="generateCredentialsInWorker")
    def generate_credentials_in_worker(self) -> bool:
        return pulumi.get(self, "generate_credentials_in_worker")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[str]:
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[str]:
        return pulumi.get(self, "stack_id")


class AwaitableGetAwsRoleResult(GetAwsRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAwsRoleResult(
            external_id=self.external_id,
            generate_credentials_in_worker=self.generate_credentials_in_worker,
            id=self.id,
            module_id=self.module_id,
            role_arn=self.role_arn,
            stack_id=self.stack_id)


def get_aws_role(module_id: Optional[str] = None,
                 stack_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAwsRoleResult:
    """
    `AwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.

    If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).

    Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and Run ID as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    k8s_module = spacelift.get_aws_role(module_id="k8s-module")
    k8s_core = spacelift.get_aws_role(stack_id="k8s-core")
    ```

    <!-- schema generated by tfplugindocs -->
    ## Schema

    ### Optional

    - **id** (String) The ID of this resource.
    - **module_id** (String) ID of the module which assumes the AWS IAM role
    - **stack_id** (String) ID of the stack which assumes the AWS IAM role

    ### Read-Only

    - **external_id** (String) Custom external ID (works only for private workers).
    - **generate_credentials_in_worker** (Boolean) Generate AWS credentials in the private worker
    - **role_arn** (String) ARN of the AWS IAM role to attach
    """
    __args__ = dict()
    __args__['moduleId'] = module_id
    __args__['stackId'] = stack_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('spacelift:index/getAwsRole:getAwsRole', __args__, opts=opts, typ=GetAwsRoleResult).value

    return AwaitableGetAwsRoleResult(
        external_id=__ret__.external_id,
        generate_credentials_in_worker=__ret__.generate_credentials_in_worker,
        id=__ret__.id,
        module_id=__ret__.module_id,
        role_arn=__ret__.role_arn,
        stack_id=__ret__.stack_id)
