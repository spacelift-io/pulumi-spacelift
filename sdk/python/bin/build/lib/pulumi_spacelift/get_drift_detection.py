# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'GetDriftDetectionResult',
    'AwaitableGetDriftDetectionResult',
    'get_drift_detection',
]

@pulumi.output_type
class GetDriftDetectionResult:
    """
    A collection of values returned by getDriftDetection.
    """
    def __init__(__self__, id=None, reconcile=None, schedules=None, stack_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if reconcile and not isinstance(reconcile, bool):
            raise TypeError("Expected argument 'reconcile' to be a bool")
        pulumi.set(__self__, "reconcile", reconcile)
        if schedules and not isinstance(schedules, list):
            raise TypeError("Expected argument 'schedules' to be a list")
        pulumi.set(__self__, "schedules", schedules)
        if stack_id and not isinstance(stack_id, str):
            raise TypeError("Expected argument 'stack_id' to be a str")
        pulumi.set(__self__, "stack_id", stack_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def reconcile(self) -> bool:
        return pulumi.get(self, "reconcile")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence[str]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> str:
        return pulumi.get(self, "stack_id")


class AwaitableGetDriftDetectionResult(GetDriftDetectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDriftDetectionResult(
            id=self.id,
            reconcile=self.reconcile,
            schedules=self.schedules,
            stack_id=self.stack_id)


def get_drift_detection(stack_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDriftDetectionResult:
    """
    `DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    core_infra_production_drift_detection = spacelift.get_drift_detection(stack_id="core-infra-production")
    ```

    <!-- schema generated by tfplugindocs -->
    ## Schema

    ### Required

    - **stack_id** (String) ID of the stack for which to set up drift detection

    ### Optional

    - **id** (String) The ID of this resource.

    ### Read-Only

    - **reconcile** (Boolean) Whether a tracked run should be triggered when drift is detected.
    - **schedule** (List of String) List of cron schedule expressions based on which drift detection should be triggered.
    """
    __args__ = dict()
    __args__['stackId'] = stack_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('spacelift:index/getDriftDetection:getDriftDetection', __args__, opts=opts, typ=GetDriftDetectionResult).value

    return AwaitableGetDriftDetectionResult(
        id=__ret__.id,
        reconcile=__ret__.reconcile,
        schedules=__ret__.schedules,
        stack_id=__ret__.stack_id)
