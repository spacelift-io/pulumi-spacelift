# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs

__all__ = [
    'GetModuleResult',
    'AwaitableGetModuleResult',
    'get_module',
]

@pulumi.output_type
class GetModuleResult:
    """
    A collection of values returned by getModule.
    """
    def __init__(__self__, administrative=None, aws_assume_role_policy_statement=None, branch=None, description=None, gitlabs=None, id=None, labels=None, module_id=None, repository=None, shared_accounts=None, worker_pool_id=None):
        if administrative and not isinstance(administrative, bool):
            raise TypeError("Expected argument 'administrative' to be a bool")
        pulumi.set(__self__, "administrative", administrative)
        if aws_assume_role_policy_statement and not isinstance(aws_assume_role_policy_statement, str):
            raise TypeError("Expected argument 'aws_assume_role_policy_statement' to be a str")
        pulumi.set(__self__, "aws_assume_role_policy_statement", aws_assume_role_policy_statement)
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        pulumi.set(__self__, "branch", branch)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if gitlabs and not isinstance(gitlabs, list):
            raise TypeError("Expected argument 'gitlabs' to be a list")
        pulumi.set(__self__, "gitlabs", gitlabs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if module_id and not isinstance(module_id, str):
            raise TypeError("Expected argument 'module_id' to be a str")
        pulumi.set(__self__, "module_id", module_id)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)
        if shared_accounts and not isinstance(shared_accounts, list):
            raise TypeError("Expected argument 'shared_accounts' to be a list")
        pulumi.set(__self__, "shared_accounts", shared_accounts)
        if worker_pool_id and not isinstance(worker_pool_id, str):
            raise TypeError("Expected argument 'worker_pool_id' to be a str")
        pulumi.set(__self__, "worker_pool_id", worker_pool_id)

    @property
    @pulumi.getter
    def administrative(self) -> bool:
        return pulumi.get(self, "administrative")

    @property
    @pulumi.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> str:
        return pulumi.get(self, "aws_assume_role_policy_statement")

    @property
    @pulumi.getter
    def branch(self) -> str:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def gitlabs(self) -> Sequence['outputs.GetModuleGitlabResult']:
        return pulumi.get(self, "gitlabs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> str:
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="sharedAccounts")
    def shared_accounts(self) -> Sequence[str]:
        return pulumi.get(self, "shared_accounts")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> str:
        return pulumi.get(self, "worker_pool_id")


class AwaitableGetModuleResult(GetModuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetModuleResult(
            administrative=self.administrative,
            aws_assume_role_policy_statement=self.aws_assume_role_policy_statement,
            branch=self.branch,
            description=self.description,
            gitlabs=self.gitlabs,
            id=self.id,
            labels=self.labels,
            module_id=self.module_id,
            repository=self.repository,
            shared_accounts=self.shared_accounts,
            worker_pool_id=self.worker_pool_id)


def get_module(module_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetModuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['moduleId'] = module_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('spacelift:index/getModule:getModule', __args__, opts=opts, typ=GetModuleResult).value

    return AwaitableGetModuleResult(
        administrative=__ret__.administrative,
        aws_assume_role_policy_statement=__ret__.aws_assume_role_policy_statement,
        branch=__ret__.branch,
        description=__ret__.description,
        gitlabs=__ret__.gitlabs,
        id=__ret__.id,
        labels=__ret__.labels,
        module_id=__ret__.module_id,
        repository=__ret__.repository,
        shared_accounts=__ret__.shared_accounts,
        worker_pool_id=__ret__.worker_pool_id)
