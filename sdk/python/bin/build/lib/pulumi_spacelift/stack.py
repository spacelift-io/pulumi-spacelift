# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Stack']


class Stack(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 administrative: Optional[pulumi.Input[bool]] = None,
                 autodeploy: Optional[pulumi.Input[bool]] = None,
                 autoretry: Optional[pulumi.Input[bool]] = None,
                 before_inits: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 cloudformation: Optional[pulumi.Input[pulumi.InputType['StackCloudformationArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gitlab: Optional[pulumi.Input[pulumi.InputType['StackGitlabArgs']]] = None,
                 import_state: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 manage_state: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_root: Optional[pulumi.Input[str]] = None,
                 pulumi: Optional[pulumi.Input[pulumi.InputType['StackPulumiArgs']]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 runner_image: Optional[pulumi.Input[str]] = None,
                 terraform_version: Optional[pulumi.Input[str]] = None,
                 terraform_workspace: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Stack resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] administrative: Indicates whether this stack can manage others
        :param pulumi.Input[bool] autodeploy: Indicates whether changes to this stack can be automatically deployed
        :param pulumi.Input[bool] autoretry: Indicates whether obsolete proposed changes should automatically be retried
        :param pulumi.Input[Sequence[pulumi.Input[str]]] before_inits: List of before-init scripts
        :param pulumi.Input[str] branch: GitHub branch to apply changes to
        :param pulumi.Input[pulumi.InputType['StackCloudformationArgs']] cloudformation: CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        :param pulumi.Input[str] description: Free-form stack description for users
        :param pulumi.Input[str] import_state: State file to upload when creating a new stack
        :param pulumi.Input[bool] manage_state: Determines if Spacelift should manage state for this stack
        :param pulumi.Input[str] name: Name of the stack - should be unique in one account
        :param pulumi.Input[str] project_root: Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        :param pulumi.Input[pulumi.InputType['StackPulumiArgs']] pulumi: Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        :param pulumi.Input[str] repository: Name of the repository, without the owner part
        :param pulumi.Input[str] runner_image: Name of the Docker image used to process Runs
        :param pulumi.Input[str] terraform_version: Terraform version to use
        :param pulumi.Input[str] terraform_workspace: Terraform workspace to select
        :param pulumi.Input[str] worker_pool_id: ID of the worker pool to use
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['administrative'] = administrative
            __props__['autodeploy'] = autodeploy
            __props__['autoretry'] = autoretry
            __props__['before_inits'] = before_inits
            if branch is None and not opts.urn:
                raise TypeError("Missing required property 'branch'")
            __props__['branch'] = branch
            __props__['cloudformation'] = cloudformation
            __props__['description'] = description
            __props__['gitlab'] = gitlab
            __props__['import_state'] = import_state
            __props__['labels'] = labels
            __props__['manage_state'] = manage_state
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['project_root'] = project_root
            __props__['pulumi'] = pulumi
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__['repository'] = repository
            __props__['runner_image'] = runner_image
            __props__['terraform_version'] = terraform_version
            __props__['terraform_workspace'] = terraform_workspace
            __props__['worker_pool_id'] = worker_pool_id
            __props__['aws_assume_role_policy_statement'] = None
        super(Stack, __self__).__init__(
            'spacelift:index/stack:Stack',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            administrative: Optional[pulumi.Input[bool]] = None,
            autodeploy: Optional[pulumi.Input[bool]] = None,
            autoretry: Optional[pulumi.Input[bool]] = None,
            aws_assume_role_policy_statement: Optional[pulumi.Input[str]] = None,
            before_inits: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            branch: Optional[pulumi.Input[str]] = None,
            cloudformation: Optional[pulumi.Input[pulumi.InputType['StackCloudformationArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            gitlab: Optional[pulumi.Input[pulumi.InputType['StackGitlabArgs']]] = None,
            import_state: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            manage_state: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_root: Optional[pulumi.Input[str]] = None,
            pulumi: Optional[pulumi.Input[pulumi.InputType['StackPulumiArgs']]] = None,
            repository: Optional[pulumi.Input[str]] = None,
            runner_image: Optional[pulumi.Input[str]] = None,
            terraform_version: Optional[pulumi.Input[str]] = None,
            terraform_workspace: Optional[pulumi.Input[str]] = None,
            worker_pool_id: Optional[pulumi.Input[str]] = None) -> 'Stack':
        """
        Get an existing Stack resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] administrative: Indicates whether this stack can manage others
        :param pulumi.Input[bool] autodeploy: Indicates whether changes to this stack can be automatically deployed
        :param pulumi.Input[bool] autoretry: Indicates whether obsolete proposed changes should automatically be retried
        :param pulumi.Input[str] aws_assume_role_policy_statement: AWS IAM assume role policy statement setting up trust relationship
        :param pulumi.Input[Sequence[pulumi.Input[str]]] before_inits: List of before-init scripts
        :param pulumi.Input[str] branch: GitHub branch to apply changes to
        :param pulumi.Input[pulumi.InputType['StackCloudformationArgs']] cloudformation: CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        :param pulumi.Input[str] description: Free-form stack description for users
        :param pulumi.Input[str] import_state: State file to upload when creating a new stack
        :param pulumi.Input[bool] manage_state: Determines if Spacelift should manage state for this stack
        :param pulumi.Input[str] name: Name of the stack - should be unique in one account
        :param pulumi.Input[str] project_root: Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        :param pulumi.Input[pulumi.InputType['StackPulumiArgs']] pulumi: Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        :param pulumi.Input[str] repository: Name of the repository, without the owner part
        :param pulumi.Input[str] runner_image: Name of the Docker image used to process Runs
        :param pulumi.Input[str] terraform_version: Terraform version to use
        :param pulumi.Input[str] terraform_workspace: Terraform workspace to select
        :param pulumi.Input[str] worker_pool_id: ID of the worker pool to use
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["administrative"] = administrative
        __props__["autodeploy"] = autodeploy
        __props__["autoretry"] = autoretry
        __props__["aws_assume_role_policy_statement"] = aws_assume_role_policy_statement
        __props__["before_inits"] = before_inits
        __props__["branch"] = branch
        __props__["cloudformation"] = cloudformation
        __props__["description"] = description
        __props__["gitlab"] = gitlab
        __props__["import_state"] = import_state
        __props__["labels"] = labels
        __props__["manage_state"] = manage_state
        __props__["name"] = name
        __props__["project_root"] = project_root
        __props__["pulumi"] = pulumi
        __props__["repository"] = repository
        __props__["runner_image"] = runner_image
        __props__["terraform_version"] = terraform_version
        __props__["terraform_workspace"] = terraform_workspace
        __props__["worker_pool_id"] = worker_pool_id
        return Stack(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def administrative(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether this stack can manage others
        """
        return pulumi.get(self, "administrative")

    @property
    @pulumi.getter
    def autodeploy(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether changes to this stack can be automatically deployed
        """
        return pulumi.get(self, "autodeploy")

    @property
    @pulumi.getter
    def autoretry(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether obsolete proposed changes should automatically be retried
        """
        return pulumi.get(self, "autoretry")

    @property
    @pulumi.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> pulumi.Output[str]:
        """
        AWS IAM assume role policy statement setting up trust relationship
        """
        return pulumi.get(self, "aws_assume_role_policy_statement")

    @property
    @pulumi.getter(name="beforeInits")
    def before_inits(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of before-init scripts
        """
        return pulumi.get(self, "before_inits")

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Output[str]:
        """
        GitHub branch to apply changes to
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def cloudformation(self) -> pulumi.Output[Optional['outputs.StackCloudformation']]:
        """
        CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        """
        return pulumi.get(self, "cloudformation")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Free-form stack description for users
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def gitlab(self) -> pulumi.Output[Optional['outputs.StackGitlab']]:
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="importState")
    def import_state(self) -> pulumi.Output[Optional[str]]:
        """
        State file to upload when creating a new stack
        """
        return pulumi.get(self, "import_state")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="manageState")
    def manage_state(self) -> pulumi.Output[Optional[bool]]:
        """
        Determines if Spacelift should manage state for this stack
        """
        return pulumi.get(self, "manage_state")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the stack - should be unique in one account
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectRoot")
    def project_root(self) -> pulumi.Output[Optional[str]]:
        """
        Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        """
        return pulumi.get(self, "project_root")

    @property
    @pulumi.getter
    def pulumi(self) -> pulumi.Output[Optional['outputs.StackPulumi']]:
        """
        Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        """
        return pulumi.get(self, "pulumi")

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Output[str]:
        """
        Name of the repository, without the owner part
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="runnerImage")
    def runner_image(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the Docker image used to process Runs
        """
        return pulumi.get(self, "runner_image")

    @property
    @pulumi.getter(name="terraformVersion")
    def terraform_version(self) -> pulumi.Output[Optional[str]]:
        """
        Terraform version to use
        """
        return pulumi.get(self, "terraform_version")

    @property
    @pulumi.getter(name="terraformWorkspace")
    def terraform_workspace(self) -> pulumi.Output[Optional[str]]:
        """
        Terraform workspace to select
        """
        return pulumi.get(self, "terraform_workspace")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the worker pool to use
        """
        return pulumi.get(self, "worker_pool_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

