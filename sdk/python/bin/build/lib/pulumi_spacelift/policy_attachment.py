# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['PolicyAttachment']


class PolicyAttachment(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        `PolicyAttachment` represents a relationship between a policy (`Policy`) and a stack (`Stack`) or module (`Module`). Each policy can only be attached to a stack/module once. `LOGIN` policies are the exception because they apply globally and not to individual stacks/modules. An attempt to attach one will fail.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        no_weekend_deploys_policy = spacelift.Policy("no-weekend-deploysPolicy",
            name="Let's not deploy any changes over the weekend",
            body=(lambda path: open(path).read())("policies/no-weekend-deploys.rego"),
            type="PLAN")
        core_infra_production = spacelift.Stack("core-infra-production",
            name="Core Infrastructure (production)",
            branch="master",
            repository="core-infra")
        no_weekend_deploys_policy_attachment = spacelift.PolicyAttachment("no-weekend-deploysPolicyAttachment",
            policy_id=no_weekend_deploys_policy.id,
            stack_id=core_infra_production.id)
        ```

        <!-- schema generated by tfplugindocs -->
        ## Schema

        ### Required

        - **policy_id** (String) ID of the policy to attach

        ### Optional

        - **id** (String) The ID of this resource.
        - **module_id** (String) ID of the module to attach the policy to
        - **stack_id** (String) ID of the stack to attach the policy to

        ## Import

        Import is supported using the following syntax

        ```sh
         $ pulumi import spacelift:index/policyAttachment:PolicyAttachment no-weekend-deploys $POLICY_ID/$STACK_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] module_id: ID of the module to attach the policy to
        :param pulumi.Input[str] policy_id: ID of the policy to attach
        :param pulumi.Input[str] stack_id: ID of the stack to attach the policy to
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['module_id'] = module_id
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__['policy_id'] = policy_id
            __props__['stack_id'] = stack_id
        super(PolicyAttachment, __self__).__init__(
            'spacelift:index/policyAttachment:PolicyAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            module_id: Optional[pulumi.Input[str]] = None,
            policy_id: Optional[pulumi.Input[str]] = None,
            stack_id: Optional[pulumi.Input[str]] = None) -> 'PolicyAttachment':
        """
        Get an existing PolicyAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] module_id: ID of the module to attach the policy to
        :param pulumi.Input[str] policy_id: ID of the policy to attach
        :param pulumi.Input[str] stack_id: ID of the stack to attach the policy to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["module_id"] = module_id
        __props__["policy_id"] = policy_id
        __props__["stack_id"] = stack_id
        return PolicyAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the module to attach the policy to
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[str]:
        """
        ID of the policy to attach
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the stack to attach the policy to
        """
        return pulumi.get(self, "stack_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

