# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs

__all__ = [
    'GetStackResult',
    'AwaitableGetStackResult',
    'get_stack',
]

@pulumi.output_type
class GetStackResult:
    """
    A collection of values returned by getStack.
    """
    def __init__(__self__, administrative=None, autodeploy=None, autoretry=None, aws_assume_role_policy_statement=None, before_inits=None, branch=None, cloudformations=None, description=None, gitlabs=None, id=None, labels=None, manage_state=None, name=None, project_root=None, pulumis=None, repository=None, runner_image=None, stack_id=None, terraform_version=None, terraform_workspace=None, worker_pool_id=None):
        if administrative and not isinstance(administrative, bool):
            raise TypeError("Expected argument 'administrative' to be a bool")
        pulumi.set(__self__, "administrative", administrative)
        if autodeploy and not isinstance(autodeploy, bool):
            raise TypeError("Expected argument 'autodeploy' to be a bool")
        pulumi.set(__self__, "autodeploy", autodeploy)
        if autoretry and not isinstance(autoretry, bool):
            raise TypeError("Expected argument 'autoretry' to be a bool")
        pulumi.set(__self__, "autoretry", autoretry)
        if aws_assume_role_policy_statement and not isinstance(aws_assume_role_policy_statement, str):
            raise TypeError("Expected argument 'aws_assume_role_policy_statement' to be a str")
        pulumi.set(__self__, "aws_assume_role_policy_statement", aws_assume_role_policy_statement)
        if before_inits and not isinstance(before_inits, list):
            raise TypeError("Expected argument 'before_inits' to be a list")
        pulumi.set(__self__, "before_inits", before_inits)
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        pulumi.set(__self__, "branch", branch)
        if cloudformations and not isinstance(cloudformations, list):
            raise TypeError("Expected argument 'cloudformations' to be a list")
        pulumi.set(__self__, "cloudformations", cloudformations)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if gitlabs and not isinstance(gitlabs, list):
            raise TypeError("Expected argument 'gitlabs' to be a list")
        pulumi.set(__self__, "gitlabs", gitlabs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if manage_state and not isinstance(manage_state, bool):
            raise TypeError("Expected argument 'manage_state' to be a bool")
        pulumi.set(__self__, "manage_state", manage_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_root and not isinstance(project_root, str):
            raise TypeError("Expected argument 'project_root' to be a str")
        pulumi.set(__self__, "project_root", project_root)
        if pulumis and not isinstance(pulumis, list):
            raise TypeError("Expected argument 'pulumis' to be a list")
        pulumi.set(__self__, "pulumis", pulumis)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)
        if runner_image and not isinstance(runner_image, str):
            raise TypeError("Expected argument 'runner_image' to be a str")
        pulumi.set(__self__, "runner_image", runner_image)
        if stack_id and not isinstance(stack_id, str):
            raise TypeError("Expected argument 'stack_id' to be a str")
        pulumi.set(__self__, "stack_id", stack_id)
        if terraform_version and not isinstance(terraform_version, str):
            raise TypeError("Expected argument 'terraform_version' to be a str")
        pulumi.set(__self__, "terraform_version", terraform_version)
        if terraform_workspace and not isinstance(terraform_workspace, str):
            raise TypeError("Expected argument 'terraform_workspace' to be a str")
        pulumi.set(__self__, "terraform_workspace", terraform_workspace)
        if worker_pool_id and not isinstance(worker_pool_id, str):
            raise TypeError("Expected argument 'worker_pool_id' to be a str")
        pulumi.set(__self__, "worker_pool_id", worker_pool_id)

    @property
    @pulumi.getter
    def administrative(self) -> bool:
        return pulumi.get(self, "administrative")

    @property
    @pulumi.getter
    def autodeploy(self) -> bool:
        return pulumi.get(self, "autodeploy")

    @property
    @pulumi.getter
    def autoretry(self) -> bool:
        return pulumi.get(self, "autoretry")

    @property
    @pulumi.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> str:
        return pulumi.get(self, "aws_assume_role_policy_statement")

    @property
    @pulumi.getter(name="beforeInits")
    def before_inits(self) -> Sequence[str]:
        return pulumi.get(self, "before_inits")

    @property
    @pulumi.getter
    def branch(self) -> str:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def cloudformations(self) -> Sequence['outputs.GetStackCloudformationResult']:
        return pulumi.get(self, "cloudformations")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def gitlabs(self) -> Sequence['outputs.GetStackGitlabResult']:
        return pulumi.get(self, "gitlabs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="manageState")
    def manage_state(self) -> bool:
        return pulumi.get(self, "manage_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectRoot")
    def project_root(self) -> str:
        return pulumi.get(self, "project_root")

    @property
    @pulumi.getter
    def pulumis(self) -> Sequence['outputs.GetStackPulumiResult']:
        return pulumi.get(self, "pulumis")

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="runnerImage")
    def runner_image(self) -> str:
        return pulumi.get(self, "runner_image")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> str:
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter(name="terraformVersion")
    def terraform_version(self) -> str:
        return pulumi.get(self, "terraform_version")

    @property
    @pulumi.getter(name="terraformWorkspace")
    def terraform_workspace(self) -> str:
        return pulumi.get(self, "terraform_workspace")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> str:
        return pulumi.get(self, "worker_pool_id")


class AwaitableGetStackResult(GetStackResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStackResult(
            administrative=self.administrative,
            autodeploy=self.autodeploy,
            autoretry=self.autoretry,
            aws_assume_role_policy_statement=self.aws_assume_role_policy_statement,
            before_inits=self.before_inits,
            branch=self.branch,
            cloudformations=self.cloudformations,
            description=self.description,
            gitlabs=self.gitlabs,
            id=self.id,
            labels=self.labels,
            manage_state=self.manage_state,
            name=self.name,
            project_root=self.project_root,
            pulumis=self.pulumis,
            repository=self.repository,
            runner_image=self.runner_image,
            stack_id=self.stack_id,
            terraform_version=self.terraform_version,
            terraform_workspace=self.terraform_workspace,
            worker_pool_id=self.worker_pool_id)


def get_stack(stack_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStackResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['stackId'] = stack_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('spacelift:index/getStack:getStack', __args__, opts=opts, typ=GetStackResult).value

    return AwaitableGetStackResult(
        administrative=__ret__.administrative,
        autodeploy=__ret__.autodeploy,
        autoretry=__ret__.autoretry,
        aws_assume_role_policy_statement=__ret__.aws_assume_role_policy_statement,
        before_inits=__ret__.before_inits,
        branch=__ret__.branch,
        cloudformations=__ret__.cloudformations,
        description=__ret__.description,
        gitlabs=__ret__.gitlabs,
        id=__ret__.id,
        labels=__ret__.labels,
        manage_state=__ret__.manage_state,
        name=__ret__.name,
        project_root=__ret__.project_root,
        pulumis=__ret__.pulumis,
        repository=__ret__.repository,
        runner_image=__ret__.runner_image,
        stack_id=__ret__.stack_id,
        terraform_version=__ret__.terraform_version,
        terraform_workspace=__ret__.terraform_workspace,
        worker_pool_id=__ret__.worker_pool_id)
