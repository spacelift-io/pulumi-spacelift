# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StackArgs', 'Stack']

@pulumilib.input_type
class StackArgs:
    def __init__(__self__, *,
                 branch: pulumilib.Input[str],
                 repository: pulumilib.Input[str],
                 administrative: Optional[pulumilib.Input[bool]] = None,
                 after_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 ansible: Optional[pulumilib.Input['StackAnsibleArgs']] = None,
                 autodeploy: Optional[pulumilib.Input[bool]] = None,
                 autoretry: Optional[pulumilib.Input[bool]] = None,
                 azure_devops: Optional[pulumilib.Input['StackAzureDevopsArgs']] = None,
                 before_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 bitbucket_cloud: Optional[pulumilib.Input['StackBitbucketCloudArgs']] = None,
                 bitbucket_datacenter: Optional[pulumilib.Input['StackBitbucketDatacenterArgs']] = None,
                 cloudformation: Optional[pulumilib.Input['StackCloudformationArgs']] = None,
                 description: Optional[pulumilib.Input[str]] = None,
                 enable_local_preview: Optional[pulumilib.Input[bool]] = None,
                 github_action_deploy: Optional[pulumilib.Input[bool]] = None,
                 github_enterprise: Optional[pulumilib.Input['StackGithubEnterpriseArgs']] = None,
                 gitlab: Optional[pulumilib.Input['StackGitlabArgs']] = None,
                 import_state: Optional[pulumilib.Input[str]] = None,
                 import_state_file: Optional[pulumilib.Input[str]] = None,
                 kubernetes: Optional[pulumilib.Input['StackKubernetesArgs']] = None,
                 labels: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 manage_state: Optional[pulumilib.Input[bool]] = None,
                 name: Optional[pulumilib.Input[str]] = None,
                 project_root: Optional[pulumilib.Input[str]] = None,
                 protect_from_deletion: Optional[pulumilib.Input[bool]] = None,
                 pulumi: Optional[pulumilib.Input['StackPulumiArgs']] = None,
                 runner_image: Optional[pulumilib.Input[str]] = None,
                 showcase: Optional[pulumilib.Input['StackShowcaseArgs']] = None,
                 slug: Optional[pulumilib.Input[str]] = None,
                 space_id: Optional[pulumilib.Input[str]] = None,
                 terraform_smart_sanitization: Optional[pulumilib.Input[bool]] = None,
                 terraform_version: Optional[pulumilib.Input[str]] = None,
                 terraform_workspace: Optional[pulumilib.Input[str]] = None,
                 worker_pool_id: Optional[pulumilib.Input[str]] = None):
        """
        The set of arguments for constructing a Stack resource.
        :param pulumilib.Input[str] branch: GitHub branch to apply changes to
        :param pulumilib.Input[str] repository: Name of the repository, without the owner part
        :param pulumilib.Input[bool] administrative: Indicates whether this stack can manage others. Defaults to `false`.
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_applies: List of after-apply scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_destroys: List of after-destroy scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_inits: List of after-init scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_performs: List of after-perform scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_plans: List of after-plan scripts
        :param pulumilib.Input['StackAnsibleArgs'] ansible: Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        :param pulumilib.Input[bool] autodeploy: Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
        :param pulumilib.Input[bool] autoretry: Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
        :param pulumilib.Input['StackAzureDevopsArgs'] azure_devops: Azure DevOps VCS settings
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_applies: List of before-apply scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_destroys: List of before-destroy scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_inits: List of before-init scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_performs: List of before-perform scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_plans: List of before-plan scripts
        :param pulumilib.Input['StackBitbucketCloudArgs'] bitbucket_cloud: Bitbucket Cloud VCS settings
        :param pulumilib.Input['StackBitbucketDatacenterArgs'] bitbucket_datacenter: Bitbucket Datacenter VCS settings
        :param pulumilib.Input['StackCloudformationArgs'] cloudformation: CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        :param pulumilib.Input[str] description: Free-form stack description for users
        :param pulumilib.Input[bool] enable_local_preview: Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
        :param pulumilib.Input[bool] github_action_deploy: Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
        :param pulumilib.Input['StackGithubEnterpriseArgs'] github_enterprise: GitHub Enterprise (self-hosted) VCS settings
        :param pulumilib.Input['StackGitlabArgs'] gitlab: GitLab VCS settings
        :param pulumilib.Input[str] import_state: State file to upload when creating a new stack
        :param pulumilib.Input[str] import_state_file: Path to the state file to upload when creating a new stack
        :param pulumilib.Input['StackKubernetesArgs'] kubernetes: Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        :param pulumilib.Input[bool] manage_state: Determines if Spacelift should manage state for this stack. Defaults to `true`.
        :param pulumilib.Input[str] name: Name of the stack - should be unique in one account
        :param pulumilib.Input[str] project_root: Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        :param pulumilib.Input[bool] protect_from_deletion: Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
        :param pulumilib.Input['StackPulumiArgs'] pulumi: Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        :param pulumilib.Input[str] runner_image: Name of the Docker image used to process Runs
        :param pulumilib.Input[str] slug: Allows setting the custom ID (slug) for the stack
        :param pulumilib.Input[str] space_id: ID (slug) of the space the stack is in
        :param pulumilib.Input[bool] terraform_smart_sanitization: Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
               and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
               Defaults to `false`.
        :param pulumilib.Input[str] terraform_version: Terraform version to use
        :param pulumilib.Input[str] terraform_workspace: Terraform workspace to select
        :param pulumilib.Input[str] worker_pool_id: ID of the worker pool to use
        """
        pulumilib.set(__self__, "branch", branch)
        pulumilib.set(__self__, "repository", repository)
        if administrative is not None:
            pulumilib.set(__self__, "administrative", administrative)
        if after_applies is not None:
            pulumilib.set(__self__, "after_applies", after_applies)
        if after_destroys is not None:
            pulumilib.set(__self__, "after_destroys", after_destroys)
        if after_inits is not None:
            pulumilib.set(__self__, "after_inits", after_inits)
        if after_performs is not None:
            pulumilib.set(__self__, "after_performs", after_performs)
        if after_plans is not None:
            pulumilib.set(__self__, "after_plans", after_plans)
        if ansible is not None:
            pulumilib.set(__self__, "ansible", ansible)
        if autodeploy is not None:
            pulumilib.set(__self__, "autodeploy", autodeploy)
        if autoretry is not None:
            pulumilib.set(__self__, "autoretry", autoretry)
        if azure_devops is not None:
            pulumilib.set(__self__, "azure_devops", azure_devops)
        if before_applies is not None:
            pulumilib.set(__self__, "before_applies", before_applies)
        if before_destroys is not None:
            pulumilib.set(__self__, "before_destroys", before_destroys)
        if before_inits is not None:
            pulumilib.set(__self__, "before_inits", before_inits)
        if before_performs is not None:
            pulumilib.set(__self__, "before_performs", before_performs)
        if before_plans is not None:
            pulumilib.set(__self__, "before_plans", before_plans)
        if bitbucket_cloud is not None:
            pulumilib.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_datacenter is not None:
            pulumilib.set(__self__, "bitbucket_datacenter", bitbucket_datacenter)
        if cloudformation is not None:
            pulumilib.set(__self__, "cloudformation", cloudformation)
        if description is not None:
            pulumilib.set(__self__, "description", description)
        if enable_local_preview is not None:
            pulumilib.set(__self__, "enable_local_preview", enable_local_preview)
        if github_action_deploy is not None:
            pulumilib.set(__self__, "github_action_deploy", github_action_deploy)
        if github_enterprise is not None:
            pulumilib.set(__self__, "github_enterprise", github_enterprise)
        if gitlab is not None:
            pulumilib.set(__self__, "gitlab", gitlab)
        if import_state is not None:
            pulumilib.set(__self__, "import_state", import_state)
        if import_state_file is not None:
            pulumilib.set(__self__, "import_state_file", import_state_file)
        if kubernetes is not None:
            pulumilib.set(__self__, "kubernetes", kubernetes)
        if labels is not None:
            pulumilib.set(__self__, "labels", labels)
        if manage_state is not None:
            pulumilib.set(__self__, "manage_state", manage_state)
        if name is not None:
            pulumilib.set(__self__, "name", name)
        if project_root is not None:
            pulumilib.set(__self__, "project_root", project_root)
        if protect_from_deletion is not None:
            pulumilib.set(__self__, "protect_from_deletion", protect_from_deletion)
        if pulumi is not None:
            pulumilib.set(__self__, "pulumi", pulumi)
        if runner_image is not None:
            pulumilib.set(__self__, "runner_image", runner_image)
        if showcase is not None:
            pulumilib.set(__self__, "showcase", showcase)
        if slug is not None:
            pulumilib.set(__self__, "slug", slug)
        if space_id is not None:
            pulumilib.set(__self__, "space_id", space_id)
        if terraform_smart_sanitization is not None:
            pulumilib.set(__self__, "terraform_smart_sanitization", terraform_smart_sanitization)
        if terraform_version is not None:
            pulumilib.set(__self__, "terraform_version", terraform_version)
        if terraform_workspace is not None:
            pulumilib.set(__self__, "terraform_workspace", terraform_workspace)
        if worker_pool_id is not None:
            pulumilib.set(__self__, "worker_pool_id", worker_pool_id)

    @property
    @pulumilib.getter
    def branch(self) -> pulumilib.Input[str]:
        """
        GitHub branch to apply changes to
        """
        return pulumilib.get(self, "branch")

    @branch.setter
    def branch(self, value: pulumilib.Input[str]):
        pulumilib.set(self, "branch", value)

    @property
    @pulumilib.getter
    def repository(self) -> pulumilib.Input[str]:
        """
        Name of the repository, without the owner part
        """
        return pulumilib.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumilib.Input[str]):
        pulumilib.set(self, "repository", value)

    @property
    @pulumilib.getter
    def administrative(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether this stack can manage others. Defaults to `false`.
        """
        return pulumilib.get(self, "administrative")

    @administrative.setter
    def administrative(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "administrative", value)

    @property
    @pulumilib.getter(name="afterApplies")
    def after_applies(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-apply scripts
        """
        return pulumilib.get(self, "after_applies")

    @after_applies.setter
    def after_applies(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_applies", value)

    @property
    @pulumilib.getter(name="afterDestroys")
    def after_destroys(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-destroy scripts
        """
        return pulumilib.get(self, "after_destroys")

    @after_destroys.setter
    def after_destroys(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_destroys", value)

    @property
    @pulumilib.getter(name="afterInits")
    def after_inits(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-init scripts
        """
        return pulumilib.get(self, "after_inits")

    @after_inits.setter
    def after_inits(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_inits", value)

    @property
    @pulumilib.getter(name="afterPerforms")
    def after_performs(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-perform scripts
        """
        return pulumilib.get(self, "after_performs")

    @after_performs.setter
    def after_performs(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_performs", value)

    @property
    @pulumilib.getter(name="afterPlans")
    def after_plans(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-plan scripts
        """
        return pulumilib.get(self, "after_plans")

    @after_plans.setter
    def after_plans(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_plans", value)

    @property
    @pulumilib.getter
    def ansible(self) -> Optional[pulumilib.Input['StackAnsibleArgs']]:
        """
        Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        """
        return pulumilib.get(self, "ansible")

    @ansible.setter
    def ansible(self, value: Optional[pulumilib.Input['StackAnsibleArgs']]):
        pulumilib.set(self, "ansible", value)

    @property
    @pulumilib.getter
    def autodeploy(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
        """
        return pulumilib.get(self, "autodeploy")

    @autodeploy.setter
    def autodeploy(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "autodeploy", value)

    @property
    @pulumilib.getter
    def autoretry(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
        """
        return pulumilib.get(self, "autoretry")

    @autoretry.setter
    def autoretry(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "autoretry", value)

    @property
    @pulumilib.getter(name="azureDevops")
    def azure_devops(self) -> Optional[pulumilib.Input['StackAzureDevopsArgs']]:
        """
        Azure DevOps VCS settings
        """
        return pulumilib.get(self, "azure_devops")

    @azure_devops.setter
    def azure_devops(self, value: Optional[pulumilib.Input['StackAzureDevopsArgs']]):
        pulumilib.set(self, "azure_devops", value)

    @property
    @pulumilib.getter(name="beforeApplies")
    def before_applies(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-apply scripts
        """
        return pulumilib.get(self, "before_applies")

    @before_applies.setter
    def before_applies(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_applies", value)

    @property
    @pulumilib.getter(name="beforeDestroys")
    def before_destroys(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-destroy scripts
        """
        return pulumilib.get(self, "before_destroys")

    @before_destroys.setter
    def before_destroys(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_destroys", value)

    @property
    @pulumilib.getter(name="beforeInits")
    def before_inits(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-init scripts
        """
        return pulumilib.get(self, "before_inits")

    @before_inits.setter
    def before_inits(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_inits", value)

    @property
    @pulumilib.getter(name="beforePerforms")
    def before_performs(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-perform scripts
        """
        return pulumilib.get(self, "before_performs")

    @before_performs.setter
    def before_performs(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_performs", value)

    @property
    @pulumilib.getter(name="beforePlans")
    def before_plans(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-plan scripts
        """
        return pulumilib.get(self, "before_plans")

    @before_plans.setter
    def before_plans(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_plans", value)

    @property
    @pulumilib.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional[pulumilib.Input['StackBitbucketCloudArgs']]:
        """
        Bitbucket Cloud VCS settings
        """
        return pulumilib.get(self, "bitbucket_cloud")

    @bitbucket_cloud.setter
    def bitbucket_cloud(self, value: Optional[pulumilib.Input['StackBitbucketCloudArgs']]):
        pulumilib.set(self, "bitbucket_cloud", value)

    @property
    @pulumilib.getter(name="bitbucketDatacenter")
    def bitbucket_datacenter(self) -> Optional[pulumilib.Input['StackBitbucketDatacenterArgs']]:
        """
        Bitbucket Datacenter VCS settings
        """
        return pulumilib.get(self, "bitbucket_datacenter")

    @bitbucket_datacenter.setter
    def bitbucket_datacenter(self, value: Optional[pulumilib.Input['StackBitbucketDatacenterArgs']]):
        pulumilib.set(self, "bitbucket_datacenter", value)

    @property
    @pulumilib.getter
    def cloudformation(self) -> Optional[pulumilib.Input['StackCloudformationArgs']]:
        """
        CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        """
        return pulumilib.get(self, "cloudformation")

    @cloudformation.setter
    def cloudformation(self, value: Optional[pulumilib.Input['StackCloudformationArgs']]):
        pulumilib.set(self, "cloudformation", value)

    @property
    @pulumilib.getter
    def description(self) -> Optional[pulumilib.Input[str]]:
        """
        Free-form stack description for users
        """
        return pulumilib.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "description", value)

    @property
    @pulumilib.getter(name="enableLocalPreview")
    def enable_local_preview(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
        """
        return pulumilib.get(self, "enable_local_preview")

    @enable_local_preview.setter
    def enable_local_preview(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "enable_local_preview", value)

    @property
    @pulumilib.getter(name="githubActionDeploy")
    def github_action_deploy(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
        """
        return pulumilib.get(self, "github_action_deploy")

    @github_action_deploy.setter
    def github_action_deploy(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "github_action_deploy", value)

    @property
    @pulumilib.getter(name="githubEnterprise")
    def github_enterprise(self) -> Optional[pulumilib.Input['StackGithubEnterpriseArgs']]:
        """
        GitHub Enterprise (self-hosted) VCS settings
        """
        return pulumilib.get(self, "github_enterprise")

    @github_enterprise.setter
    def github_enterprise(self, value: Optional[pulumilib.Input['StackGithubEnterpriseArgs']]):
        pulumilib.set(self, "github_enterprise", value)

    @property
    @pulumilib.getter
    def gitlab(self) -> Optional[pulumilib.Input['StackGitlabArgs']]:
        """
        GitLab VCS settings
        """
        return pulumilib.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumilib.Input['StackGitlabArgs']]):
        pulumilib.set(self, "gitlab", value)

    @property
    @pulumilib.getter(name="importState")
    def import_state(self) -> Optional[pulumilib.Input[str]]:
        """
        State file to upload when creating a new stack
        """
        return pulumilib.get(self, "import_state")

    @import_state.setter
    def import_state(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "import_state", value)

    @property
    @pulumilib.getter(name="importStateFile")
    def import_state_file(self) -> Optional[pulumilib.Input[str]]:
        """
        Path to the state file to upload when creating a new stack
        """
        return pulumilib.get(self, "import_state_file")

    @import_state_file.setter
    def import_state_file(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "import_state_file", value)

    @property
    @pulumilib.getter
    def kubernetes(self) -> Optional[pulumilib.Input['StackKubernetesArgs']]:
        """
        Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        """
        return pulumilib.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumilib.Input['StackKubernetesArgs']]):
        pulumilib.set(self, "kubernetes", value)

    @property
    @pulumilib.getter
    def labels(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        return pulumilib.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "labels", value)

    @property
    @pulumilib.getter(name="manageState")
    def manage_state(self) -> Optional[pulumilib.Input[bool]]:
        """
        Determines if Spacelift should manage state for this stack. Defaults to `true`.
        """
        return pulumilib.get(self, "manage_state")

    @manage_state.setter
    def manage_state(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "manage_state", value)

    @property
    @pulumilib.getter
    def name(self) -> Optional[pulumilib.Input[str]]:
        """
        Name of the stack - should be unique in one account
        """
        return pulumilib.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "name", value)

    @property
    @pulumilib.getter(name="projectRoot")
    def project_root(self) -> Optional[pulumilib.Input[str]]:
        """
        Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        """
        return pulumilib.get(self, "project_root")

    @project_root.setter
    def project_root(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "project_root", value)

    @property
    @pulumilib.getter(name="protectFromDeletion")
    def protect_from_deletion(self) -> Optional[pulumilib.Input[bool]]:
        """
        Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
        """
        return pulumilib.get(self, "protect_from_deletion")

    @protect_from_deletion.setter
    def protect_from_deletion(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "protect_from_deletion", value)

    @property
    @pulumilib.getter
    def pulumi(self) -> Optional[pulumilib.Input['StackPulumiArgs']]:
        """
        Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        """
        return pulumilib.get(self, "pulumi")

    @pulumilib.setter
    def pulumi(self, value: Optional[pulumilib.Input['StackPulumiArgs']]):
        pulumilib.set(self, "pulumi", value)

    @property
    @pulumilib.getter(name="runnerImage")
    def runner_image(self) -> Optional[pulumilib.Input[str]]:
        """
        Name of the Docker image used to process Runs
        """
        return pulumilib.get(self, "runner_image")

    @runner_image.setter
    def runner_image(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "runner_image", value)

    @property
    @pulumilib.getter
    def showcase(self) -> Optional[pulumilib.Input['StackShowcaseArgs']]:
        return pulumilib.get(self, "showcase")

    @showcase.setter
    def showcase(self, value: Optional[pulumilib.Input['StackShowcaseArgs']]):
        pulumilib.set(self, "showcase", value)

    @property
    @pulumilib.getter
    def slug(self) -> Optional[pulumilib.Input[str]]:
        """
        Allows setting the custom ID (slug) for the stack
        """
        return pulumilib.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "slug", value)

    @property
    @pulumilib.getter(name="spaceId")
    def space_id(self) -> Optional[pulumilib.Input[str]]:
        """
        ID (slug) of the space the stack is in
        """
        return pulumilib.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "space_id", value)

    @property
    @pulumilib.getter(name="terraformSmartSanitization")
    def terraform_smart_sanitization(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
        and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
        Defaults to `false`.
        """
        return pulumilib.get(self, "terraform_smart_sanitization")

    @terraform_smart_sanitization.setter
    def terraform_smart_sanitization(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "terraform_smart_sanitization", value)

    @property
    @pulumilib.getter(name="terraformVersion")
    def terraform_version(self) -> Optional[pulumilib.Input[str]]:
        """
        Terraform version to use
        """
        return pulumilib.get(self, "terraform_version")

    @terraform_version.setter
    def terraform_version(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "terraform_version", value)

    @property
    @pulumilib.getter(name="terraformWorkspace")
    def terraform_workspace(self) -> Optional[pulumilib.Input[str]]:
        """
        Terraform workspace to select
        """
        return pulumilib.get(self, "terraform_workspace")

    @terraform_workspace.setter
    def terraform_workspace(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "terraform_workspace", value)

    @property
    @pulumilib.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumilib.Input[str]]:
        """
        ID of the worker pool to use
        """
        return pulumilib.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "worker_pool_id", value)


@pulumilib.input_type
class _StackState:
    def __init__(__self__, *,
                 administrative: Optional[pulumilib.Input[bool]] = None,
                 after_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 ansible: Optional[pulumilib.Input['StackAnsibleArgs']] = None,
                 autodeploy: Optional[pulumilib.Input[bool]] = None,
                 autoretry: Optional[pulumilib.Input[bool]] = None,
                 aws_assume_role_policy_statement: Optional[pulumilib.Input[str]] = None,
                 azure_devops: Optional[pulumilib.Input['StackAzureDevopsArgs']] = None,
                 before_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 bitbucket_cloud: Optional[pulumilib.Input['StackBitbucketCloudArgs']] = None,
                 bitbucket_datacenter: Optional[pulumilib.Input['StackBitbucketDatacenterArgs']] = None,
                 branch: Optional[pulumilib.Input[str]] = None,
                 cloudformation: Optional[pulumilib.Input['StackCloudformationArgs']] = None,
                 description: Optional[pulumilib.Input[str]] = None,
                 enable_local_preview: Optional[pulumilib.Input[bool]] = None,
                 github_action_deploy: Optional[pulumilib.Input[bool]] = None,
                 github_enterprise: Optional[pulumilib.Input['StackGithubEnterpriseArgs']] = None,
                 gitlab: Optional[pulumilib.Input['StackGitlabArgs']] = None,
                 import_state: Optional[pulumilib.Input[str]] = None,
                 import_state_file: Optional[pulumilib.Input[str]] = None,
                 kubernetes: Optional[pulumilib.Input['StackKubernetesArgs']] = None,
                 labels: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 manage_state: Optional[pulumilib.Input[bool]] = None,
                 name: Optional[pulumilib.Input[str]] = None,
                 project_root: Optional[pulumilib.Input[str]] = None,
                 protect_from_deletion: Optional[pulumilib.Input[bool]] = None,
                 pulumi: Optional[pulumilib.Input['StackPulumiArgs']] = None,
                 repository: Optional[pulumilib.Input[str]] = None,
                 runner_image: Optional[pulumilib.Input[str]] = None,
                 showcase: Optional[pulumilib.Input['StackShowcaseArgs']] = None,
                 slug: Optional[pulumilib.Input[str]] = None,
                 space_id: Optional[pulumilib.Input[str]] = None,
                 terraform_smart_sanitization: Optional[pulumilib.Input[bool]] = None,
                 terraform_version: Optional[pulumilib.Input[str]] = None,
                 terraform_workspace: Optional[pulumilib.Input[str]] = None,
                 worker_pool_id: Optional[pulumilib.Input[str]] = None):
        """
        Input properties used for looking up and filtering Stack resources.
        :param pulumilib.Input[bool] administrative: Indicates whether this stack can manage others. Defaults to `false`.
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_applies: List of after-apply scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_destroys: List of after-destroy scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_inits: List of after-init scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_performs: List of after-perform scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_plans: List of after-plan scripts
        :param pulumilib.Input['StackAnsibleArgs'] ansible: Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        :param pulumilib.Input[bool] autodeploy: Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
        :param pulumilib.Input[bool] autoretry: Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
        :param pulumilib.Input[str] aws_assume_role_policy_statement: AWS IAM assume role policy statement setting up trust relationship
        :param pulumilib.Input['StackAzureDevopsArgs'] azure_devops: Azure DevOps VCS settings
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_applies: List of before-apply scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_destroys: List of before-destroy scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_inits: List of before-init scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_performs: List of before-perform scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_plans: List of before-plan scripts
        :param pulumilib.Input['StackBitbucketCloudArgs'] bitbucket_cloud: Bitbucket Cloud VCS settings
        :param pulumilib.Input['StackBitbucketDatacenterArgs'] bitbucket_datacenter: Bitbucket Datacenter VCS settings
        :param pulumilib.Input[str] branch: GitHub branch to apply changes to
        :param pulumilib.Input['StackCloudformationArgs'] cloudformation: CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        :param pulumilib.Input[str] description: Free-form stack description for users
        :param pulumilib.Input[bool] enable_local_preview: Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
        :param pulumilib.Input[bool] github_action_deploy: Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
        :param pulumilib.Input['StackGithubEnterpriseArgs'] github_enterprise: GitHub Enterprise (self-hosted) VCS settings
        :param pulumilib.Input['StackGitlabArgs'] gitlab: GitLab VCS settings
        :param pulumilib.Input[str] import_state: State file to upload when creating a new stack
        :param pulumilib.Input[str] import_state_file: Path to the state file to upload when creating a new stack
        :param pulumilib.Input['StackKubernetesArgs'] kubernetes: Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        :param pulumilib.Input[bool] manage_state: Determines if Spacelift should manage state for this stack. Defaults to `true`.
        :param pulumilib.Input[str] name: Name of the stack - should be unique in one account
        :param pulumilib.Input[str] project_root: Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        :param pulumilib.Input[bool] protect_from_deletion: Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
        :param pulumilib.Input['StackPulumiArgs'] pulumi: Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        :param pulumilib.Input[str] repository: Name of the repository, without the owner part
        :param pulumilib.Input[str] runner_image: Name of the Docker image used to process Runs
        :param pulumilib.Input[str] slug: Allows setting the custom ID (slug) for the stack
        :param pulumilib.Input[str] space_id: ID (slug) of the space the stack is in
        :param pulumilib.Input[bool] terraform_smart_sanitization: Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
               and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
               Defaults to `false`.
        :param pulumilib.Input[str] terraform_version: Terraform version to use
        :param pulumilib.Input[str] terraform_workspace: Terraform workspace to select
        :param pulumilib.Input[str] worker_pool_id: ID of the worker pool to use
        """
        if administrative is not None:
            pulumilib.set(__self__, "administrative", administrative)
        if after_applies is not None:
            pulumilib.set(__self__, "after_applies", after_applies)
        if after_destroys is not None:
            pulumilib.set(__self__, "after_destroys", after_destroys)
        if after_inits is not None:
            pulumilib.set(__self__, "after_inits", after_inits)
        if after_performs is not None:
            pulumilib.set(__self__, "after_performs", after_performs)
        if after_plans is not None:
            pulumilib.set(__self__, "after_plans", after_plans)
        if ansible is not None:
            pulumilib.set(__self__, "ansible", ansible)
        if autodeploy is not None:
            pulumilib.set(__self__, "autodeploy", autodeploy)
        if autoretry is not None:
            pulumilib.set(__self__, "autoretry", autoretry)
        if aws_assume_role_policy_statement is not None:
            pulumilib.set(__self__, "aws_assume_role_policy_statement", aws_assume_role_policy_statement)
        if azure_devops is not None:
            pulumilib.set(__self__, "azure_devops", azure_devops)
        if before_applies is not None:
            pulumilib.set(__self__, "before_applies", before_applies)
        if before_destroys is not None:
            pulumilib.set(__self__, "before_destroys", before_destroys)
        if before_inits is not None:
            pulumilib.set(__self__, "before_inits", before_inits)
        if before_performs is not None:
            pulumilib.set(__self__, "before_performs", before_performs)
        if before_plans is not None:
            pulumilib.set(__self__, "before_plans", before_plans)
        if bitbucket_cloud is not None:
            pulumilib.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_datacenter is not None:
            pulumilib.set(__self__, "bitbucket_datacenter", bitbucket_datacenter)
        if branch is not None:
            pulumilib.set(__self__, "branch", branch)
        if cloudformation is not None:
            pulumilib.set(__self__, "cloudformation", cloudformation)
        if description is not None:
            pulumilib.set(__self__, "description", description)
        if enable_local_preview is not None:
            pulumilib.set(__self__, "enable_local_preview", enable_local_preview)
        if github_action_deploy is not None:
            pulumilib.set(__self__, "github_action_deploy", github_action_deploy)
        if github_enterprise is not None:
            pulumilib.set(__self__, "github_enterprise", github_enterprise)
        if gitlab is not None:
            pulumilib.set(__self__, "gitlab", gitlab)
        if import_state is not None:
            pulumilib.set(__self__, "import_state", import_state)
        if import_state_file is not None:
            pulumilib.set(__self__, "import_state_file", import_state_file)
        if kubernetes is not None:
            pulumilib.set(__self__, "kubernetes", kubernetes)
        if labels is not None:
            pulumilib.set(__self__, "labels", labels)
        if manage_state is not None:
            pulumilib.set(__self__, "manage_state", manage_state)
        if name is not None:
            pulumilib.set(__self__, "name", name)
        if project_root is not None:
            pulumilib.set(__self__, "project_root", project_root)
        if protect_from_deletion is not None:
            pulumilib.set(__self__, "protect_from_deletion", protect_from_deletion)
        if pulumi is not None:
            pulumilib.set(__self__, "pulumi", pulumi)
        if repository is not None:
            pulumilib.set(__self__, "repository", repository)
        if runner_image is not None:
            pulumilib.set(__self__, "runner_image", runner_image)
        if showcase is not None:
            pulumilib.set(__self__, "showcase", showcase)
        if slug is not None:
            pulumilib.set(__self__, "slug", slug)
        if space_id is not None:
            pulumilib.set(__self__, "space_id", space_id)
        if terraform_smart_sanitization is not None:
            pulumilib.set(__self__, "terraform_smart_sanitization", terraform_smart_sanitization)
        if terraform_version is not None:
            pulumilib.set(__self__, "terraform_version", terraform_version)
        if terraform_workspace is not None:
            pulumilib.set(__self__, "terraform_workspace", terraform_workspace)
        if worker_pool_id is not None:
            pulumilib.set(__self__, "worker_pool_id", worker_pool_id)

    @property
    @pulumilib.getter
    def administrative(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether this stack can manage others. Defaults to `false`.
        """
        return pulumilib.get(self, "administrative")

    @administrative.setter
    def administrative(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "administrative", value)

    @property
    @pulumilib.getter(name="afterApplies")
    def after_applies(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-apply scripts
        """
        return pulumilib.get(self, "after_applies")

    @after_applies.setter
    def after_applies(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_applies", value)

    @property
    @pulumilib.getter(name="afterDestroys")
    def after_destroys(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-destroy scripts
        """
        return pulumilib.get(self, "after_destroys")

    @after_destroys.setter
    def after_destroys(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_destroys", value)

    @property
    @pulumilib.getter(name="afterInits")
    def after_inits(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-init scripts
        """
        return pulumilib.get(self, "after_inits")

    @after_inits.setter
    def after_inits(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_inits", value)

    @property
    @pulumilib.getter(name="afterPerforms")
    def after_performs(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-perform scripts
        """
        return pulumilib.get(self, "after_performs")

    @after_performs.setter
    def after_performs(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_performs", value)

    @property
    @pulumilib.getter(name="afterPlans")
    def after_plans(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of after-plan scripts
        """
        return pulumilib.get(self, "after_plans")

    @after_plans.setter
    def after_plans(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "after_plans", value)

    @property
    @pulumilib.getter
    def ansible(self) -> Optional[pulumilib.Input['StackAnsibleArgs']]:
        """
        Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        """
        return pulumilib.get(self, "ansible")

    @ansible.setter
    def ansible(self, value: Optional[pulumilib.Input['StackAnsibleArgs']]):
        pulumilib.set(self, "ansible", value)

    @property
    @pulumilib.getter
    def autodeploy(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
        """
        return pulumilib.get(self, "autodeploy")

    @autodeploy.setter
    def autodeploy(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "autodeploy", value)

    @property
    @pulumilib.getter
    def autoretry(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
        """
        return pulumilib.get(self, "autoretry")

    @autoretry.setter
    def autoretry(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "autoretry", value)

    @property
    @pulumilib.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> Optional[pulumilib.Input[str]]:
        """
        AWS IAM assume role policy statement setting up trust relationship
        """
        return pulumilib.get(self, "aws_assume_role_policy_statement")

    @aws_assume_role_policy_statement.setter
    def aws_assume_role_policy_statement(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "aws_assume_role_policy_statement", value)

    @property
    @pulumilib.getter(name="azureDevops")
    def azure_devops(self) -> Optional[pulumilib.Input['StackAzureDevopsArgs']]:
        """
        Azure DevOps VCS settings
        """
        return pulumilib.get(self, "azure_devops")

    @azure_devops.setter
    def azure_devops(self, value: Optional[pulumilib.Input['StackAzureDevopsArgs']]):
        pulumilib.set(self, "azure_devops", value)

    @property
    @pulumilib.getter(name="beforeApplies")
    def before_applies(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-apply scripts
        """
        return pulumilib.get(self, "before_applies")

    @before_applies.setter
    def before_applies(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_applies", value)

    @property
    @pulumilib.getter(name="beforeDestroys")
    def before_destroys(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-destroy scripts
        """
        return pulumilib.get(self, "before_destroys")

    @before_destroys.setter
    def before_destroys(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_destroys", value)

    @property
    @pulumilib.getter(name="beforeInits")
    def before_inits(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-init scripts
        """
        return pulumilib.get(self, "before_inits")

    @before_inits.setter
    def before_inits(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_inits", value)

    @property
    @pulumilib.getter(name="beforePerforms")
    def before_performs(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-perform scripts
        """
        return pulumilib.get(self, "before_performs")

    @before_performs.setter
    def before_performs(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_performs", value)

    @property
    @pulumilib.getter(name="beforePlans")
    def before_plans(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        """
        List of before-plan scripts
        """
        return pulumilib.get(self, "before_plans")

    @before_plans.setter
    def before_plans(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "before_plans", value)

    @property
    @pulumilib.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional[pulumilib.Input['StackBitbucketCloudArgs']]:
        """
        Bitbucket Cloud VCS settings
        """
        return pulumilib.get(self, "bitbucket_cloud")

    @bitbucket_cloud.setter
    def bitbucket_cloud(self, value: Optional[pulumilib.Input['StackBitbucketCloudArgs']]):
        pulumilib.set(self, "bitbucket_cloud", value)

    @property
    @pulumilib.getter(name="bitbucketDatacenter")
    def bitbucket_datacenter(self) -> Optional[pulumilib.Input['StackBitbucketDatacenterArgs']]:
        """
        Bitbucket Datacenter VCS settings
        """
        return pulumilib.get(self, "bitbucket_datacenter")

    @bitbucket_datacenter.setter
    def bitbucket_datacenter(self, value: Optional[pulumilib.Input['StackBitbucketDatacenterArgs']]):
        pulumilib.set(self, "bitbucket_datacenter", value)

    @property
    @pulumilib.getter
    def branch(self) -> Optional[pulumilib.Input[str]]:
        """
        GitHub branch to apply changes to
        """
        return pulumilib.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "branch", value)

    @property
    @pulumilib.getter
    def cloudformation(self) -> Optional[pulumilib.Input['StackCloudformationArgs']]:
        """
        CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        """
        return pulumilib.get(self, "cloudformation")

    @cloudformation.setter
    def cloudformation(self, value: Optional[pulumilib.Input['StackCloudformationArgs']]):
        pulumilib.set(self, "cloudformation", value)

    @property
    @pulumilib.getter
    def description(self) -> Optional[pulumilib.Input[str]]:
        """
        Free-form stack description for users
        """
        return pulumilib.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "description", value)

    @property
    @pulumilib.getter(name="enableLocalPreview")
    def enable_local_preview(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
        """
        return pulumilib.get(self, "enable_local_preview")

    @enable_local_preview.setter
    def enable_local_preview(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "enable_local_preview", value)

    @property
    @pulumilib.getter(name="githubActionDeploy")
    def github_action_deploy(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
        """
        return pulumilib.get(self, "github_action_deploy")

    @github_action_deploy.setter
    def github_action_deploy(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "github_action_deploy", value)

    @property
    @pulumilib.getter(name="githubEnterprise")
    def github_enterprise(self) -> Optional[pulumilib.Input['StackGithubEnterpriseArgs']]:
        """
        GitHub Enterprise (self-hosted) VCS settings
        """
        return pulumilib.get(self, "github_enterprise")

    @github_enterprise.setter
    def github_enterprise(self, value: Optional[pulumilib.Input['StackGithubEnterpriseArgs']]):
        pulumilib.set(self, "github_enterprise", value)

    @property
    @pulumilib.getter
    def gitlab(self) -> Optional[pulumilib.Input['StackGitlabArgs']]:
        """
        GitLab VCS settings
        """
        return pulumilib.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumilib.Input['StackGitlabArgs']]):
        pulumilib.set(self, "gitlab", value)

    @property
    @pulumilib.getter(name="importState")
    def import_state(self) -> Optional[pulumilib.Input[str]]:
        """
        State file to upload when creating a new stack
        """
        return pulumilib.get(self, "import_state")

    @import_state.setter
    def import_state(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "import_state", value)

    @property
    @pulumilib.getter(name="importStateFile")
    def import_state_file(self) -> Optional[pulumilib.Input[str]]:
        """
        Path to the state file to upload when creating a new stack
        """
        return pulumilib.get(self, "import_state_file")

    @import_state_file.setter
    def import_state_file(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "import_state_file", value)

    @property
    @pulumilib.getter
    def kubernetes(self) -> Optional[pulumilib.Input['StackKubernetesArgs']]:
        """
        Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        """
        return pulumilib.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumilib.Input['StackKubernetesArgs']]):
        pulumilib.set(self, "kubernetes", value)

    @property
    @pulumilib.getter
    def labels(self) -> Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]:
        return pulumilib.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]]):
        pulumilib.set(self, "labels", value)

    @property
    @pulumilib.getter(name="manageState")
    def manage_state(self) -> Optional[pulumilib.Input[bool]]:
        """
        Determines if Spacelift should manage state for this stack. Defaults to `true`.
        """
        return pulumilib.get(self, "manage_state")

    @manage_state.setter
    def manage_state(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "manage_state", value)

    @property
    @pulumilib.getter
    def name(self) -> Optional[pulumilib.Input[str]]:
        """
        Name of the stack - should be unique in one account
        """
        return pulumilib.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "name", value)

    @property
    @pulumilib.getter(name="projectRoot")
    def project_root(self) -> Optional[pulumilib.Input[str]]:
        """
        Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        """
        return pulumilib.get(self, "project_root")

    @project_root.setter
    def project_root(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "project_root", value)

    @property
    @pulumilib.getter(name="protectFromDeletion")
    def protect_from_deletion(self) -> Optional[pulumilib.Input[bool]]:
        """
        Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
        """
        return pulumilib.get(self, "protect_from_deletion")

    @protect_from_deletion.setter
    def protect_from_deletion(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "protect_from_deletion", value)

    @property
    @pulumilib.getter
    def pulumi(self) -> Optional[pulumilib.Input['StackPulumiArgs']]:
        """
        Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        """
        return pulumilib.get(self, "pulumi")

    @pulumilib.setter
    def pulumi(self, value: Optional[pulumilib.Input['StackPulumiArgs']]):
        pulumilib.set(self, "pulumi", value)

    @property
    @pulumilib.getter
    def repository(self) -> Optional[pulumilib.Input[str]]:
        """
        Name of the repository, without the owner part
        """
        return pulumilib.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "repository", value)

    @property
    @pulumilib.getter(name="runnerImage")
    def runner_image(self) -> Optional[pulumilib.Input[str]]:
        """
        Name of the Docker image used to process Runs
        """
        return pulumilib.get(self, "runner_image")

    @runner_image.setter
    def runner_image(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "runner_image", value)

    @property
    @pulumilib.getter
    def showcase(self) -> Optional[pulumilib.Input['StackShowcaseArgs']]:
        return pulumilib.get(self, "showcase")

    @showcase.setter
    def showcase(self, value: Optional[pulumilib.Input['StackShowcaseArgs']]):
        pulumilib.set(self, "showcase", value)

    @property
    @pulumilib.getter
    def slug(self) -> Optional[pulumilib.Input[str]]:
        """
        Allows setting the custom ID (slug) for the stack
        """
        return pulumilib.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "slug", value)

    @property
    @pulumilib.getter(name="spaceId")
    def space_id(self) -> Optional[pulumilib.Input[str]]:
        """
        ID (slug) of the space the stack is in
        """
        return pulumilib.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "space_id", value)

    @property
    @pulumilib.getter(name="terraformSmartSanitization")
    def terraform_smart_sanitization(self) -> Optional[pulumilib.Input[bool]]:
        """
        Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
        and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
        Defaults to `false`.
        """
        return pulumilib.get(self, "terraform_smart_sanitization")

    @terraform_smart_sanitization.setter
    def terraform_smart_sanitization(self, value: Optional[pulumilib.Input[bool]]):
        pulumilib.set(self, "terraform_smart_sanitization", value)

    @property
    @pulumilib.getter(name="terraformVersion")
    def terraform_version(self) -> Optional[pulumilib.Input[str]]:
        """
        Terraform version to use
        """
        return pulumilib.get(self, "terraform_version")

    @terraform_version.setter
    def terraform_version(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "terraform_version", value)

    @property
    @pulumilib.getter(name="terraformWorkspace")
    def terraform_workspace(self) -> Optional[pulumilib.Input[str]]:
        """
        Terraform workspace to select
        """
        return pulumilib.get(self, "terraform_workspace")

    @terraform_workspace.setter
    def terraform_workspace(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "terraform_workspace", value)

    @property
    @pulumilib.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumilib.Input[str]]:
        """
        ID of the worker pool to use
        """
        return pulumilib.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumilib.Input[str]]):
        pulumilib.set(self, "worker_pool_id", value)


class Stack(pulumilib.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumilib.ResourceOptions] = None,
                 administrative: Optional[pulumilib.Input[bool]] = None,
                 after_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 ansible: Optional[pulumilib.Input[pulumilib.InputType['StackAnsibleArgs']]] = None,
                 autodeploy: Optional[pulumilib.Input[bool]] = None,
                 autoretry: Optional[pulumilib.Input[bool]] = None,
                 azure_devops: Optional[pulumilib.Input[pulumilib.InputType['StackAzureDevopsArgs']]] = None,
                 before_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 bitbucket_cloud: Optional[pulumilib.Input[pulumilib.InputType['StackBitbucketCloudArgs']]] = None,
                 bitbucket_datacenter: Optional[pulumilib.Input[pulumilib.InputType['StackBitbucketDatacenterArgs']]] = None,
                 branch: Optional[pulumilib.Input[str]] = None,
                 cloudformation: Optional[pulumilib.Input[pulumilib.InputType['StackCloudformationArgs']]] = None,
                 description: Optional[pulumilib.Input[str]] = None,
                 enable_local_preview: Optional[pulumilib.Input[bool]] = None,
                 github_action_deploy: Optional[pulumilib.Input[bool]] = None,
                 github_enterprise: Optional[pulumilib.Input[pulumilib.InputType['StackGithubEnterpriseArgs']]] = None,
                 gitlab: Optional[pulumilib.Input[pulumilib.InputType['StackGitlabArgs']]] = None,
                 import_state: Optional[pulumilib.Input[str]] = None,
                 import_state_file: Optional[pulumilib.Input[str]] = None,
                 kubernetes: Optional[pulumilib.Input[pulumilib.InputType['StackKubernetesArgs']]] = None,
                 labels: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 manage_state: Optional[pulumilib.Input[bool]] = None,
                 name: Optional[pulumilib.Input[str]] = None,
                 project_root: Optional[pulumilib.Input[str]] = None,
                 protect_from_deletion: Optional[pulumilib.Input[bool]] = None,
                 pulumi: Optional[pulumilib.Input[pulumilib.InputType['StackPulumiArgs']]] = None,
                 repository: Optional[pulumilib.Input[str]] = None,
                 runner_image: Optional[pulumilib.Input[str]] = None,
                 showcase: Optional[pulumilib.Input[pulumilib.InputType['StackShowcaseArgs']]] = None,
                 slug: Optional[pulumilib.Input[str]] = None,
                 space_id: Optional[pulumilib.Input[str]] = None,
                 terraform_smart_sanitization: Optional[pulumilib.Input[bool]] = None,
                 terraform_version: Optional[pulumilib.Input[str]] = None,
                 terraform_workspace: Optional[pulumilib.Input[str]] = None,
                 worker_pool_id: Optional[pulumilib.Input[str]] = None,
                 __props__=None):
        """
        `Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        # Terraform stack using Bitbucket Cloud as VCS
        k8s_cluster_bitbucket_cloud = spacelift.Stack("k8s-cluster-bitbucket-cloud",
            administrative=True,
            autodeploy=True,
            bitbucket_cloud=spacelift.StackBitbucketCloudArgs(
                namespace="SPACELIFT",
            ),
            branch="master",
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            repository="core-infra",
            terraform_version="0.12.6")
        # Terraform stack using Bitbucket Data Center as VCS
        k8s_cluster_bitbucket_datacenter = spacelift.Stack("k8s-cluster-bitbucket-datacenter",
            administrative=True,
            autodeploy=True,
            bitbucket_datacenter=spacelift.StackBitbucketDatacenterArgs(
                namespace="SPACELIFT",
            ),
            branch="master",
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            repository="core-infra",
            terraform_version="0.12.6")
        # Terraform stack using GitHub Enterprise as VCS
        k8s_cluster_github_enterprise = spacelift.Stack("k8s-cluster-github-enterprise",
            administrative=True,
            autodeploy=True,
            branch="master",
            description="Provisions a Kubernetes cluster",
            github_enterprise=spacelift.StackGithubEnterpriseArgs(
                namespace="spacelift",
            ),
            project_root="cluster",
            repository="core-infra",
            terraform_version="0.12.6")
        # Terraform stack using GitLab as VCS
        k8s_cluster_gitlab = spacelift.Stack("k8s-cluster-gitlab",
            administrative=True,
            autodeploy=True,
            branch="master",
            description="Provisions a Kubernetes cluster",
            gitlab=spacelift.StackGitlabArgs(
                namespace="spacelift",
            ),
            project_root="cluster",
            repository="core-infra",
            terraform_version="0.12.6")
        # Terraform stack using github.com as VCS and enabling smart sanitization
        k8s_cluster = spacelift.Stack("k8s-cluster",
            administrative=True,
            autodeploy=True,
            branch="master",
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            repository="core-infra",
            terraform_smart_sanitization=True,
            terraform_version="1.2.6")
        # CloudFormation stack using github.com as VCS
        k8s_cluster_cloudformation = spacelift.Stack("k8s-cluster-cloudformation",
            autodeploy=True,
            branch="master",
            cloudformation=spacelift.StackCloudformationArgs(
                entry_template_file="main.yaml",
                region="eu-central-1",
                stack_name="k8s-cluster",
                template_bucket="s3://bucket",
            ),
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            repository="core-infra")
        # Pulumi stack using github.com as VCS
        k8s_cluster_pulumi = spacelift.Stack("k8s-cluster-pulumi",
            autodeploy=True,
            branch="master",
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            pulumi=spacelift.StackPulumiArgs(
                login_url="s3://pulumi-state-bucket",
                stack_name="kubernetes-core-services",
            ),
            repository="core-infra",
            runner_image="public.ecr.aws/t0p9w2l5/runner-pulumi-javascript:latest")
        # Kubernetes stack using github.com as VCS
        k8s_core_kubernetes = spacelift.Stack("k8s-core-kubernetes",
            autodeploy=True,
            before_inits=["aws eks update-kubeconfig --region us-east-2 --name k8s-cluster"],
            branch="master",
            description="Shared cluster services (Datadog, Istio etc.)",
            kubernetes=spacelift.StackKubernetesArgs(
                namespace="core",
            ),
            project_root="core-services",
            repository="core-infra")
        # Ansible stack using github.com as VCS
        ansible_stack = spacelift.Stack("ansible-stack",
            ansible=spacelift.StackAnsibleArgs(
                playbook="main.yml",
            ),
            autodeploy=True,
            branch="master",
            description="Provisioning EC2 machines",
            repository="ansible-playbooks",
            runner_image="public.ecr.aws/spacelift/runner-ansible:latest")
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/stack:Stack k8s_core $STACK_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumilib.ResourceOptions opts: Options for the resource.
        :param pulumilib.Input[bool] administrative: Indicates whether this stack can manage others. Defaults to `false`.
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_applies: List of after-apply scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_destroys: List of after-destroy scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_inits: List of after-init scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_performs: List of after-perform scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_plans: List of after-plan scripts
        :param pulumilib.Input[pulumilib.InputType['StackAnsibleArgs']] ansible: Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        :param pulumilib.Input[bool] autodeploy: Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
        :param pulumilib.Input[bool] autoretry: Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
        :param pulumilib.Input[pulumilib.InputType['StackAzureDevopsArgs']] azure_devops: Azure DevOps VCS settings
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_applies: List of before-apply scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_destroys: List of before-destroy scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_inits: List of before-init scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_performs: List of before-perform scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_plans: List of before-plan scripts
        :param pulumilib.Input[pulumilib.InputType['StackBitbucketCloudArgs']] bitbucket_cloud: Bitbucket Cloud VCS settings
        :param pulumilib.Input[pulumilib.InputType['StackBitbucketDatacenterArgs']] bitbucket_datacenter: Bitbucket Datacenter VCS settings
        :param pulumilib.Input[str] branch: GitHub branch to apply changes to
        :param pulumilib.Input[pulumilib.InputType['StackCloudformationArgs']] cloudformation: CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        :param pulumilib.Input[str] description: Free-form stack description for users
        :param pulumilib.Input[bool] enable_local_preview: Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
        :param pulumilib.Input[bool] github_action_deploy: Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
        :param pulumilib.Input[pulumilib.InputType['StackGithubEnterpriseArgs']] github_enterprise: GitHub Enterprise (self-hosted) VCS settings
        :param pulumilib.Input[pulumilib.InputType['StackGitlabArgs']] gitlab: GitLab VCS settings
        :param pulumilib.Input[str] import_state: State file to upload when creating a new stack
        :param pulumilib.Input[str] import_state_file: Path to the state file to upload when creating a new stack
        :param pulumilib.Input[pulumilib.InputType['StackKubernetesArgs']] kubernetes: Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        :param pulumilib.Input[bool] manage_state: Determines if Spacelift should manage state for this stack. Defaults to `true`.
        :param pulumilib.Input[str] name: Name of the stack - should be unique in one account
        :param pulumilib.Input[str] project_root: Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        :param pulumilib.Input[bool] protect_from_deletion: Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
        :param pulumilib.Input[pulumilib.InputType['StackPulumiArgs']] pulumi: Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        :param pulumilib.Input[str] repository: Name of the repository, without the owner part
        :param pulumilib.Input[str] runner_image: Name of the Docker image used to process Runs
        :param pulumilib.Input[str] slug: Allows setting the custom ID (slug) for the stack
        :param pulumilib.Input[str] space_id: ID (slug) of the space the stack is in
        :param pulumilib.Input[bool] terraform_smart_sanitization: Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
               and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
               Defaults to `false`.
        :param pulumilib.Input[str] terraform_version: Terraform version to use
        :param pulumilib.Input[str] terraform_workspace: Terraform workspace to select
        :param pulumilib.Input[str] worker_pool_id: ID of the worker pool to use
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StackArgs,
                 opts: Optional[pulumilib.ResourceOptions] = None):
        """
        `Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        # Terraform stack using Bitbucket Cloud as VCS
        k8s_cluster_bitbucket_cloud = spacelift.Stack("k8s-cluster-bitbucket-cloud",
            administrative=True,
            autodeploy=True,
            bitbucket_cloud=spacelift.StackBitbucketCloudArgs(
                namespace="SPACELIFT",
            ),
            branch="master",
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            repository="core-infra",
            terraform_version="0.12.6")
        # Terraform stack using Bitbucket Data Center as VCS
        k8s_cluster_bitbucket_datacenter = spacelift.Stack("k8s-cluster-bitbucket-datacenter",
            administrative=True,
            autodeploy=True,
            bitbucket_datacenter=spacelift.StackBitbucketDatacenterArgs(
                namespace="SPACELIFT",
            ),
            branch="master",
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            repository="core-infra",
            terraform_version="0.12.6")
        # Terraform stack using GitHub Enterprise as VCS
        k8s_cluster_github_enterprise = spacelift.Stack("k8s-cluster-github-enterprise",
            administrative=True,
            autodeploy=True,
            branch="master",
            description="Provisions a Kubernetes cluster",
            github_enterprise=spacelift.StackGithubEnterpriseArgs(
                namespace="spacelift",
            ),
            project_root="cluster",
            repository="core-infra",
            terraform_version="0.12.6")
        # Terraform stack using GitLab as VCS
        k8s_cluster_gitlab = spacelift.Stack("k8s-cluster-gitlab",
            administrative=True,
            autodeploy=True,
            branch="master",
            description="Provisions a Kubernetes cluster",
            gitlab=spacelift.StackGitlabArgs(
                namespace="spacelift",
            ),
            project_root="cluster",
            repository="core-infra",
            terraform_version="0.12.6")
        # Terraform stack using github.com as VCS and enabling smart sanitization
        k8s_cluster = spacelift.Stack("k8s-cluster",
            administrative=True,
            autodeploy=True,
            branch="master",
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            repository="core-infra",
            terraform_smart_sanitization=True,
            terraform_version="1.2.6")
        # CloudFormation stack using github.com as VCS
        k8s_cluster_cloudformation = spacelift.Stack("k8s-cluster-cloudformation",
            autodeploy=True,
            branch="master",
            cloudformation=spacelift.StackCloudformationArgs(
                entry_template_file="main.yaml",
                region="eu-central-1",
                stack_name="k8s-cluster",
                template_bucket="s3://bucket",
            ),
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            repository="core-infra")
        # Pulumi stack using github.com as VCS
        k8s_cluster_pulumi = spacelift.Stack("k8s-cluster-pulumi",
            autodeploy=True,
            branch="master",
            description="Provisions a Kubernetes cluster",
            project_root="cluster",
            pulumi=spacelift.StackPulumiArgs(
                login_url="s3://pulumi-state-bucket",
                stack_name="kubernetes-core-services",
            ),
            repository="core-infra",
            runner_image="public.ecr.aws/t0p9w2l5/runner-pulumi-javascript:latest")
        # Kubernetes stack using github.com as VCS
        k8s_core_kubernetes = spacelift.Stack("k8s-core-kubernetes",
            autodeploy=True,
            before_inits=["aws eks update-kubeconfig --region us-east-2 --name k8s-cluster"],
            branch="master",
            description="Shared cluster services (Datadog, Istio etc.)",
            kubernetes=spacelift.StackKubernetesArgs(
                namespace="core",
            ),
            project_root="core-services",
            repository="core-infra")
        # Ansible stack using github.com as VCS
        ansible_stack = spacelift.Stack("ansible-stack",
            ansible=spacelift.StackAnsibleArgs(
                playbook="main.yml",
            ),
            autodeploy=True,
            branch="master",
            description="Provisioning EC2 machines",
            repository="ansible-playbooks",
            runner_image="public.ecr.aws/spacelift/runner-ansible:latest")
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/stack:Stack k8s_core $STACK_ID
        ```

        :param str resource_name: The name of the resource.
        :param StackArgs args: The arguments to use to populate this resource's properties.
        :param pulumilib.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StackArgs, pulumilib.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumilib.ResourceOptions] = None,
                 administrative: Optional[pulumilib.Input[bool]] = None,
                 after_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 after_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 ansible: Optional[pulumilib.Input[pulumilib.InputType['StackAnsibleArgs']]] = None,
                 autodeploy: Optional[pulumilib.Input[bool]] = None,
                 autoretry: Optional[pulumilib.Input[bool]] = None,
                 azure_devops: Optional[pulumilib.Input[pulumilib.InputType['StackAzureDevopsArgs']]] = None,
                 before_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 before_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 bitbucket_cloud: Optional[pulumilib.Input[pulumilib.InputType['StackBitbucketCloudArgs']]] = None,
                 bitbucket_datacenter: Optional[pulumilib.Input[pulumilib.InputType['StackBitbucketDatacenterArgs']]] = None,
                 branch: Optional[pulumilib.Input[str]] = None,
                 cloudformation: Optional[pulumilib.Input[pulumilib.InputType['StackCloudformationArgs']]] = None,
                 description: Optional[pulumilib.Input[str]] = None,
                 enable_local_preview: Optional[pulumilib.Input[bool]] = None,
                 github_action_deploy: Optional[pulumilib.Input[bool]] = None,
                 github_enterprise: Optional[pulumilib.Input[pulumilib.InputType['StackGithubEnterpriseArgs']]] = None,
                 gitlab: Optional[pulumilib.Input[pulumilib.InputType['StackGitlabArgs']]] = None,
                 import_state: Optional[pulumilib.Input[str]] = None,
                 import_state_file: Optional[pulumilib.Input[str]] = None,
                 kubernetes: Optional[pulumilib.Input[pulumilib.InputType['StackKubernetesArgs']]] = None,
                 labels: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
                 manage_state: Optional[pulumilib.Input[bool]] = None,
                 name: Optional[pulumilib.Input[str]] = None,
                 project_root: Optional[pulumilib.Input[str]] = None,
                 protect_from_deletion: Optional[pulumilib.Input[bool]] = None,
                 pulumi: Optional[pulumilib.Input[pulumilib.InputType['StackPulumiArgs']]] = None,
                 repository: Optional[pulumilib.Input[str]] = None,
                 runner_image: Optional[pulumilib.Input[str]] = None,
                 showcase: Optional[pulumilib.Input[pulumilib.InputType['StackShowcaseArgs']]] = None,
                 slug: Optional[pulumilib.Input[str]] = None,
                 space_id: Optional[pulumilib.Input[str]] = None,
                 terraform_smart_sanitization: Optional[pulumilib.Input[bool]] = None,
                 terraform_version: Optional[pulumilib.Input[str]] = None,
                 terraform_workspace: Optional[pulumilib.Input[str]] = None,
                 worker_pool_id: Optional[pulumilib.Input[str]] = None,
                 __props__=None):
        opts = pulumilib.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumilib.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StackArgs.__new__(StackArgs)

            __props__.__dict__["administrative"] = administrative
            __props__.__dict__["after_applies"] = after_applies
            __props__.__dict__["after_destroys"] = after_destroys
            __props__.__dict__["after_inits"] = after_inits
            __props__.__dict__["after_performs"] = after_performs
            __props__.__dict__["after_plans"] = after_plans
            __props__.__dict__["ansible"] = ansible
            __props__.__dict__["autodeploy"] = autodeploy
            __props__.__dict__["autoretry"] = autoretry
            __props__.__dict__["azure_devops"] = azure_devops
            __props__.__dict__["before_applies"] = before_applies
            __props__.__dict__["before_destroys"] = before_destroys
            __props__.__dict__["before_inits"] = before_inits
            __props__.__dict__["before_performs"] = before_performs
            __props__.__dict__["before_plans"] = before_plans
            __props__.__dict__["bitbucket_cloud"] = bitbucket_cloud
            __props__.__dict__["bitbucket_datacenter"] = bitbucket_datacenter
            if branch is None and not opts.urn:
                raise TypeError("Missing required property 'branch'")
            __props__.__dict__["branch"] = branch
            __props__.__dict__["cloudformation"] = cloudformation
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_local_preview"] = enable_local_preview
            __props__.__dict__["github_action_deploy"] = github_action_deploy
            __props__.__dict__["github_enterprise"] = github_enterprise
            __props__.__dict__["gitlab"] = gitlab
            __props__.__dict__["import_state"] = import_state
            __props__.__dict__["import_state_file"] = import_state_file
            __props__.__dict__["kubernetes"] = kubernetes
            __props__.__dict__["labels"] = labels
            __props__.__dict__["manage_state"] = manage_state
            __props__.__dict__["name"] = name
            __props__.__dict__["project_root"] = project_root
            __props__.__dict__["protect_from_deletion"] = protect_from_deletion
            __props__.__dict__["pulumi"] = pulumi
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            __props__.__dict__["runner_image"] = runner_image
            __props__.__dict__["showcase"] = showcase
            __props__.__dict__["slug"] = slug
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["terraform_smart_sanitization"] = terraform_smart_sanitization
            __props__.__dict__["terraform_version"] = terraform_version
            __props__.__dict__["terraform_workspace"] = terraform_workspace
            __props__.__dict__["worker_pool_id"] = worker_pool_id
            __props__.__dict__["aws_assume_role_policy_statement"] = None
        super(Stack, __self__).__init__(
            'spacelift:index/stack:Stack',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumilib.Input[str],
            opts: Optional[pulumilib.ResourceOptions] = None,
            administrative: Optional[pulumilib.Input[bool]] = None,
            after_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            after_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            after_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            after_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            after_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            ansible: Optional[pulumilib.Input[pulumilib.InputType['StackAnsibleArgs']]] = None,
            autodeploy: Optional[pulumilib.Input[bool]] = None,
            autoretry: Optional[pulumilib.Input[bool]] = None,
            aws_assume_role_policy_statement: Optional[pulumilib.Input[str]] = None,
            azure_devops: Optional[pulumilib.Input[pulumilib.InputType['StackAzureDevopsArgs']]] = None,
            before_applies: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            before_destroys: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            before_inits: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            before_performs: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            before_plans: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            bitbucket_cloud: Optional[pulumilib.Input[pulumilib.InputType['StackBitbucketCloudArgs']]] = None,
            bitbucket_datacenter: Optional[pulumilib.Input[pulumilib.InputType['StackBitbucketDatacenterArgs']]] = None,
            branch: Optional[pulumilib.Input[str]] = None,
            cloudformation: Optional[pulumilib.Input[pulumilib.InputType['StackCloudformationArgs']]] = None,
            description: Optional[pulumilib.Input[str]] = None,
            enable_local_preview: Optional[pulumilib.Input[bool]] = None,
            github_action_deploy: Optional[pulumilib.Input[bool]] = None,
            github_enterprise: Optional[pulumilib.Input[pulumilib.InputType['StackGithubEnterpriseArgs']]] = None,
            gitlab: Optional[pulumilib.Input[pulumilib.InputType['StackGitlabArgs']]] = None,
            import_state: Optional[pulumilib.Input[str]] = None,
            import_state_file: Optional[pulumilib.Input[str]] = None,
            kubernetes: Optional[pulumilib.Input[pulumilib.InputType['StackKubernetesArgs']]] = None,
            labels: Optional[pulumilib.Input[Sequence[pulumilib.Input[str]]]] = None,
            manage_state: Optional[pulumilib.Input[bool]] = None,
            name: Optional[pulumilib.Input[str]] = None,
            project_root: Optional[pulumilib.Input[str]] = None,
            protect_from_deletion: Optional[pulumilib.Input[bool]] = None,
            pulumi: Optional[pulumilib.Input[pulumilib.InputType['StackPulumiArgs']]] = None,
            repository: Optional[pulumilib.Input[str]] = None,
            runner_image: Optional[pulumilib.Input[str]] = None,
            showcase: Optional[pulumilib.Input[pulumilib.InputType['StackShowcaseArgs']]] = None,
            slug: Optional[pulumilib.Input[str]] = None,
            space_id: Optional[pulumilib.Input[str]] = None,
            terraform_smart_sanitization: Optional[pulumilib.Input[bool]] = None,
            terraform_version: Optional[pulumilib.Input[str]] = None,
            terraform_workspace: Optional[pulumilib.Input[str]] = None,
            worker_pool_id: Optional[pulumilib.Input[str]] = None) -> 'Stack':
        """
        Get an existing Stack resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumilib.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumilib.ResourceOptions opts: Options for the resource.
        :param pulumilib.Input[bool] administrative: Indicates whether this stack can manage others. Defaults to `false`.
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_applies: List of after-apply scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_destroys: List of after-destroy scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_inits: List of after-init scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_performs: List of after-perform scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] after_plans: List of after-plan scripts
        :param pulumilib.Input[pulumilib.InputType['StackAnsibleArgs']] ansible: Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        :param pulumilib.Input[bool] autodeploy: Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
        :param pulumilib.Input[bool] autoretry: Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
        :param pulumilib.Input[str] aws_assume_role_policy_statement: AWS IAM assume role policy statement setting up trust relationship
        :param pulumilib.Input[pulumilib.InputType['StackAzureDevopsArgs']] azure_devops: Azure DevOps VCS settings
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_applies: List of before-apply scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_destroys: List of before-destroy scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_inits: List of before-init scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_performs: List of before-perform scripts
        :param pulumilib.Input[Sequence[pulumilib.Input[str]]] before_plans: List of before-plan scripts
        :param pulumilib.Input[pulumilib.InputType['StackBitbucketCloudArgs']] bitbucket_cloud: Bitbucket Cloud VCS settings
        :param pulumilib.Input[pulumilib.InputType['StackBitbucketDatacenterArgs']] bitbucket_datacenter: Bitbucket Datacenter VCS settings
        :param pulumilib.Input[str] branch: GitHub branch to apply changes to
        :param pulumilib.Input[pulumilib.InputType['StackCloudformationArgs']] cloudformation: CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        :param pulumilib.Input[str] description: Free-form stack description for users
        :param pulumilib.Input[bool] enable_local_preview: Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
        :param pulumilib.Input[bool] github_action_deploy: Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
        :param pulumilib.Input[pulumilib.InputType['StackGithubEnterpriseArgs']] github_enterprise: GitHub Enterprise (self-hosted) VCS settings
        :param pulumilib.Input[pulumilib.InputType['StackGitlabArgs']] gitlab: GitLab VCS settings
        :param pulumilib.Input[str] import_state: State file to upload when creating a new stack
        :param pulumilib.Input[str] import_state_file: Path to the state file to upload when creating a new stack
        :param pulumilib.Input[pulumilib.InputType['StackKubernetesArgs']] kubernetes: Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        :param pulumilib.Input[bool] manage_state: Determines if Spacelift should manage state for this stack. Defaults to `true`.
        :param pulumilib.Input[str] name: Name of the stack - should be unique in one account
        :param pulumilib.Input[str] project_root: Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        :param pulumilib.Input[bool] protect_from_deletion: Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
        :param pulumilib.Input[pulumilib.InputType['StackPulumiArgs']] pulumi: Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        :param pulumilib.Input[str] repository: Name of the repository, without the owner part
        :param pulumilib.Input[str] runner_image: Name of the Docker image used to process Runs
        :param pulumilib.Input[str] slug: Allows setting the custom ID (slug) for the stack
        :param pulumilib.Input[str] space_id: ID (slug) of the space the stack is in
        :param pulumilib.Input[bool] terraform_smart_sanitization: Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
               and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
               Defaults to `false`.
        :param pulumilib.Input[str] terraform_version: Terraform version to use
        :param pulumilib.Input[str] terraform_workspace: Terraform workspace to select
        :param pulumilib.Input[str] worker_pool_id: ID of the worker pool to use
        """
        opts = pulumilib.ResourceOptions.merge(opts, pulumilib.ResourceOptions(id=id))

        __props__ = _StackState.__new__(_StackState)

        __props__.__dict__["administrative"] = administrative
        __props__.__dict__["after_applies"] = after_applies
        __props__.__dict__["after_destroys"] = after_destroys
        __props__.__dict__["after_inits"] = after_inits
        __props__.__dict__["after_performs"] = after_performs
        __props__.__dict__["after_plans"] = after_plans
        __props__.__dict__["ansible"] = ansible
        __props__.__dict__["autodeploy"] = autodeploy
        __props__.__dict__["autoretry"] = autoretry
        __props__.__dict__["aws_assume_role_policy_statement"] = aws_assume_role_policy_statement
        __props__.__dict__["azure_devops"] = azure_devops
        __props__.__dict__["before_applies"] = before_applies
        __props__.__dict__["before_destroys"] = before_destroys
        __props__.__dict__["before_inits"] = before_inits
        __props__.__dict__["before_performs"] = before_performs
        __props__.__dict__["before_plans"] = before_plans
        __props__.__dict__["bitbucket_cloud"] = bitbucket_cloud
        __props__.__dict__["bitbucket_datacenter"] = bitbucket_datacenter
        __props__.__dict__["branch"] = branch
        __props__.__dict__["cloudformation"] = cloudformation
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_local_preview"] = enable_local_preview
        __props__.__dict__["github_action_deploy"] = github_action_deploy
        __props__.__dict__["github_enterprise"] = github_enterprise
        __props__.__dict__["gitlab"] = gitlab
        __props__.__dict__["import_state"] = import_state
        __props__.__dict__["import_state_file"] = import_state_file
        __props__.__dict__["kubernetes"] = kubernetes
        __props__.__dict__["labels"] = labels
        __props__.__dict__["manage_state"] = manage_state
        __props__.__dict__["name"] = name
        __props__.__dict__["project_root"] = project_root
        __props__.__dict__["protect_from_deletion"] = protect_from_deletion
        __props__.__dict__["pulumi"] = pulumi
        __props__.__dict__["repository"] = repository
        __props__.__dict__["runner_image"] = runner_image
        __props__.__dict__["showcase"] = showcase
        __props__.__dict__["slug"] = slug
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["terraform_smart_sanitization"] = terraform_smart_sanitization
        __props__.__dict__["terraform_version"] = terraform_version
        __props__.__dict__["terraform_workspace"] = terraform_workspace
        __props__.__dict__["worker_pool_id"] = worker_pool_id
        return Stack(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumilib.getter
    def administrative(self) -> pulumilib.Output[Optional[bool]]:
        """
        Indicates whether this stack can manage others. Defaults to `false`.
        """
        return pulumilib.get(self, "administrative")

    @property
    @pulumilib.getter(name="afterApplies")
    def after_applies(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of after-apply scripts
        """
        return pulumilib.get(self, "after_applies")

    @property
    @pulumilib.getter(name="afterDestroys")
    def after_destroys(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of after-destroy scripts
        """
        return pulumilib.get(self, "after_destroys")

    @property
    @pulumilib.getter(name="afterInits")
    def after_inits(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of after-init scripts
        """
        return pulumilib.get(self, "after_inits")

    @property
    @pulumilib.getter(name="afterPerforms")
    def after_performs(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of after-perform scripts
        """
        return pulumilib.get(self, "after_performs")

    @property
    @pulumilib.getter(name="afterPlans")
    def after_plans(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of after-plan scripts
        """
        return pulumilib.get(self, "after_plans")

    @property
    @pulumilib.getter
    def ansible(self) -> pulumilib.Output[Optional['outputs.StackAnsible']]:
        """
        Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        """
        return pulumilib.get(self, "ansible")

    @property
    @pulumilib.getter
    def autodeploy(self) -> pulumilib.Output[Optional[bool]]:
        """
        Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
        """
        return pulumilib.get(self, "autodeploy")

    @property
    @pulumilib.getter
    def autoretry(self) -> pulumilib.Output[Optional[bool]]:
        """
        Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
        """
        return pulumilib.get(self, "autoretry")

    @property
    @pulumilib.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> pulumilib.Output[str]:
        """
        AWS IAM assume role policy statement setting up trust relationship
        """
        return pulumilib.get(self, "aws_assume_role_policy_statement")

    @property
    @pulumilib.getter(name="azureDevops")
    def azure_devops(self) -> pulumilib.Output[Optional['outputs.StackAzureDevops']]:
        """
        Azure DevOps VCS settings
        """
        return pulumilib.get(self, "azure_devops")

    @property
    @pulumilib.getter(name="beforeApplies")
    def before_applies(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of before-apply scripts
        """
        return pulumilib.get(self, "before_applies")

    @property
    @pulumilib.getter(name="beforeDestroys")
    def before_destroys(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of before-destroy scripts
        """
        return pulumilib.get(self, "before_destroys")

    @property
    @pulumilib.getter(name="beforeInits")
    def before_inits(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of before-init scripts
        """
        return pulumilib.get(self, "before_inits")

    @property
    @pulumilib.getter(name="beforePerforms")
    def before_performs(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of before-perform scripts
        """
        return pulumilib.get(self, "before_performs")

    @property
    @pulumilib.getter(name="beforePlans")
    def before_plans(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        """
        List of before-plan scripts
        """
        return pulumilib.get(self, "before_plans")

    @property
    @pulumilib.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> pulumilib.Output[Optional['outputs.StackBitbucketCloud']]:
        """
        Bitbucket Cloud VCS settings
        """
        return pulumilib.get(self, "bitbucket_cloud")

    @property
    @pulumilib.getter(name="bitbucketDatacenter")
    def bitbucket_datacenter(self) -> pulumilib.Output[Optional['outputs.StackBitbucketDatacenter']]:
        """
        Bitbucket Datacenter VCS settings
        """
        return pulumilib.get(self, "bitbucket_datacenter")

    @property
    @pulumilib.getter
    def branch(self) -> pulumilib.Output[str]:
        """
        GitHub branch to apply changes to
        """
        return pulumilib.get(self, "branch")

    @property
    @pulumilib.getter
    def cloudformation(self) -> pulumilib.Output[Optional['outputs.StackCloudformation']]:
        """
        CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        """
        return pulumilib.get(self, "cloudformation")

    @property
    @pulumilib.getter
    def description(self) -> pulumilib.Output[Optional[str]]:
        """
        Free-form stack description for users
        """
        return pulumilib.get(self, "description")

    @property
    @pulumilib.getter(name="enableLocalPreview")
    def enable_local_preview(self) -> pulumilib.Output[Optional[bool]]:
        """
        Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
        """
        return pulumilib.get(self, "enable_local_preview")

    @property
    @pulumilib.getter(name="githubActionDeploy")
    def github_action_deploy(self) -> pulumilib.Output[Optional[bool]]:
        """
        Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`.
        """
        return pulumilib.get(self, "github_action_deploy")

    @property
    @pulumilib.getter(name="githubEnterprise")
    def github_enterprise(self) -> pulumilib.Output[Optional['outputs.StackGithubEnterprise']]:
        """
        GitHub Enterprise (self-hosted) VCS settings
        """
        return pulumilib.get(self, "github_enterprise")

    @property
    @pulumilib.getter
    def gitlab(self) -> pulumilib.Output[Optional['outputs.StackGitlab']]:
        """
        GitLab VCS settings
        """
        return pulumilib.get(self, "gitlab")

    @property
    @pulumilib.getter(name="importState")
    def import_state(self) -> pulumilib.Output[Optional[str]]:
        """
        State file to upload when creating a new stack
        """
        return pulumilib.get(self, "import_state")

    @property
    @pulumilib.getter(name="importStateFile")
    def import_state_file(self) -> pulumilib.Output[Optional[str]]:
        """
        Path to the state file to upload when creating a new stack
        """
        return pulumilib.get(self, "import_state_file")

    @property
    @pulumilib.getter
    def kubernetes(self) -> pulumilib.Output[Optional['outputs.StackKubernetes']]:
        """
        Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        """
        return pulumilib.get(self, "kubernetes")

    @property
    @pulumilib.getter
    def labels(self) -> pulumilib.Output[Optional[Sequence[str]]]:
        return pulumilib.get(self, "labels")

    @property
    @pulumilib.getter(name="manageState")
    def manage_state(self) -> pulumilib.Output[Optional[bool]]:
        """
        Determines if Spacelift should manage state for this stack. Defaults to `true`.
        """
        return pulumilib.get(self, "manage_state")

    @property
    @pulumilib.getter
    def name(self) -> pulumilib.Output[str]:
        """
        Name of the stack - should be unique in one account
        """
        return pulumilib.get(self, "name")

    @property
    @pulumilib.getter(name="projectRoot")
    def project_root(self) -> pulumilib.Output[Optional[str]]:
        """
        Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        """
        return pulumilib.get(self, "project_root")

    @property
    @pulumilib.getter(name="protectFromDeletion")
    def protect_from_deletion(self) -> pulumilib.Output[Optional[bool]]:
        """
        Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
        """
        return pulumilib.get(self, "protect_from_deletion")

    @property
    @pulumilib.getter
    def pulumi(self) -> pulumilib.Output[Optional['outputs.StackPulumi']]:
        """
        Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        """
        return pulumilib.get(self, "pulumi")

    @property
    @pulumilib.getter
    def repository(self) -> pulumilib.Output[str]:
        """
        Name of the repository, without the owner part
        """
        return pulumilib.get(self, "repository")

    @property
    @pulumilib.getter(name="runnerImage")
    def runner_image(self) -> pulumilib.Output[Optional[str]]:
        """
        Name of the Docker image used to process Runs
        """
        return pulumilib.get(self, "runner_image")

    @property
    @pulumilib.getter
    def showcase(self) -> pulumilib.Output[Optional['outputs.StackShowcase']]:
        return pulumilib.get(self, "showcase")

    @property
    @pulumilib.getter
    def slug(self) -> pulumilib.Output[str]:
        """
        Allows setting the custom ID (slug) for the stack
        """
        return pulumilib.get(self, "slug")

    @property
    @pulumilib.getter(name="spaceId")
    def space_id(self) -> pulumilib.Output[str]:
        """
        ID (slug) of the space the stack is in
        """
        return pulumilib.get(self, "space_id")

    @property
    @pulumilib.getter(name="terraformSmartSanitization")
    def terraform_smart_sanitization(self) -> pulumilib.Output[Optional[bool]]:
        """
        Indicates whether runs on this will use terraform's sensitive value system to sanitize the outputs of Terraform state
        and plans in spacelift instead of sanitizing all fields. Note: Requires the terraform version to be v1.0.1 or above.
        Defaults to `false`.
        """
        return pulumilib.get(self, "terraform_smart_sanitization")

    @property
    @pulumilib.getter(name="terraformVersion")
    def terraform_version(self) -> pulumilib.Output[Optional[str]]:
        """
        Terraform version to use
        """
        return pulumilib.get(self, "terraform_version")

    @property
    @pulumilib.getter(name="terraformWorkspace")
    def terraform_workspace(self) -> pulumilib.Output[Optional[str]]:
        """
        Terraform workspace to select
        """
        return pulumilib.get(self, "terraform_workspace")

    @property
    @pulumilib.getter(name="workerPoolId")
    def worker_pool_id(self) -> pulumilib.Output[Optional[str]]:
        """
        ID of the worker pool to use
        """
        return pulumilib.get(self, "worker_pool_id")

