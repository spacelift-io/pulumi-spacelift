# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ContextAttachmentArgs', 'ContextAttachment']

@pulumi.input_type
class ContextAttachmentArgs:
    def __init__(__self__, *,
                 context_id: pulumi.Input[str],
                 module_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ContextAttachment resource.
        :param pulumi.Input[str] context_id: ID of the context to attach
        :param pulumi.Input[str] module_id: ID of the module to attach the context to
        :param pulumi.Input[int] priority: Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        :param pulumi.Input[str] stack_id: ID of the stack to attach the context to
        """
        ContextAttachmentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            context_id=context_id,
            module_id=module_id,
            priority=priority,
            stack_id=stack_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             context_id: Optional[pulumi.Input[str]] = None,
             module_id: Optional[pulumi.Input[str]] = None,
             priority: Optional[pulumi.Input[int]] = None,
             stack_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if context_id is None and 'contextId' in kwargs:
            context_id = kwargs['contextId']
        if context_id is None:
            raise TypeError("Missing 'context_id' argument")
        if module_id is None and 'moduleId' in kwargs:
            module_id = kwargs['moduleId']
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']

        _setter("context_id", context_id)
        if module_id is not None:
            _setter("module_id", module_id)
        if priority is not None:
            _setter("priority", priority)
        if stack_id is not None:
            _setter("stack_id", stack_id)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> pulumi.Input[str]:
        """
        ID of the context to attach
        """
        return pulumi.get(self, "context_id")

    @context_id.setter
    def context_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "context_id", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module to attach the context to
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack to attach the context to
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)


@pulumi.input_type
class _ContextAttachmentState:
    def __init__(__self__, *,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ContextAttachment resources.
        :param pulumi.Input[str] context_id: ID of the context to attach
        :param pulumi.Input[str] module_id: ID of the module to attach the context to
        :param pulumi.Input[int] priority: Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        :param pulumi.Input[str] stack_id: ID of the stack to attach the context to
        """
        _ContextAttachmentState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            context_id=context_id,
            module_id=module_id,
            priority=priority,
            stack_id=stack_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             context_id: Optional[pulumi.Input[str]] = None,
             module_id: Optional[pulumi.Input[str]] = None,
             priority: Optional[pulumi.Input[int]] = None,
             stack_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if context_id is None and 'contextId' in kwargs:
            context_id = kwargs['contextId']
        if module_id is None and 'moduleId' in kwargs:
            module_id = kwargs['moduleId']
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']

        if context_id is not None:
            _setter("context_id", context_id)
        if module_id is not None:
            _setter("module_id", module_id)
        if priority is not None:
            _setter("priority", priority)
        if stack_id is not None:
            _setter("stack_id", stack_id)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the context to attach
        """
        return pulumi.get(self, "context_id")

    @context_id.setter
    def context_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_id", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module to attach the context to
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack to attach the context to
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)


class ContextAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `ContextAttachment` represents a Spacelift attachment of a single context to a single stack or module, with a predefined priority.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        # For a module
        attachment = spacelift.ContextAttachment("attachment",
            context_id="prod-k8s-ie",
            module_id="k8s-module",
            priority=0)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/contextAttachment:ContextAttachment test_stack $CONTEXT_ID/$STACK_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] context_id: ID of the context to attach
        :param pulumi.Input[str] module_id: ID of the module to attach the context to
        :param pulumi.Input[int] priority: Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        :param pulumi.Input[str] stack_id: ID of the stack to attach the context to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContextAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `ContextAttachment` represents a Spacelift attachment of a single context to a single stack or module, with a predefined priority.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        # For a module
        attachment = spacelift.ContextAttachment("attachment",
            context_id="prod-k8s-ie",
            module_id="k8s-module",
            priority=0)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/contextAttachment:ContextAttachment test_stack $CONTEXT_ID/$STACK_ID
        ```

        :param str resource_name: The name of the resource.
        :param ContextAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContextAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ContextAttachmentArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContextAttachmentArgs.__new__(ContextAttachmentArgs)

            if context_id is None and not opts.urn:
                raise TypeError("Missing required property 'context_id'")
            __props__.__dict__["context_id"] = context_id
            __props__.__dict__["module_id"] = module_id
            __props__.__dict__["priority"] = priority
            __props__.__dict__["stack_id"] = stack_id
        super(ContextAttachment, __self__).__init__(
            'spacelift:index/contextAttachment:ContextAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            context_id: Optional[pulumi.Input[str]] = None,
            module_id: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            stack_id: Optional[pulumi.Input[str]] = None) -> 'ContextAttachment':
        """
        Get an existing ContextAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] context_id: ID of the context to attach
        :param pulumi.Input[str] module_id: ID of the module to attach the context to
        :param pulumi.Input[int] priority: Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        :param pulumi.Input[str] stack_id: ID of the stack to attach the context to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContextAttachmentState.__new__(_ContextAttachmentState)

        __props__.__dict__["context_id"] = context_id
        __props__.__dict__["module_id"] = module_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["stack_id"] = stack_id
        return ContextAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> pulumi.Output[str]:
        """
        ID of the context to attach
        """
        return pulumi.get(self, "context_id")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the module to attach the context to
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[int]]:
        """
        Priority of the context attachment. All the contexts attached to a stack are sorted by priority (lowest first), though values don't need to be unique. This ordering establishes precedence rules between contexts should there be a conflict and multiple contexts define the same value. Defaults to `0`.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the stack to attach the context to
        """
        return pulumi.get(self, "stack_id")

