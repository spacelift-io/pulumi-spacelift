# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNamedWebhookResult',
    'AwaitableGetNamedWebhookResult',
    'get_named_webhook',
    'get_named_webhook_output',
]

@pulumi.output_type
class GetNamedWebhookResult:
    """
    A collection of values returned by getNamedWebhook.
    """
    def __init__(__self__, enabled=None, endpoint=None, id=None, labels=None, name=None, secret=None, secret_header_keys=None, space_id=None, webhook_id=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if secret and not isinstance(secret, str):
            raise TypeError("Expected argument 'secret' to be a str")
        pulumi.set(__self__, "secret", secret)
        if secret_header_keys and not isinstance(secret_header_keys, list):
            raise TypeError("Expected argument 'secret_header_keys' to be a list")
        pulumi.set(__self__, "secret_header_keys", secret_header_keys)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if webhook_id and not isinstance(webhook_id, str):
            raise TypeError("Expected argument 'webhook_id' to be a str")
        pulumi.set(__self__, "webhook_id", webhook_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        enables or disables sending webhooks.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        endpoint to send the requests to
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        labels for the webhook to use when referring in policies or filtering them
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name for the webhook which will also be used to generate the id
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        secret used to sign each request so you're able to verify that the request comes from us.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="secretHeaderKeys")
    def secret_header_keys(self) -> Sequence[str]:
        """
        secret header keys which are currently set for this webhook
        """
        return pulumi.get(self, "secret_header_keys")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID of the space the webhook is in
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> str:
        """
        ID of the webhook
        """
        return pulumi.get(self, "webhook_id")


class AwaitableGetNamedWebhookResult(GetNamedWebhookResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamedWebhookResult(
            enabled=self.enabled,
            endpoint=self.endpoint,
            id=self.id,
            labels=self.labels,
            name=self.name,
            secret=self.secret,
            secret_header_keys=self.secret_header_keys,
            space_id=self.space_id,
            webhook_id=self.webhook_id)


def get_named_webhook(webhook_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamedWebhookResult:
    """
    `NamedWebhook` represents a named webhook endpoint used for creating webhookswhich are referred to in Notification policies to route messages.


    :param str webhook_id: ID of the webhook
    """
    __args__ = dict()
    __args__['webhookId'] = webhook_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('spacelift:index/getNamedWebhook:getNamedWebhook', __args__, opts=opts, typ=GetNamedWebhookResult).value

    return AwaitableGetNamedWebhookResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        endpoint=pulumi.get(__ret__, 'endpoint'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        secret=pulumi.get(__ret__, 'secret'),
        secret_header_keys=pulumi.get(__ret__, 'secret_header_keys'),
        space_id=pulumi.get(__ret__, 'space_id'),
        webhook_id=pulumi.get(__ret__, 'webhook_id'))


@_utilities.lift_output_func(get_named_webhook)
def get_named_webhook_output(webhook_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNamedWebhookResult]:
    """
    `NamedWebhook` represents a named webhook endpoint used for creating webhookswhich are referred to in Notification policies to route messages.


    :param str webhook_id: ID of the webhook
    """
    ...
