# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ModuleArgs', 'Module']

@pulumi.input_type
class ModuleArgs:
    def __init__(__self__, *,
                 branch: pulumi.Input[str],
                 repository: pulumi.Input[str],
                 administrative: Optional[pulumi.Input[bool]] = None,
                 azure_devops: Optional[pulumi.Input['ModuleAzureDevopsArgs']] = None,
                 bitbucket_cloud: Optional[pulumi.Input['ModuleBitbucketCloudArgs']] = None,
                 bitbucket_datacenter: Optional[pulumi.Input['ModuleBitbucketDatacenterArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_enterprise: Optional[pulumi.Input['ModuleGithubEnterpriseArgs']] = None,
                 gitlab: Optional[pulumi.Input['ModuleGitlabArgs']] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_root: Optional[pulumi.Input[str]] = None,
                 protect_from_deletion: Optional[pulumi.Input[bool]] = None,
                 shared_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 terraform_provider: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Module resource.
        :param pulumi.Input[str] branch: GitHub branch to apply changes to
        :param pulumi.Input[str] repository: Name of the repository, without the owner part
        :param pulumi.Input[bool] administrative: Indicates whether this module can manage others. Defaults to `false`.
        :param pulumi.Input['ModuleAzureDevopsArgs'] azure_devops: Azure DevOps VCS settings
        :param pulumi.Input['ModuleBitbucketCloudArgs'] bitbucket_cloud: Bitbucket Cloud VCS settings
        :param pulumi.Input['ModuleBitbucketDatacenterArgs'] bitbucket_datacenter: Bitbucket Datacenter VCS settings
        :param pulumi.Input[str] description: Free-form module description for users
        :param pulumi.Input['ModuleGithubEnterpriseArgs'] github_enterprise: GitHub Enterprise (self-hosted) VCS settings
        :param pulumi.Input['ModuleGitlabArgs'] gitlab: GitLab VCS settings
        :param pulumi.Input[str] name: The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
               convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
               provide it here.
        :param pulumi.Input[str] project_root: Project root is the optional directory relative to the repository root containing the module source code.
        :param pulumi.Input[bool] protect_from_deletion: Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] shared_accounts: List of the accounts (subdomains) which should have access to the Module
        :param pulumi.Input[str] space_id: ID (slug) of the space the module is in
        :param pulumi.Input[str] terraform_provider: The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
               naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
               can provide the provider name here.
        :param pulumi.Input[str] worker_pool_id: ID of the worker pool to use
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "repository", repository)
        if administrative is not None:
            pulumi.set(__self__, "administrative", administrative)
        if azure_devops is not None:
            pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_cloud is not None:
            pulumi.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_datacenter is not None:
            pulumi.set(__self__, "bitbucket_datacenter", bitbucket_datacenter)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if github_enterprise is not None:
            pulumi.set(__self__, "github_enterprise", github_enterprise)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_root is not None:
            pulumi.set(__self__, "project_root", project_root)
        if protect_from_deletion is not None:
            pulumi.set(__self__, "protect_from_deletion", protect_from_deletion)
        if shared_accounts is not None:
            pulumi.set(__self__, "shared_accounts", shared_accounts)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if terraform_provider is not None:
            pulumi.set(__self__, "terraform_provider", terraform_provider)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Input[str]:
        """
        GitHub branch to apply changes to
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        Name of the repository, without the owner part
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def administrative(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this module can manage others. Defaults to `false`.
        """
        return pulumi.get(self, "administrative")

    @administrative.setter
    def administrative(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "administrative", value)

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Optional[pulumi.Input['ModuleAzureDevopsArgs']]:
        """
        Azure DevOps VCS settings
        """
        return pulumi.get(self, "azure_devops")

    @azure_devops.setter
    def azure_devops(self, value: Optional[pulumi.Input['ModuleAzureDevopsArgs']]):
        pulumi.set(self, "azure_devops", value)

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional[pulumi.Input['ModuleBitbucketCloudArgs']]:
        """
        Bitbucket Cloud VCS settings
        """
        return pulumi.get(self, "bitbucket_cloud")

    @bitbucket_cloud.setter
    def bitbucket_cloud(self, value: Optional[pulumi.Input['ModuleBitbucketCloudArgs']]):
        pulumi.set(self, "bitbucket_cloud", value)

    @property
    @pulumi.getter(name="bitbucketDatacenter")
    def bitbucket_datacenter(self) -> Optional[pulumi.Input['ModuleBitbucketDatacenterArgs']]:
        """
        Bitbucket Datacenter VCS settings
        """
        return pulumi.get(self, "bitbucket_datacenter")

    @bitbucket_datacenter.setter
    def bitbucket_datacenter(self, value: Optional[pulumi.Input['ModuleBitbucketDatacenterArgs']]):
        pulumi.set(self, "bitbucket_datacenter", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Free-form module description for users
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="githubEnterprise")
    def github_enterprise(self) -> Optional[pulumi.Input['ModuleGithubEnterpriseArgs']]:
        """
        GitHub Enterprise (self-hosted) VCS settings
        """
        return pulumi.get(self, "github_enterprise")

    @github_enterprise.setter
    def github_enterprise(self, value: Optional[pulumi.Input['ModuleGithubEnterpriseArgs']]):
        pulumi.set(self, "github_enterprise", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['ModuleGitlabArgs']]:
        """
        GitLab VCS settings
        """
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['ModuleGitlabArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
        convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
        provide it here.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectRoot")
    def project_root(self) -> Optional[pulumi.Input[str]]:
        """
        Project root is the optional directory relative to the repository root containing the module source code.
        """
        return pulumi.get(self, "project_root")

    @project_root.setter
    def project_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_root", value)

    @property
    @pulumi.getter(name="protectFromDeletion")
    def protect_from_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
        """
        return pulumi.get(self, "protect_from_deletion")

    @protect_from_deletion.setter
    def protect_from_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protect_from_deletion", value)

    @property
    @pulumi.getter(name="sharedAccounts")
    def shared_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of the accounts (subdomains) which should have access to the Module
        """
        return pulumi.get(self, "shared_accounts")

    @shared_accounts.setter
    def shared_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "shared_accounts", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID (slug) of the space the module is in
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="terraformProvider")
    def terraform_provider(self) -> Optional[pulumi.Input[str]]:
        """
        The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
        naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
        can provide the provider name here.
        """
        return pulumi.get(self, "terraform_provider")

    @terraform_provider.setter
    def terraform_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terraform_provider", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the worker pool to use
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)


@pulumi.input_type
class _ModuleState:
    def __init__(__self__, *,
                 administrative: Optional[pulumi.Input[bool]] = None,
                 aws_assume_role_policy_statement: Optional[pulumi.Input[str]] = None,
                 azure_devops: Optional[pulumi.Input['ModuleAzureDevopsArgs']] = None,
                 bitbucket_cloud: Optional[pulumi.Input['ModuleBitbucketCloudArgs']] = None,
                 bitbucket_datacenter: Optional[pulumi.Input['ModuleBitbucketDatacenterArgs']] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_enterprise: Optional[pulumi.Input['ModuleGithubEnterpriseArgs']] = None,
                 gitlab: Optional[pulumi.Input['ModuleGitlabArgs']] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_root: Optional[pulumi.Input[str]] = None,
                 protect_from_deletion: Optional[pulumi.Input[bool]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 shared_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 terraform_provider: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Module resources.
        :param pulumi.Input[bool] administrative: Indicates whether this module can manage others. Defaults to `false`.
        :param pulumi.Input[str] aws_assume_role_policy_statement: AWS IAM assume role policy statement setting up trust relationship
        :param pulumi.Input['ModuleAzureDevopsArgs'] azure_devops: Azure DevOps VCS settings
        :param pulumi.Input['ModuleBitbucketCloudArgs'] bitbucket_cloud: Bitbucket Cloud VCS settings
        :param pulumi.Input['ModuleBitbucketDatacenterArgs'] bitbucket_datacenter: Bitbucket Datacenter VCS settings
        :param pulumi.Input[str] branch: GitHub branch to apply changes to
        :param pulumi.Input[str] description: Free-form module description for users
        :param pulumi.Input['ModuleGithubEnterpriseArgs'] github_enterprise: GitHub Enterprise (self-hosted) VCS settings
        :param pulumi.Input['ModuleGitlabArgs'] gitlab: GitLab VCS settings
        :param pulumi.Input[str] name: The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
               convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
               provide it here.
        :param pulumi.Input[str] project_root: Project root is the optional directory relative to the repository root containing the module source code.
        :param pulumi.Input[bool] protect_from_deletion: Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
        :param pulumi.Input[str] repository: Name of the repository, without the owner part
        :param pulumi.Input[Sequence[pulumi.Input[str]]] shared_accounts: List of the accounts (subdomains) which should have access to the Module
        :param pulumi.Input[str] space_id: ID (slug) of the space the module is in
        :param pulumi.Input[str] terraform_provider: The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
               naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
               can provide the provider name here.
        :param pulumi.Input[str] worker_pool_id: ID of the worker pool to use
        """
        if administrative is not None:
            pulumi.set(__self__, "administrative", administrative)
        if aws_assume_role_policy_statement is not None:
            pulumi.set(__self__, "aws_assume_role_policy_statement", aws_assume_role_policy_statement)
        if azure_devops is not None:
            pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_cloud is not None:
            pulumi.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_datacenter is not None:
            pulumi.set(__self__, "bitbucket_datacenter", bitbucket_datacenter)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if github_enterprise is not None:
            pulumi.set(__self__, "github_enterprise", github_enterprise)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_root is not None:
            pulumi.set(__self__, "project_root", project_root)
        if protect_from_deletion is not None:
            pulumi.set(__self__, "protect_from_deletion", protect_from_deletion)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if shared_accounts is not None:
            pulumi.set(__self__, "shared_accounts", shared_accounts)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if terraform_provider is not None:
            pulumi.set(__self__, "terraform_provider", terraform_provider)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)

    @property
    @pulumi.getter
    def administrative(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this module can manage others. Defaults to `false`.
        """
        return pulumi.get(self, "administrative")

    @administrative.setter
    def administrative(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "administrative", value)

    @property
    @pulumi.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM assume role policy statement setting up trust relationship
        """
        return pulumi.get(self, "aws_assume_role_policy_statement")

    @aws_assume_role_policy_statement.setter
    def aws_assume_role_policy_statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_assume_role_policy_statement", value)

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Optional[pulumi.Input['ModuleAzureDevopsArgs']]:
        """
        Azure DevOps VCS settings
        """
        return pulumi.get(self, "azure_devops")

    @azure_devops.setter
    def azure_devops(self, value: Optional[pulumi.Input['ModuleAzureDevopsArgs']]):
        pulumi.set(self, "azure_devops", value)

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional[pulumi.Input['ModuleBitbucketCloudArgs']]:
        """
        Bitbucket Cloud VCS settings
        """
        return pulumi.get(self, "bitbucket_cloud")

    @bitbucket_cloud.setter
    def bitbucket_cloud(self, value: Optional[pulumi.Input['ModuleBitbucketCloudArgs']]):
        pulumi.set(self, "bitbucket_cloud", value)

    @property
    @pulumi.getter(name="bitbucketDatacenter")
    def bitbucket_datacenter(self) -> Optional[pulumi.Input['ModuleBitbucketDatacenterArgs']]:
        """
        Bitbucket Datacenter VCS settings
        """
        return pulumi.get(self, "bitbucket_datacenter")

    @bitbucket_datacenter.setter
    def bitbucket_datacenter(self, value: Optional[pulumi.Input['ModuleBitbucketDatacenterArgs']]):
        pulumi.set(self, "bitbucket_datacenter", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        GitHub branch to apply changes to
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Free-form module description for users
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="githubEnterprise")
    def github_enterprise(self) -> Optional[pulumi.Input['ModuleGithubEnterpriseArgs']]:
        """
        GitHub Enterprise (self-hosted) VCS settings
        """
        return pulumi.get(self, "github_enterprise")

    @github_enterprise.setter
    def github_enterprise(self, value: Optional[pulumi.Input['ModuleGithubEnterpriseArgs']]):
        pulumi.set(self, "github_enterprise", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['ModuleGitlabArgs']]:
        """
        GitLab VCS settings
        """
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['ModuleGitlabArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
        convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
        provide it here.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectRoot")
    def project_root(self) -> Optional[pulumi.Input[str]]:
        """
        Project root is the optional directory relative to the repository root containing the module source code.
        """
        return pulumi.get(self, "project_root")

    @project_root.setter
    def project_root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_root", value)

    @property
    @pulumi.getter(name="protectFromDeletion")
    def protect_from_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
        """
        return pulumi.get(self, "protect_from_deletion")

    @protect_from_deletion.setter
    def protect_from_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protect_from_deletion", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the repository, without the owner part
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="sharedAccounts")
    def shared_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of the accounts (subdomains) which should have access to the Module
        """
        return pulumi.get(self, "shared_accounts")

    @shared_accounts.setter
    def shared_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "shared_accounts", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID (slug) of the space the module is in
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="terraformProvider")
    def terraform_provider(self) -> Optional[pulumi.Input[str]]:
        """
        The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
        naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
        can provide the provider name here.
        """
        return pulumi.get(self, "terraform_provider")

    @terraform_provider.setter
    def terraform_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terraform_provider", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the worker pool to use
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)


class Module(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 administrative: Optional[pulumi.Input[bool]] = None,
                 azure_devops: Optional[pulumi.Input[pulumi.InputType['ModuleAzureDevopsArgs']]] = None,
                 bitbucket_cloud: Optional[pulumi.Input[pulumi.InputType['ModuleBitbucketCloudArgs']]] = None,
                 bitbucket_datacenter: Optional[pulumi.Input[pulumi.InputType['ModuleBitbucketDatacenterArgs']]] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_enterprise: Optional[pulumi.Input[pulumi.InputType['ModuleGithubEnterpriseArgs']]] = None,
                 gitlab: Optional[pulumi.Input[pulumi.InputType['ModuleGitlabArgs']]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_root: Optional[pulumi.Input[str]] = None,
                 protect_from_deletion: Optional[pulumi.Input[bool]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 shared_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 terraform_provider: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        # Explicit module name and provider:
        k8s_module = spacelift.Module("k8s-module",
            administrative=True,
            branch="master",
            description="Infra terraform module",
            repository="terraform-super-module",
            terraform_provider="aws")
        # Unspecified module name and provider (repository naming scheme terraform-${provider}-${name})
        example_module = spacelift.Module("example-module",
            administrative=True,
            branch="master",
            description="Example terraform module",
            project_root="example",
            repository="terraform-aws-example")
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/module:Module k8s-module $MODULE_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] administrative: Indicates whether this module can manage others. Defaults to `false`.
        :param pulumi.Input[pulumi.InputType['ModuleAzureDevopsArgs']] azure_devops: Azure DevOps VCS settings
        :param pulumi.Input[pulumi.InputType['ModuleBitbucketCloudArgs']] bitbucket_cloud: Bitbucket Cloud VCS settings
        :param pulumi.Input[pulumi.InputType['ModuleBitbucketDatacenterArgs']] bitbucket_datacenter: Bitbucket Datacenter VCS settings
        :param pulumi.Input[str] branch: GitHub branch to apply changes to
        :param pulumi.Input[str] description: Free-form module description for users
        :param pulumi.Input[pulumi.InputType['ModuleGithubEnterpriseArgs']] github_enterprise: GitHub Enterprise (self-hosted) VCS settings
        :param pulumi.Input[pulumi.InputType['ModuleGitlabArgs']] gitlab: GitLab VCS settings
        :param pulumi.Input[str] name: The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
               convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
               provide it here.
        :param pulumi.Input[str] project_root: Project root is the optional directory relative to the repository root containing the module source code.
        :param pulumi.Input[bool] protect_from_deletion: Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
        :param pulumi.Input[str] repository: Name of the repository, without the owner part
        :param pulumi.Input[Sequence[pulumi.Input[str]]] shared_accounts: List of the accounts (subdomains) which should have access to the Module
        :param pulumi.Input[str] space_id: ID (slug) of the space the module is in
        :param pulumi.Input[str] terraform_provider: The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
               naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
               can provide the provider name here.
        :param pulumi.Input[str] worker_pool_id: ID of the worker pool to use
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        # Explicit module name and provider:
        k8s_module = spacelift.Module("k8s-module",
            administrative=True,
            branch="master",
            description="Infra terraform module",
            repository="terraform-super-module",
            terraform_provider="aws")
        # Unspecified module name and provider (repository naming scheme terraform-${provider}-${name})
        example_module = spacelift.Module("example-module",
            administrative=True,
            branch="master",
            description="Example terraform module",
            project_root="example",
            repository="terraform-aws-example")
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/module:Module k8s-module $MODULE_ID
        ```

        :param str resource_name: The name of the resource.
        :param ModuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 administrative: Optional[pulumi.Input[bool]] = None,
                 azure_devops: Optional[pulumi.Input[pulumi.InputType['ModuleAzureDevopsArgs']]] = None,
                 bitbucket_cloud: Optional[pulumi.Input[pulumi.InputType['ModuleBitbucketCloudArgs']]] = None,
                 bitbucket_datacenter: Optional[pulumi.Input[pulumi.InputType['ModuleBitbucketDatacenterArgs']]] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_enterprise: Optional[pulumi.Input[pulumi.InputType['ModuleGithubEnterpriseArgs']]] = None,
                 gitlab: Optional[pulumi.Input[pulumi.InputType['ModuleGitlabArgs']]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_root: Optional[pulumi.Input[str]] = None,
                 protect_from_deletion: Optional[pulumi.Input[bool]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 shared_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 terraform_provider: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModuleArgs.__new__(ModuleArgs)

            __props__.__dict__["administrative"] = administrative
            __props__.__dict__["azure_devops"] = azure_devops
            __props__.__dict__["bitbucket_cloud"] = bitbucket_cloud
            __props__.__dict__["bitbucket_datacenter"] = bitbucket_datacenter
            if branch is None and not opts.urn:
                raise TypeError("Missing required property 'branch'")
            __props__.__dict__["branch"] = branch
            __props__.__dict__["description"] = description
            __props__.__dict__["github_enterprise"] = github_enterprise
            __props__.__dict__["gitlab"] = gitlab
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["project_root"] = project_root
            __props__.__dict__["protect_from_deletion"] = protect_from_deletion
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            __props__.__dict__["shared_accounts"] = shared_accounts
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["terraform_provider"] = terraform_provider
            __props__.__dict__["worker_pool_id"] = worker_pool_id
            __props__.__dict__["aws_assume_role_policy_statement"] = None
        super(Module, __self__).__init__(
            'spacelift:index/module:Module',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            administrative: Optional[pulumi.Input[bool]] = None,
            aws_assume_role_policy_statement: Optional[pulumi.Input[str]] = None,
            azure_devops: Optional[pulumi.Input[pulumi.InputType['ModuleAzureDevopsArgs']]] = None,
            bitbucket_cloud: Optional[pulumi.Input[pulumi.InputType['ModuleBitbucketCloudArgs']]] = None,
            bitbucket_datacenter: Optional[pulumi.Input[pulumi.InputType['ModuleBitbucketDatacenterArgs']]] = None,
            branch: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            github_enterprise: Optional[pulumi.Input[pulumi.InputType['ModuleGithubEnterpriseArgs']]] = None,
            gitlab: Optional[pulumi.Input[pulumi.InputType['ModuleGitlabArgs']]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_root: Optional[pulumi.Input[str]] = None,
            protect_from_deletion: Optional[pulumi.Input[bool]] = None,
            repository: Optional[pulumi.Input[str]] = None,
            shared_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            terraform_provider: Optional[pulumi.Input[str]] = None,
            worker_pool_id: Optional[pulumi.Input[str]] = None) -> 'Module':
        """
        Get an existing Module resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] administrative: Indicates whether this module can manage others. Defaults to `false`.
        :param pulumi.Input[str] aws_assume_role_policy_statement: AWS IAM assume role policy statement setting up trust relationship
        :param pulumi.Input[pulumi.InputType['ModuleAzureDevopsArgs']] azure_devops: Azure DevOps VCS settings
        :param pulumi.Input[pulumi.InputType['ModuleBitbucketCloudArgs']] bitbucket_cloud: Bitbucket Cloud VCS settings
        :param pulumi.Input[pulumi.InputType['ModuleBitbucketDatacenterArgs']] bitbucket_datacenter: Bitbucket Datacenter VCS settings
        :param pulumi.Input[str] branch: GitHub branch to apply changes to
        :param pulumi.Input[str] description: Free-form module description for users
        :param pulumi.Input[pulumi.InputType['ModuleGithubEnterpriseArgs']] github_enterprise: GitHub Enterprise (self-hosted) VCS settings
        :param pulumi.Input[pulumi.InputType['ModuleGitlabArgs']] gitlab: GitLab VCS settings
        :param pulumi.Input[str] name: The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
               convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
               provide it here.
        :param pulumi.Input[str] project_root: Project root is the optional directory relative to the repository root containing the module source code.
        :param pulumi.Input[bool] protect_from_deletion: Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
        :param pulumi.Input[str] repository: Name of the repository, without the owner part
        :param pulumi.Input[Sequence[pulumi.Input[str]]] shared_accounts: List of the accounts (subdomains) which should have access to the Module
        :param pulumi.Input[str] space_id: ID (slug) of the space the module is in
        :param pulumi.Input[str] terraform_provider: The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
               naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
               can provide the provider name here.
        :param pulumi.Input[str] worker_pool_id: ID of the worker pool to use
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModuleState.__new__(_ModuleState)

        __props__.__dict__["administrative"] = administrative
        __props__.__dict__["aws_assume_role_policy_statement"] = aws_assume_role_policy_statement
        __props__.__dict__["azure_devops"] = azure_devops
        __props__.__dict__["bitbucket_cloud"] = bitbucket_cloud
        __props__.__dict__["bitbucket_datacenter"] = bitbucket_datacenter
        __props__.__dict__["branch"] = branch
        __props__.__dict__["description"] = description
        __props__.__dict__["github_enterprise"] = github_enterprise
        __props__.__dict__["gitlab"] = gitlab
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["project_root"] = project_root
        __props__.__dict__["protect_from_deletion"] = protect_from_deletion
        __props__.__dict__["repository"] = repository
        __props__.__dict__["shared_accounts"] = shared_accounts
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["terraform_provider"] = terraform_provider
        __props__.__dict__["worker_pool_id"] = worker_pool_id
        return Module(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def administrative(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether this module can manage others. Defaults to `false`.
        """
        return pulumi.get(self, "administrative")

    @property
    @pulumi.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> pulumi.Output[str]:
        """
        AWS IAM assume role policy statement setting up trust relationship
        """
        return pulumi.get(self, "aws_assume_role_policy_statement")

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> pulumi.Output[Optional['outputs.ModuleAzureDevops']]:
        """
        Azure DevOps VCS settings
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> pulumi.Output[Optional['outputs.ModuleBitbucketCloud']]:
        """
        Bitbucket Cloud VCS settings
        """
        return pulumi.get(self, "bitbucket_cloud")

    @property
    @pulumi.getter(name="bitbucketDatacenter")
    def bitbucket_datacenter(self) -> pulumi.Output[Optional['outputs.ModuleBitbucketDatacenter']]:
        """
        Bitbucket Datacenter VCS settings
        """
        return pulumi.get(self, "bitbucket_datacenter")

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Output[str]:
        """
        GitHub branch to apply changes to
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Free-form module description for users
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="githubEnterprise")
    def github_enterprise(self) -> pulumi.Output[Optional['outputs.ModuleGithubEnterprise']]:
        """
        GitHub Enterprise (self-hosted) VCS settings
        """
        return pulumi.get(self, "github_enterprise")

    @property
    @pulumi.getter
    def gitlab(self) -> pulumi.Output[Optional['outputs.ModuleGitlab']]:
        """
        GitLab VCS settings
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The module name will by default be inferred from the repository name if it follows the terraform-provider-name naming
        convention. However, if the repository doesn't follow this convention, or you want to give it a custom name, you can
        provide it here.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectRoot")
    def project_root(self) -> pulumi.Output[Optional[str]]:
        """
        Project root is the optional directory relative to the repository root containing the module source code.
        """
        return pulumi.get(self, "project_root")

    @property
    @pulumi.getter(name="protectFromDeletion")
    def protect_from_deletion(self) -> pulumi.Output[Optional[bool]]:
        """
        Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
        """
        return pulumi.get(self, "protect_from_deletion")

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Output[str]:
        """
        Name of the repository, without the owner part
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="sharedAccounts")
    def shared_accounts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of the accounts (subdomains) which should have access to the Module
        """
        return pulumi.get(self, "shared_accounts")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        ID (slug) of the space the module is in
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="terraformProvider")
    def terraform_provider(self) -> pulumi.Output[str]:
        """
        The module provider will by default be inferred from the repository name if it follows the terraform-provider-name
        naming convention. However, if the repository doesn't follow this convention, or you gave the module a custom name, you
        can provide the provider name here.
        """
        return pulumi.get(self, "terraform_provider")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the worker pool to use
        """
        return pulumi.get(self, "worker_pool_id")

