# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ScheduledTaskArgs', 'ScheduledTask']

@pulumi.input_type
class ScheduledTaskArgs:
    def __init__(__self__, *,
                 command: pulumi.Input[str],
                 stack_id: pulumi.Input[str],
                 at: Optional[pulumi.Input[int]] = None,
                 everies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ScheduledTask resource.
        :param pulumi.Input[str] command: Command that will be run.
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up the scheduled task
        :param pulumi.Input[int] at: Timestamp (unix timestamp) at which time the scheduled task should happen.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] everies: List of cron schedule expressions based on which the scheduled task should be triggered.
        :param pulumi.Input[str] schedule_id: ID of the schedule
        :param pulumi.Input[str] timezone: Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "stack_id", stack_id)
        if at is not None:
            pulumi.set(__self__, "at", at)
        if everies is not None:
            pulumi.set(__self__, "everies", everies)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input[str]:
        """
        Command that will be run.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[str]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Input[str]:
        """
        ID of the stack for which to set up the scheduled task
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[int]]:
        """
        Timestamp (unix timestamp) at which time the scheduled task should happen.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "at", value)

    @property
    @pulumi.getter
    def everies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of cron schedule expressions based on which the scheduled task should be triggered.
        """
        return pulumi.get(self, "everies")

    @everies.setter
    def everies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "everies", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the schedule
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class _ScheduledTaskState:
    def __init__(__self__, *,
                 at: Optional[pulumi.Input[int]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 everies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ScheduledTask resources.
        :param pulumi.Input[int] at: Timestamp (unix timestamp) at which time the scheduled task should happen.
        :param pulumi.Input[str] command: Command that will be run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] everies: List of cron schedule expressions based on which the scheduled task should be triggered.
        :param pulumi.Input[str] schedule_id: ID of the schedule
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up the scheduled task
        :param pulumi.Input[str] timezone: Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        if at is not None:
            pulumi.set(__self__, "at", at)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if everies is not None:
            pulumi.set(__self__, "everies", everies)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[int]]:
        """
        Timestamp (unix timestamp) at which time the scheduled task should happen.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "at", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        """
        Command that will be run.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def everies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of cron schedule expressions based on which the scheduled task should be triggered.
        """
        return pulumi.get(self, "everies")

    @everies.setter
    def everies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "everies", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the schedule
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack for which to set up the scheduled task
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


class ScheduledTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 at: Optional[pulumi.Input[int]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 everies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `ScheduledTask` represents a scheduling configuration for a Stack. It will trigger task on the given schedule or timestamp

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        k8s_core = spacelift.Stack("k8s-core")
        # ...
        # create the resources of a stack on a given schedule
        k8s_core_create = spacelift.ScheduledTask("k8s-core-create",
            stack_id=k8s_core.id,
            command="pulumi up -auto-approve",
            everies=["0 7 * * 1-5"],
            timezone="CET")
        # destroy the resources of a stack on a given schedule
        k8s_core_destroy_scheduled_task = spacelift.ScheduledTask("k8s-core-destroyScheduledTask",
            stack_id=k8s_core.id,
            command="terraform destroy -auto-approve",
            everies=["0 21 * * 1-5"],
            timezone="CET")
        # at a given timestamp (unix)
        k8s_core_destroy_index_scheduled_task_scheduled_task = spacelift.ScheduledTask("k8s-core-destroyIndex/scheduledTaskScheduledTask",
            stack_id=k8s_core.id,
            command="terraform destroy -auto-approve",
            at=1663336895)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/scheduledTask:ScheduledTask ireland-kubeconfig $STACK_ID/$SCHEDULED_TASK_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] at: Timestamp (unix timestamp) at which time the scheduled task should happen.
        :param pulumi.Input[str] command: Command that will be run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] everies: List of cron schedule expressions based on which the scheduled task should be triggered.
        :param pulumi.Input[str] schedule_id: ID of the schedule
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up the scheduled task
        :param pulumi.Input[str] timezone: Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScheduledTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `ScheduledTask` represents a scheduling configuration for a Stack. It will trigger task on the given schedule or timestamp

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        k8s_core = spacelift.Stack("k8s-core")
        # ...
        # create the resources of a stack on a given schedule
        k8s_core_create = spacelift.ScheduledTask("k8s-core-create",
            stack_id=k8s_core.id,
            command="pulumi up -auto-approve",
            everies=["0 7 * * 1-5"],
            timezone="CET")
        # destroy the resources of a stack on a given schedule
        k8s_core_destroy_scheduled_task = spacelift.ScheduledTask("k8s-core-destroyScheduledTask",
            stack_id=k8s_core.id,
            command="terraform destroy -auto-approve",
            everies=["0 21 * * 1-5"],
            timezone="CET")
        # at a given timestamp (unix)
        k8s_core_destroy_index_scheduled_task_scheduled_task = spacelift.ScheduledTask("k8s-core-destroyIndex/scheduledTaskScheduledTask",
            stack_id=k8s_core.id,
            command="terraform destroy -auto-approve",
            at=1663336895)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/scheduledTask:ScheduledTask ireland-kubeconfig $STACK_ID/$SCHEDULED_TASK_ID
        ```

        :param str resource_name: The name of the resource.
        :param ScheduledTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScheduledTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 at: Optional[pulumi.Input[int]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 everies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScheduledTaskArgs.__new__(ScheduledTaskArgs)

            __props__.__dict__["at"] = at
            if command is None and not opts.urn:
                raise TypeError("Missing required property 'command'")
            __props__.__dict__["command"] = command
            __props__.__dict__["everies"] = everies
            __props__.__dict__["schedule_id"] = schedule_id
            if stack_id is None and not opts.urn:
                raise TypeError("Missing required property 'stack_id'")
            __props__.__dict__["stack_id"] = stack_id
            __props__.__dict__["timezone"] = timezone
        super(ScheduledTask, __self__).__init__(
            'spacelift:index/scheduledTask:ScheduledTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            at: Optional[pulumi.Input[int]] = None,
            command: Optional[pulumi.Input[str]] = None,
            everies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            schedule_id: Optional[pulumi.Input[str]] = None,
            stack_id: Optional[pulumi.Input[str]] = None,
            timezone: Optional[pulumi.Input[str]] = None) -> 'ScheduledTask':
        """
        Get an existing ScheduledTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] at: Timestamp (unix timestamp) at which time the scheduled task should happen.
        :param pulumi.Input[str] command: Command that will be run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] everies: List of cron schedule expressions based on which the scheduled task should be triggered.
        :param pulumi.Input[str] schedule_id: ID of the schedule
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up the scheduled task
        :param pulumi.Input[str] timezone: Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScheduledTaskState.__new__(_ScheduledTaskState)

        __props__.__dict__["at"] = at
        __props__.__dict__["command"] = command
        __props__.__dict__["everies"] = everies
        __props__.__dict__["schedule_id"] = schedule_id
        __props__.__dict__["stack_id"] = stack_id
        __props__.__dict__["timezone"] = timezone
        return ScheduledTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def at(self) -> pulumi.Output[Optional[int]]:
        """
        Timestamp (unix timestamp) at which time the scheduled task should happen.
        """
        return pulumi.get(self, "at")

    @property
    @pulumi.getter
    def command(self) -> pulumi.Output[str]:
        """
        Command that will be run.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def everies(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cron schedule expressions based on which the scheduled task should be triggered.
        """
        return pulumi.get(self, "everies")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> pulumi.Output[str]:
        """
        ID of the schedule
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[str]:
        """
        ID of the stack for which to set up the scheduled task
        """
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[Optional[str]]:
        """
        Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        return pulumi.get(self, "timezone")

