# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NamedWebhookSecretHeaderArgs', 'NamedWebhookSecretHeader']

@pulumi.input_type
class NamedWebhookSecretHeaderArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 webhook_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a NamedWebhookSecretHeader resource.
        :param pulumi.Input[str] key: key for the header
        :param pulumi.Input[str] value: value for the header
        :param pulumi.Input[str] webhook_id: ID of the stack on which the environment variable is defined
        """
        NamedWebhookSecretHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
            webhook_id=webhook_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             webhook_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")
        if webhook_id is None and 'webhookId' in kwargs:
            webhook_id = kwargs['webhookId']
        if webhook_id is None:
            raise TypeError("Missing 'webhook_id' argument")

        _setter("key", key)
        _setter("value", value)
        _setter("webhook_id", webhook_id)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key for the header
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        value for the header
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> pulumi.Input[str]:
        """
        ID of the stack on which the environment variable is defined
        """
        return pulumi.get(self, "webhook_id")

    @webhook_id.setter
    def webhook_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "webhook_id", value)


@pulumi.input_type
class _NamedWebhookSecretHeaderState:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 webhook_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NamedWebhookSecretHeader resources.
        :param pulumi.Input[str] key: key for the header
        :param pulumi.Input[str] value: value for the header
        :param pulumi.Input[str] webhook_id: ID of the stack on which the environment variable is defined
        """
        _NamedWebhookSecretHeaderState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
            webhook_id=webhook_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             webhook_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if webhook_id is None and 'webhookId' in kwargs:
            webhook_id = kwargs['webhookId']

        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)
        if webhook_id is not None:
            _setter("webhook_id", webhook_id)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key for the header
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value for the header
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack on which the environment variable is defined
        """
        return pulumi.get(self, "webhook_id")

    @webhook_id.setter
    def webhook_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_id", value)


class NamedWebhookSecretHeader(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 webhook_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `NamedWebhookSecretHeader` represents secret key value combination used as a custom headerwhen delivering webhook requests. It depends on `NamedWebhook` resource which should exist.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: key for the header
        :param pulumi.Input[str] value: value for the header
        :param pulumi.Input[str] webhook_id: ID of the stack on which the environment variable is defined
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamedWebhookSecretHeaderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `NamedWebhookSecretHeader` represents secret key value combination used as a custom headerwhen delivering webhook requests. It depends on `NamedWebhook` resource which should exist.

        :param str resource_name: The name of the resource.
        :param NamedWebhookSecretHeaderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamedWebhookSecretHeaderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            NamedWebhookSecretHeaderArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 webhook_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamedWebhookSecretHeaderArgs.__new__(NamedWebhookSecretHeaderArgs)

            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = None if value is None else pulumi.Output.secret(value)
            if webhook_id is None and not opts.urn:
                raise TypeError("Missing required property 'webhook_id'")
            __props__.__dict__["webhook_id"] = webhook_id
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["value"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(NamedWebhookSecretHeader, __self__).__init__(
            'spacelift:index/namedWebhookSecretHeader:NamedWebhookSecretHeader',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            key: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None,
            webhook_id: Optional[pulumi.Input[str]] = None) -> 'NamedWebhookSecretHeader':
        """
        Get an existing NamedWebhookSecretHeader resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: key for the header
        :param pulumi.Input[str] value: value for the header
        :param pulumi.Input[str] webhook_id: ID of the stack on which the environment variable is defined
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamedWebhookSecretHeaderState.__new__(_NamedWebhookSecretHeaderState)

        __props__.__dict__["key"] = key
        __props__.__dict__["value"] = value
        __props__.__dict__["webhook_id"] = webhook_id
        return NamedWebhookSecretHeader(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        key for the header
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        """
        value for the header
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> pulumi.Output[str]:
        """
        ID of the stack on which the environment variable is defined
        """
        return pulumi.get(self, "webhook_id")

