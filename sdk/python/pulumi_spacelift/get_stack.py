# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetStackResult',
    'AwaitableGetStackResult',
    'get_stack',
    'get_stack_output',
]

@pulumi.output_type
class GetStackResult:
    """
    A collection of values returned by getStack.
    """
    def __init__(__self__, additional_project_globs=None, administrative=None, after_applies=None, after_destroys=None, after_inits=None, after_performs=None, after_plans=None, after_runs=None, ansibles=None, autodeploy=None, autoretry=None, aws_assume_role_policy_statement=None, azure_devops=None, before_applies=None, before_destroys=None, before_inits=None, before_performs=None, before_plans=None, bitbucket_clouds=None, bitbucket_datacenters=None, branch=None, cloudformations=None, description=None, enable_local_preview=None, github_enterprises=None, gitlabs=None, id=None, kubernetes=None, labels=None, manage_state=None, name=None, project_root=None, protect_from_deletion=None, pulumis=None, raw_gits=None, repository=None, runner_image=None, showcases=None, space_id=None, stack_id=None, terraform_external_state_access=None, terraform_smart_sanitization=None, terraform_version=None, terraform_workflow_tool=None, terraform_workspace=None, worker_pool_id=None):
        if additional_project_globs and not isinstance(additional_project_globs, list):
            raise TypeError("Expected argument 'additional_project_globs' to be a list")
        pulumi.set(__self__, "additional_project_globs", additional_project_globs)
        if administrative and not isinstance(administrative, bool):
            raise TypeError("Expected argument 'administrative' to be a bool")
        pulumi.set(__self__, "administrative", administrative)
        if after_applies and not isinstance(after_applies, list):
            raise TypeError("Expected argument 'after_applies' to be a list")
        pulumi.set(__self__, "after_applies", after_applies)
        if after_destroys and not isinstance(after_destroys, list):
            raise TypeError("Expected argument 'after_destroys' to be a list")
        pulumi.set(__self__, "after_destroys", after_destroys)
        if after_inits and not isinstance(after_inits, list):
            raise TypeError("Expected argument 'after_inits' to be a list")
        pulumi.set(__self__, "after_inits", after_inits)
        if after_performs and not isinstance(after_performs, list):
            raise TypeError("Expected argument 'after_performs' to be a list")
        pulumi.set(__self__, "after_performs", after_performs)
        if after_plans and not isinstance(after_plans, list):
            raise TypeError("Expected argument 'after_plans' to be a list")
        pulumi.set(__self__, "after_plans", after_plans)
        if after_runs and not isinstance(after_runs, list):
            raise TypeError("Expected argument 'after_runs' to be a list")
        pulumi.set(__self__, "after_runs", after_runs)
        if ansibles and not isinstance(ansibles, list):
            raise TypeError("Expected argument 'ansibles' to be a list")
        pulumi.set(__self__, "ansibles", ansibles)
        if autodeploy and not isinstance(autodeploy, bool):
            raise TypeError("Expected argument 'autodeploy' to be a bool")
        pulumi.set(__self__, "autodeploy", autodeploy)
        if autoretry and not isinstance(autoretry, bool):
            raise TypeError("Expected argument 'autoretry' to be a bool")
        pulumi.set(__self__, "autoretry", autoretry)
        if aws_assume_role_policy_statement and not isinstance(aws_assume_role_policy_statement, str):
            raise TypeError("Expected argument 'aws_assume_role_policy_statement' to be a str")
        pulumi.set(__self__, "aws_assume_role_policy_statement", aws_assume_role_policy_statement)
        if azure_devops and not isinstance(azure_devops, list):
            raise TypeError("Expected argument 'azure_devops' to be a list")
        pulumi.set(__self__, "azure_devops", azure_devops)
        if before_applies and not isinstance(before_applies, list):
            raise TypeError("Expected argument 'before_applies' to be a list")
        pulumi.set(__self__, "before_applies", before_applies)
        if before_destroys and not isinstance(before_destroys, list):
            raise TypeError("Expected argument 'before_destroys' to be a list")
        pulumi.set(__self__, "before_destroys", before_destroys)
        if before_inits and not isinstance(before_inits, list):
            raise TypeError("Expected argument 'before_inits' to be a list")
        pulumi.set(__self__, "before_inits", before_inits)
        if before_performs and not isinstance(before_performs, list):
            raise TypeError("Expected argument 'before_performs' to be a list")
        pulumi.set(__self__, "before_performs", before_performs)
        if before_plans and not isinstance(before_plans, list):
            raise TypeError("Expected argument 'before_plans' to be a list")
        pulumi.set(__self__, "before_plans", before_plans)
        if bitbucket_clouds and not isinstance(bitbucket_clouds, list):
            raise TypeError("Expected argument 'bitbucket_clouds' to be a list")
        pulumi.set(__self__, "bitbucket_clouds", bitbucket_clouds)
        if bitbucket_datacenters and not isinstance(bitbucket_datacenters, list):
            raise TypeError("Expected argument 'bitbucket_datacenters' to be a list")
        pulumi.set(__self__, "bitbucket_datacenters", bitbucket_datacenters)
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        pulumi.set(__self__, "branch", branch)
        if cloudformations and not isinstance(cloudformations, list):
            raise TypeError("Expected argument 'cloudformations' to be a list")
        pulumi.set(__self__, "cloudformations", cloudformations)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_local_preview and not isinstance(enable_local_preview, bool):
            raise TypeError("Expected argument 'enable_local_preview' to be a bool")
        pulumi.set(__self__, "enable_local_preview", enable_local_preview)
        if github_enterprises and not isinstance(github_enterprises, list):
            raise TypeError("Expected argument 'github_enterprises' to be a list")
        pulumi.set(__self__, "github_enterprises", github_enterprises)
        if gitlabs and not isinstance(gitlabs, list):
            raise TypeError("Expected argument 'gitlabs' to be a list")
        pulumi.set(__self__, "gitlabs", gitlabs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kubernetes and not isinstance(kubernetes, list):
            raise TypeError("Expected argument 'kubernetes' to be a list")
        pulumi.set(__self__, "kubernetes", kubernetes)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if manage_state and not isinstance(manage_state, bool):
            raise TypeError("Expected argument 'manage_state' to be a bool")
        pulumi.set(__self__, "manage_state", manage_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_root and not isinstance(project_root, str):
            raise TypeError("Expected argument 'project_root' to be a str")
        pulumi.set(__self__, "project_root", project_root)
        if protect_from_deletion and not isinstance(protect_from_deletion, bool):
            raise TypeError("Expected argument 'protect_from_deletion' to be a bool")
        pulumi.set(__self__, "protect_from_deletion", protect_from_deletion)
        if pulumis and not isinstance(pulumis, list):
            raise TypeError("Expected argument 'pulumis' to be a list")
        pulumi.set(__self__, "pulumis", pulumis)
        if raw_gits and not isinstance(raw_gits, list):
            raise TypeError("Expected argument 'raw_gits' to be a list")
        pulumi.set(__self__, "raw_gits", raw_gits)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)
        if runner_image and not isinstance(runner_image, str):
            raise TypeError("Expected argument 'runner_image' to be a str")
        pulumi.set(__self__, "runner_image", runner_image)
        if showcases and not isinstance(showcases, list):
            raise TypeError("Expected argument 'showcases' to be a list")
        pulumi.set(__self__, "showcases", showcases)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if stack_id and not isinstance(stack_id, str):
            raise TypeError("Expected argument 'stack_id' to be a str")
        pulumi.set(__self__, "stack_id", stack_id)
        if terraform_external_state_access and not isinstance(terraform_external_state_access, bool):
            raise TypeError("Expected argument 'terraform_external_state_access' to be a bool")
        pulumi.set(__self__, "terraform_external_state_access", terraform_external_state_access)
        if terraform_smart_sanitization and not isinstance(terraform_smart_sanitization, bool):
            raise TypeError("Expected argument 'terraform_smart_sanitization' to be a bool")
        pulumi.set(__self__, "terraform_smart_sanitization", terraform_smart_sanitization)
        if terraform_version and not isinstance(terraform_version, str):
            raise TypeError("Expected argument 'terraform_version' to be a str")
        pulumi.set(__self__, "terraform_version", terraform_version)
        if terraform_workflow_tool and not isinstance(terraform_workflow_tool, str):
            raise TypeError("Expected argument 'terraform_workflow_tool' to be a str")
        pulumi.set(__self__, "terraform_workflow_tool", terraform_workflow_tool)
        if terraform_workspace and not isinstance(terraform_workspace, str):
            raise TypeError("Expected argument 'terraform_workspace' to be a str")
        pulumi.set(__self__, "terraform_workspace", terraform_workspace)
        if worker_pool_id and not isinstance(worker_pool_id, str):
            raise TypeError("Expected argument 'worker_pool_id' to be a str")
        pulumi.set(__self__, "worker_pool_id", worker_pool_id)

    @property
    @pulumi.getter(name="additionalProjectGlobs")
    def additional_project_globs(self) -> Optional[Sequence[str]]:
        """
        Project globs is an optional list of paths to track changes of in addition to the project root.
        """
        return pulumi.get(self, "additional_project_globs")

    @property
    @pulumi.getter
    def administrative(self) -> bool:
        """
        indicates whether this stack can administer others
        """
        return pulumi.get(self, "administrative")

    @property
    @pulumi.getter(name="afterApplies")
    def after_applies(self) -> Sequence[str]:
        """
        List of after-apply scripts
        """
        return pulumi.get(self, "after_applies")

    @property
    @pulumi.getter(name="afterDestroys")
    def after_destroys(self) -> Sequence[str]:
        """
        List of after-destroy scripts
        """
        return pulumi.get(self, "after_destroys")

    @property
    @pulumi.getter(name="afterInits")
    def after_inits(self) -> Sequence[str]:
        """
        List of after-init scripts
        """
        return pulumi.get(self, "after_inits")

    @property
    @pulumi.getter(name="afterPerforms")
    def after_performs(self) -> Sequence[str]:
        """
        List of after-perform scripts
        """
        return pulumi.get(self, "after_performs")

    @property
    @pulumi.getter(name="afterPlans")
    def after_plans(self) -> Sequence[str]:
        """
        List of after-plan scripts
        """
        return pulumi.get(self, "after_plans")

    @property
    @pulumi.getter(name="afterRuns")
    def after_runs(self) -> Optional[Sequence[str]]:
        """
        List of after-run scripts
        """
        return pulumi.get(self, "after_runs")

    @property
    @pulumi.getter
    def ansibles(self) -> Sequence['outputs.GetStackAnsibleResult']:
        """
        Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        """
        return pulumi.get(self, "ansibles")

    @property
    @pulumi.getter
    def autodeploy(self) -> bool:
        """
        indicates whether changes to this stack can be automatically deployed
        """
        return pulumi.get(self, "autodeploy")

    @property
    @pulumi.getter
    def autoretry(self) -> bool:
        """
        indicates whether obsolete proposed changes should automatically be retried
        """
        return pulumi.get(self, "autoretry")

    @property
    @pulumi.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> str:
        """
        AWS IAM assume role policy statement setting up trust relationship
        """
        return pulumi.get(self, "aws_assume_role_policy_statement")

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Sequence['outputs.GetStackAzureDevopResult']:
        """
        Azure DevOps VCS settings
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="beforeApplies")
    def before_applies(self) -> Sequence[str]:
        """
        List of before-apply scripts
        """
        return pulumi.get(self, "before_applies")

    @property
    @pulumi.getter(name="beforeDestroys")
    def before_destroys(self) -> Sequence[str]:
        """
        List of before-destroy scripts
        """
        return pulumi.get(self, "before_destroys")

    @property
    @pulumi.getter(name="beforeInits")
    def before_inits(self) -> Sequence[str]:
        """
        List of before-init scripts
        """
        return pulumi.get(self, "before_inits")

    @property
    @pulumi.getter(name="beforePerforms")
    def before_performs(self) -> Sequence[str]:
        """
        List of before-perform scripts
        """
        return pulumi.get(self, "before_performs")

    @property
    @pulumi.getter(name="beforePlans")
    def before_plans(self) -> Sequence[str]:
        """
        List of before-plan scripts
        """
        return pulumi.get(self, "before_plans")

    @property
    @pulumi.getter(name="bitbucketClouds")
    def bitbucket_clouds(self) -> Sequence['outputs.GetStackBitbucketCloudResult']:
        """
        Bitbucket Cloud VCS settings
        """
        return pulumi.get(self, "bitbucket_clouds")

    @property
    @pulumi.getter(name="bitbucketDatacenters")
    def bitbucket_datacenters(self) -> Sequence['outputs.GetStackBitbucketDatacenterResult']:
        """
        Bitbucket Datacenter VCS settings
        """
        return pulumi.get(self, "bitbucket_datacenters")

    @property
    @pulumi.getter
    def branch(self) -> str:
        """
        Repository branch to treat as the default 'main' branch
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def cloudformations(self) -> Sequence['outputs.GetStackCloudformationResult']:
        """
        CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        """
        return pulumi.get(self, "cloudformations")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        free-form stack description for users
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableLocalPreview")
    def enable_local_preview(self) -> bool:
        """
        Indicates whether local preview runs can be triggered on this Stack.
        """
        return pulumi.get(self, "enable_local_preview")

    @property
    @pulumi.getter(name="githubEnterprises")
    def github_enterprises(self) -> Sequence['outputs.GetStackGithubEnterpriseResult']:
        """
        GitHub Enterprise (self-hosted) VCS settings
        """
        return pulumi.get(self, "github_enterprises")

    @property
    @pulumi.getter
    def gitlabs(self) -> Sequence['outputs.GetStackGitlabResult']:
        """
        GitLab VCS settings
        """
        return pulumi.get(self, "gitlabs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kubernetes(self) -> Sequence['outputs.GetStackKuberneteResult']:
        """
        Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        """
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="manageState")
    def manage_state(self) -> bool:
        """
        Determines if Spacelift should manage state for this stack
        """
        return pulumi.get(self, "manage_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the stack - should be unique in one account
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectRoot")
    def project_root(self) -> str:
        """
        Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        """
        return pulumi.get(self, "project_root")

    @property
    @pulumi.getter(name="protectFromDeletion")
    def protect_from_deletion(self) -> bool:
        """
        Protect this stack from accidental deletion. If set, attempts to delete this stack will fail.
        """
        return pulumi.get(self, "protect_from_deletion")

    @property
    @pulumi.getter
    def pulumis(self) -> Sequence['outputs.GetStackPulumiResult']:
        """
        Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        """
        return pulumi.get(self, "pulumis")

    @property
    @pulumi.getter(name="rawGits")
    def raw_gits(self) -> Sequence['outputs.GetStackRawGitResult']:
        """
        One-way VCS integration using a raw Git repository link
        """
        return pulumi.get(self, "raw_gits")

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        Name of the repository, without the owner part
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="runnerImage")
    def runner_image(self) -> str:
        """
        Name of the Docker image used to process Runs
        """
        return pulumi.get(self, "runner_image")

    @property
    @pulumi.getter
    def showcases(self) -> Sequence['outputs.GetStackShowcaseResult']:
        """
        Showcase-related attributes
        """
        return pulumi.get(self, "showcases")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the stack is in
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> str:
        """
        ID (slug) of the stack
        """
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter(name="terraformExternalStateAccess")
    def terraform_external_state_access(self) -> bool:
        """
        Indicates whether you can access the Stack state file from other stacks or outside of Spacelift.
        """
        return pulumi.get(self, "terraform_external_state_access")

    @property
    @pulumi.getter(name="terraformSmartSanitization")
    def terraform_smart_sanitization(self) -> bool:
        return pulumi.get(self, "terraform_smart_sanitization")

    @property
    @pulumi.getter(name="terraformVersion")
    def terraform_version(self) -> str:
        return pulumi.get(self, "terraform_version")

    @property
    @pulumi.getter(name="terraformWorkflowTool")
    def terraform_workflow_tool(self) -> str:
        """
        Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
        """
        return pulumi.get(self, "terraform_workflow_tool")

    @property
    @pulumi.getter(name="terraformWorkspace")
    def terraform_workspace(self) -> str:
        return pulumi.get(self, "terraform_workspace")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> str:
        """
        ID of the worker pool to use
        """
        return pulumi.get(self, "worker_pool_id")


class AwaitableGetStackResult(GetStackResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStackResult(
            additional_project_globs=self.additional_project_globs,
            administrative=self.administrative,
            after_applies=self.after_applies,
            after_destroys=self.after_destroys,
            after_inits=self.after_inits,
            after_performs=self.after_performs,
            after_plans=self.after_plans,
            after_runs=self.after_runs,
            ansibles=self.ansibles,
            autodeploy=self.autodeploy,
            autoretry=self.autoretry,
            aws_assume_role_policy_statement=self.aws_assume_role_policy_statement,
            azure_devops=self.azure_devops,
            before_applies=self.before_applies,
            before_destroys=self.before_destroys,
            before_inits=self.before_inits,
            before_performs=self.before_performs,
            before_plans=self.before_plans,
            bitbucket_clouds=self.bitbucket_clouds,
            bitbucket_datacenters=self.bitbucket_datacenters,
            branch=self.branch,
            cloudformations=self.cloudformations,
            description=self.description,
            enable_local_preview=self.enable_local_preview,
            github_enterprises=self.github_enterprises,
            gitlabs=self.gitlabs,
            id=self.id,
            kubernetes=self.kubernetes,
            labels=self.labels,
            manage_state=self.manage_state,
            name=self.name,
            project_root=self.project_root,
            protect_from_deletion=self.protect_from_deletion,
            pulumis=self.pulumis,
            raw_gits=self.raw_gits,
            repository=self.repository,
            runner_image=self.runner_image,
            showcases=self.showcases,
            space_id=self.space_id,
            stack_id=self.stack_id,
            terraform_external_state_access=self.terraform_external_state_access,
            terraform_smart_sanitization=self.terraform_smart_sanitization,
            terraform_version=self.terraform_version,
            terraform_workflow_tool=self.terraform_workflow_tool,
            terraform_workspace=self.terraform_workspace,
            worker_pool_id=self.worker_pool_id)


def get_stack(additional_project_globs: Optional[Sequence[str]] = None,
              after_applies: Optional[Sequence[str]] = None,
              after_destroys: Optional[Sequence[str]] = None,
              after_inits: Optional[Sequence[str]] = None,
              after_performs: Optional[Sequence[str]] = None,
              after_plans: Optional[Sequence[str]] = None,
              after_runs: Optional[Sequence[str]] = None,
              before_applies: Optional[Sequence[str]] = None,
              before_destroys: Optional[Sequence[str]] = None,
              before_inits: Optional[Sequence[str]] = None,
              before_performs: Optional[Sequence[str]] = None,
              before_plans: Optional[Sequence[str]] = None,
              stack_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStackResult:
    """
    `Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    k8s_core = spacelift.get_stack(stack_id="k8s-core")
    ```


    :param Sequence[str] additional_project_globs: Project globs is an optional list of paths to track changes of in addition to the project root.
    :param Sequence[str] after_applies: List of after-apply scripts
    :param Sequence[str] after_destroys: List of after-destroy scripts
    :param Sequence[str] after_inits: List of after-init scripts
    :param Sequence[str] after_performs: List of after-perform scripts
    :param Sequence[str] after_plans: List of after-plan scripts
    :param Sequence[str] after_runs: List of after-run scripts
    :param Sequence[str] before_applies: List of before-apply scripts
    :param Sequence[str] before_destroys: List of before-destroy scripts
    :param Sequence[str] before_inits: List of before-init scripts
    :param Sequence[str] before_performs: List of before-perform scripts
    :param Sequence[str] before_plans: List of before-plan scripts
    :param str stack_id: ID (slug) of the stack
    """
    __args__ = dict()
    __args__['additionalProjectGlobs'] = additional_project_globs
    __args__['afterApplies'] = after_applies
    __args__['afterDestroys'] = after_destroys
    __args__['afterInits'] = after_inits
    __args__['afterPerforms'] = after_performs
    __args__['afterPlans'] = after_plans
    __args__['afterRuns'] = after_runs
    __args__['beforeApplies'] = before_applies
    __args__['beforeDestroys'] = before_destroys
    __args__['beforeInits'] = before_inits
    __args__['beforePerforms'] = before_performs
    __args__['beforePlans'] = before_plans
    __args__['stackId'] = stack_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('spacelift:index/getStack:getStack', __args__, opts=opts, typ=GetStackResult).value

    return AwaitableGetStackResult(
        additional_project_globs=pulumi.get(__ret__, 'additional_project_globs'),
        administrative=pulumi.get(__ret__, 'administrative'),
        after_applies=pulumi.get(__ret__, 'after_applies'),
        after_destroys=pulumi.get(__ret__, 'after_destroys'),
        after_inits=pulumi.get(__ret__, 'after_inits'),
        after_performs=pulumi.get(__ret__, 'after_performs'),
        after_plans=pulumi.get(__ret__, 'after_plans'),
        after_runs=pulumi.get(__ret__, 'after_runs'),
        ansibles=pulumi.get(__ret__, 'ansibles'),
        autodeploy=pulumi.get(__ret__, 'autodeploy'),
        autoretry=pulumi.get(__ret__, 'autoretry'),
        aws_assume_role_policy_statement=pulumi.get(__ret__, 'aws_assume_role_policy_statement'),
        azure_devops=pulumi.get(__ret__, 'azure_devops'),
        before_applies=pulumi.get(__ret__, 'before_applies'),
        before_destroys=pulumi.get(__ret__, 'before_destroys'),
        before_inits=pulumi.get(__ret__, 'before_inits'),
        before_performs=pulumi.get(__ret__, 'before_performs'),
        before_plans=pulumi.get(__ret__, 'before_plans'),
        bitbucket_clouds=pulumi.get(__ret__, 'bitbucket_clouds'),
        bitbucket_datacenters=pulumi.get(__ret__, 'bitbucket_datacenters'),
        branch=pulumi.get(__ret__, 'branch'),
        cloudformations=pulumi.get(__ret__, 'cloudformations'),
        description=pulumi.get(__ret__, 'description'),
        enable_local_preview=pulumi.get(__ret__, 'enable_local_preview'),
        github_enterprises=pulumi.get(__ret__, 'github_enterprises'),
        gitlabs=pulumi.get(__ret__, 'gitlabs'),
        id=pulumi.get(__ret__, 'id'),
        kubernetes=pulumi.get(__ret__, 'kubernetes'),
        labels=pulumi.get(__ret__, 'labels'),
        manage_state=pulumi.get(__ret__, 'manage_state'),
        name=pulumi.get(__ret__, 'name'),
        project_root=pulumi.get(__ret__, 'project_root'),
        protect_from_deletion=pulumi.get(__ret__, 'protect_from_deletion'),
        pulumis=pulumi.get(__ret__, 'pulumis'),
        raw_gits=pulumi.get(__ret__, 'raw_gits'),
        repository=pulumi.get(__ret__, 'repository'),
        runner_image=pulumi.get(__ret__, 'runner_image'),
        showcases=pulumi.get(__ret__, 'showcases'),
        space_id=pulumi.get(__ret__, 'space_id'),
        stack_id=pulumi.get(__ret__, 'stack_id'),
        terraform_external_state_access=pulumi.get(__ret__, 'terraform_external_state_access'),
        terraform_smart_sanitization=pulumi.get(__ret__, 'terraform_smart_sanitization'),
        terraform_version=pulumi.get(__ret__, 'terraform_version'),
        terraform_workflow_tool=pulumi.get(__ret__, 'terraform_workflow_tool'),
        terraform_workspace=pulumi.get(__ret__, 'terraform_workspace'),
        worker_pool_id=pulumi.get(__ret__, 'worker_pool_id'))


@_utilities.lift_output_func(get_stack)
def get_stack_output(additional_project_globs: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     after_applies: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     after_destroys: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     after_inits: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     after_performs: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     after_plans: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     after_runs: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     before_applies: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     before_destroys: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     before_inits: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     before_performs: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     before_plans: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     stack_id: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStackResult]:
    """
    `Stack` combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    k8s_core = spacelift.get_stack(stack_id="k8s-core")
    ```


    :param Sequence[str] additional_project_globs: Project globs is an optional list of paths to track changes of in addition to the project root.
    :param Sequence[str] after_applies: List of after-apply scripts
    :param Sequence[str] after_destroys: List of after-destroy scripts
    :param Sequence[str] after_inits: List of after-init scripts
    :param Sequence[str] after_performs: List of after-perform scripts
    :param Sequence[str] after_plans: List of after-plan scripts
    :param Sequence[str] after_runs: List of after-run scripts
    :param Sequence[str] before_applies: List of before-apply scripts
    :param Sequence[str] before_destroys: List of before-destroy scripts
    :param Sequence[str] before_inits: List of before-init scripts
    :param Sequence[str] before_performs: List of before-perform scripts
    :param Sequence[str] before_plans: List of before-plan scripts
    :param str stack_id: ID (slug) of the stack
    """
    ...
