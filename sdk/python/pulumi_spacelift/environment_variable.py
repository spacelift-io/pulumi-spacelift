# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['EnvironmentVariableArgs', 'EnvironmentVariable']

@pulumi.input_type
class EnvironmentVariableArgs:
    def __init__(__self__, *,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 write_only: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a EnvironmentVariable resource.
        :param pulumi.Input[str] context_id: ID of the context on which the environment variable is defined
        :param pulumi.Input[str] module_id: ID of the module on which the environment variable is defined
        :param pulumi.Input[str] name: Name of the environment variable
        :param pulumi.Input[str] stack_id: ID of the stack on which the environment variable is defined
        :param pulumi.Input[str] value: Value of the environment variable. Defaults to an empty string.
        :param pulumi.Input[bool] write_only: Indicates whether the value is secret or not. Defaults to `true`.
        """
        if context_id is not None:
            pulumi.set(__self__, "context_id", context_id)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if write_only is not None:
            pulumi.set(__self__, "write_only", write_only)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the context on which the environment variable is defined
        """
        return pulumi.get(self, "context_id")

    @context_id.setter
    def context_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_id", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module on which the environment variable is defined
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack on which the environment variable is defined
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the environment variable. Defaults to an empty string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="writeOnly")
    def write_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the value is secret or not. Defaults to `true`.
        """
        return pulumi.get(self, "write_only")

    @write_only.setter
    def write_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "write_only", value)


@pulumi.input_type
class _EnvironmentVariableState:
    def __init__(__self__, *,
                 checksum: Optional[pulumi.Input[str]] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 write_only: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering EnvironmentVariable resources.
        :param pulumi.Input[str] checksum: SHA-256 checksum of the value
        :param pulumi.Input[str] context_id: ID of the context on which the environment variable is defined
        :param pulumi.Input[str] module_id: ID of the module on which the environment variable is defined
        :param pulumi.Input[str] name: Name of the environment variable
        :param pulumi.Input[str] stack_id: ID of the stack on which the environment variable is defined
        :param pulumi.Input[str] value: Value of the environment variable. Defaults to an empty string.
        :param pulumi.Input[bool] write_only: Indicates whether the value is secret or not. Defaults to `true`.
        """
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if context_id is not None:
            pulumi.set(__self__, "context_id", context_id)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if write_only is not None:
            pulumi.set(__self__, "write_only", write_only)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[str]]:
        """
        SHA-256 checksum of the value
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the context on which the environment variable is defined
        """
        return pulumi.get(self, "context_id")

    @context_id.setter
    def context_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_id", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module on which the environment variable is defined
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack on which the environment variable is defined
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the environment variable. Defaults to an empty string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="writeOnly")
    def write_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the value is secret or not. Defaults to `true`.
        """
        return pulumi.get(self, "write_only")

    @write_only.setter
    def write_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "write_only", value)


class EnvironmentVariable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 write_only: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        `EnvironmentVariable` defines an environment variable on the context (`Context`), stack (`Stack`) or a module (`Module`), thereby allowing to pass and share various secrets and configuration with Spacelift stacks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        # For a context
        ireland_kubeconfig = spacelift.EnvironmentVariable("ireland-kubeconfig",
            context_id="prod-k8s-ie",
            value="/project/spacelift/kubeconfig",
            write_only=False)
        # For a module
        module_kubeconfig = spacelift.EnvironmentVariable("module-kubeconfig",
            module_id="k8s-module",
            value="/project/spacelift/kubeconfig",
            write_only=False)
        # For a stack
        core_kubeconfig = spacelift.EnvironmentVariable("core-kubeconfig",
            stack_id="k8s-core",
            value="/project/spacelift/kubeconfig",
            write_only=False)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/environmentVariable:EnvironmentVariable ireland-kubeconfig context/$CONTEXT_ID/$ENVIRONMENT_VARIABLE_NAME
        ```

        ```sh
         $ pulumi import spacelift:index/environmentVariable:EnvironmentVariable module-kubeconfig module/$MODULE_ID/$ENVIRONMENT_VARIABLE_NAME
        ```

        ```sh
         $ pulumi import spacelift:index/environmentVariable:EnvironmentVariable core-kubeconfig stack/$STACK_ID/$ENVIRONMENT_VARIABLE_NAME
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] context_id: ID of the context on which the environment variable is defined
        :param pulumi.Input[str] module_id: ID of the module on which the environment variable is defined
        :param pulumi.Input[str] name: Name of the environment variable
        :param pulumi.Input[str] stack_id: ID of the stack on which the environment variable is defined
        :param pulumi.Input[str] value: Value of the environment variable. Defaults to an empty string.
        :param pulumi.Input[bool] write_only: Indicates whether the value is secret or not. Defaults to `true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EnvironmentVariableArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `EnvironmentVariable` defines an environment variable on the context (`Context`), stack (`Stack`) or a module (`Module`), thereby allowing to pass and share various secrets and configuration with Spacelift stacks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        # For a context
        ireland_kubeconfig = spacelift.EnvironmentVariable("ireland-kubeconfig",
            context_id="prod-k8s-ie",
            value="/project/spacelift/kubeconfig",
            write_only=False)
        # For a module
        module_kubeconfig = spacelift.EnvironmentVariable("module-kubeconfig",
            module_id="k8s-module",
            value="/project/spacelift/kubeconfig",
            write_only=False)
        # For a stack
        core_kubeconfig = spacelift.EnvironmentVariable("core-kubeconfig",
            stack_id="k8s-core",
            value="/project/spacelift/kubeconfig",
            write_only=False)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/environmentVariable:EnvironmentVariable ireland-kubeconfig context/$CONTEXT_ID/$ENVIRONMENT_VARIABLE_NAME
        ```

        ```sh
         $ pulumi import spacelift:index/environmentVariable:EnvironmentVariable module-kubeconfig module/$MODULE_ID/$ENVIRONMENT_VARIABLE_NAME
        ```

        ```sh
         $ pulumi import spacelift:index/environmentVariable:EnvironmentVariable core-kubeconfig stack/$STACK_ID/$ENVIRONMENT_VARIABLE_NAME
        ```

        :param str resource_name: The name of the resource.
        :param EnvironmentVariableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnvironmentVariableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 write_only: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnvironmentVariableArgs.__new__(EnvironmentVariableArgs)

            __props__.__dict__["context_id"] = context_id
            __props__.__dict__["module_id"] = module_id
            __props__.__dict__["name"] = name
            __props__.__dict__["stack_id"] = stack_id
            __props__.__dict__["value"] = None if value is None else pulumi.Output.secret(value)
            __props__.__dict__["write_only"] = write_only
            __props__.__dict__["checksum"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["value"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(EnvironmentVariable, __self__).__init__(
            'spacelift:index/environmentVariable:EnvironmentVariable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            checksum: Optional[pulumi.Input[str]] = None,
            context_id: Optional[pulumi.Input[str]] = None,
            module_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            stack_id: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None,
            write_only: Optional[pulumi.Input[bool]] = None) -> 'EnvironmentVariable':
        """
        Get an existing EnvironmentVariable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] checksum: SHA-256 checksum of the value
        :param pulumi.Input[str] context_id: ID of the context on which the environment variable is defined
        :param pulumi.Input[str] module_id: ID of the module on which the environment variable is defined
        :param pulumi.Input[str] name: Name of the environment variable
        :param pulumi.Input[str] stack_id: ID of the stack on which the environment variable is defined
        :param pulumi.Input[str] value: Value of the environment variable. Defaults to an empty string.
        :param pulumi.Input[bool] write_only: Indicates whether the value is secret or not. Defaults to `true`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnvironmentVariableState.__new__(_EnvironmentVariableState)

        __props__.__dict__["checksum"] = checksum
        __props__.__dict__["context_id"] = context_id
        __props__.__dict__["module_id"] = module_id
        __props__.__dict__["name"] = name
        __props__.__dict__["stack_id"] = stack_id
        __props__.__dict__["value"] = value
        __props__.__dict__["write_only"] = write_only
        return EnvironmentVariable(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Output[str]:
        """
        SHA-256 checksum of the value
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the context on which the environment variable is defined
        """
        return pulumi.get(self, "context_id")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the module on which the environment variable is defined
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the stack on which the environment variable is defined
        """
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[Optional[str]]:
        """
        Value of the environment variable. Defaults to an empty string.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="writeOnly")
    def write_only(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the value is secret or not. Defaults to `true`.
        """
        return pulumi.get(self, "write_only")

