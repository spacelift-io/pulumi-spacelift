# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['StackAwsRole']


class StackAwsRole(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 generate_credentials_in_worker: Optional[pulumi.Input[bool]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        > **Note:** `StackAwsRole` is deprecated. Please use `AwsRole` instead. The functionality is identical.

        `StackAwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.

        If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).

        Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and Run ID as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).

        ## Schema

        ### Required

        - **role_arn** (String) ARN of the AWS IAM role to attach

        ### Optional

        - **external_id** (String) Custom external ID (works only for private workers).
        - **generate_credentials_in_worker** (Boolean) Generate AWS credentials in the private worker
        - **id** (String) The ID of this resource.
        - **module_id** (String) ID of the module which assumes the AWS IAM role
        - **stack_id** (String) ID of the stack which assumes the AWS IAM role

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] external_id: Custom external ID (works only for private workers).
        :param pulumi.Input[bool] generate_credentials_in_worker: Generate AWS credentials in the private worker
        :param pulumi.Input[str] module_id: ID of the module which assumes the AWS IAM role
        :param pulumi.Input[str] role_arn: ARN of the AWS IAM role to attach
        :param pulumi.Input[str] stack_id: ID of the stack which assumes the AWS IAM role
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['external_id'] = external_id
            __props__['generate_credentials_in_worker'] = generate_credentials_in_worker
            __props__['module_id'] = module_id
            if role_arn is None and not opts.urn:
                raise TypeError("Missing required property 'role_arn'")
            __props__['role_arn'] = role_arn
            __props__['stack_id'] = stack_id
        super(StackAwsRole, __self__).__init__(
            'spacelift:index/stackAwsRole:StackAwsRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            external_id: Optional[pulumi.Input[str]] = None,
            generate_credentials_in_worker: Optional[pulumi.Input[bool]] = None,
            module_id: Optional[pulumi.Input[str]] = None,
            role_arn: Optional[pulumi.Input[str]] = None,
            stack_id: Optional[pulumi.Input[str]] = None) -> 'StackAwsRole':
        """
        Get an existing StackAwsRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] external_id: Custom external ID (works only for private workers).
        :param pulumi.Input[bool] generate_credentials_in_worker: Generate AWS credentials in the private worker
        :param pulumi.Input[str] module_id: ID of the module which assumes the AWS IAM role
        :param pulumi.Input[str] role_arn: ARN of the AWS IAM role to attach
        :param pulumi.Input[str] stack_id: ID of the stack which assumes the AWS IAM role
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["external_id"] = external_id
        __props__["generate_credentials_in_worker"] = generate_credentials_in_worker
        __props__["module_id"] = module_id
        __props__["role_arn"] = role_arn
        __props__["stack_id"] = stack_id
        return StackAwsRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[Optional[str]]:
        """
        Custom external ID (works only for private workers).
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="generateCredentialsInWorker")
    def generate_credentials_in_worker(self) -> pulumi.Output[Optional[bool]]:
        """
        Generate AWS credentials in the private worker
        """
        return pulumi.get(self, "generate_credentials_in_worker")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the module which assumes the AWS IAM role
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[str]:
        """
        ARN of the AWS IAM role to attach
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the stack which assumes the AWS IAM role
        """
        return pulumi.get(self, "stack_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

