# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetModuleResult',
    'AwaitableGetModuleResult',
    'get_module',
    'get_module_output',
]

@pulumi.output_type
class GetModuleResult:
    """
    A collection of values returned by getModule.
    """
    def __init__(__self__, administrative=None, aws_assume_role_policy_statement=None, azure_devops=None, bitbucket_clouds=None, bitbucket_datacenters=None, branch=None, description=None, enable_local_preview=None, github_enterprises=None, gitlabs=None, id=None, labels=None, module_id=None, name=None, project_root=None, protect_from_deletion=None, repository=None, shared_accounts=None, space_id=None, terraform_provider=None, worker_pool_id=None, workflow_tool=None):
        if administrative and not isinstance(administrative, bool):
            raise TypeError("Expected argument 'administrative' to be a bool")
        pulumi.set(__self__, "administrative", administrative)
        if aws_assume_role_policy_statement and not isinstance(aws_assume_role_policy_statement, str):
            raise TypeError("Expected argument 'aws_assume_role_policy_statement' to be a str")
        pulumi.set(__self__, "aws_assume_role_policy_statement", aws_assume_role_policy_statement)
        if azure_devops and not isinstance(azure_devops, list):
            raise TypeError("Expected argument 'azure_devops' to be a list")
        pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_clouds and not isinstance(bitbucket_clouds, list):
            raise TypeError("Expected argument 'bitbucket_clouds' to be a list")
        pulumi.set(__self__, "bitbucket_clouds", bitbucket_clouds)
        if bitbucket_datacenters and not isinstance(bitbucket_datacenters, list):
            raise TypeError("Expected argument 'bitbucket_datacenters' to be a list")
        pulumi.set(__self__, "bitbucket_datacenters", bitbucket_datacenters)
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        pulumi.set(__self__, "branch", branch)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_local_preview and not isinstance(enable_local_preview, bool):
            raise TypeError("Expected argument 'enable_local_preview' to be a bool")
        pulumi.set(__self__, "enable_local_preview", enable_local_preview)
        if github_enterprises and not isinstance(github_enterprises, list):
            raise TypeError("Expected argument 'github_enterprises' to be a list")
        pulumi.set(__self__, "github_enterprises", github_enterprises)
        if gitlabs and not isinstance(gitlabs, list):
            raise TypeError("Expected argument 'gitlabs' to be a list")
        pulumi.set(__self__, "gitlabs", gitlabs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if module_id and not isinstance(module_id, str):
            raise TypeError("Expected argument 'module_id' to be a str")
        pulumi.set(__self__, "module_id", module_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_root and not isinstance(project_root, str):
            raise TypeError("Expected argument 'project_root' to be a str")
        pulumi.set(__self__, "project_root", project_root)
        if protect_from_deletion and not isinstance(protect_from_deletion, bool):
            raise TypeError("Expected argument 'protect_from_deletion' to be a bool")
        pulumi.set(__self__, "protect_from_deletion", protect_from_deletion)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)
        if shared_accounts and not isinstance(shared_accounts, list):
            raise TypeError("Expected argument 'shared_accounts' to be a list")
        pulumi.set(__self__, "shared_accounts", shared_accounts)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if terraform_provider and not isinstance(terraform_provider, str):
            raise TypeError("Expected argument 'terraform_provider' to be a str")
        pulumi.set(__self__, "terraform_provider", terraform_provider)
        if worker_pool_id and not isinstance(worker_pool_id, str):
            raise TypeError("Expected argument 'worker_pool_id' to be a str")
        pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if workflow_tool and not isinstance(workflow_tool, str):
            raise TypeError("Expected argument 'workflow_tool' to be a str")
        pulumi.set(__self__, "workflow_tool", workflow_tool)

    @property
    @pulumi.getter
    def administrative(self) -> bool:
        """
        indicates whether this module can administer others
        """
        return pulumi.get(self, "administrative")

    @property
    @pulumi.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> str:
        """
        AWS IAM assume role policy statement setting up trust relationship
        """
        return pulumi.get(self, "aws_assume_role_policy_statement")

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Sequence['outputs.GetModuleAzureDevopResult']:
        """
        Azure DevOps VCS settings
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="bitbucketClouds")
    def bitbucket_clouds(self) -> Sequence['outputs.GetModuleBitbucketCloudResult']:
        """
        Bitbucket Cloud VCS settings
        """
        return pulumi.get(self, "bitbucket_clouds")

    @property
    @pulumi.getter(name="bitbucketDatacenters")
    def bitbucket_datacenters(self) -> Sequence['outputs.GetModuleBitbucketDatacenterResult']:
        """
        Bitbucket Datacenter VCS settings
        """
        return pulumi.get(self, "bitbucket_datacenters")

    @property
    @pulumi.getter
    def branch(self) -> str:
        """
        GitHub branch to apply changes to
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        free-form module description for human users (supports Markdown)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableLocalPreview")
    def enable_local_preview(self) -> bool:
        """
        Indicates whether local preview versions can be triggered on this Module.
        """
        return pulumi.get(self, "enable_local_preview")

    @property
    @pulumi.getter(name="githubEnterprises")
    def github_enterprises(self) -> Sequence['outputs.GetModuleGithubEnterpriseResult']:
        """
        GitHub Enterprise (self-hosted) VCS settings
        """
        return pulumi.get(self, "github_enterprises")

    @property
    @pulumi.getter
    def gitlabs(self) -> Sequence['outputs.GetModuleGitlabResult']:
        """
        GitLab VCS settings
        """
        return pulumi.get(self, "gitlabs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> str:
        """
        ID (slug) of the module
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectRoot")
    def project_root(self) -> str:
        """
        Project root is the optional directory relative to the repository root containing the module source code.
        """
        return pulumi.get(self, "project_root")

    @property
    @pulumi.getter(name="protectFromDeletion")
    def protect_from_deletion(self) -> bool:
        """
        Protect this module from accidental deletion. If set, attempts to delete this module will fail.
        """
        return pulumi.get(self, "protect_from_deletion")

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        Name of the repository, without the owner part
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="sharedAccounts")
    def shared_accounts(self) -> Sequence[str]:
        """
        List of the accounts (subdomains) which should have access to the Module
        """
        return pulumi.get(self, "shared_accounts")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the module is in
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="terraformProvider")
    def terraform_provider(self) -> str:
        return pulumi.get(self, "terraform_provider")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> str:
        """
        ID of the worker pool to use
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workflowTool")
    def workflow_tool(self) -> str:
        """
        Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
        """
        return pulumi.get(self, "workflow_tool")


class AwaitableGetModuleResult(GetModuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetModuleResult(
            administrative=self.administrative,
            aws_assume_role_policy_statement=self.aws_assume_role_policy_statement,
            azure_devops=self.azure_devops,
            bitbucket_clouds=self.bitbucket_clouds,
            bitbucket_datacenters=self.bitbucket_datacenters,
            branch=self.branch,
            description=self.description,
            enable_local_preview=self.enable_local_preview,
            github_enterprises=self.github_enterprises,
            gitlabs=self.gitlabs,
            id=self.id,
            labels=self.labels,
            module_id=self.module_id,
            name=self.name,
            project_root=self.project_root,
            protect_from_deletion=self.protect_from_deletion,
            repository=self.repository,
            shared_accounts=self.shared_accounts,
            space_id=self.space_id,
            terraform_provider=self.terraform_provider,
            worker_pool_id=self.worker_pool_id,
            workflow_tool=self.workflow_tool)


def get_module(module_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetModuleResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    k8s_module = spacelift.get_module(module_id="k8s-module")
    ```


    :param str module_id: ID (slug) of the module
    """
    __args__ = dict()
    __args__['moduleId'] = module_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('spacelift:index/getModule:getModule', __args__, opts=opts, typ=GetModuleResult).value

    return AwaitableGetModuleResult(
        administrative=pulumi.get(__ret__, 'administrative'),
        aws_assume_role_policy_statement=pulumi.get(__ret__, 'aws_assume_role_policy_statement'),
        azure_devops=pulumi.get(__ret__, 'azure_devops'),
        bitbucket_clouds=pulumi.get(__ret__, 'bitbucket_clouds'),
        bitbucket_datacenters=pulumi.get(__ret__, 'bitbucket_datacenters'),
        branch=pulumi.get(__ret__, 'branch'),
        description=pulumi.get(__ret__, 'description'),
        enable_local_preview=pulumi.get(__ret__, 'enable_local_preview'),
        github_enterprises=pulumi.get(__ret__, 'github_enterprises'),
        gitlabs=pulumi.get(__ret__, 'gitlabs'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        module_id=pulumi.get(__ret__, 'module_id'),
        name=pulumi.get(__ret__, 'name'),
        project_root=pulumi.get(__ret__, 'project_root'),
        protect_from_deletion=pulumi.get(__ret__, 'protect_from_deletion'),
        repository=pulumi.get(__ret__, 'repository'),
        shared_accounts=pulumi.get(__ret__, 'shared_accounts'),
        space_id=pulumi.get(__ret__, 'space_id'),
        terraform_provider=pulumi.get(__ret__, 'terraform_provider'),
        worker_pool_id=pulumi.get(__ret__, 'worker_pool_id'),
        workflow_tool=pulumi.get(__ret__, 'workflow_tool'))


@_utilities.lift_output_func(get_module)
def get_module_output(module_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetModuleResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    k8s_module = spacelift.get_module(module_id="k8s-module")
    ```


    :param str module_id: ID (slug) of the module
    """
    ...
