# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAzureIntegrationAttachmentResult',
    'AwaitableGetAzureIntegrationAttachmentResult',
    'get_azure_integration_attachment',
    'get_azure_integration_attachment_output',
]

@pulumi.output_type
class GetAzureIntegrationAttachmentResult:
    """
    A collection of values returned by getAzureIntegrationAttachment.
    """
    def __init__(__self__, attachment_id=None, id=None, integration_id=None, module_id=None, read=None, stack_id=None, subscription_id=None, write=None):
        if attachment_id and not isinstance(attachment_id, str):
            raise TypeError("Expected argument 'attachment_id' to be a str")
        pulumi.set(__self__, "attachment_id", attachment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if integration_id and not isinstance(integration_id, str):
            raise TypeError("Expected argument 'integration_id' to be a str")
        pulumi.set(__self__, "integration_id", integration_id)
        if module_id and not isinstance(module_id, str):
            raise TypeError("Expected argument 'module_id' to be a str")
        pulumi.set(__self__, "module_id", module_id)
        if read and not isinstance(read, bool):
            raise TypeError("Expected argument 'read' to be a bool")
        pulumi.set(__self__, "read", read)
        if stack_id and not isinstance(stack_id, str):
            raise TypeError("Expected argument 'stack_id' to be a str")
        pulumi.set(__self__, "stack_id", stack_id)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)
        if write and not isinstance(write, bool):
            raise TypeError("Expected argument 'write' to be a bool")
        pulumi.set(__self__, "write", write)

    @property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> str:
        """
        Internal ID of the attachment entity
        """
        return pulumi.get(self, "attachment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> str:
        """
        ID of the integration to attach
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[str]:
        """
        ID of the module to attach the integration to
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter
    def read(self) -> bool:
        """
        Indicates whether this attachment is used for read operations
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[str]:
        """
        ID of the stack to attach the integration to
        """
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        Contains the Azure subscription ID to use with this Stack.  Overrides the default subscription ID set at the integration level.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter
    def write(self) -> bool:
        """
        Indicates whether this attachment is used for write operations
        """
        return pulumi.get(self, "write")


class AwaitableGetAzureIntegrationAttachmentResult(GetAzureIntegrationAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAzureIntegrationAttachmentResult(
            attachment_id=self.attachment_id,
            id=self.id,
            integration_id=self.integration_id,
            module_id=self.module_id,
            read=self.read,
            stack_id=self.stack_id,
            subscription_id=self.subscription_id,
            write=self.write)


def get_azure_integration_attachment(integration_id: Optional[str] = None,
                                     module_id: Optional[str] = None,
                                     stack_id: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAzureIntegrationAttachmentResult:
    """
    `AzureIntegrationAttachment` represents the attachment between a reusable Azure integration and a single stack or module.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    example = spacelift.get_azure_integration_attachment(integration_id="some-integration-id",
        stack_id="some-stack-id")
    ```


    :param str integration_id: ID of the integration to attach
    :param str module_id: ID of the module to attach the integration to
    :param str stack_id: ID of the stack to attach the integration to
    """
    __args__ = dict()
    __args__['integrationId'] = integration_id
    __args__['moduleId'] = module_id
    __args__['stackId'] = stack_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('spacelift:index/getAzureIntegrationAttachment:getAzureIntegrationAttachment', __args__, opts=opts, typ=GetAzureIntegrationAttachmentResult).value

    return AwaitableGetAzureIntegrationAttachmentResult(
        attachment_id=pulumi.get(__ret__, 'attachment_id'),
        id=pulumi.get(__ret__, 'id'),
        integration_id=pulumi.get(__ret__, 'integration_id'),
        module_id=pulumi.get(__ret__, 'module_id'),
        read=pulumi.get(__ret__, 'read'),
        stack_id=pulumi.get(__ret__, 'stack_id'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'),
        write=pulumi.get(__ret__, 'write'))


@_utilities.lift_output_func(get_azure_integration_attachment)
def get_azure_integration_attachment_output(integration_id: Optional[pulumi.Input[str]] = None,
                                            module_id: Optional[pulumi.Input[Optional[str]]] = None,
                                            stack_id: Optional[pulumi.Input[Optional[str]]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAzureIntegrationAttachmentResult]:
    """
    `AzureIntegrationAttachment` represents the attachment between a reusable Azure integration and a single stack or module.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    example = spacelift.get_azure_integration_attachment(integration_id="some-integration-id",
        stack_id="some-stack-id")
    ```


    :param str integration_id: ID of the integration to attach
    :param str module_id: ID of the module to attach the integration to
    :param str stack_id: ID of the stack to attach the integration to
    """
    ...
