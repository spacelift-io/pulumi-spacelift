# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetStacksResult',
    'AwaitableGetStacksResult',
    'get_stacks',
    'get_stacks_output',
]

@pulumi.output_type
class GetStacksResult:
    """
    A collection of values returned by getStacks.
    """
    def __init__(__self__, administrative=None, branch=None, commit=None, id=None, labels=None, locked=None, name=None, project_root=None, repository=None, stacks=None, state=None, vendor=None, worker_pool=None):
        if administrative and not isinstance(administrative, dict):
            raise TypeError("Expected argument 'administrative' to be a dict")
        pulumi.set(__self__, "administrative", administrative)
        if branch and not isinstance(branch, dict):
            raise TypeError("Expected argument 'branch' to be a dict")
        pulumi.set(__self__, "branch", branch)
        if commit and not isinstance(commit, dict):
            raise TypeError("Expected argument 'commit' to be a dict")
        pulumi.set(__self__, "commit", commit)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if locked and not isinstance(locked, dict):
            raise TypeError("Expected argument 'locked' to be a dict")
        pulumi.set(__self__, "locked", locked)
        if name and not isinstance(name, dict):
            raise TypeError("Expected argument 'name' to be a dict")
        pulumi.set(__self__, "name", name)
        if project_root and not isinstance(project_root, dict):
            raise TypeError("Expected argument 'project_root' to be a dict")
        pulumi.set(__self__, "project_root", project_root)
        if repository and not isinstance(repository, dict):
            raise TypeError("Expected argument 'repository' to be a dict")
        pulumi.set(__self__, "repository", repository)
        if stacks and not isinstance(stacks, list):
            raise TypeError("Expected argument 'stacks' to be a list")
        pulumi.set(__self__, "stacks", stacks)
        if state and not isinstance(state, dict):
            raise TypeError("Expected argument 'state' to be a dict")
        pulumi.set(__self__, "state", state)
        if vendor and not isinstance(vendor, dict):
            raise TypeError("Expected argument 'vendor' to be a dict")
        pulumi.set(__self__, "vendor", vendor)
        if worker_pool and not isinstance(worker_pool, dict):
            raise TypeError("Expected argument 'worker_pool' to be a dict")
        pulumi.set(__self__, "worker_pool", worker_pool)

    @property
    @pulumi.getter
    def administrative(self) -> Optional['outputs.GetStacksAdministrativeResult']:
        """
        Require stacks to be administrative or not
        """
        return pulumi.get(self, "administrative")

    @property
    @pulumi.getter
    def branch(self) -> Optional['outputs.GetStacksBranchResult']:
        """
        Require stacks to be on one of the branches
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def commit(self) -> Optional['outputs.GetStacksCommitResult']:
        """
        Require stacks to be on one of the commits
        """
        return pulumi.get(self, "commit")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.GetStacksLabelResult']]:
        """
        Require stacks to have one of the labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def locked(self) -> Optional['outputs.GetStacksLockedResult']:
        """
        Require stacks to be locked
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> Optional['outputs.GetStacksNameResult']:
        """
        Require stacks to have one of the names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectRoot")
    def project_root(self) -> Optional['outputs.GetStacksProjectRootResult']:
        """
        Require stacks to be in one of the project roots
        """
        return pulumi.get(self, "project_root")

    @property
    @pulumi.getter
    def repository(self) -> Optional['outputs.GetStacksRepositoryResult']:
        """
        Require stacks to be in one of the repositories
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def stacks(self) -> Sequence['outputs.GetStacksStackResult']:
        """
        List of stacks matching the predicates
        """
        return pulumi.get(self, "stacks")

    @property
    @pulumi.getter
    def state(self) -> Optional['outputs.GetStacksStateResult']:
        """
        Require stacks to have one of the states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def vendor(self) -> Optional['outputs.GetStacksVendorResult']:
        """
        Require stacks to use one of the IaC vendors
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> Optional['outputs.GetStacksWorkerPoolResult']:
        """
        Require stacks to use one of the worker pools
        """
        return pulumi.get(self, "worker_pool")


class AwaitableGetStacksResult(GetStacksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStacksResult(
            administrative=self.administrative,
            branch=self.branch,
            commit=self.commit,
            id=self.id,
            labels=self.labels,
            locked=self.locked,
            name=self.name,
            project_root=self.project_root,
            repository=self.repository,
            stacks=self.stacks,
            state=self.state,
            vendor=self.vendor,
            worker_pool=self.worker_pool)


def get_stacks(administrative: Optional[pulumi.InputType['GetStacksAdministrativeArgs']] = None,
               branch: Optional[pulumi.InputType['GetStacksBranchArgs']] = None,
               commit: Optional[pulumi.InputType['GetStacksCommitArgs']] = None,
               labels: Optional[Sequence[pulumi.InputType['GetStacksLabelArgs']]] = None,
               locked: Optional[pulumi.InputType['GetStacksLockedArgs']] = None,
               name: Optional[pulumi.InputType['GetStacksNameArgs']] = None,
               project_root: Optional[pulumi.InputType['GetStacksProjectRootArgs']] = None,
               repository: Optional[pulumi.InputType['GetStacksRepositoryArgs']] = None,
               state: Optional[pulumi.InputType['GetStacksStateArgs']] = None,
               vendor: Optional[pulumi.InputType['GetStacksVendorArgs']] = None,
               worker_pool: Optional[pulumi.InputType['GetStacksWorkerPoolArgs']] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStacksResult:
    """
    `get_stacks` represents all the stacks in the Spacelift account visible to the API user, matching predicates.


    :param pulumi.InputType['GetStacksCommitArgs'] commit: Require stacks to be on one of the commits
    :param pulumi.InputType['GetStacksLockedArgs'] locked: Require stacks to be locked
    :param pulumi.InputType['GetStacksStateArgs'] state: Require stacks to have one of the states
    :param pulumi.InputType['GetStacksVendorArgs'] vendor: Require stacks to use one of the IaC vendors
    :param pulumi.InputType['GetStacksWorkerPoolArgs'] worker_pool: Require stacks to use one of the worker pools
    """
    __args__ = dict()
    __args__['administrative'] = administrative
    __args__['branch'] = branch
    __args__['commit'] = commit
    __args__['labels'] = labels
    __args__['locked'] = locked
    __args__['name'] = name
    __args__['projectRoot'] = project_root
    __args__['repository'] = repository
    __args__['state'] = state
    __args__['vendor'] = vendor
    __args__['workerPool'] = worker_pool
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('spacelift:index/getStacks:getStacks', __args__, opts=opts, typ=GetStacksResult).value

    return AwaitableGetStacksResult(
        administrative=pulumi.get(__ret__, 'administrative'),
        branch=pulumi.get(__ret__, 'branch'),
        commit=pulumi.get(__ret__, 'commit'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        locked=pulumi.get(__ret__, 'locked'),
        name=pulumi.get(__ret__, 'name'),
        project_root=pulumi.get(__ret__, 'project_root'),
        repository=pulumi.get(__ret__, 'repository'),
        stacks=pulumi.get(__ret__, 'stacks'),
        state=pulumi.get(__ret__, 'state'),
        vendor=pulumi.get(__ret__, 'vendor'),
        worker_pool=pulumi.get(__ret__, 'worker_pool'))


@_utilities.lift_output_func(get_stacks)
def get_stacks_output(administrative: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksAdministrativeArgs']]]] = None,
                      branch: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksBranchArgs']]]] = None,
                      commit: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksCommitArgs']]]] = None,
                      labels: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetStacksLabelArgs']]]]] = None,
                      locked: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksLockedArgs']]]] = None,
                      name: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksNameArgs']]]] = None,
                      project_root: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksProjectRootArgs']]]] = None,
                      repository: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksRepositoryArgs']]]] = None,
                      state: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksStateArgs']]]] = None,
                      vendor: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksVendorArgs']]]] = None,
                      worker_pool: Optional[pulumi.Input[Optional[pulumi.InputType['GetStacksWorkerPoolArgs']]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStacksResult]:
    """
    `get_stacks` represents all the stacks in the Spacelift account visible to the API user, matching predicates.


    :param pulumi.InputType['GetStacksCommitArgs'] commit: Require stacks to be on one of the commits
    :param pulumi.InputType['GetStacksLockedArgs'] locked: Require stacks to be locked
    :param pulumi.InputType['GetStacksStateArgs'] state: Require stacks to have one of the states
    :param pulumi.InputType['GetStacksVendorArgs'] vendor: Require stacks to use one of the IaC vendors
    :param pulumi.InputType['GetStacksWorkerPoolArgs'] worker_pool: Require stacks to use one of the worker pools
    """
    ...
