# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetScheduledTaskResult',
    'AwaitableGetScheduledTaskResult',
    'get_scheduled_task',
    'get_scheduled_task_output',
]

@pulumi.output_type
class GetScheduledTaskResult:
    """
    A collection of values returned by getScheduledTask.
    """
    def __init__(__self__, at=None, command=None, everies=None, id=None, schedule_id=None, scheduled_task_id=None, stack_id=None, timezone=None):
        if at and not isinstance(at, int):
            raise TypeError("Expected argument 'at' to be a int")
        pulumi.set(__self__, "at", at)
        if command and not isinstance(command, str):
            raise TypeError("Expected argument 'command' to be a str")
        pulumi.set(__self__, "command", command)
        if everies and not isinstance(everies, list):
            raise TypeError("Expected argument 'everies' to be a list")
        pulumi.set(__self__, "everies", everies)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if schedule_id and not isinstance(schedule_id, str):
            raise TypeError("Expected argument 'schedule_id' to be a str")
        pulumi.set(__self__, "schedule_id", schedule_id)
        if scheduled_task_id and not isinstance(scheduled_task_id, str):
            raise TypeError("Expected argument 'scheduled_task_id' to be a str")
        pulumi.set(__self__, "scheduled_task_id", scheduled_task_id)
        if stack_id and not isinstance(stack_id, str):
            raise TypeError("Expected argument 'stack_id' to be a str")
        pulumi.set(__self__, "stack_id", stack_id)
        if timezone and not isinstance(timezone, str):
            raise TypeError("Expected argument 'timezone' to be a str")
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def at(self) -> int:
        """
        Timestamp (unix timestamp) at which time the scheduling should happen.
        """
        return pulumi.get(self, "at")

    @property
    @pulumi.getter
    def command(self) -> str:
        """
        Command that will be run.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def everies(self) -> Sequence[str]:
        """
        List of cron schedule expressions based on which the scheduled task should be triggered.
        """
        return pulumi.get(self, "everies")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> str:
        """
        ID of the schedule
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="scheduledTaskId")
    def scheduled_task_id(self) -> str:
        """
        ID of the scheduled task (stack*id/schedule*id)
        """
        return pulumi.get(self, "scheduled_task_id")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> str:
        """
        Stack ID of the scheduled task
        """
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        return pulumi.get(self, "timezone")


class AwaitableGetScheduledTaskResult(GetScheduledTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScheduledTaskResult(
            at=self.at,
            command=self.command,
            everies=self.everies,
            id=self.id,
            schedule_id=self.schedule_id,
            scheduled_task_id=self.scheduled_task_id,
            stack_id=self.stack_id,
            timezone=self.timezone)


def get_scheduled_task(scheduled_task_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScheduledTaskResult:
    """
    `ScheduledTask` represents a scheduling configuration for a Stack. It will trigger a task on the given timestamp/schedule.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    ireland_kubeconfig_destroy = spacelift.get_scheduled_task(scheduled_task_id="$STACK_ID/$SCHEDULED_TASK_ID")
    ```


    :param str scheduled_task_id: ID of the scheduled task (stack*id/schedule*id)
    """
    __args__ = dict()
    __args__['scheduledTaskId'] = scheduled_task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('spacelift:index/getScheduledTask:getScheduledTask', __args__, opts=opts, typ=GetScheduledTaskResult).value

    return AwaitableGetScheduledTaskResult(
        at=pulumi.get(__ret__, 'at'),
        command=pulumi.get(__ret__, 'command'),
        everies=pulumi.get(__ret__, 'everies'),
        id=pulumi.get(__ret__, 'id'),
        schedule_id=pulumi.get(__ret__, 'schedule_id'),
        scheduled_task_id=pulumi.get(__ret__, 'scheduled_task_id'),
        stack_id=pulumi.get(__ret__, 'stack_id'),
        timezone=pulumi.get(__ret__, 'timezone'))


@_utilities.lift_output_func(get_scheduled_task)
def get_scheduled_task_output(scheduled_task_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetScheduledTaskResult]:
    """
    `ScheduledTask` represents a scheduling configuration for a Stack. It will trigger a task on the given timestamp/schedule.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    ireland_kubeconfig_destroy = spacelift.get_scheduled_task(scheduled_task_id="$STACK_ID/$SCHEDULED_TASK_ID")
    ```


    :param str scheduled_task_id: ID of the scheduled task (stack*id/schedule*id)
    """
    ...
