# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AzureIntegrationArgs', 'AzureIntegration']

@pulumi.input_type
class AzureIntegrationArgs:
    def __init__(__self__, *,
                 tenant_id: pulumi.Input[str],
                 default_subscription_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AzureIntegration resource.
        :param pulumi.Input[str] tenant_id: The Azure AD tenant ID
        :param pulumi.Input[str] default_subscription_id: The default subscription ID to use, if one isn't specified at the stack/module level
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels to set on the integration
        :param pulumi.Input[str] name: The friendly name of the integration
        :param pulumi.Input[str] space_id: ID (slug) of the space the integration is in
        """
        pulumi.set(__self__, "tenant_id", tenant_id)
        if default_subscription_id is not None:
            pulumi.set(__self__, "default_subscription_id", default_subscription_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The Azure AD tenant ID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="defaultSubscriptionId")
    def default_subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The default subscription ID to use, if one isn't specified at the stack/module level
        """
        return pulumi.get(self, "default_subscription_id")

    @default_subscription_id.setter
    def default_subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_subscription_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels to set on the integration
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of the integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID (slug) of the space the integration is in
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class _AzureIntegrationState:
    def __init__(__self__, *,
                 admin_consent_provided: Optional[pulumi.Input[bool]] = None,
                 admin_consent_url: Optional[pulumi.Input[str]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 default_subscription_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AzureIntegration resources.
        :param pulumi.Input[bool] admin_consent_provided: Indicates whether admin consent has been performed for the AAD Application.
        :param pulumi.Input[str] admin_consent_url: The URL to use to provide admin consent to the application in the customer's tenant
        :param pulumi.Input[str] application_id: The applicationId of the Azure AD application used by the integration.
        :param pulumi.Input[str] default_subscription_id: The default subscription ID to use, if one isn't specified at the stack/module level
        :param pulumi.Input[str] display_name: The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels to set on the integration
        :param pulumi.Input[str] name: The friendly name of the integration
        :param pulumi.Input[str] space_id: ID (slug) of the space the integration is in
        :param pulumi.Input[str] tenant_id: The Azure AD tenant ID
        """
        if admin_consent_provided is not None:
            pulumi.set(__self__, "admin_consent_provided", admin_consent_provided)
        if admin_consent_url is not None:
            pulumi.set(__self__, "admin_consent_url", admin_consent_url)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if default_subscription_id is not None:
            pulumi.set(__self__, "default_subscription_id", default_subscription_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="adminConsentProvided")
    def admin_consent_provided(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether admin consent has been performed for the AAD Application.
        """
        return pulumi.get(self, "admin_consent_provided")

    @admin_consent_provided.setter
    def admin_consent_provided(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_consent_provided", value)

    @property
    @pulumi.getter(name="adminConsentUrl")
    def admin_consent_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to use to provide admin consent to the application in the customer's tenant
        """
        return pulumi.get(self, "admin_consent_url")

    @admin_consent_url.setter
    def admin_consent_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_consent_url", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The applicationId of the Azure AD application used by the integration.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="defaultSubscriptionId")
    def default_subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The default subscription ID to use, if one isn't specified at the stack/module level
        """
        return pulumi.get(self, "default_subscription_id")

    @default_subscription_id.setter
    def default_subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_subscription_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels to set on the integration
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of the integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID (slug) of the space the integration is in
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure AD tenant ID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


class AzureIntegration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_subscription_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        example = spacelift.AzureIntegration("example",
            default_subscription_id="default-subscription-id",
            labels=[
                "one",
                "two",
            ],
            tenant_id="tenant-id")
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/azureIntegration:AzureIntegration example $INTEGRATION_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] default_subscription_id: The default subscription ID to use, if one isn't specified at the stack/module level
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels to set on the integration
        :param pulumi.Input[str] name: The friendly name of the integration
        :param pulumi.Input[str] space_id: ID (slug) of the space the integration is in
        :param pulumi.Input[str] tenant_id: The Azure AD tenant ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AzureIntegrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `AzureIntegration` represents an integration with an Azure AD tenant. This integration is account-level and needs to be explicitly attached to individual stacks in order to take effect. Note that you will need to provide admin consent manually for the integration to work

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        example = spacelift.AzureIntegration("example",
            default_subscription_id="default-subscription-id",
            labels=[
                "one",
                "two",
            ],
            tenant_id="tenant-id")
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/azureIntegration:AzureIntegration example $INTEGRATION_ID
        ```

        :param str resource_name: The name of the resource.
        :param AzureIntegrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AzureIntegrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_subscription_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AzureIntegrationArgs.__new__(AzureIntegrationArgs)

            __props__.__dict__["default_subscription_id"] = default_subscription_id
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["space_id"] = space_id
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["admin_consent_provided"] = None
            __props__.__dict__["admin_consent_url"] = None
            __props__.__dict__["application_id"] = None
            __props__.__dict__["display_name"] = None
        super(AzureIntegration, __self__).__init__(
            'spacelift:index/azureIntegration:AzureIntegration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_consent_provided: Optional[pulumi.Input[bool]] = None,
            admin_consent_url: Optional[pulumi.Input[str]] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            default_subscription_id: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            tenant_id: Optional[pulumi.Input[str]] = None) -> 'AzureIntegration':
        """
        Get an existing AzureIntegration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] admin_consent_provided: Indicates whether admin consent has been performed for the AAD Application.
        :param pulumi.Input[str] admin_consent_url: The URL to use to provide admin consent to the application in the customer's tenant
        :param pulumi.Input[str] application_id: The applicationId of the Azure AD application used by the integration.
        :param pulumi.Input[str] default_subscription_id: The default subscription ID to use, if one isn't specified at the stack/module level
        :param pulumi.Input[str] display_name: The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels to set on the integration
        :param pulumi.Input[str] name: The friendly name of the integration
        :param pulumi.Input[str] space_id: ID (slug) of the space the integration is in
        :param pulumi.Input[str] tenant_id: The Azure AD tenant ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AzureIntegrationState.__new__(_AzureIntegrationState)

        __props__.__dict__["admin_consent_provided"] = admin_consent_provided
        __props__.__dict__["admin_consent_url"] = admin_consent_url
        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["default_subscription_id"] = default_subscription_id
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["tenant_id"] = tenant_id
        return AzureIntegration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminConsentProvided")
    def admin_consent_provided(self) -> pulumi.Output[bool]:
        """
        Indicates whether admin consent has been performed for the AAD Application.
        """
        return pulumi.get(self, "admin_consent_provided")

    @property
    @pulumi.getter(name="adminConsentUrl")
    def admin_consent_url(self) -> pulumi.Output[str]:
        """
        The URL to use to provide admin consent to the application in the customer's tenant
        """
        return pulumi.get(self, "admin_consent_url")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        The applicationId of the Azure AD application used by the integration.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="defaultSubscriptionId")
    def default_subscription_id(self) -> pulumi.Output[Optional[str]]:
        """
        The default subscription ID to use, if one isn't specified at the stack/module level
        """
        return pulumi.get(self, "default_subscription_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Labels to set on the integration
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The friendly name of the integration
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        ID (slug) of the space the integration is in
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        """
        The Azure AD tenant ID
        """
        return pulumi.get(self, "tenant_id")

