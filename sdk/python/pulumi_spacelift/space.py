# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SpaceArgs', 'Space']

@pulumi.input_type
class SpaceArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 inherit_entities: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_space_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Space resource.
        :param pulumi.Input[str] description: free-form space description for users
        :param pulumi.Input[bool] inherit_entities: indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: list of labels describing a space
        :param pulumi.Input[str] name: name of the space
        :param pulumi.Input[str] parent_space_id: immutable ID (slug) of parent space. Defaults to `root`.
        """
        SpaceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            inherit_entities=inherit_entities,
            labels=labels,
            name=name,
            parent_space_id=parent_space_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[pulumi.Input[str]] = None,
             inherit_entities: Optional[pulumi.Input[bool]] = None,
             labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             parent_space_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if inherit_entities is None and 'inheritEntities' in kwargs:
            inherit_entities = kwargs['inheritEntities']
        if parent_space_id is None and 'parentSpaceId' in kwargs:
            parent_space_id = kwargs['parentSpaceId']

        if description is not None:
            _setter("description", description)
        if inherit_entities is not None:
            _setter("inherit_entities", inherit_entities)
        if labels is not None:
            _setter("labels", labels)
        if name is not None:
            _setter("name", name)
        if parent_space_id is not None:
            _setter("parent_space_id", parent_space_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        free-form space description for users
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inheritEntities")
    def inherit_entities(self) -> Optional[pulumi.Input[bool]]:
        """
        indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
        """
        return pulumi.get(self, "inherit_entities")

    @inherit_entities.setter
    def inherit_entities(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_entities", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of labels describing a space
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the space
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentSpaceId")
    def parent_space_id(self) -> Optional[pulumi.Input[str]]:
        """
        immutable ID (slug) of parent space. Defaults to `root`.
        """
        return pulumi.get(self, "parent_space_id")

    @parent_space_id.setter
    def parent_space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_space_id", value)


@pulumi.input_type
class _SpaceState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 inherit_entities: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_space_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Space resources.
        :param pulumi.Input[str] description: free-form space description for users
        :param pulumi.Input[bool] inherit_entities: indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: list of labels describing a space
        :param pulumi.Input[str] name: name of the space
        :param pulumi.Input[str] parent_space_id: immutable ID (slug) of parent space. Defaults to `root`.
        """
        _SpaceState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            inherit_entities=inherit_entities,
            labels=labels,
            name=name,
            parent_space_id=parent_space_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[pulumi.Input[str]] = None,
             inherit_entities: Optional[pulumi.Input[bool]] = None,
             labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             parent_space_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if inherit_entities is None and 'inheritEntities' in kwargs:
            inherit_entities = kwargs['inheritEntities']
        if parent_space_id is None and 'parentSpaceId' in kwargs:
            parent_space_id = kwargs['parentSpaceId']

        if description is not None:
            _setter("description", description)
        if inherit_entities is not None:
            _setter("inherit_entities", inherit_entities)
        if labels is not None:
            _setter("labels", labels)
        if name is not None:
            _setter("name", name)
        if parent_space_id is not None:
            _setter("parent_space_id", parent_space_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        free-form space description for users
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inheritEntities")
    def inherit_entities(self) -> Optional[pulumi.Input[bool]]:
        """
        indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
        """
        return pulumi.get(self, "inherit_entities")

    @inherit_entities.setter
    def inherit_entities(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_entities", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of labels describing a space
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the space
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentSpaceId")
    def parent_space_id(self) -> Optional[pulumi.Input[str]]:
        """
        immutable ID (slug) of parent space. Defaults to `root`.
        """
        return pulumi.get(self, "parent_space_id")

    @parent_space_id.setter
    def parent_space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_space_id", value)


class Space(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 inherit_entities: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `Space` represents a Spacelift **space** - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        development = spacelift.Space("development",
            parent_space_id="root",
            description="This a child of the root space. It contains all the resources common to the development infrastructure.")
        development_frontend = spacelift.Space("development-frontend",
            parent_space_id=development.id,
            inherit_entities=True)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/space:Space development $SPACE_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: free-form space description for users
        :param pulumi.Input[bool] inherit_entities: indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: list of labels describing a space
        :param pulumi.Input[str] name: name of the space
        :param pulumi.Input[str] parent_space_id: immutable ID (slug) of parent space. Defaults to `root`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SpaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `Space` represents a Spacelift **space** - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        development = spacelift.Space("development",
            parent_space_id="root",
            description="This a child of the root space. It contains all the resources common to the development infrastructure.")
        development_frontend = spacelift.Space("development-frontend",
            parent_space_id=development.id,
            inherit_entities=True)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/space:Space development $SPACE_ID
        ```

        :param str resource_name: The name of the resource.
        :param SpaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            SpaceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 inherit_entities: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpaceArgs.__new__(SpaceArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["inherit_entities"] = inherit_entities
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["parent_space_id"] = parent_space_id
        super(Space, __self__).__init__(
            'spacelift:index/space:Space',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            inherit_entities: Optional[pulumi.Input[bool]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parent_space_id: Optional[pulumi.Input[str]] = None) -> 'Space':
        """
        Get an existing Space resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: free-form space description for users
        :param pulumi.Input[bool] inherit_entities: indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: list of labels describing a space
        :param pulumi.Input[str] name: name of the space
        :param pulumi.Input[str] parent_space_id: immutable ID (slug) of parent space. Defaults to `root`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SpaceState.__new__(_SpaceState)

        __props__.__dict__["description"] = description
        __props__.__dict__["inherit_entities"] = inherit_entities
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_space_id"] = parent_space_id
        return Space(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        free-form space description for users
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="inheritEntities")
    def inherit_entities(self) -> pulumi.Output[Optional[bool]]:
        """
        indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
        """
        return pulumi.get(self, "inherit_entities")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        list of labels describing a space
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of the space
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentSpaceId")
    def parent_space_id(self) -> pulumi.Output[Optional[str]]:
        """
        immutable ID (slug) of parent space. Defaults to `root`.
        """
        return pulumi.get(self, "parent_space_id")

