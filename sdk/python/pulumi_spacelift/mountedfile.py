# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['MountedfileArgs', 'Mountedfile']

@pulumi.input_type
class MountedfileArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 relative_path: pulumi.Input[str],
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 write_only: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Mountedfile resource.
        :param pulumi.Input[str] content: Content of the mounted file encoded using Base-64
        :param pulumi.Input[str] relative_path: Relative path to the mounted file, without the /mnt/workspace/ prefix
        :param pulumi.Input[str] context_id: ID of the context on which the mounted file is defined
        :param pulumi.Input[str] module_id: ID of the module on which the mounted file is defined
        :param pulumi.Input[str] stack_id: ID of the stack on which the mounted file is defined
        :param pulumi.Input[bool] write_only: Indicates whether the content can be read back outside a Run. Defaults to `true`.
        """
        MountedfileArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            relative_path=relative_path,
            context_id=context_id,
            module_id=module_id,
            stack_id=stack_id,
            write_only=write_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: Optional[pulumi.Input[str]] = None,
             relative_path: Optional[pulumi.Input[str]] = None,
             context_id: Optional[pulumi.Input[str]] = None,
             module_id: Optional[pulumi.Input[str]] = None,
             stack_id: Optional[pulumi.Input[str]] = None,
             write_only: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content is None:
            raise TypeError("Missing 'content' argument")
        if relative_path is None and 'relativePath' in kwargs:
            relative_path = kwargs['relativePath']
        if relative_path is None:
            raise TypeError("Missing 'relative_path' argument")
        if context_id is None and 'contextId' in kwargs:
            context_id = kwargs['contextId']
        if module_id is None and 'moduleId' in kwargs:
            module_id = kwargs['moduleId']
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']
        if write_only is None and 'writeOnly' in kwargs:
            write_only = kwargs['writeOnly']

        _setter("content", content)
        _setter("relative_path", relative_path)
        if context_id is not None:
            _setter("context_id", context_id)
        if module_id is not None:
            _setter("module_id", module_id)
        if stack_id is not None:
            _setter("stack_id", stack_id)
        if write_only is not None:
            _setter("write_only", write_only)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Content of the mounted file encoded using Base-64
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="relativePath")
    def relative_path(self) -> pulumi.Input[str]:
        """
        Relative path to the mounted file, without the /mnt/workspace/ prefix
        """
        return pulumi.get(self, "relative_path")

    @relative_path.setter
    def relative_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_path", value)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the context on which the mounted file is defined
        """
        return pulumi.get(self, "context_id")

    @context_id.setter
    def context_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_id", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module on which the mounted file is defined
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack on which the mounted file is defined
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter(name="writeOnly")
    def write_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the content can be read back outside a Run. Defaults to `true`.
        """
        return pulumi.get(self, "write_only")

    @write_only.setter
    def write_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "write_only", value)


@pulumi.input_type
class _MountedfileState:
    def __init__(__self__, *,
                 checksum: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 relative_path: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 write_only: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Mountedfile resources.
        :param pulumi.Input[str] checksum: SHA-256 checksum of the value
        :param pulumi.Input[str] content: Content of the mounted file encoded using Base-64
        :param pulumi.Input[str] context_id: ID of the context on which the mounted file is defined
        :param pulumi.Input[str] module_id: ID of the module on which the mounted file is defined
        :param pulumi.Input[str] relative_path: Relative path to the mounted file, without the /mnt/workspace/ prefix
        :param pulumi.Input[str] stack_id: ID of the stack on which the mounted file is defined
        :param pulumi.Input[bool] write_only: Indicates whether the content can be read back outside a Run. Defaults to `true`.
        """
        _MountedfileState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            checksum=checksum,
            content=content,
            context_id=context_id,
            module_id=module_id,
            relative_path=relative_path,
            stack_id=stack_id,
            write_only=write_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             checksum: Optional[pulumi.Input[str]] = None,
             content: Optional[pulumi.Input[str]] = None,
             context_id: Optional[pulumi.Input[str]] = None,
             module_id: Optional[pulumi.Input[str]] = None,
             relative_path: Optional[pulumi.Input[str]] = None,
             stack_id: Optional[pulumi.Input[str]] = None,
             write_only: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if context_id is None and 'contextId' in kwargs:
            context_id = kwargs['contextId']
        if module_id is None and 'moduleId' in kwargs:
            module_id = kwargs['moduleId']
        if relative_path is None and 'relativePath' in kwargs:
            relative_path = kwargs['relativePath']
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']
        if write_only is None and 'writeOnly' in kwargs:
            write_only = kwargs['writeOnly']

        if checksum is not None:
            _setter("checksum", checksum)
        if content is not None:
            _setter("content", content)
        if context_id is not None:
            _setter("context_id", context_id)
        if module_id is not None:
            _setter("module_id", module_id)
        if relative_path is not None:
            _setter("relative_path", relative_path)
        if stack_id is not None:
            _setter("stack_id", stack_id)
        if write_only is not None:
            _setter("write_only", write_only)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[str]]:
        """
        SHA-256 checksum of the value
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Content of the mounted file encoded using Base-64
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the context on which the mounted file is defined
        """
        return pulumi.get(self, "context_id")

    @context_id.setter
    def context_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_id", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module on which the mounted file is defined
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter(name="relativePath")
    def relative_path(self) -> Optional[pulumi.Input[str]]:
        """
        Relative path to the mounted file, without the /mnt/workspace/ prefix
        """
        return pulumi.get(self, "relative_path")

    @relative_path.setter
    def relative_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relative_path", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack on which the mounted file is defined
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter(name="writeOnly")
    def write_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the content can be read back outside a Run. Defaults to `true`.
        """
        return pulumi.get(self, "write_only")

    @write_only.setter
    def write_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "write_only", value)


class Mountedfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 relative_path: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 write_only: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        `Mountedfile` represents a file mounted in each Run's workspace that is part of a configuration of a context (`Context`), stack (`Stack`) or a module (`Module`). In principle, it's very similar to an environment variable (`EnvironmentVariable`) except that the value is written to the filesystem rather than passed to the environment.

        ## Example Usage

        ```python
        import pulumi
        import base64
        import pulumi_spacelift as spacelift

        # For a context
        ireland_kubeconfig = spacelift.Mountedfile("ireland-kubeconfig",
            context_id="prod-k8s-ie",
            relative_path="kubeconfig",
            content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(f"{path['module']}/kubeconfig.json"))
        # For a module
        module_kubeconfig = spacelift.Mountedfile("module-kubeconfig",
            module_id="k8s-module",
            relative_path="kubeconfig",
            content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(f"{path['module']}/kubeconfig.json"))
        # For a stack
        core_kubeconfig = spacelift.Mountedfile("core-kubeconfig",
            stack_id="k8s-core",
            relative_path="kubeconfig",
            content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(f"{path['module']}/kubeconfig.json"))
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/mountedfile:Mountedfile ireland-kubeconfig context/$CONTEXT_ID/$MOUNTED_FILE_ID
        ```

        ```sh
         $ pulumi import spacelift:index/mountedfile:Mountedfile module-kubeconfig module/$MODULE_ID/$MOUNTED_FILE_ID
        ```

        ```sh
         $ pulumi import spacelift:index/mountedfile:Mountedfile core-kubeconfig stack/$STACK_ID/$MOUNTED_FILE_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Content of the mounted file encoded using Base-64
        :param pulumi.Input[str] context_id: ID of the context on which the mounted file is defined
        :param pulumi.Input[str] module_id: ID of the module on which the mounted file is defined
        :param pulumi.Input[str] relative_path: Relative path to the mounted file, without the /mnt/workspace/ prefix
        :param pulumi.Input[str] stack_id: ID of the stack on which the mounted file is defined
        :param pulumi.Input[bool] write_only: Indicates whether the content can be read back outside a Run. Defaults to `true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MountedfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `Mountedfile` represents a file mounted in each Run's workspace that is part of a configuration of a context (`Context`), stack (`Stack`) or a module (`Module`). In principle, it's very similar to an environment variable (`EnvironmentVariable`) except that the value is written to the filesystem rather than passed to the environment.

        ## Example Usage

        ```python
        import pulumi
        import base64
        import pulumi_spacelift as spacelift

        # For a context
        ireland_kubeconfig = spacelift.Mountedfile("ireland-kubeconfig",
            context_id="prod-k8s-ie",
            relative_path="kubeconfig",
            content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(f"{path['module']}/kubeconfig.json"))
        # For a module
        module_kubeconfig = spacelift.Mountedfile("module-kubeconfig",
            module_id="k8s-module",
            relative_path="kubeconfig",
            content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(f"{path['module']}/kubeconfig.json"))
        # For a stack
        core_kubeconfig = spacelift.Mountedfile("core-kubeconfig",
            stack_id="k8s-core",
            relative_path="kubeconfig",
            content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(f"{path['module']}/kubeconfig.json"))
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/mountedfile:Mountedfile ireland-kubeconfig context/$CONTEXT_ID/$MOUNTED_FILE_ID
        ```

        ```sh
         $ pulumi import spacelift:index/mountedfile:Mountedfile module-kubeconfig module/$MODULE_ID/$MOUNTED_FILE_ID
        ```

        ```sh
         $ pulumi import spacelift:index/mountedfile:Mountedfile core-kubeconfig stack/$STACK_ID/$MOUNTED_FILE_ID
        ```

        :param str resource_name: The name of the resource.
        :param MountedfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MountedfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            MountedfileArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 context_id: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 relative_path: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 write_only: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MountedfileArgs.__new__(MountedfileArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = None if content is None else pulumi.Output.secret(content)
            __props__.__dict__["context_id"] = context_id
            __props__.__dict__["module_id"] = module_id
            if relative_path is None and not opts.urn:
                raise TypeError("Missing required property 'relative_path'")
            __props__.__dict__["relative_path"] = relative_path
            __props__.__dict__["stack_id"] = stack_id
            __props__.__dict__["write_only"] = write_only
            __props__.__dict__["checksum"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["content"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Mountedfile, __self__).__init__(
            'spacelift:index/mountedfile:Mountedfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            checksum: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            context_id: Optional[pulumi.Input[str]] = None,
            module_id: Optional[pulumi.Input[str]] = None,
            relative_path: Optional[pulumi.Input[str]] = None,
            stack_id: Optional[pulumi.Input[str]] = None,
            write_only: Optional[pulumi.Input[bool]] = None) -> 'Mountedfile':
        """
        Get an existing Mountedfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] checksum: SHA-256 checksum of the value
        :param pulumi.Input[str] content: Content of the mounted file encoded using Base-64
        :param pulumi.Input[str] context_id: ID of the context on which the mounted file is defined
        :param pulumi.Input[str] module_id: ID of the module on which the mounted file is defined
        :param pulumi.Input[str] relative_path: Relative path to the mounted file, without the /mnt/workspace/ prefix
        :param pulumi.Input[str] stack_id: ID of the stack on which the mounted file is defined
        :param pulumi.Input[bool] write_only: Indicates whether the content can be read back outside a Run. Defaults to `true`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MountedfileState.__new__(_MountedfileState)

        __props__.__dict__["checksum"] = checksum
        __props__.__dict__["content"] = content
        __props__.__dict__["context_id"] = context_id
        __props__.__dict__["module_id"] = module_id
        __props__.__dict__["relative_path"] = relative_path
        __props__.__dict__["stack_id"] = stack_id
        __props__.__dict__["write_only"] = write_only
        return Mountedfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Output[str]:
        """
        SHA-256 checksum of the value
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Content of the mounted file encoded using Base-64
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the context on which the mounted file is defined
        """
        return pulumi.get(self, "context_id")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the module on which the mounted file is defined
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter(name="relativePath")
    def relative_path(self) -> pulumi.Output[str]:
        """
        Relative path to the mounted file, without the /mnt/workspace/ prefix
        """
        return pulumi.get(self, "relative_path")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the stack on which the mounted file is defined
        """
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter(name="writeOnly")
    def write_only(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the content can be read back outside a Run. Defaults to `true`.
        """
        return pulumi.get(self, "write_only")

