# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PolicyAttachmentArgs', 'PolicyAttachment']

@pulumi.input_type
class PolicyAttachmentArgs:
    def __init__(__self__, *,
                 policy_id: pulumi.Input[str],
                 module_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PolicyAttachment resource.
        :param pulumi.Input[str] policy_id: ID of the policy to attach
        :param pulumi.Input[str] module_id: ID of the module to attach the policy to
        :param pulumi.Input[str] stack_id: ID of the stack to attach the policy to
        """
        PolicyAttachmentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy_id=policy_id,
            module_id=module_id,
            stack_id=stack_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy_id: Optional[pulumi.Input[str]] = None,
             module_id: Optional[pulumi.Input[str]] = None,
             stack_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if policy_id is None and 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if policy_id is None:
            raise TypeError("Missing 'policy_id' argument")
        if module_id is None and 'moduleId' in kwargs:
            module_id = kwargs['moduleId']
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']

        _setter("policy_id", policy_id)
        if module_id is not None:
            _setter("module_id", module_id)
        if stack_id is not None:
            _setter("stack_id", stack_id)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[str]:
        """
        ID of the policy to attach
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module to attach the policy to
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack to attach the policy to
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)


@pulumi.input_type
class _PolicyAttachmentState:
    def __init__(__self__, *,
                 module_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PolicyAttachment resources.
        :param pulumi.Input[str] module_id: ID of the module to attach the policy to
        :param pulumi.Input[str] policy_id: ID of the policy to attach
        :param pulumi.Input[str] stack_id: ID of the stack to attach the policy to
        """
        _PolicyAttachmentState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            module_id=module_id,
            policy_id=policy_id,
            stack_id=stack_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             module_id: Optional[pulumi.Input[str]] = None,
             policy_id: Optional[pulumi.Input[str]] = None,
             stack_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if module_id is None and 'moduleId' in kwargs:
            module_id = kwargs['moduleId']
        if policy_id is None and 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']

        if module_id is not None:
            _setter("module_id", module_id)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if stack_id is not None:
            _setter("stack_id", stack_id)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module to attach the policy to
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the policy to attach
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack to attach the policy to
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)


class PolicyAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `PolicyAttachment` represents a relationship between a policy (`Policy`) and a stack (`Stack`) or module (`Module`). Each policy can only be attached to a stack/module once. `LOGIN` policies are the exception because they apply globally and not to individual stacks/modules. An attempt to attach one will fail.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        no_weekend_deploys_policy = spacelift.Policy("no-weekend-deploysPolicy",
            body=(lambda path: open(path).read())("policies/no-weekend-deploys.rego"),
            type="PLAN")
        core_infra_production = spacelift.Stack("core-infra-production",
            branch="master",
            repository="core-infra")
        no_weekend_deploys_policy_attachment = spacelift.PolicyAttachment("no-weekend-deploysPolicyAttachment",
            policy_id=no_weekend_deploys_policy.id,
            stack_id=core_infra_production.id)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/policyAttachment:PolicyAttachment no-weekend-deploys $POLICY_ID/$STACK_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] module_id: ID of the module to attach the policy to
        :param pulumi.Input[str] policy_id: ID of the policy to attach
        :param pulumi.Input[str] stack_id: ID of the stack to attach the policy to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `PolicyAttachment` represents a relationship between a policy (`Policy`) and a stack (`Stack`) or module (`Module`). Each policy can only be attached to a stack/module once. `LOGIN` policies are the exception because they apply globally and not to individual stacks/modules. An attempt to attach one will fail.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        no_weekend_deploys_policy = spacelift.Policy("no-weekend-deploysPolicy",
            body=(lambda path: open(path).read())("policies/no-weekend-deploys.rego"),
            type="PLAN")
        core_infra_production = spacelift.Stack("core-infra-production",
            branch="master",
            repository="core-infra")
        no_weekend_deploys_policy_attachment = spacelift.PolicyAttachment("no-weekend-deploysPolicyAttachment",
            policy_id=no_weekend_deploys_policy.id,
            stack_id=core_infra_production.id)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/policyAttachment:PolicyAttachment no-weekend-deploys $POLICY_ID/$STACK_ID
        ```

        :param str resource_name: The name of the resource.
        :param PolicyAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            PolicyAttachmentArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyAttachmentArgs.__new__(PolicyAttachmentArgs)

            __props__.__dict__["module_id"] = module_id
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["stack_id"] = stack_id
        super(PolicyAttachment, __self__).__init__(
            'spacelift:index/policyAttachment:PolicyAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            module_id: Optional[pulumi.Input[str]] = None,
            policy_id: Optional[pulumi.Input[str]] = None,
            stack_id: Optional[pulumi.Input[str]] = None) -> 'PolicyAttachment':
        """
        Get an existing PolicyAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] module_id: ID of the module to attach the policy to
        :param pulumi.Input[str] policy_id: ID of the policy to attach
        :param pulumi.Input[str] stack_id: ID of the stack to attach the policy to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyAttachmentState.__new__(_PolicyAttachmentState)

        __props__.__dict__["module_id"] = module_id
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["stack_id"] = stack_id
        return PolicyAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the module to attach the policy to
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[str]:
        """
        ID of the policy to attach
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the stack to attach the policy to
        """
        return pulumi.get(self, "stack_id")

