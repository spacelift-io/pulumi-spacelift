# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'GetWorkerPoolResult',
    'AwaitableGetWorkerPoolResult',
    'get_worker_pool',
]

@pulumi.output_type
class GetWorkerPoolResult:
    """
    A collection of values returned by getWorkerPool.
    """
    def __init__(__self__, config=None, description=None, id=None, labels=None, name=None, worker_pool_id=None):
        if config and not isinstance(config, str):
            raise TypeError("Expected argument 'config' to be a str")
        pulumi.set(__self__, "config", config)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if worker_pool_id and not isinstance(worker_pool_id, str):
            raise TypeError("Expected argument 'worker_pool_id' to be a str")
        pulumi.set(__self__, "worker_pool_id", worker_pool_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> str:
        return pulumi.get(self, "worker_pool_id")


class AwaitableGetWorkerPoolResult(GetWorkerPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkerPoolResult(
            config=self.config,
            description=self.description,
            id=self.id,
            labels=self.labels,
            name=self.name,
            worker_pool_id=self.worker_pool_id)


def get_worker_pool(worker_pool_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkerPoolResult:
    """
    `WorkerPool` represents a worker pool assigned to the Spacelift account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    k8s_core = spacelift.get_worker_pool(worker_pool_id="k8s-core")
    ```

    <!-- schema generated by tfplugindocs -->
    ## Schema

    ### Required

    - **worker_pool_id** (String) ID of the worker pool

    ### Optional

    - **id** (String) The ID of this resource.

    ### Read-Only

    - **config** (String, Sensitive) credentials necessary to connect WorkerPool's workers to the control plane
    - **description** (String) description of the worker pool
    - **labels** (Set of String)
    - **name** (String) name of the worker pool
    """
    __args__ = dict()
    __args__['workerPoolId'] = worker_pool_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('spacelift:index/getWorkerPool:getWorkerPool', __args__, opts=opts, typ=GetWorkerPoolResult).value

    return AwaitableGetWorkerPoolResult(
        config=__ret__.config,
        description=__ret__.description,
        id=__ret__.id,
        labels=__ret__.labels,
        name=__ret__.name,
        worker_pool_id=__ret__.worker_pool_id)
