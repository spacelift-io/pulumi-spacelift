# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ScheduledDeleteTaskArgs', 'ScheduledDeleteTask']

@pulumi.input_type
class ScheduledDeleteTaskArgs:
    def __init__(__self__, *,
                 at: pulumi.Input[int],
                 stack_id: pulumi.Input[str],
                 delete_resources: Optional[pulumi.Input[bool]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ScheduledDeleteTask resource.
        :param pulumi.Input[int] at: Timestamp (unix timestamp) at which time the scheduling should happen.
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up scheduling
        :param pulumi.Input[bool] delete_resources: Indicates whether the resources of the stack should be deleted.
        :param pulumi.Input[str] schedule_id: ID of the schedule
        """
        ScheduledDeleteTaskArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            at=at,
            stack_id=stack_id,
            delete_resources=delete_resources,
            schedule_id=schedule_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             at: Optional[pulumi.Input[int]] = None,
             stack_id: Optional[pulumi.Input[str]] = None,
             delete_resources: Optional[pulumi.Input[bool]] = None,
             schedule_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if at is None:
            raise TypeError("Missing 'at' argument")
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']
        if stack_id is None:
            raise TypeError("Missing 'stack_id' argument")
        if delete_resources is None and 'deleteResources' in kwargs:
            delete_resources = kwargs['deleteResources']
        if schedule_id is None and 'scheduleId' in kwargs:
            schedule_id = kwargs['scheduleId']

        _setter("at", at)
        _setter("stack_id", stack_id)
        if delete_resources is not None:
            _setter("delete_resources", delete_resources)
        if schedule_id is not None:
            _setter("schedule_id", schedule_id)

    @property
    @pulumi.getter
    def at(self) -> pulumi.Input[int]:
        """
        Timestamp (unix timestamp) at which time the scheduling should happen.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: pulumi.Input[int]):
        pulumi.set(self, "at", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Input[str]:
        """
        ID of the stack for which to set up scheduling
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter(name="deleteResources")
    def delete_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the resources of the stack should be deleted.
        """
        return pulumi.get(self, "delete_resources")

    @delete_resources.setter
    def delete_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_resources", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the schedule
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)


@pulumi.input_type
class _ScheduledDeleteTaskState:
    def __init__(__self__, *,
                 at: Optional[pulumi.Input[int]] = None,
                 delete_resources: Optional[pulumi.Input[bool]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ScheduledDeleteTask resources.
        :param pulumi.Input[int] at: Timestamp (unix timestamp) at which time the scheduling should happen.
        :param pulumi.Input[bool] delete_resources: Indicates whether the resources of the stack should be deleted.
        :param pulumi.Input[str] schedule_id: ID of the schedule
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up scheduling
        """
        _ScheduledDeleteTaskState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            at=at,
            delete_resources=delete_resources,
            schedule_id=schedule_id,
            stack_id=stack_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             at: Optional[pulumi.Input[int]] = None,
             delete_resources: Optional[pulumi.Input[bool]] = None,
             schedule_id: Optional[pulumi.Input[str]] = None,
             stack_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if delete_resources is None and 'deleteResources' in kwargs:
            delete_resources = kwargs['deleteResources']
        if schedule_id is None and 'scheduleId' in kwargs:
            schedule_id = kwargs['scheduleId']
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']

        if at is not None:
            _setter("at", at)
        if delete_resources is not None:
            _setter("delete_resources", delete_resources)
        if schedule_id is not None:
            _setter("schedule_id", schedule_id)
        if stack_id is not None:
            _setter("stack_id", stack_id)

    @property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[int]]:
        """
        Timestamp (unix timestamp) at which time the scheduling should happen.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "at", value)

    @property
    @pulumi.getter(name="deleteResources")
    def delete_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the resources of the stack should be deleted.
        """
        return pulumi.get(self, "delete_resources")

    @delete_resources.setter
    def delete_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_resources", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the schedule
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack for which to set up scheduling
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)


class ScheduledDeleteTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 at: Optional[pulumi.Input[int]] = None,
                 delete_resources: Optional[pulumi.Input[bool]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `ScheduledDeleteTask` represents a scheduling configuration for a Stack. It will trigger a stack deletion task at the given timestamp.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        k8s_core = spacelift.Stack("k8s-core")
        # ...
        # at a given timestamp (unix)
        k8s_core_delete = spacelift.ScheduledDeleteTask("k8s-core-delete",
            stack_id=k8s_core.id,
            at=1663336895,
            delete_resources=True)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/scheduledDeleteTask:ScheduledDeleteTask ireland-kubeconfig $STACK_ID/$SCHEDULED_DELETE_STACK_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] at: Timestamp (unix timestamp) at which time the scheduling should happen.
        :param pulumi.Input[bool] delete_resources: Indicates whether the resources of the stack should be deleted.
        :param pulumi.Input[str] schedule_id: ID of the schedule
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up scheduling
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScheduledDeleteTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `ScheduledDeleteTask` represents a scheduling configuration for a Stack. It will trigger a stack deletion task at the given timestamp.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        k8s_core = spacelift.Stack("k8s-core")
        # ...
        # at a given timestamp (unix)
        k8s_core_delete = spacelift.ScheduledDeleteTask("k8s-core-delete",
            stack_id=k8s_core.id,
            at=1663336895,
            delete_resources=True)
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/scheduledDeleteTask:ScheduledDeleteTask ireland-kubeconfig $STACK_ID/$SCHEDULED_DELETE_STACK_ID
        ```

        :param str resource_name: The name of the resource.
        :param ScheduledDeleteTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScheduledDeleteTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ScheduledDeleteTaskArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 at: Optional[pulumi.Input[int]] = None,
                 delete_resources: Optional[pulumi.Input[bool]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScheduledDeleteTaskArgs.__new__(ScheduledDeleteTaskArgs)

            if at is None and not opts.urn:
                raise TypeError("Missing required property 'at'")
            __props__.__dict__["at"] = at
            __props__.__dict__["delete_resources"] = delete_resources
            __props__.__dict__["schedule_id"] = schedule_id
            if stack_id is None and not opts.urn:
                raise TypeError("Missing required property 'stack_id'")
            __props__.__dict__["stack_id"] = stack_id
        super(ScheduledDeleteTask, __self__).__init__(
            'spacelift:index/scheduledDeleteTask:ScheduledDeleteTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            at: Optional[pulumi.Input[int]] = None,
            delete_resources: Optional[pulumi.Input[bool]] = None,
            schedule_id: Optional[pulumi.Input[str]] = None,
            stack_id: Optional[pulumi.Input[str]] = None) -> 'ScheduledDeleteTask':
        """
        Get an existing ScheduledDeleteTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] at: Timestamp (unix timestamp) at which time the scheduling should happen.
        :param pulumi.Input[bool] delete_resources: Indicates whether the resources of the stack should be deleted.
        :param pulumi.Input[str] schedule_id: ID of the schedule
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up scheduling
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScheduledDeleteTaskState.__new__(_ScheduledDeleteTaskState)

        __props__.__dict__["at"] = at
        __props__.__dict__["delete_resources"] = delete_resources
        __props__.__dict__["schedule_id"] = schedule_id
        __props__.__dict__["stack_id"] = stack_id
        return ScheduledDeleteTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def at(self) -> pulumi.Output[int]:
        """
        Timestamp (unix timestamp) at which time the scheduling should happen.
        """
        return pulumi.get(self, "at")

    @property
    @pulumi.getter(name="deleteResources")
    def delete_resources(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the resources of the stack should be deleted.
        """
        return pulumi.get(self, "delete_resources")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> pulumi.Output[str]:
        """
        ID of the schedule
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[str]:
        """
        ID of the stack for which to set up scheduling
        """
        return pulumi.get(self, "stack_id")

