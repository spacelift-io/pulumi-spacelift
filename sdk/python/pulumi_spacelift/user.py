# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 invitation_email: pulumi.Input[str],
                 policies: pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]],
                 username: pulumi.Input[str]):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] invitation_email: Email of the user. Used for sending an invitation.
        :param pulumi.Input[str] username: Username of the user
        """
        UserArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            invitation_email=invitation_email,
            policies=policies,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             invitation_email: Optional[pulumi.Input[str]] = None,
             policies: Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if invitation_email is None and 'invitationEmail' in kwargs:
            invitation_email = kwargs['invitationEmail']
        if invitation_email is None:
            raise TypeError("Missing 'invitation_email' argument")
        if policies is None:
            raise TypeError("Missing 'policies' argument")
        if username is None:
            raise TypeError("Missing 'username' argument")

        _setter("invitation_email", invitation_email)
        _setter("policies", policies)
        _setter("username", username)

    @property
    @pulumi.getter(name="invitationEmail")
    def invitation_email(self) -> pulumi.Input[str]:
        """
        Email of the user. Used for sending an invitation.
        """
        return pulumi.get(self, "invitation_email")

    @invitation_email.setter
    def invitation_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "invitation_email", value)

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username of the user
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 invitation_email: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[str] invitation_email: Email of the user. Used for sending an invitation.
        :param pulumi.Input[str] username: Username of the user
        """
        _UserState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            invitation_email=invitation_email,
            policies=policies,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             invitation_email: Optional[pulumi.Input[str]] = None,
             policies: Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if invitation_email is None and 'invitationEmail' in kwargs:
            invitation_email = kwargs['invitationEmail']

        if invitation_email is not None:
            _setter("invitation_email", invitation_email)
        if policies is not None:
            _setter("policies", policies)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter(name="invitationEmail")
    def invitation_email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the user. Used for sending an invitation.
        """
        return pulumi.get(self, "invitation_email")

    @invitation_email.setter
    def invitation_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invitation_email", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username of the user
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 invitation_email: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPolicyArgs']]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `User` represents a mapping between a Spacelift user (managed using an Identity Provider) and a Policy. A Policy defines what access rights the user has to a given Space.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] invitation_email: Email of the user. Used for sending an invitation.
        :param pulumi.Input[str] username: Username of the user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `User` represents a mapping between a Spacelift user (managed using an Identity Provider) and a Policy. A Policy defines what access rights the user has to a given Space.

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            UserArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 invitation_email: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPolicyArgs']]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            if invitation_email is None and not opts.urn:
                raise TypeError("Missing required property 'invitation_email'")
            __props__.__dict__["invitation_email"] = invitation_email
            if policies is None and not opts.urn:
                raise TypeError("Missing required property 'policies'")
            __props__.__dict__["policies"] = policies
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
        super(User, __self__).__init__(
            'spacelift:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            invitation_email: Optional[pulumi.Input[str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPolicyArgs']]]]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] invitation_email: Email of the user. Used for sending an invitation.
        :param pulumi.Input[str] username: Username of the user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["invitation_email"] = invitation_email
        __props__.__dict__["policies"] = policies
        __props__.__dict__["username"] = username
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="invitationEmail")
    def invitation_email(self) -> pulumi.Output[str]:
        """
        Email of the user. Used for sending an invitation.
        """
        return pulumi.get(self, "invitation_email")

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Sequence['outputs.UserPolicy']]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username of the user
        """
        return pulumi.get(self, "username")

