# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RunArgs', 'Run']

@pulumi.input_type
class RunArgs:
    def __init__(__self__, *,
                 stack_id: pulumi.Input[str],
                 commit_sha: Optional[pulumi.Input[str]] = None,
                 keepers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 proposed: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Run resource.
        :param pulumi.Input[str] stack_id: ID of the stack on which the run is to be triggered.
        :param pulumi.Input[str] commit_sha: The commit SHA for which to trigger a run.
        :param pulumi.Input[Mapping[str, Any]] keepers: Arbitrary map of values that, when changed, will trigger recreation of the resource.
        :param pulumi.Input[bool] proposed: Whether the run is a proposed run. Defaults to `false`.
        """
        RunArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stack_id=stack_id,
            commit_sha=commit_sha,
            keepers=keepers,
            proposed=proposed,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stack_id: Optional[pulumi.Input[str]] = None,
             commit_sha: Optional[pulumi.Input[str]] = None,
             keepers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             proposed: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']
        if stack_id is None:
            raise TypeError("Missing 'stack_id' argument")
        if commit_sha is None and 'commitSha' in kwargs:
            commit_sha = kwargs['commitSha']

        _setter("stack_id", stack_id)
        if commit_sha is not None:
            _setter("commit_sha", commit_sha)
        if keepers is not None:
            _setter("keepers", keepers)
        if proposed is not None:
            _setter("proposed", proposed)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Input[str]:
        """
        ID of the stack on which the run is to be triggered.
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter(name="commitSha")
    def commit_sha(self) -> Optional[pulumi.Input[str]]:
        """
        The commit SHA for which to trigger a run.
        """
        return pulumi.get(self, "commit_sha")

    @commit_sha.setter
    def commit_sha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_sha", value)

    @property
    @pulumi.getter
    def keepers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Arbitrary map of values that, when changed, will trigger recreation of the resource.
        """
        return pulumi.get(self, "keepers")

    @keepers.setter
    def keepers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "keepers", value)

    @property
    @pulumi.getter
    def proposed(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the run is a proposed run. Defaults to `false`.
        """
        return pulumi.get(self, "proposed")

    @proposed.setter
    def proposed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "proposed", value)


@pulumi.input_type
class _RunState:
    def __init__(__self__, *,
                 commit_sha: Optional[pulumi.Input[str]] = None,
                 keepers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 proposed: Optional[pulumi.Input[bool]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Run resources.
        :param pulumi.Input[str] commit_sha: The commit SHA for which to trigger a run.
        :param pulumi.Input[Mapping[str, Any]] keepers: Arbitrary map of values that, when changed, will trigger recreation of the resource.
        :param pulumi.Input[bool] proposed: Whether the run is a proposed run. Defaults to `false`.
        :param pulumi.Input[str] stack_id: ID of the stack on which the run is to be triggered.
        """
        _RunState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commit_sha=commit_sha,
            keepers=keepers,
            proposed=proposed,
            stack_id=stack_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commit_sha: Optional[pulumi.Input[str]] = None,
             keepers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             proposed: Optional[pulumi.Input[bool]] = None,
             stack_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if commit_sha is None and 'commitSha' in kwargs:
            commit_sha = kwargs['commitSha']
        if stack_id is None and 'stackId' in kwargs:
            stack_id = kwargs['stackId']

        if commit_sha is not None:
            _setter("commit_sha", commit_sha)
        if keepers is not None:
            _setter("keepers", keepers)
        if proposed is not None:
            _setter("proposed", proposed)
        if stack_id is not None:
            _setter("stack_id", stack_id)

    @property
    @pulumi.getter(name="commitSha")
    def commit_sha(self) -> Optional[pulumi.Input[str]]:
        """
        The commit SHA for which to trigger a run.
        """
        return pulumi.get(self, "commit_sha")

    @commit_sha.setter
    def commit_sha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_sha", value)

    @property
    @pulumi.getter
    def keepers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Arbitrary map of values that, when changed, will trigger recreation of the resource.
        """
        return pulumi.get(self, "keepers")

    @keepers.setter
    def keepers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "keepers", value)

    @property
    @pulumi.getter
    def proposed(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the run is a proposed run. Defaults to `false`.
        """
        return pulumi.get(self, "proposed")

    @proposed.setter
    def proposed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "proposed", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack on which the run is to be triggered.
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)


class Run(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 commit_sha: Optional[pulumi.Input[str]] = None,
                 keepers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 proposed: Optional[pulumi.Input[bool]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `Run` allows programmatically triggering runs in response to arbitrary changes in the keepers section.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        this_stack = spacelift.Stack("thisStack",
            repository="test",
            branch="main")
        this_run = spacelift.Run("thisRun",
            stack_id=this_stack.id,
            keepers={
                "branch": this_stack.branch,
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] commit_sha: The commit SHA for which to trigger a run.
        :param pulumi.Input[Mapping[str, Any]] keepers: Arbitrary map of values that, when changed, will trigger recreation of the resource.
        :param pulumi.Input[bool] proposed: Whether the run is a proposed run. Defaults to `false`.
        :param pulumi.Input[str] stack_id: ID of the stack on which the run is to be triggered.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RunArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `Run` allows programmatically triggering runs in response to arbitrary changes in the keepers section.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        this_stack = spacelift.Stack("thisStack",
            repository="test",
            branch="main")
        this_run = spacelift.Run("thisRun",
            stack_id=this_stack.id,
            keepers={
                "branch": this_stack.branch,
            })
        ```

        :param str resource_name: The name of the resource.
        :param RunArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RunArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            RunArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 commit_sha: Optional[pulumi.Input[str]] = None,
                 keepers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 proposed: Optional[pulumi.Input[bool]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RunArgs.__new__(RunArgs)

            __props__.__dict__["commit_sha"] = commit_sha
            __props__.__dict__["keepers"] = keepers
            __props__.__dict__["proposed"] = proposed
            if stack_id is None and not opts.urn:
                raise TypeError("Missing required property 'stack_id'")
            __props__.__dict__["stack_id"] = stack_id
        super(Run, __self__).__init__(
            'spacelift:index/run:Run',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            commit_sha: Optional[pulumi.Input[str]] = None,
            keepers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            proposed: Optional[pulumi.Input[bool]] = None,
            stack_id: Optional[pulumi.Input[str]] = None) -> 'Run':
        """
        Get an existing Run resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] commit_sha: The commit SHA for which to trigger a run.
        :param pulumi.Input[Mapping[str, Any]] keepers: Arbitrary map of values that, when changed, will trigger recreation of the resource.
        :param pulumi.Input[bool] proposed: Whether the run is a proposed run. Defaults to `false`.
        :param pulumi.Input[str] stack_id: ID of the stack on which the run is to be triggered.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RunState.__new__(_RunState)

        __props__.__dict__["commit_sha"] = commit_sha
        __props__.__dict__["keepers"] = keepers
        __props__.__dict__["proposed"] = proposed
        __props__.__dict__["stack_id"] = stack_id
        return Run(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="commitSha")
    def commit_sha(self) -> pulumi.Output[Optional[str]]:
        """
        The commit SHA for which to trigger a run.
        """
        return pulumi.get(self, "commit_sha")

    @property
    @pulumi.getter
    def keepers(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Arbitrary map of values that, when changed, will trigger recreation of the resource.
        """
        return pulumi.get(self, "keepers")

    @property
    @pulumi.getter
    def proposed(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the run is a proposed run. Defaults to `false`.
        """
        return pulumi.get(self, "proposed")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[str]:
        """
        ID of the stack on which the run is to be triggered.
        """
        return pulumi.get(self, "stack_id")

