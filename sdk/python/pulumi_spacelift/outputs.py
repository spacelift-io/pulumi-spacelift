# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'IdpGroupMappingPolicy',
    'ModuleAzureDevops',
    'ModuleBitbucketCloud',
    'ModuleBitbucketDatacenter',
    'ModuleGithubEnterprise',
    'ModuleGitlab',
    'StackAnsible',
    'StackAzureDevops',
    'StackBitbucketCloud',
    'StackBitbucketDatacenter',
    'StackCloudformation',
    'StackGithubEnterprise',
    'StackGitlab',
    'StackKubernetes',
    'StackPulumi',
    'StackRawGit',
    'StackShowcase',
    'StackTerragrunt',
    'UserPolicy',
    'GetAwsIntegrationsIntegrationResult',
    'GetAzureIntegrationsIntegrationResult',
    'GetContextsContextResult',
    'GetContextsLabelResult',
    'GetModuleAzureDevopResult',
    'GetModuleBitbucketCloudResult',
    'GetModuleBitbucketDatacenterResult',
    'GetModuleGithubEnterpriseResult',
    'GetModuleGitlabResult',
    'GetPoliciesPolicyResult',
    'GetSpacesSpaceResult',
    'GetStackAnsibleResult',
    'GetStackAzureDevopResult',
    'GetStackBitbucketCloudResult',
    'GetStackBitbucketDatacenterResult',
    'GetStackCloudformationResult',
    'GetStackGithubEnterpriseResult',
    'GetStackGitlabResult',
    'GetStackKuberneteResult',
    'GetStackPulumiResult',
    'GetStackRawGitResult',
    'GetStackShowcaseResult',
    'GetStacksAdministrativeResult',
    'GetStacksBranchResult',
    'GetStacksCommitResult',
    'GetStacksLabelResult',
    'GetStacksLockedResult',
    'GetStacksNameResult',
    'GetStacksProjectRootResult',
    'GetStacksRepositoryResult',
    'GetStacksStackResult',
    'GetStacksStackAnsibleResult',
    'GetStacksStackAzureDevopResult',
    'GetStacksStackBitbucketCloudResult',
    'GetStacksStackBitbucketDatacenterResult',
    'GetStacksStackCloudformationResult',
    'GetStacksStackGithubEnterpriseResult',
    'GetStacksStackGitlabResult',
    'GetStacksStackKuberneteResult',
    'GetStacksStackPulumiResult',
    'GetStacksStackRawGitResult',
    'GetStacksStackShowcaseResult',
    'GetStacksStateResult',
    'GetStacksVendorResult',
    'GetStacksWorkerPoolResult',
    'GetVcsAgentPoolsVcsAgentPoolResult',
    'GetWorkerPoolsWorkerPoolResult',
]

@pulumi.output_type
class IdpGroupMappingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spaceId":
            suggest = "space_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdpGroupMappingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdpGroupMappingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdpGroupMappingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: str,
                 space_id: str):
        """
        :param str role: Type of access to the space. Possible values are: READ, WRITE, ADMIN
        :param str space_id: ID (slug) of the space the user group has access to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Type of access to the space. Possible values are: READ, WRITE, ADMIN
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the user group has access to
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class ModuleAzureDevops(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModuleAzureDevops. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModuleAzureDevops.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModuleAzureDevops.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str project: The name of the Azure DevOps project
        :param str id: ID of the Azure Devops integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default Azure DevOps integration
        """
        pulumi.set(__self__, "project", project)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The name of the Azure DevOps project
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the Azure Devops integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default Azure DevOps integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class ModuleBitbucketCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModuleBitbucketCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModuleBitbucketCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModuleBitbucketCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str namespace: The Bitbucket project containing the repository
        :param str id: The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default Bitbucket Cloud integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default Bitbucket Cloud integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class ModuleBitbucketDatacenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModuleBitbucketDatacenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModuleBitbucketDatacenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModuleBitbucketDatacenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str namespace: The Bitbucket project containing the repository
        :param str id: The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default Bitbucket Datacenter integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default Bitbucket Datacenter integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class ModuleGithubEnterprise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModuleGithubEnterprise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModuleGithubEnterprise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModuleGithubEnterprise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str namespace: The GitHub organization / user the repository belongs to
        :param str id: The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default GitHub Enterprise integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The GitHub organization / user the repository belongs to
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default GitHub Enterprise integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class ModuleGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModuleGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModuleGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModuleGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str namespace: The GitLab namespace containing the repository
        :param str id: ID of the Gitlab integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default GitLab integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The GitLab namespace containing the repository
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the Gitlab integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default GitLab integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class StackAnsible(dict):
    def __init__(__self__, *,
                 playbook: str):
        """
        :param str playbook: The playbook Ansible should run.
        """
        pulumi.set(__self__, "playbook", playbook)

    @property
    @pulumi.getter
    def playbook(self) -> str:
        """
        The playbook Ansible should run.
        """
        return pulumi.get(self, "playbook")


@pulumi.output_type
class StackAzureDevops(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackAzureDevops. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackAzureDevops.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackAzureDevops.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str project: The name of the Azure DevOps project
        :param str id: The ID of the Azure Devops integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default Azure DevOps integration
        """
        pulumi.set(__self__, "project", project)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The name of the Azure DevOps project
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Azure Devops integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default Azure DevOps integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class StackBitbucketCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackBitbucketCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackBitbucketCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackBitbucketCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str namespace: The Bitbucket project containing the repository
        :param str id: The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default Bitbucket Cloud integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default Bitbucket Cloud integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class StackBitbucketDatacenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackBitbucketDatacenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackBitbucketDatacenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackBitbucketDatacenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str namespace: The Bitbucket project containing the repository
        :param str id: The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default Bitbucket Datacenter integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default Bitbucket Datacenter integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class StackCloudformation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryTemplateFile":
            suggest = "entry_template_file"
        elif key == "stackName":
            suggest = "stack_name"
        elif key == "templateBucket":
            suggest = "template_bucket"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackCloudformation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackCloudformation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackCloudformation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entry_template_file: str,
                 region: str,
                 stack_name: str,
                 template_bucket: str):
        """
        :param str entry_template_file: Template file `cloudformation package` will be called on
        :param str region: AWS region to use
        :param str stack_name: CloudFormation stack name
        :param str template_bucket: S3 bucket to save CloudFormation templates to
        """
        pulumi.set(__self__, "entry_template_file", entry_template_file)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "stack_name", stack_name)
        pulumi.set(__self__, "template_bucket", template_bucket)

    @property
    @pulumi.getter(name="entryTemplateFile")
    def entry_template_file(self) -> str:
        """
        Template file `cloudformation package` will be called on
        """
        return pulumi.get(self, "entry_template_file")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        AWS region to use
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> str:
        """
        CloudFormation stack name
        """
        return pulumi.get(self, "stack_name")

    @property
    @pulumi.getter(name="templateBucket")
    def template_bucket(self) -> str:
        """
        S3 bucket to save CloudFormation templates to
        """
        return pulumi.get(self, "template_bucket")


@pulumi.output_type
class StackGithubEnterprise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackGithubEnterprise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackGithubEnterprise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackGithubEnterprise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str namespace: The GitHub organization / user the repository belongs to
        :param str id: The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default GitHub Enterprise integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The GitHub organization / user the repository belongs to
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default GitHub Enterprise integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class StackGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None):
        """
        :param str namespace: The GitLab namespace containing the repository
        :param str id: The ID of the Gitlab integration. If not specified, the default integration will be used.
        :param bool is_default: Indicates whether this is the default GitLab integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The GitLab namespace containing the repository
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Gitlab integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Indicates whether this is the default GitLab integration
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class StackKubernetes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kubectlVersion":
            suggest = "kubectl_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackKubernetes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackKubernetes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackKubernetes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kubectl_version: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str kubectl_version: Kubectl version.
        :param str namespace: Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        if kubectl_version is not None:
            pulumi.set(__self__, "kubectl_version", kubectl_version)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="kubectlVersion")
    def kubectl_version(self) -> Optional[str]:
        """
        Kubectl version.
        """
        return pulumi.get(self, "kubectl_version")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class StackPulumi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loginUrl":
            suggest = "login_url"
        elif key == "stackName":
            suggest = "stack_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackPulumi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackPulumi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackPulumi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 login_url: str,
                 stack_name: str):
        """
        :param str login_url: State backend to log into on Run initialize.
        :param str stack_name: Pulumi stack name to use with the state backend.
        """
        pulumi.set(__self__, "login_url", login_url)
        pulumi.set(__self__, "stack_name", stack_name)

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> str:
        """
        State backend to log into on Run initialize.
        """
        return pulumi.get(self, "login_url")

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> str:
        """
        Pulumi stack name to use with the state backend.
        """
        return pulumi.get(self, "stack_name")


@pulumi.output_type
class StackRawGit(dict):
    def __init__(__self__, *,
                 namespace: str,
                 url: str):
        """
        :param str namespace: User-friendly namespace for the repository, this is for cosmetic purposes only
        :param str url: HTTPS URL of the Git repository
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        User-friendly namespace for the repository, this is for cosmetic purposes only
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        HTTPS URL of the Git repository
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class StackShowcase(dict):
    def __init__(__self__, *,
                 namespace: str):
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class StackTerragrunt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "terraformVersion":
            suggest = "terraform_version"
        elif key == "terragruntVersion":
            suggest = "terragrunt_version"
        elif key == "useRunAll":
            suggest = "use_run_all"
        elif key == "useSmartSanitization":
            suggest = "use_smart_sanitization"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackTerragrunt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackTerragrunt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackTerragrunt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 terraform_version: Optional[str] = None,
                 terragrunt_version: Optional[str] = None,
                 use_run_all: Optional[bool] = None,
                 use_smart_sanitization: Optional[bool] = None):
        """
        :param str terragrunt_version: Terragrunt version.
        :param bool use_run_all: Whether to use `terragrunt run-all` instead of `terragrunt`.
        """
        if terraform_version is not None:
            pulumi.set(__self__, "terraform_version", terraform_version)
        if terragrunt_version is not None:
            pulumi.set(__self__, "terragrunt_version", terragrunt_version)
        if use_run_all is not None:
            pulumi.set(__self__, "use_run_all", use_run_all)
        if use_smart_sanitization is not None:
            pulumi.set(__self__, "use_smart_sanitization", use_smart_sanitization)

    @property
    @pulumi.getter(name="terraformVersion")
    def terraform_version(self) -> Optional[str]:
        return pulumi.get(self, "terraform_version")

    @property
    @pulumi.getter(name="terragruntVersion")
    def terragrunt_version(self) -> Optional[str]:
        """
        Terragrunt version.
        """
        return pulumi.get(self, "terragrunt_version")

    @property
    @pulumi.getter(name="useRunAll")
    def use_run_all(self) -> Optional[bool]:
        """
        Whether to use `terragrunt run-all` instead of `terragrunt`.
        """
        return pulumi.get(self, "use_run_all")

    @property
    @pulumi.getter(name="useSmartSanitization")
    def use_smart_sanitization(self) -> Optional[bool]:
        return pulumi.get(self, "use_smart_sanitization")


@pulumi.output_type
class UserPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spaceId":
            suggest = "space_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: str,
                 space_id: str):
        """
        :param str role: Type of access to the space. Possible values are: READ, WRITE, ADMIN
        :param str space_id: ID (slug) of the space the user has access to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Type of access to the space. Possible values are: READ, WRITE, ADMIN
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the user has access to
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetAwsIntegrationsIntegrationResult(dict):
    def __init__(__self__, *,
                 duration_seconds: int,
                 external_id: str,
                 generate_credentials_in_worker: bool,
                 integration_id: str,
                 labels: Sequence[str],
                 name: str,
                 role_arn: str,
                 space_id: str):
        """
        :param int duration_seconds: Duration in seconds for which the assumed role credentials should be valid
        :param str external_id: Custom external ID (works only for private workers).
        :param bool generate_credentials_in_worker: Generate AWS credentials in the private worker
        :param str integration_id: Immutable ID of the integration.
        :param str name: Name of the AWS integration.
        :param str role_arn: ARN of the AWS IAM role to attach
        :param str space_id: ID (slug) of the space the integration is in
        """
        pulumi.set(__self__, "duration_seconds", duration_seconds)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "generate_credentials_in_worker", generate_credentials_in_worker)
        pulumi.set(__self__, "integration_id", integration_id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> int:
        """
        Duration in seconds for which the assumed role credentials should be valid
        """
        return pulumi.get(self, "duration_seconds")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        Custom external ID (works only for private workers).
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="generateCredentialsInWorker")
    def generate_credentials_in_worker(self) -> bool:
        """
        Generate AWS credentials in the private worker
        """
        return pulumi.get(self, "generate_credentials_in_worker")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> str:
        """
        Immutable ID of the integration.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the AWS integration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        ARN of the AWS IAM role to attach
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the integration is in
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetAzureIntegrationsIntegrationResult(dict):
    def __init__(__self__, *,
                 admin_consent_provided: bool,
                 admin_consent_url: str,
                 application_id: str,
                 default_subscription_id: str,
                 display_name: str,
                 integration_id: str,
                 labels: Sequence[str],
                 name: str,
                 space_id: str,
                 tenant_id: str):
        """
        :param bool admin_consent_provided: Indicates whether admin consent has been performed for the AAD Application.
        :param str admin_consent_url: The URL to use to provide admin consent to the application in the customer's tenant
        :param str application_id: The applicationId of the Azure AD application used by the integration.
        :param str default_subscription_id: The default subscription ID to use, if one isn't specified at the stack/module level
        :param str display_name: The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
        :param str integration_id: Immutable ID of the integration.
        :param Sequence[str] labels: Labels to set on the integration
        :param str name: The friendly name of the integration.
        :param str space_id: ID (slug) of the space the integration is in
        :param str tenant_id: The Azure AD tenant ID
        """
        pulumi.set(__self__, "admin_consent_provided", admin_consent_provided)
        pulumi.set(__self__, "admin_consent_url", admin_consent_url)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "default_subscription_id", default_subscription_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "integration_id", integration_id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="adminConsentProvided")
    def admin_consent_provided(self) -> bool:
        """
        Indicates whether admin consent has been performed for the AAD Application.
        """
        return pulumi.get(self, "admin_consent_provided")

    @property
    @pulumi.getter(name="adminConsentUrl")
    def admin_consent_url(self) -> str:
        """
        The URL to use to provide admin consent to the application in the customer's tenant
        """
        return pulumi.get(self, "admin_consent_url")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        The applicationId of the Azure AD application used by the integration.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="defaultSubscriptionId")
    def default_subscription_id(self) -> str:
        """
        The default subscription ID to use, if one isn't specified at the stack/module level
        """
        return pulumi.get(self, "default_subscription_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for the application in Azure. This is automatically generated when the integration is created, and cannot be changed without deleting and recreating the integration.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> str:
        """
        Immutable ID of the integration.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels to set on the integration
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The friendly name of the integration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the integration is in
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Azure AD tenant ID
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetContextsContextResult(dict):
    def __init__(__self__, *,
                 context_id: str,
                 description: str,
                 labels: Sequence[str],
                 name: str,
                 space_id: str):
        """
        :param str context_id: immutable ID (slug) of the context
        :param str description: free-form context description for users
        :param str name: name of the context
        :param str space_id: ID (slug) of the space the context is in
        """
        pulumi.set(__self__, "context_id", context_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="contextId")
    def context_id(self) -> str:
        """
        immutable ID (slug) of the context
        """
        return pulumi.get(self, "context_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        free-form context description for users
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the context
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the context is in
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetContextsLabelResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetModuleAzureDevopResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 project: str):
        """
        :param str id: ID of the Azure Devops integration
        :param bool is_default: Indicates whether this is the default Azure Devops integration
        :param str project: The name of the Azure DevOps project
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Azure Devops integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Azure Devops integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The name of the Azure DevOps project
        """
        return pulumi.get(self, "project")


@pulumi.output_type
class GetModuleBitbucketCloudResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the Bitbucket Cloud integration
        :param bool is_default: Indicates whether this is the default Bitbucket Cloud integration
        :param str namespace: Bitbucket Cloud namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Bitbucket Cloud integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Bitbucket Cloud integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Bitbucket Cloud namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetModuleBitbucketDatacenterResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the Bitbucket Datacenter integration
        :param bool is_default: Indicates whether this is the default Bitbucket Datacenter integration
        :param str namespace: Bitbucket Datacenter namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Bitbucket Datacenter integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Bitbucket Datacenter integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Bitbucket Datacenter namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetModuleGithubEnterpriseResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the GitHub Enterprise integration
        :param bool is_default: Indicates whether this is the default GitHub Enterprise integration
        :param str namespace: GitHub Enterprise namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the GitHub Enterprise integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default GitHub Enterprise integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        GitHub Enterprise namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetModuleGitlabResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the Gitlab integration
        :param bool is_default: Indicates whether this is the default Gitlab integration
        :param str namespace: GitLab namespace of the repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Gitlab integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Gitlab integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        GitLab namespace of the repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 id: str,
                 labels: Sequence[str],
                 name: str,
                 space_id: str,
                 type: str):
        """
        :param str id: ID of the policy
        :param str name: Name of the policy
        :param str space_id: ID (slug) of the space the policy is in
        :param str type: Type of the policy
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the policy
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the policy is in
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the policy
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSpacesSpaceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 inherit_entities: bool,
                 labels: Sequence[str],
                 name: str,
                 parent_space_id: str,
                 space_id: str):
        """
        :param str description: free-form space description for users
        :param bool inherit_entities: indication whether access to this space inherits read access to entities from the parent space
        :param Sequence[str] labels: list of labels describing a space
        :param str name: name of the space
        :param str parent_space_id: immutable ID (slug) of parent space
        :param str space_id: immutable ID (slug) of the space
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "inherit_entities", inherit_entities)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_space_id", parent_space_id)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        free-form space description for users
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="inheritEntities")
    def inherit_entities(self) -> bool:
        """
        indication whether access to this space inherits read access to entities from the parent space
        """
        return pulumi.get(self, "inherit_entities")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        list of labels describing a space
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the space
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentSpaceId")
    def parent_space_id(self) -> str:
        """
        immutable ID (slug) of parent space
        """
        return pulumi.get(self, "parent_space_id")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        immutable ID (slug) of the space
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetStackAnsibleResult(dict):
    def __init__(__self__, *,
                 playbook: str):
        """
        :param str playbook: The playbook the Ansible stack should run.
        """
        pulumi.set(__self__, "playbook", playbook)

    @property
    @pulumi.getter
    def playbook(self) -> str:
        """
        The playbook the Ansible stack should run.
        """
        return pulumi.get(self, "playbook")


@pulumi.output_type
class GetStackAzureDevopResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 project: str):
        """
        :param str id: ID of the Azure Devops VCS integration
        :param bool is_default: Indicates whether this is the default Azure Devops VCS integration
        :param str project: The name of the Azure DevOps project
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Azure Devops VCS integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Azure Devops VCS integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The name of the Azure DevOps project
        """
        return pulumi.get(self, "project")


@pulumi.output_type
class GetStackBitbucketCloudResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the Bitbucket Cloud integration
        :param bool is_default: Indicates whether this is the default Bitbucket Cloud integration
        :param str namespace: Bitbucket Cloud namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Bitbucket Cloud integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Bitbucket Cloud integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Bitbucket Cloud namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStackBitbucketDatacenterResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the Bitbucket Datacenter integration
        :param bool is_default: Indicates whether this is the default Bitbucket Datacenter integration
        :param str namespace: Bitbucket Datacenter namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Bitbucket Datacenter integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Bitbucket Datacenter integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Bitbucket Datacenter namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStackCloudformationResult(dict):
    def __init__(__self__, *,
                 entry_template_file: str,
                 region: str,
                 stack_name: str,
                 template_bucket: str):
        """
        :param str entry_template_file: Template file `cloudformation package` will be called on
        :param str region: AWS region to use
        :param str stack_name: CloudFormation stack name
        :param str template_bucket: S3 bucket to save CloudFormation templates to
        """
        pulumi.set(__self__, "entry_template_file", entry_template_file)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "stack_name", stack_name)
        pulumi.set(__self__, "template_bucket", template_bucket)

    @property
    @pulumi.getter(name="entryTemplateFile")
    def entry_template_file(self) -> str:
        """
        Template file `cloudformation package` will be called on
        """
        return pulumi.get(self, "entry_template_file")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        AWS region to use
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> str:
        """
        CloudFormation stack name
        """
        return pulumi.get(self, "stack_name")

    @property
    @pulumi.getter(name="templateBucket")
    def template_bucket(self) -> str:
        """
        S3 bucket to save CloudFormation templates to
        """
        return pulumi.get(self, "template_bucket")


@pulumi.output_type
class GetStackGithubEnterpriseResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the GitHub Enterprise integration
        :param bool is_default: Indicates whether this is the default GitHub Enterprise integration
        :param str namespace: GitHub Enterprise namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the GitHub Enterprise integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default GitHub Enterprise integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        GitHub Enterprise namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStackGitlabResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the Gitlab integration
        :param bool is_default: Indicates whether this is the default Gitlab integration
        :param str namespace: GitLab namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Gitlab integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Gitlab integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        GitLab namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStackKuberneteResult(dict):
    def __init__(__self__, *,
                 kubectl_version: str,
                 namespace: str):
        """
        :param str kubectl_version: Kubectl version.
        :param str namespace: Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        pulumi.set(__self__, "kubectl_version", kubectl_version)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="kubectlVersion")
    def kubectl_version(self) -> str:
        """
        Kubectl version.
        """
        return pulumi.get(self, "kubectl_version")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStackPulumiResult(dict):
    def __init__(__self__, *,
                 login_url: str,
                 stack_name: str):
        """
        :param str login_url: State backend to log into on Run initialize.
        :param str stack_name: Pulumi stack name to use with the state backend.
        """
        pulumi.set(__self__, "login_url", login_url)
        pulumi.set(__self__, "stack_name", stack_name)

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> str:
        """
        State backend to log into on Run initialize.
        """
        return pulumi.get(self, "login_url")

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> str:
        """
        Pulumi stack name to use with the state backend.
        """
        return pulumi.get(self, "stack_name")


@pulumi.output_type
class GetStackRawGitResult(dict):
    def __init__(__self__, *,
                 namespace: str,
                 url: str):
        """
        :param str namespace: User-friendly namespace for the repository, this is for cosmetic purposes only
        :param str url: HTTPS URL of the Git repository
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        User-friendly namespace for the repository, this is for cosmetic purposes only
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        HTTPS URL of the Git repository
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetStackShowcaseResult(dict):
    def __init__(__self__, *,
                 namespace: str):
        """
        :param str namespace: GitHub namespace of the stack's repository
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        GitHub namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStacksAdministrativeResult(dict):
    def __init__(__self__, *,
                 equals: Optional[bool] = None):
        if equals is not None:
            pulumi.set(__self__, "equals", equals)

    @property
    @pulumi.getter
    def equals(self) -> Optional[bool]:
        return pulumi.get(self, "equals")


@pulumi.output_type
class GetStacksBranchResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetStacksCommitResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetStacksLabelResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetStacksLockedResult(dict):
    def __init__(__self__, *,
                 equals: Optional[bool] = None):
        if equals is not None:
            pulumi.set(__self__, "equals", equals)

    @property
    @pulumi.getter
    def equals(self) -> Optional[bool]:
        return pulumi.get(self, "equals")


@pulumi.output_type
class GetStacksNameResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetStacksProjectRootResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetStacksRepositoryResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetStacksStackResult(dict):
    def __init__(__self__, *,
                 administrative: bool,
                 after_applies: Sequence[str],
                 after_destroys: Sequence[str],
                 after_inits: Sequence[str],
                 after_performs: Sequence[str],
                 after_plans: Sequence[str],
                 ansibles: Sequence['outputs.GetStacksStackAnsibleResult'],
                 autodeploy: bool,
                 autoretry: bool,
                 aws_assume_role_policy_statement: str,
                 azure_devops: Sequence['outputs.GetStacksStackAzureDevopResult'],
                 before_applies: Sequence[str],
                 before_destroys: Sequence[str],
                 before_inits: Sequence[str],
                 before_performs: Sequence[str],
                 before_plans: Sequence[str],
                 bitbucket_clouds: Sequence['outputs.GetStacksStackBitbucketCloudResult'],
                 bitbucket_datacenters: Sequence['outputs.GetStacksStackBitbucketDatacenterResult'],
                 branch: str,
                 cloudformations: Sequence['outputs.GetStacksStackCloudformationResult'],
                 description: str,
                 enable_local_preview: bool,
                 github_enterprises: Sequence['outputs.GetStacksStackGithubEnterpriseResult'],
                 gitlabs: Sequence['outputs.GetStacksStackGitlabResult'],
                 kubernetes: Sequence['outputs.GetStacksStackKuberneteResult'],
                 labels: Sequence[str],
                 manage_state: bool,
                 name: str,
                 project_root: str,
                 protect_from_deletion: bool,
                 pulumis: Sequence['outputs.GetStacksStackPulumiResult'],
                 raw_gits: Sequence['outputs.GetStacksStackRawGitResult'],
                 repository: str,
                 runner_image: str,
                 showcases: Sequence['outputs.GetStacksStackShowcaseResult'],
                 space_id: str,
                 stack_id: str,
                 terraform_external_state_access: bool,
                 terraform_smart_sanitization: bool,
                 terraform_version: str,
                 terraform_workflow_tool: str,
                 terraform_workspace: str,
                 worker_pool_id: str,
                 additional_project_globs: Optional[Sequence[str]] = None,
                 after_runs: Optional[Sequence[str]] = None):
        """
        :param bool administrative: indicates whether this stack can administer others
        :param Sequence[str] after_applies: List of after-apply scripts
        :param Sequence[str] after_destroys: List of after-destroy scripts
        :param Sequence[str] after_inits: List of after-init scripts
        :param Sequence[str] after_performs: List of after-perform scripts
        :param Sequence[str] after_plans: List of after-plan scripts
        :param Sequence['GetStacksStackAnsibleArgs'] ansibles: Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        :param bool autodeploy: indicates whether changes to this stack can be automatically deployed
        :param bool autoretry: indicates whether obsolete proposed changes should automatically be retried
        :param str aws_assume_role_policy_statement: AWS IAM assume role policy statement setting up trust relationship
        :param Sequence['GetStacksStackAzureDevopArgs'] azure_devops: Azure DevOps VCS settings
        :param Sequence[str] before_applies: List of before-apply scripts
        :param Sequence[str] before_destroys: List of before-destroy scripts
        :param Sequence[str] before_inits: List of before-init scripts
        :param Sequence[str] before_performs: List of before-perform scripts
        :param Sequence[str] before_plans: List of before-plan scripts
        :param Sequence['GetStacksStackBitbucketCloudArgs'] bitbucket_clouds: Bitbucket Cloud VCS settings
        :param Sequence['GetStacksStackBitbucketDatacenterArgs'] bitbucket_datacenters: Bitbucket Datacenter VCS settings
        :param str branch: Repository branch to treat as the default 'main' branch
        :param Sequence['GetStacksStackCloudformationArgs'] cloudformations: CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        :param str description: free-form stack description for users
        :param bool enable_local_preview: Indicates whether local preview runs can be triggered on this Stack.
        :param Sequence['GetStacksStackGithubEnterpriseArgs'] github_enterprises: GitHub Enterprise (self-hosted) VCS settings
        :param Sequence['GetStacksStackGitlabArgs'] gitlabs: GitLab VCS settings
        :param Sequence['GetStacksStackKuberneteArgs'] kubernetes: Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        :param bool manage_state: Determines if Spacelift should manage state for this stack
        :param str name: Name of the stack - should be unique in one account
        :param str project_root: Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        :param bool protect_from_deletion: Protect this stack from accidental deletion. If set, attempts to delete this stack will fail.
        :param Sequence['GetStacksStackPulumiArgs'] pulumis: Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        :param Sequence['GetStacksStackRawGitArgs'] raw_gits: One-way VCS integration using a raw Git repository link
        :param str repository: Name of the repository, without the owner part
        :param str runner_image: Name of the Docker image used to process Runs
        :param Sequence['GetStacksStackShowcaseArgs'] showcases: Showcase-related attributes
        :param str space_id: ID (slug) of the space the stack is in
        :param str stack_id: ID (slug) of the stack
        :param bool terraform_external_state_access: Indicates whether you can access the Stack state file from other stacks or outside of Spacelift.
        :param str terraform_workflow_tool: Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
        :param str worker_pool_id: ID of the worker pool to use
        :param Sequence[str] additional_project_globs: Project globs is an optional list of paths to track changes of in addition to the project root.
        :param Sequence[str] after_runs: List of after-run scripts
        """
        pulumi.set(__self__, "administrative", administrative)
        pulumi.set(__self__, "after_applies", after_applies)
        pulumi.set(__self__, "after_destroys", after_destroys)
        pulumi.set(__self__, "after_inits", after_inits)
        pulumi.set(__self__, "after_performs", after_performs)
        pulumi.set(__self__, "after_plans", after_plans)
        pulumi.set(__self__, "ansibles", ansibles)
        pulumi.set(__self__, "autodeploy", autodeploy)
        pulumi.set(__self__, "autoretry", autoretry)
        pulumi.set(__self__, "aws_assume_role_policy_statement", aws_assume_role_policy_statement)
        pulumi.set(__self__, "azure_devops", azure_devops)
        pulumi.set(__self__, "before_applies", before_applies)
        pulumi.set(__self__, "before_destroys", before_destroys)
        pulumi.set(__self__, "before_inits", before_inits)
        pulumi.set(__self__, "before_performs", before_performs)
        pulumi.set(__self__, "before_plans", before_plans)
        pulumi.set(__self__, "bitbucket_clouds", bitbucket_clouds)
        pulumi.set(__self__, "bitbucket_datacenters", bitbucket_datacenters)
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "cloudformations", cloudformations)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable_local_preview", enable_local_preview)
        pulumi.set(__self__, "github_enterprises", github_enterprises)
        pulumi.set(__self__, "gitlabs", gitlabs)
        pulumi.set(__self__, "kubernetes", kubernetes)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "manage_state", manage_state)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_root", project_root)
        pulumi.set(__self__, "protect_from_deletion", protect_from_deletion)
        pulumi.set(__self__, "pulumis", pulumis)
        pulumi.set(__self__, "raw_gits", raw_gits)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "runner_image", runner_image)
        pulumi.set(__self__, "showcases", showcases)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "stack_id", stack_id)
        pulumi.set(__self__, "terraform_external_state_access", terraform_external_state_access)
        pulumi.set(__self__, "terraform_smart_sanitization", terraform_smart_sanitization)
        pulumi.set(__self__, "terraform_version", terraform_version)
        pulumi.set(__self__, "terraform_workflow_tool", terraform_workflow_tool)
        pulumi.set(__self__, "terraform_workspace", terraform_workspace)
        pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if additional_project_globs is not None:
            pulumi.set(__self__, "additional_project_globs", additional_project_globs)
        if after_runs is not None:
            pulumi.set(__self__, "after_runs", after_runs)

    @property
    @pulumi.getter
    def administrative(self) -> bool:
        """
        indicates whether this stack can administer others
        """
        return pulumi.get(self, "administrative")

    @property
    @pulumi.getter(name="afterApplies")
    def after_applies(self) -> Sequence[str]:
        """
        List of after-apply scripts
        """
        return pulumi.get(self, "after_applies")

    @property
    @pulumi.getter(name="afterDestroys")
    def after_destroys(self) -> Sequence[str]:
        """
        List of after-destroy scripts
        """
        return pulumi.get(self, "after_destroys")

    @property
    @pulumi.getter(name="afterInits")
    def after_inits(self) -> Sequence[str]:
        """
        List of after-init scripts
        """
        return pulumi.get(self, "after_inits")

    @property
    @pulumi.getter(name="afterPerforms")
    def after_performs(self) -> Sequence[str]:
        """
        List of after-perform scripts
        """
        return pulumi.get(self, "after_performs")

    @property
    @pulumi.getter(name="afterPlans")
    def after_plans(self) -> Sequence[str]:
        """
        List of after-plan scripts
        """
        return pulumi.get(self, "after_plans")

    @property
    @pulumi.getter
    def ansibles(self) -> Sequence['outputs.GetStacksStackAnsibleResult']:
        """
        Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
        """
        return pulumi.get(self, "ansibles")

    @property
    @pulumi.getter
    def autodeploy(self) -> bool:
        """
        indicates whether changes to this stack can be automatically deployed
        """
        return pulumi.get(self, "autodeploy")

    @property
    @pulumi.getter
    def autoretry(self) -> bool:
        """
        indicates whether obsolete proposed changes should automatically be retried
        """
        return pulumi.get(self, "autoretry")

    @property
    @pulumi.getter(name="awsAssumeRolePolicyStatement")
    def aws_assume_role_policy_statement(self) -> str:
        """
        AWS IAM assume role policy statement setting up trust relationship
        """
        return pulumi.get(self, "aws_assume_role_policy_statement")

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Sequence['outputs.GetStacksStackAzureDevopResult']:
        """
        Azure DevOps VCS settings
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="beforeApplies")
    def before_applies(self) -> Sequence[str]:
        """
        List of before-apply scripts
        """
        return pulumi.get(self, "before_applies")

    @property
    @pulumi.getter(name="beforeDestroys")
    def before_destroys(self) -> Sequence[str]:
        """
        List of before-destroy scripts
        """
        return pulumi.get(self, "before_destroys")

    @property
    @pulumi.getter(name="beforeInits")
    def before_inits(self) -> Sequence[str]:
        """
        List of before-init scripts
        """
        return pulumi.get(self, "before_inits")

    @property
    @pulumi.getter(name="beforePerforms")
    def before_performs(self) -> Sequence[str]:
        """
        List of before-perform scripts
        """
        return pulumi.get(self, "before_performs")

    @property
    @pulumi.getter(name="beforePlans")
    def before_plans(self) -> Sequence[str]:
        """
        List of before-plan scripts
        """
        return pulumi.get(self, "before_plans")

    @property
    @pulumi.getter(name="bitbucketClouds")
    def bitbucket_clouds(self) -> Sequence['outputs.GetStacksStackBitbucketCloudResult']:
        """
        Bitbucket Cloud VCS settings
        """
        return pulumi.get(self, "bitbucket_clouds")

    @property
    @pulumi.getter(name="bitbucketDatacenters")
    def bitbucket_datacenters(self) -> Sequence['outputs.GetStacksStackBitbucketDatacenterResult']:
        """
        Bitbucket Datacenter VCS settings
        """
        return pulumi.get(self, "bitbucket_datacenters")

    @property
    @pulumi.getter
    def branch(self) -> str:
        """
        Repository branch to treat as the default 'main' branch
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def cloudformations(self) -> Sequence['outputs.GetStacksStackCloudformationResult']:
        """
        CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
        """
        return pulumi.get(self, "cloudformations")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        free-form stack description for users
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableLocalPreview")
    def enable_local_preview(self) -> bool:
        """
        Indicates whether local preview runs can be triggered on this Stack.
        """
        return pulumi.get(self, "enable_local_preview")

    @property
    @pulumi.getter(name="githubEnterprises")
    def github_enterprises(self) -> Sequence['outputs.GetStacksStackGithubEnterpriseResult']:
        """
        GitHub Enterprise (self-hosted) VCS settings
        """
        return pulumi.get(self, "github_enterprises")

    @property
    @pulumi.getter
    def gitlabs(self) -> Sequence['outputs.GetStacksStackGitlabResult']:
        """
        GitLab VCS settings
        """
        return pulumi.get(self, "gitlabs")

    @property
    @pulumi.getter
    def kubernetes(self) -> Sequence['outputs.GetStacksStackKuberneteResult']:
        """
        Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
        """
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="manageState")
    def manage_state(self) -> bool:
        """
        Determines if Spacelift should manage state for this stack
        """
        return pulumi.get(self, "manage_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the stack - should be unique in one account
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectRoot")
    def project_root(self) -> str:
        """
        Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
        """
        return pulumi.get(self, "project_root")

    @property
    @pulumi.getter(name="protectFromDeletion")
    def protect_from_deletion(self) -> bool:
        """
        Protect this stack from accidental deletion. If set, attempts to delete this stack will fail.
        """
        return pulumi.get(self, "protect_from_deletion")

    @property
    @pulumi.getter
    def pulumis(self) -> Sequence['outputs.GetStacksStackPulumiResult']:
        """
        Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
        """
        return pulumi.get(self, "pulumis")

    @property
    @pulumi.getter(name="rawGits")
    def raw_gits(self) -> Sequence['outputs.GetStacksStackRawGitResult']:
        """
        One-way VCS integration using a raw Git repository link
        """
        return pulumi.get(self, "raw_gits")

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        Name of the repository, without the owner part
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="runnerImage")
    def runner_image(self) -> str:
        """
        Name of the Docker image used to process Runs
        """
        return pulumi.get(self, "runner_image")

    @property
    @pulumi.getter
    def showcases(self) -> Sequence['outputs.GetStacksStackShowcaseResult']:
        """
        Showcase-related attributes
        """
        return pulumi.get(self, "showcases")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the stack is in
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> str:
        """
        ID (slug) of the stack
        """
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter(name="terraformExternalStateAccess")
    def terraform_external_state_access(self) -> bool:
        """
        Indicates whether you can access the Stack state file from other stacks or outside of Spacelift.
        """
        return pulumi.get(self, "terraform_external_state_access")

    @property
    @pulumi.getter(name="terraformSmartSanitization")
    def terraform_smart_sanitization(self) -> bool:
        return pulumi.get(self, "terraform_smart_sanitization")

    @property
    @pulumi.getter(name="terraformVersion")
    def terraform_version(self) -> str:
        return pulumi.get(self, "terraform_version")

    @property
    @pulumi.getter(name="terraformWorkflowTool")
    def terraform_workflow_tool(self) -> str:
        """
        Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or `CUSTOM`.
        """
        return pulumi.get(self, "terraform_workflow_tool")

    @property
    @pulumi.getter(name="terraformWorkspace")
    def terraform_workspace(self) -> str:
        return pulumi.get(self, "terraform_workspace")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> str:
        """
        ID of the worker pool to use
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="additionalProjectGlobs")
    def additional_project_globs(self) -> Optional[Sequence[str]]:
        """
        Project globs is an optional list of paths to track changes of in addition to the project root.
        """
        return pulumi.get(self, "additional_project_globs")

    @property
    @pulumi.getter(name="afterRuns")
    def after_runs(self) -> Optional[Sequence[str]]:
        """
        List of after-run scripts
        """
        return pulumi.get(self, "after_runs")


@pulumi.output_type
class GetStacksStackAnsibleResult(dict):
    def __init__(__self__, *,
                 playbook: str):
        """
        :param str playbook: The playbook the Ansible stack should run.
        """
        pulumi.set(__self__, "playbook", playbook)

    @property
    @pulumi.getter
    def playbook(self) -> str:
        """
        The playbook the Ansible stack should run.
        """
        return pulumi.get(self, "playbook")


@pulumi.output_type
class GetStacksStackAzureDevopResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 project: str):
        """
        :param str id: ID of the Azure Devops VCS integration
        :param bool is_default: Indicates whether this is the default Azure Devops VCS integration
        :param str project: The name of the Azure DevOps project
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Azure Devops VCS integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Azure Devops VCS integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The name of the Azure DevOps project
        """
        return pulumi.get(self, "project")


@pulumi.output_type
class GetStacksStackBitbucketCloudResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the Bitbucket Cloud integration
        :param bool is_default: Indicates whether this is the default Bitbucket Cloud integration
        :param str namespace: Bitbucket Cloud namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Bitbucket Cloud integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Bitbucket Cloud integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Bitbucket Cloud namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStacksStackBitbucketDatacenterResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the Bitbucket Datacenter integration
        :param bool is_default: Indicates whether this is the default Bitbucket Datacenter integration
        :param str namespace: Bitbucket Datacenter namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Bitbucket Datacenter integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Bitbucket Datacenter integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Bitbucket Datacenter namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStacksStackCloudformationResult(dict):
    def __init__(__self__, *,
                 entry_template_file: str,
                 region: str,
                 stack_name: str,
                 template_bucket: str):
        """
        :param str entry_template_file: Template file `cloudformation package` will be called on
        :param str region: AWS region to use
        :param str stack_name: CloudFormation stack name
        :param str template_bucket: S3 bucket to save CloudFormation templates to
        """
        pulumi.set(__self__, "entry_template_file", entry_template_file)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "stack_name", stack_name)
        pulumi.set(__self__, "template_bucket", template_bucket)

    @property
    @pulumi.getter(name="entryTemplateFile")
    def entry_template_file(self) -> str:
        """
        Template file `cloudformation package` will be called on
        """
        return pulumi.get(self, "entry_template_file")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        AWS region to use
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> str:
        """
        CloudFormation stack name
        """
        return pulumi.get(self, "stack_name")

    @property
    @pulumi.getter(name="templateBucket")
    def template_bucket(self) -> str:
        """
        S3 bucket to save CloudFormation templates to
        """
        return pulumi.get(self, "template_bucket")


@pulumi.output_type
class GetStacksStackGithubEnterpriseResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the GitHub Enterprise integration
        :param bool is_default: Indicates whether this is the default GitHub Enterprise integration
        :param str namespace: GitHub Enterprise namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the GitHub Enterprise integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default GitHub Enterprise integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        GitHub Enterprise namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStacksStackGitlabResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_default: bool,
                 namespace: str):
        """
        :param str id: ID of the Gitlab integration
        :param bool is_default: Indicates whether this is the default Gitlab integration
        :param str namespace: GitLab namespace of the stack's repository
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Gitlab integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default Gitlab integration
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        GitLab namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStacksStackKuberneteResult(dict):
    def __init__(__self__, *,
                 kubectl_version: str,
                 namespace: str):
        """
        :param str kubectl_version: Kubectl version.
        :param str namespace: Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        pulumi.set(__self__, "kubectl_version", kubectl_version)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="kubectlVersion")
    def kubectl_version(self) -> str:
        """
        Kubectl version.
        """
        return pulumi.get(self, "kubectl_version")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStacksStackPulumiResult(dict):
    def __init__(__self__, *,
                 login_url: str,
                 stack_name: str):
        """
        :param str login_url: State backend to log into on Run initialize.
        :param str stack_name: Pulumi stack name to use with the state backend.
        """
        pulumi.set(__self__, "login_url", login_url)
        pulumi.set(__self__, "stack_name", stack_name)

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> str:
        """
        State backend to log into on Run initialize.
        """
        return pulumi.get(self, "login_url")

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> str:
        """
        Pulumi stack name to use with the state backend.
        """
        return pulumi.get(self, "stack_name")


@pulumi.output_type
class GetStacksStackRawGitResult(dict):
    def __init__(__self__, *,
                 namespace: str,
                 url: str):
        """
        :param str namespace: User-friendly namespace for the repository, this is for cosmetic purposes only
        :param str url: HTTPS URL of the Git repository
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        User-friendly namespace for the repository, this is for cosmetic purposes only
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        HTTPS URL of the Git repository
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetStacksStackShowcaseResult(dict):
    def __init__(__self__, *,
                 namespace: str):
        """
        :param str namespace: GitHub namespace of the stack's repository
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        GitHub namespace of the stack's repository
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetStacksStateResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetStacksVendorResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetStacksWorkerPoolResult(dict):
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")


@pulumi.output_type
class GetVcsAgentPoolsVcsAgentPoolResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 vcs_agent_pool_id: str):
        """
        :param str description: Free-form VCS agent pool description for users
        :param str name: Name of the VCS agent pool
        :param str vcs_agent_pool_id: ID of the VCS agent pool to retrieve
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vcs_agent_pool_id", vcs_agent_pool_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Free-form VCS agent pool description for users
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the VCS agent pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vcsAgentPoolId")
    def vcs_agent_pool_id(self) -> str:
        """
        ID of the VCS agent pool to retrieve
        """
        return pulumi.get(self, "vcs_agent_pool_id")


@pulumi.output_type
class GetWorkerPoolsWorkerPoolResult(dict):
    def __init__(__self__, *,
                 config: str,
                 description: str,
                 name: str,
                 space_id: str,
                 worker_pool_id: str):
        """
        :param str config: credentials necessary to connect WorkerPool's workers to the control plane
        :param str description: description of the worker pool
        :param str name: name of the worker pool
        :param str space_id: ID (slug) of the space the worker pool is in
        :param str worker_pool_id: ID of the worker pool
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "worker_pool_id", worker_pool_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        credentials necessary to connect WorkerPool's workers to the control plane
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        description of the worker pool
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the worker pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        ID (slug) of the space the worker pool is in
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> str:
        """
        ID of the worker pool
        """
        return pulumi.get(self, "worker_pool_id")


