# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ModuleAzureDevopsArgs',
    'ModuleBitbucketCloudArgs',
    'ModuleBitbucketDatacenterArgs',
    'ModuleGithubEnterpriseArgs',
    'ModuleGitlabArgs',
    'StackAnsibleArgs',
    'StackAzureDevopsArgs',
    'StackBitbucketCloudArgs',
    'StackBitbucketDatacenterArgs',
    'StackCloudformationArgs',
    'StackGithubEnterpriseArgs',
    'StackGitlabArgs',
    'StackKubernetesArgs',
    'StackPulumiArgs',
    'StackShowcaseArgs',
]

@pulumi.input_type
class ModuleAzureDevopsArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str]):
        """
        :param pulumi.Input[str] project: The name of the Azure DevOps project
        """
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The name of the Azure DevOps project
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class ModuleBitbucketCloudArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace: The Bitbucket project containing the repository
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ModuleBitbucketDatacenterArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace: The Bitbucket project containing the repository
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ModuleGithubEnterpriseArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace: The GitHub organization / user the repository belongs to
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The GitHub organization / user the repository belongs to
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ModuleGitlabArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace: The GitLab namespace containing the repository
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The GitLab namespace containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackAnsibleArgs:
    def __init__(__self__, *,
                 playbook: pulumi.Input[str]):
        """
        :param pulumi.Input[str] playbook: The playbook Ansible should run.
        """
        pulumi.set(__self__, "playbook", playbook)

    @property
    @pulumi.getter
    def playbook(self) -> pulumi.Input[str]:
        """
        The playbook Ansible should run.
        """
        return pulumi.get(self, "playbook")

    @playbook.setter
    def playbook(self, value: pulumi.Input[str]):
        pulumi.set(self, "playbook", value)


@pulumi.input_type
class StackAzureDevopsArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str]):
        """
        :param pulumi.Input[str] project: The name of the Azure DevOps project
        """
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The name of the Azure DevOps project
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class StackBitbucketCloudArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace: The Bitbucket project containing the repository
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackBitbucketDatacenterArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace: The Bitbucket project containing the repository
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackCloudformationArgs:
    def __init__(__self__, *,
                 entry_template_file: pulumi.Input[str],
                 region: pulumi.Input[str],
                 stack_name: pulumi.Input[str],
                 template_bucket: pulumi.Input[str]):
        """
        :param pulumi.Input[str] entry_template_file: Template file `cloudformation package` will be called on
        :param pulumi.Input[str] region: AWS region to use
        :param pulumi.Input[str] stack_name: CloudFormation stack name
        :param pulumi.Input[str] template_bucket: S3 bucket to save CloudFormation templates to
        """
        pulumi.set(__self__, "entry_template_file", entry_template_file)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "stack_name", stack_name)
        pulumi.set(__self__, "template_bucket", template_bucket)

    @property
    @pulumi.getter(name="entryTemplateFile")
    def entry_template_file(self) -> pulumi.Input[str]:
        """
        Template file `cloudformation package` will be called on
        """
        return pulumi.get(self, "entry_template_file")

    @entry_template_file.setter
    def entry_template_file(self, value: pulumi.Input[str]):
        pulumi.set(self, "entry_template_file", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        AWS region to use
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> pulumi.Input[str]:
        """
        CloudFormation stack name
        """
        return pulumi.get(self, "stack_name")

    @stack_name.setter
    def stack_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack_name", value)

    @property
    @pulumi.getter(name="templateBucket")
    def template_bucket(self) -> pulumi.Input[str]:
        """
        S3 bucket to save CloudFormation templates to
        """
        return pulumi.get(self, "template_bucket")

    @template_bucket.setter
    def template_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_bucket", value)


@pulumi.input_type
class StackGithubEnterpriseArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace: The GitHub organization / user the repository belongs to
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The GitHub organization / user the repository belongs to
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackGitlabArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace: The GitLab namespace containing the repository
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The GitLab namespace containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackKubernetesArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] namespace: Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackPulumiArgs:
    def __init__(__self__, *,
                 login_url: pulumi.Input[str],
                 stack_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] login_url: State backend to log into on Run initialize.
        :param pulumi.Input[str] stack_name: Pulumi stack name to use with the state backend.
        """
        pulumi.set(__self__, "login_url", login_url)
        pulumi.set(__self__, "stack_name", stack_name)

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> pulumi.Input[str]:
        """
        State backend to log into on Run initialize.
        """
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "login_url", value)

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> pulumi.Input[str]:
        """
        Pulumi stack name to use with the state backend.
        """
        return pulumi.get(self, "stack_name")

    @stack_name.setter
    def stack_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack_name", value)


@pulumi.input_type
class StackShowcaseArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


