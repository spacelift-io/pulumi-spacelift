# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'IdpGroupMappingPolicyArgs',
    'ModuleAzureDevopsArgs',
    'ModuleBitbucketCloudArgs',
    'ModuleBitbucketDatacenterArgs',
    'ModuleGithubEnterpriseArgs',
    'ModuleGitlabArgs',
    'StackAnsibleArgs',
    'StackAzureDevopsArgs',
    'StackBitbucketCloudArgs',
    'StackBitbucketDatacenterArgs',
    'StackCloudformationArgs',
    'StackGithubEnterpriseArgs',
    'StackGitlabArgs',
    'StackKubernetesArgs',
    'StackPulumiArgs',
    'StackRawGitArgs',
    'StackShowcaseArgs',
    'StackTerragruntArgs',
    'UserPolicyArgs',
    'GetContextsLabelArgs',
    'GetStacksAdministrativeArgs',
    'GetStacksBranchArgs',
    'GetStacksCommitArgs',
    'GetStacksLabelArgs',
    'GetStacksLockedArgs',
    'GetStacksNameArgs',
    'GetStacksProjectRootArgs',
    'GetStacksRepositoryArgs',
    'GetStacksStateArgs',
    'GetStacksVendorArgs',
    'GetStacksWorkerPoolArgs',
]

@pulumi.input_type
class IdpGroupMappingPolicyArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 space_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] role: Type of access to the space. Possible values are: READ, WRITE, ADMIN
        :param pulumi.Input[str] space_id: ID (slug) of the space the user group has access to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        Type of access to the space. Possible values are: READ, WRITE, ADMIN
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Input[str]:
        """
        ID (slug) of the space the user group has access to
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class ModuleAzureDevopsArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] project: The name of the Azure DevOps project
        :param pulumi.Input[str] id: ID of the Azure Devops integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default Azure DevOps integration
        """
        pulumi.set(__self__, "project", project)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The name of the Azure DevOps project
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Azure Devops integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default Azure DevOps integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class ModuleBitbucketCloudArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] namespace: The Bitbucket project containing the repository
        :param pulumi.Input[str] id: The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default Bitbucket Cloud integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default Bitbucket Cloud integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class ModuleBitbucketDatacenterArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] namespace: The Bitbucket project containing the repository
        :param pulumi.Input[str] id: The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default Bitbucket Datacenter integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default Bitbucket Datacenter integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class ModuleGithubEnterpriseArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] namespace: The GitHub organization / user the repository belongs to
        :param pulumi.Input[str] id: The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default GitHub Enterprise integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The GitHub organization / user the repository belongs to
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default GitHub Enterprise integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class ModuleGitlabArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] namespace: The GitLab namespace containing the repository
        :param pulumi.Input[str] id: ID of the Gitlab integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default GitLab integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The GitLab namespace containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Gitlab integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default GitLab integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class StackAnsibleArgs:
    def __init__(__self__, *,
                 playbook: pulumi.Input[str]):
        """
        :param pulumi.Input[str] playbook: The playbook Ansible should run.
        """
        pulumi.set(__self__, "playbook", playbook)

    @property
    @pulumi.getter
    def playbook(self) -> pulumi.Input[str]:
        """
        The playbook Ansible should run.
        """
        return pulumi.get(self, "playbook")

    @playbook.setter
    def playbook(self, value: pulumi.Input[str]):
        pulumi.set(self, "playbook", value)


@pulumi.input_type
class StackAzureDevopsArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] project: The name of the Azure DevOps project
        :param pulumi.Input[str] id: The ID of the Azure Devops integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default Azure DevOps integration
        """
        pulumi.set(__self__, "project", project)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The name of the Azure DevOps project
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Azure Devops integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default Azure DevOps integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class StackBitbucketCloudArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] namespace: The Bitbucket project containing the repository
        :param pulumi.Input[str] id: The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default Bitbucket Cloud integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default Bitbucket Cloud integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class StackBitbucketDatacenterArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] namespace: The Bitbucket project containing the repository
        :param pulumi.Input[str] id: The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default Bitbucket Datacenter integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Bitbucket project containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default Bitbucket Datacenter integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class StackCloudformationArgs:
    def __init__(__self__, *,
                 entry_template_file: pulumi.Input[str],
                 region: pulumi.Input[str],
                 stack_name: pulumi.Input[str],
                 template_bucket: pulumi.Input[str]):
        """
        :param pulumi.Input[str] entry_template_file: Template file `cloudformation package` will be called on
        :param pulumi.Input[str] region: AWS region to use
        :param pulumi.Input[str] stack_name: CloudFormation stack name
        :param pulumi.Input[str] template_bucket: S3 bucket to save CloudFormation templates to
        """
        pulumi.set(__self__, "entry_template_file", entry_template_file)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "stack_name", stack_name)
        pulumi.set(__self__, "template_bucket", template_bucket)

    @property
    @pulumi.getter(name="entryTemplateFile")
    def entry_template_file(self) -> pulumi.Input[str]:
        """
        Template file `cloudformation package` will be called on
        """
        return pulumi.get(self, "entry_template_file")

    @entry_template_file.setter
    def entry_template_file(self, value: pulumi.Input[str]):
        pulumi.set(self, "entry_template_file", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        AWS region to use
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> pulumi.Input[str]:
        """
        CloudFormation stack name
        """
        return pulumi.get(self, "stack_name")

    @stack_name.setter
    def stack_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack_name", value)

    @property
    @pulumi.getter(name="templateBucket")
    def template_bucket(self) -> pulumi.Input[str]:
        """
        S3 bucket to save CloudFormation templates to
        """
        return pulumi.get(self, "template_bucket")

    @template_bucket.setter
    def template_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_bucket", value)


@pulumi.input_type
class StackGithubEnterpriseArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] namespace: The GitHub organization / user the repository belongs to
        :param pulumi.Input[str] id: The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default GitHub Enterprise integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The GitHub organization / user the repository belongs to
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default GitHub Enterprise integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class StackGitlabArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] namespace: The GitLab namespace containing the repository
        :param pulumi.Input[str] id: The ID of the Gitlab integration. If not specified, the default integration will be used.
        :param pulumi.Input[bool] is_default: Indicates whether this is the default GitLab integration
        """
        pulumi.set(__self__, "namespace", namespace)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The GitLab namespace containing the repository
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Gitlab integration. If not specified, the default integration will be used.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is the default GitLab integration
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class StackKubernetesArgs:
    def __init__(__self__, *,
                 kubectl_version: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kubectl_version: Kubectl version.
        :param pulumi.Input[str] namespace: Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        if kubectl_version is not None:
            pulumi.set(__self__, "kubectl_version", kubectl_version)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="kubectlVersion")
    def kubectl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Kubectl version.
        """
        return pulumi.get(self, "kubectl_version")

    @kubectl_version.setter
    def kubectl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubectl_version", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackPulumiArgs:
    def __init__(__self__, *,
                 login_url: pulumi.Input[str],
                 stack_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] login_url: State backend to log into on Run initialize.
        :param pulumi.Input[str] stack_name: Pulumi stack name to use with the state backend.
        """
        pulumi.set(__self__, "login_url", login_url)
        pulumi.set(__self__, "stack_name", stack_name)

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> pulumi.Input[str]:
        """
        State backend to log into on Run initialize.
        """
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "login_url", value)

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> pulumi.Input[str]:
        """
        Pulumi stack name to use with the state backend.
        """
        return pulumi.get(self, "stack_name")

    @stack_name.setter
    def stack_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack_name", value)


@pulumi.input_type
class StackRawGitArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace: User-friendly namespace for the repository, this is for cosmetic purposes only
        :param pulumi.Input[str] url: HTTPS URL of the Git repository
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        User-friendly namespace for the repository, this is for cosmetic purposes only
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        HTTPS URL of the Git repository
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class StackShowcaseArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackTerragruntArgs:
    def __init__(__self__, *,
                 terraform_version: Optional[pulumi.Input[str]] = None,
                 terragrunt_version: Optional[pulumi.Input[str]] = None,
                 use_run_all: Optional[pulumi.Input[bool]] = None,
                 use_smart_sanitization: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] terragrunt_version: Terragrunt version.
        :param pulumi.Input[bool] use_run_all: Whether to use `terragrunt run-all` instead of `terragrunt`.
        """
        if terraform_version is not None:
            pulumi.set(__self__, "terraform_version", terraform_version)
        if terragrunt_version is not None:
            pulumi.set(__self__, "terragrunt_version", terragrunt_version)
        if use_run_all is not None:
            pulumi.set(__self__, "use_run_all", use_run_all)
        if use_smart_sanitization is not None:
            pulumi.set(__self__, "use_smart_sanitization", use_smart_sanitization)

    @property
    @pulumi.getter(name="terraformVersion")
    def terraform_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "terraform_version")

    @terraform_version.setter
    def terraform_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terraform_version", value)

    @property
    @pulumi.getter(name="terragruntVersion")
    def terragrunt_version(self) -> Optional[pulumi.Input[str]]:
        """
        Terragrunt version.
        """
        return pulumi.get(self, "terragrunt_version")

    @terragrunt_version.setter
    def terragrunt_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terragrunt_version", value)

    @property
    @pulumi.getter(name="useRunAll")
    def use_run_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use `terragrunt run-all` instead of `terragrunt`.
        """
        return pulumi.get(self, "use_run_all")

    @use_run_all.setter
    def use_run_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_run_all", value)

    @property
    @pulumi.getter(name="useSmartSanitization")
    def use_smart_sanitization(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_smart_sanitization")

    @use_smart_sanitization.setter
    def use_smart_sanitization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_smart_sanitization", value)


@pulumi.input_type
class UserPolicyArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 space_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] role: Type of access to the space. Possible values are: READ, WRITE, ADMIN
        :param pulumi.Input[str] space_id: ID (slug) of the space the user has access to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        Type of access to the space. Possible values are: READ, WRITE, ADMIN
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Input[str]:
        """
        ID (slug) of the space the user has access to
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class GetContextsLabelArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


@pulumi.input_type
class GetStacksAdministrativeArgs:
    def __init__(__self__, *,
                 equals: Optional[bool] = None):
        if equals is not None:
            pulumi.set(__self__, "equals", equals)

    @property
    @pulumi.getter
    def equals(self) -> Optional[bool]:
        return pulumi.get(self, "equals")

    @equals.setter
    def equals(self, value: Optional[bool]):
        pulumi.set(self, "equals", value)


@pulumi.input_type
class GetStacksBranchArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


@pulumi.input_type
class GetStacksCommitArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


@pulumi.input_type
class GetStacksLabelArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


@pulumi.input_type
class GetStacksLockedArgs:
    def __init__(__self__, *,
                 equals: Optional[bool] = None):
        if equals is not None:
            pulumi.set(__self__, "equals", equals)

    @property
    @pulumi.getter
    def equals(self) -> Optional[bool]:
        return pulumi.get(self, "equals")

    @equals.setter
    def equals(self, value: Optional[bool]):
        pulumi.set(self, "equals", value)


@pulumi.input_type
class GetStacksNameArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


@pulumi.input_type
class GetStacksProjectRootArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


@pulumi.input_type
class GetStacksRepositoryArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


@pulumi.input_type
class GetStacksStateArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


@pulumi.input_type
class GetStacksVendorArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


@pulumi.input_type
class GetStacksWorkerPoolArgs:
    def __init__(__self__, *,
                 any_ofs: Sequence[str]):
        pulumi.set(__self__, "any_ofs", any_ofs)

    @property
    @pulumi.getter(name="anyOfs")
    def any_ofs(self) -> Sequence[str]:
        return pulumi.get(self, "any_ofs")

    @any_ofs.setter
    def any_ofs(self, value: Sequence[str]):
        pulumi.set(self, "any_ofs", value)


