# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetStackAwsRoleResult',
    'AwaitableGetStackAwsRoleResult',
    'get_stack_aws_role',
    'get_stack_aws_role_output',
]

@pulumi.output_type
class GetStackAwsRoleResult:
    """
    A collection of values returned by getStackAwsRole.
    """
    def __init__(__self__, duration_seconds=None, external_id=None, generate_credentials_in_worker=None, id=None, module_id=None, role_arn=None, stack_id=None):
        if duration_seconds and not isinstance(duration_seconds, int):
            raise TypeError("Expected argument 'duration_seconds' to be a int")
        pulumi.set(__self__, "duration_seconds", duration_seconds)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if generate_credentials_in_worker and not isinstance(generate_credentials_in_worker, bool):
            raise TypeError("Expected argument 'generate_credentials_in_worker' to be a bool")
        pulumi.set(__self__, "generate_credentials_in_worker", generate_credentials_in_worker)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if module_id and not isinstance(module_id, str):
            raise TypeError("Expected argument 'module_id' to be a str")
        pulumi.set(__self__, "module_id", module_id)
        if role_arn and not isinstance(role_arn, str):
            raise TypeError("Expected argument 'role_arn' to be a str")
        pulumi.set(__self__, "role_arn", role_arn)
        if stack_id and not isinstance(stack_id, str):
            raise TypeError("Expected argument 'stack_id' to be a str")
        pulumi.set(__self__, "stack_id", stack_id)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> int:
        """
        AWS IAM role session duration in seconds
        """
        return pulumi.get(self, "duration_seconds")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        Custom external ID (works only for private workers).
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="generateCredentialsInWorker")
    def generate_credentials_in_worker(self) -> bool:
        """
        Generate AWS credentials in the private worker
        """
        return pulumi.get(self, "generate_credentials_in_worker")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[str]:
        """
        ID of the module which assumes the AWS IAM role
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        ARN of the AWS IAM role to attach
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[str]:
        """
        ID of the stack which assumes the AWS IAM role
        """
        return pulumi.get(self, "stack_id")


class AwaitableGetStackAwsRoleResult(GetStackAwsRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStackAwsRoleResult(
            duration_seconds=self.duration_seconds,
            external_id=self.external_id,
            generate_credentials_in_worker=self.generate_credentials_in_worker,
            id=self.id,
            module_id=self.module_id,
            role_arn=self.role_arn,
            stack_id=self.stack_id)


def get_stack_aws_role(module_id: Optional[str] = None,
                       stack_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStackAwsRoleResult:
    """
    > **Note:** `StackAwsRole` is deprecated. Please use `AwsRole` instead. The functionality is identical.

    `StackAwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.

    If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).

    Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    k8s_module = spacelift.get_stack_aws_role(module_id="k8s-module")
    k8s_core = spacelift.get_stack_aws_role(stack_id="k8s-core")
    ```


    :param str module_id: ID of the module which assumes the AWS IAM role
    :param str stack_id: ID of the stack which assumes the AWS IAM role
    """
    __args__ = dict()
    __args__['moduleId'] = module_id
    __args__['stackId'] = stack_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('spacelift:index/getStackAwsRole:getStackAwsRole', __args__, opts=opts, typ=GetStackAwsRoleResult).value

    return AwaitableGetStackAwsRoleResult(
        duration_seconds=pulumi.get(__ret__, 'duration_seconds'),
        external_id=pulumi.get(__ret__, 'external_id'),
        generate_credentials_in_worker=pulumi.get(__ret__, 'generate_credentials_in_worker'),
        id=pulumi.get(__ret__, 'id'),
        module_id=pulumi.get(__ret__, 'module_id'),
        role_arn=pulumi.get(__ret__, 'role_arn'),
        stack_id=pulumi.get(__ret__, 'stack_id'))


@_utilities.lift_output_func(get_stack_aws_role)
def get_stack_aws_role_output(module_id: Optional[pulumi.Input[Optional[str]]] = None,
                              stack_id: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStackAwsRoleResult]:
    """
    > **Note:** `StackAwsRole` is deprecated. Please use `AwsRole` instead. The functionality is identical.

    `StackAwsRole` represents [cross-account IAM role delegation](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) between the Spacelift worker and an individual stack or module. If this is set, Spacelift will use AWS STS to assume the supplied IAM role and put its temporary credentials in the runtime environment.

    If you use private workers, you can also assume IAM role on the worker side using your own AWS credentials (e.g. from EC2 instance profile).

    Note: when assuming credentials for **shared worker**, Spacelift will use `$accountName@$stackID` or `$accountName@$moduleID` as [external ID](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) and `$runID@$stackID@$accountName` truncated to 64 characters as [session ID](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_spacelift as spacelift

    k8s_module = spacelift.get_stack_aws_role(module_id="k8s-module")
    k8s_core = spacelift.get_stack_aws_role(stack_id="k8s-core")
    ```


    :param str module_id: ID of the module which assumes the AWS IAM role
    :param str stack_id: ID of the stack which assumes the AWS IAM role
    """
    ...
