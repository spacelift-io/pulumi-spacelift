# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DriftDetectionArgs', 'DriftDetection']

@pulumi.input_type
class DriftDetectionArgs:
    def __init__(__self__, *,
                 schedules: pulumi.Input[Sequence[pulumi.Input[str]]],
                 stack_id: pulumi.Input[str],
                 ignore_state: Optional[pulumi.Input[bool]] = None,
                 reconcile: Optional[pulumi.Input[bool]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DriftDetection resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedules: List of cron schedule expressions based on which drift detection should be triggered.
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up drift detection
        :param pulumi.Input[bool] ignore_state: Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
        :param pulumi.Input[bool] reconcile: Whether a tracked run should be triggered when drift is detected.
        :param pulumi.Input[str] timezone: Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "stack_id", stack_id)
        if ignore_state is not None:
            pulumi.set(__self__, "ignore_state", ignore_state)
        if reconcile is not None:
            pulumi.set(__self__, "reconcile", reconcile)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def schedules(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of cron schedule expressions based on which drift detection should be triggered.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Input[str]:
        """
        ID of the stack for which to set up drift detection
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter(name="ignoreState")
    def ignore_state(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
        """
        return pulumi.get(self, "ignore_state")

    @ignore_state.setter
    def ignore_state(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_state", value)

    @property
    @pulumi.getter
    def reconcile(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a tracked run should be triggered when drift is detected.
        """
        return pulumi.get(self, "reconcile")

    @reconcile.setter
    def reconcile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reconcile", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class _DriftDetectionState:
    def __init__(__self__, *,
                 ignore_state: Optional[pulumi.Input[bool]] = None,
                 reconcile: Optional[pulumi.Input[bool]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DriftDetection resources.
        :param pulumi.Input[bool] ignore_state: Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
        :param pulumi.Input[bool] reconcile: Whether a tracked run should be triggered when drift is detected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedules: List of cron schedule expressions based on which drift detection should be triggered.
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up drift detection
        :param pulumi.Input[str] timezone: Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        if ignore_state is not None:
            pulumi.set(__self__, "ignore_state", ignore_state)
        if reconcile is not None:
            pulumi.set(__self__, "reconcile", reconcile)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="ignoreState")
    def ignore_state(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
        """
        return pulumi.get(self, "ignore_state")

    @ignore_state.setter
    def ignore_state(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_state", value)

    @property
    @pulumi.getter
    def reconcile(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a tracked run should be triggered when drift is detected.
        """
        return pulumi.get(self, "reconcile")

    @reconcile.setter
    def reconcile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reconcile", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of cron schedule expressions based on which drift detection should be triggered.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack for which to set up drift detection
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


class DriftDetection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ignore_state: Optional[pulumi.Input[bool]] = None,
                 reconcile: Optional[pulumi.Input[bool]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        core_infra_production = spacelift.Stack("core-infra-production",
            branch="master",
            repository="core-infra")
        core_infra_production_drift_detection = spacelift.DriftDetection("core-infra-production-drift-detection",
            reconcile=True,
            stack_id=core_infra_production.id,
            schedules=["*/15 * * * *"])
        # Every 15 minutes
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection stack/$STACK_ID
        ```

        ```sh
         $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection module/$MODULE_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] ignore_state: Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
        :param pulumi.Input[bool] reconcile: Whether a tracked run should be triggered when drift is detected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedules: List of cron schedule expressions based on which drift detection should be triggered.
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up drift detection
        :param pulumi.Input[str] timezone: Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DriftDetectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `DriftDetection` represents a Drift Detection configuration for a Stack. It will trigger a proposed run on the given schedule, which you can listen for using run state webhooks. If reconcile is true, then a tracked run will be triggered when drift is detected.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        core_infra_production = spacelift.Stack("core-infra-production",
            branch="master",
            repository="core-infra")
        core_infra_production_drift_detection = spacelift.DriftDetection("core-infra-production-drift-detection",
            reconcile=True,
            stack_id=core_infra_production.id,
            schedules=["*/15 * * * *"])
        # Every 15 minutes
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection stack/$STACK_ID
        ```

        ```sh
         $ pulumi import spacelift:index/driftDetection:DriftDetection core-infra-production-drift-detection module/$MODULE_ID
        ```

        :param str resource_name: The name of the resource.
        :param DriftDetectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DriftDetectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ignore_state: Optional[pulumi.Input[bool]] = None,
                 reconcile: Optional[pulumi.Input[bool]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DriftDetectionArgs.__new__(DriftDetectionArgs)

            __props__.__dict__["ignore_state"] = ignore_state
            __props__.__dict__["reconcile"] = reconcile
            if schedules is None and not opts.urn:
                raise TypeError("Missing required property 'schedules'")
            __props__.__dict__["schedules"] = schedules
            if stack_id is None and not opts.urn:
                raise TypeError("Missing required property 'stack_id'")
            __props__.__dict__["stack_id"] = stack_id
            __props__.__dict__["timezone"] = timezone
        super(DriftDetection, __self__).__init__(
            'spacelift:index/driftDetection:DriftDetection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ignore_state: Optional[pulumi.Input[bool]] = None,
            reconcile: Optional[pulumi.Input[bool]] = None,
            schedules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            stack_id: Optional[pulumi.Input[str]] = None,
            timezone: Optional[pulumi.Input[str]] = None) -> 'DriftDetection':
        """
        Get an existing DriftDetection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] ignore_state: Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
        :param pulumi.Input[bool] reconcile: Whether a tracked run should be triggered when drift is detected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schedules: List of cron schedule expressions based on which drift detection should be triggered.
        :param pulumi.Input[str] stack_id: ID of the stack for which to set up drift detection
        :param pulumi.Input[str] timezone: Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DriftDetectionState.__new__(_DriftDetectionState)

        __props__.__dict__["ignore_state"] = ignore_state
        __props__.__dict__["reconcile"] = reconcile
        __props__.__dict__["schedules"] = schedules
        __props__.__dict__["stack_id"] = stack_id
        __props__.__dict__["timezone"] = timezone
        return DriftDetection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ignoreState")
    def ignore_state(self) -> pulumi.Output[Optional[bool]]:
        """
        Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
        """
        return pulumi.get(self, "ignore_state")

    @property
    @pulumi.getter
    def reconcile(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether a tracked run should be triggered when drift is detected.
        """
        return pulumi.get(self, "reconcile")

    @property
    @pulumi.getter
    def schedules(self) -> pulumi.Output[Sequence[str]]:
        """
        List of cron schedule expressions based on which drift detection should be triggered.
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[str]:
        """
        ID of the stack for which to set up drift detection
        """
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[Optional[str]]:
        """
        Timezone in which the schedule is expressed. Defaults to `UTC`.
        """
        return pulumi.get(self, "timezone")

