# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WebookArgs', 'Webook']

@pulumi.input_type
class WebookArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Webook resource.
        :param pulumi.Input[str] endpoint: endpoint to send the POST request to
        :param pulumi.Input[bool] enabled: enables or disables sending webhooks. Defaults to `true`.
        :param pulumi.Input[str] module_id: ID of the module which triggers the webhooks
        :param pulumi.Input[str] secret: secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.
        :param pulumi.Input[str] stack_id: ID of the stack which triggers the webhooks
        """
        pulumi.set(__self__, "endpoint", endpoint)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        endpoint to send the POST request to
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        enables or disables sending webhooks. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module which triggers the webhooks
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack which triggers the webhooks
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)


@pulumi.input_type
class _WebookState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Webook resources.
        :param pulumi.Input[bool] enabled: enables or disables sending webhooks. Defaults to `true`.
        :param pulumi.Input[str] endpoint: endpoint to send the POST request to
        :param pulumi.Input[str] module_id: ID of the module which triggers the webhooks
        :param pulumi.Input[str] secret: secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.
        :param pulumi.Input[str] stack_id: ID of the stack which triggers the webhooks
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        enables or disables sending webhooks. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        endpoint to send the POST request to
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the module which triggers the webhooks
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the stack which triggers the webhooks
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)


class Webook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `Webook` represents a webhook endpoint to which Spacelift sends the POST request about run state changes.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        webhook = spacelift.Webook("webhook",
            endpoint="https://example.com/webhooks",
            stack_id="k8s-core")
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/webook:Webook webhook stack/$STACK_ID/$WEBHOOK_ID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: enables or disables sending webhooks. Defaults to `true`.
        :param pulumi.Input[str] endpoint: endpoint to send the POST request to
        :param pulumi.Input[str] module_id: ID of the module which triggers the webhooks
        :param pulumi.Input[str] secret: secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.
        :param pulumi.Input[str] stack_id: ID of the stack which triggers the webhooks
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `Webook` represents a webhook endpoint to which Spacelift sends the POST request about run state changes.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spacelift as spacelift

        webhook = spacelift.Webook("webhook",
            endpoint="https://example.com/webhooks",
            stack_id="k8s-core")
        ```

        ## Import

        ```sh
         $ pulumi import spacelift:index/webook:Webook webhook stack/$STACK_ID/$WEBHOOK_ID
        ```

        :param str resource_name: The name of the resource.
        :param WebookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 module_id: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebookArgs.__new__(WebookArgs)

            __props__.__dict__["enabled"] = enabled
            if endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint'")
            __props__.__dict__["endpoint"] = endpoint
            __props__.__dict__["module_id"] = module_id
            __props__.__dict__["secret"] = secret
            __props__.__dict__["stack_id"] = stack_id
        super(Webook, __self__).__init__(
            'spacelift:index/webook:Webook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            endpoint: Optional[pulumi.Input[str]] = None,
            module_id: Optional[pulumi.Input[str]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            stack_id: Optional[pulumi.Input[str]] = None) -> 'Webook':
        """
        Get an existing Webook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: enables or disables sending webhooks. Defaults to `true`.
        :param pulumi.Input[str] endpoint: endpoint to send the POST request to
        :param pulumi.Input[str] module_id: ID of the module which triggers the webhooks
        :param pulumi.Input[str] secret: secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.
        :param pulumi.Input[str] stack_id: ID of the stack which triggers the webhooks
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebookState.__new__(_WebookState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["module_id"] = module_id
        __props__.__dict__["secret"] = secret
        __props__.__dict__["stack_id"] = stack_id
        return Webook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        enables or disables sending webhooks. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        """
        endpoint to send the POST request to
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the module which triggers the webhooks
        """
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional[str]]:
        """
        secret used to sign each POST request so you're able to verify that the request comes from us. Defaults to an empty value.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the stack which triggers the webhooks
        """
        return pulumi.get(self, "stack_id")

