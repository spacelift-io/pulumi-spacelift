# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 api_key_endpoint: Optional[pulumi.Input[str]] = None,
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 api_key_secret: Optional[pulumi.Input[str]] = None,
                 api_token: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] api_key_endpoint: Endpoint to use when authenticating with an API key outside of Spacelift
        :param pulumi.Input[str] api_key_id: ID of the API key to use when executing outside of Spacelift
        :param pulumi.Input[str] api_key_secret: API key secret to use when executing outside of Spacelift
        :param pulumi.Input[str] api_token: Spacelift token generated by a run, only useful from within Spacelift
        """
        if api_key_endpoint is None:
            api_key_endpoint = _utilities.get_env('SPACELIFT_API_KEY_ENDPOINT')
        if api_key_endpoint is not None:
            pulumi.set(__self__, "api_key_endpoint", api_key_endpoint)
        if api_key_id is None:
            api_key_id = _utilities.get_env('SPACELIFT_API_KEY_ID')
        if api_key_id is not None:
            pulumi.set(__self__, "api_key_id", api_key_id)
        if api_key_secret is None:
            api_key_secret = _utilities.get_env('SPACELIFT_API_KEY_SECRET')
        if api_key_secret is not None:
            pulumi.set(__self__, "api_key_secret", api_key_secret)
        if api_token is None:
            api_token = _utilities.get_env('SPACELIFT_API_TOKEN')
        if api_token is not None:
            pulumi.set(__self__, "api_token", api_token)

    @property
    @pulumi.getter(name="apiKeyEndpoint")
    def api_key_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint to use when authenticating with an API key outside of Spacelift
        """
        return pulumi.get(self, "api_key_endpoint")

    @api_key_endpoint.setter
    def api_key_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_endpoint", value)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the API key to use when executing outside of Spacelift
        """
        return pulumi.get(self, "api_key_id")

    @api_key_id.setter
    def api_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_id", value)

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> Optional[pulumi.Input[str]]:
        """
        API key secret to use when executing outside of Spacelift
        """
        return pulumi.get(self, "api_key_secret")

    @api_key_secret.setter
    def api_key_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_secret", value)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> Optional[pulumi.Input[str]]:
        """
        Spacelift token generated by a run, only useful from within Spacelift
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key_endpoint: Optional[pulumi.Input[str]] = None,
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 api_key_secret: Optional[pulumi.Input[str]] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the spacelift package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key_endpoint: Endpoint to use when authenticating with an API key outside of Spacelift
        :param pulumi.Input[str] api_key_id: ID of the API key to use when executing outside of Spacelift
        :param pulumi.Input[str] api_key_secret: API key secret to use when executing outside of Spacelift
        :param pulumi.Input[str] api_token: Spacelift token generated by a run, only useful from within Spacelift
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the spacelift package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key_endpoint: Optional[pulumi.Input[str]] = None,
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 api_key_secret: Optional[pulumi.Input[str]] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if api_key_endpoint is None:
                api_key_endpoint = _utilities.get_env('SPACELIFT_API_KEY_ENDPOINT')
            __props__.__dict__["api_key_endpoint"] = api_key_endpoint
            if api_key_id is None:
                api_key_id = _utilities.get_env('SPACELIFT_API_KEY_ID')
            __props__.__dict__["api_key_id"] = api_key_id
            if api_key_secret is None:
                api_key_secret = _utilities.get_env('SPACELIFT_API_KEY_SECRET')
            __props__.__dict__["api_key_secret"] = None if api_key_secret is None else pulumi.Output.secret(api_key_secret)
            if api_token is None:
                api_token = _utilities.get_env('SPACELIFT_API_TOKEN')
            __props__.__dict__["api_token"] = None if api_token is None else pulumi.Output.secret(api_token)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKeySecret", "apiToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'spacelift',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="apiKeyEndpoint")
    def api_key_endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        Endpoint to use when authenticating with an API key outside of Spacelift
        """
        return pulumi.get(self, "api_key_endpoint")

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the API key to use when executing outside of Spacelift
        """
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> pulumi.Output[Optional[str]]:
        """
        API key secret to use when executing outside of Spacelift
        """
        return pulumi.get(self, "api_key_secret")

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Output[Optional[str]]:
        """
        Spacelift token generated by a run, only useful from within Spacelift
        """
        return pulumi.get(self, "api_token")

