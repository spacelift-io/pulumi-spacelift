name: Preprod deployment

on: [push]

jobs:
  preprod-provider-deployment:
    name: Build and upload provider
    runs-on: ubuntu-latest
    container: golang:1.15
    steps:
      - name: Check out repository code
        uses: actions/checkout@master
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15.x
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.1.0
        with:
          repo: pulumi/pulumictl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
#      - name: Setup Node
#        uses: actions/setup-node@v1
#        with:
#          node-version: 13.x
#          registry-url: https://registry.npmjs.org
#      - name: Install yarn
#        run: npm install --global yarn
#      - name: Setup DotNet
#        uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: 3.1.301
#      - name: Setup DotNet ICU
#        run: apt-get update && apt-get install -y icu-devtools
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.7
      - name: Tag version
        run: git tag v0.0.0
      - name: Print version
        run: pulumictl get version
      - name: Build provider
        run: make provider
        env:
          PROVIDER_OS: ${{ matrix.provider_os }}
      - name: Create package directory
        run: mkdir package && mv bin/pulumi-resource-* package/ && ls -la package/
      - name: Create package
        run: cd package && tar -zcvf pulumi-resource-spacelift-v0.0.0-${{matrix.provider_os}}-amd64.tar.gz pulumi-resource-*
      - name: Create upload directory
        run: mkdir -p upload/pulumi-plugins && mv package/*.tar.gz upload/pulumi-plugins/
      - name: Upload the provider binary to downloads.spacelift.dev
        uses: jakejarvis/s3-sync-action@7ed8b112447abb09f1da74f3466e4194fc7a6311
        if: github.ref == 'refs/heads/main'
        env:
          SOURCE_DIR: upload/
          AWS_ACCESS_KEY_ID: ${{ secrets.PREPROD_AWS_ACCESS_KEY_ID }}
          AWS_S3_BUCKET: ${{ secrets.PREPROD_AWS_S3_BUCKET }}
          AWS_REGION: ${{ secrets.PREPROD_AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PREPROD_AWS_SECRET_ACCESS_KEY}}

      - name: Invalidate downloads.spacelift.dev cache
        uses: chetan/invalidate-cloudfront-action@2d2d3f464dcae0bea80ceff79e89960bbac6a754
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PREPROD_AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.PREPROD_AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PREPROD_AWS_SECRET_ACCESS_KEY }}
          DISTRIBUTION: ${{ secrets.PREPROD_DISTRIBUTION }}
          PATHS: "/*"
#
#      - name: Update deployment status (success)
#        uses: chrnorm/deployment-status@releases/v1
#        if: success() && github.ref == 'refs/heads/master'
#        with:
#          token: "${{ github.token }}"
#          target_url: https://downloads.spacelift.dev/spacelift-vcs-agent
#          state: "success"
#          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
#
#      - name: Update deployment status (failure)
#        uses: chrnorm/deployment-status@releases/v1
#        if: failure() && github.ref == 'refs/heads/master'
#        with:
#          token: "${{ github.token }}"
#          target_url: https://downloads.spacelift.dev/spacelift-vcs-agent
#          state: "failure"
#          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    strategy:
      matrix:
        provider_os:
          - darwin
          - linux
          - windows
